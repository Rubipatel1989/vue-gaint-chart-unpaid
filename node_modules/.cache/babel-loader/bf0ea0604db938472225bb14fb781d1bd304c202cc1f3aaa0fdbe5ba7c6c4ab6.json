{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\n/**\n * `Selection` module is used to handle RTE Selections.\n */\nimport { NodeSelection } from './../../selection/index';\nimport { NodeCutter } from './nodecutter';\nimport { InsertMethods } from './insert-methods';\nimport { IsFormatted } from './isformatted';\nimport { isIDevice, setEditFrameFocus } from '../../common/util';\nimport { isNullOrUndefined as isNOU, Browser, closest, detach } from '@syncfusion/ej2-base';\nimport { DOMNode } from './dom-node';\nvar SelectionCommands = /** @class */function () {\n  function SelectionCommands() {}\n  /**\n   * applyFormat method\n   *\n   * @param {Document} docElement - specifies the document\n   * @param {string} format - specifies the string value\n   * @param {Node} endNode - specifies the end node\n   * @param {string} enterAction - specifies the enter key action\n   * @param {ITableSelection} tableCellSelection - specifies the table cell selection\n   * @param {string} value - specifies the string value\n   * @param {string} selector - specifies the string\n   * @param {FormatPainterValue} painterValues specifies the element created and last child\n   * @returns {void}\n   * @hidden\n    */\n  SelectionCommands.applyFormat = function (docElement, format, endNode, enterAction, tableCellSelection, value, selector, painterValues) {\n    this.enterAction = enterAction;\n    var validFormats = ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript', 'uppercase', 'lowercase', 'fontcolor', 'fontname', 'fontsize', 'backgroundcolor', 'inlinecode'];\n    if (validFormats.indexOf(format) > -1 || value === 'formatPainter') {\n      if (format === 'backgroundcolor' && value === '') {\n        value = 'transparent';\n      }\n      var domSelection = new NodeSelection(endNode);\n      var domNode = new DOMNode(endNode, docElement);\n      var nodeCutter = new NodeCutter();\n      var isFormatted = new IsFormatted();\n      var range = domSelection.getRange(docElement);\n      var currentAnchorNode = range.startContainer.parentElement;\n      if (range.collapsed && !isNOU(currentAnchorNode) && currentAnchorNode.tagName === 'A' && (range.startOffset === currentAnchorNode.textContent.length || range.startOffset === 0)) {\n        var emptyTextNode = document.createTextNode('');\n        if (range.startOffset === 0) {\n          currentAnchorNode.parentNode.insertBefore(emptyTextNode, currentAnchorNode);\n        } else {\n          if (!isNOU(currentAnchorNode.nextSibling)) {\n            currentAnchorNode.parentElement.insertBefore(emptyTextNode, currentAnchorNode.nextSibling);\n          } else {\n            currentAnchorNode.parentNode.appendChild(emptyTextNode);\n          }\n        }\n        // Set the range to the empty text node\n        var newRange = docElement.createRange();\n        range.setStart(emptyTextNode, 0);\n        range.setEnd(emptyTextNode, 0);\n        range.collapse(true);\n        domSelection.setRange(docElement, newRange);\n      }\n      if (Browser.userAgent.indexOf('Firefox') !== -1 && range.startContainer === range.endContainer && !isNOU(endNode) && range.startContainer === endNode) {\n        var startChildNodes = range.startContainer.childNodes;\n        var startNode = startChildNodes[range.startOffset > 0 ? range.startOffset - 1 : range.startOffset] || range.startContainer;\n        var endNode_1 = range.endContainer.childNodes[range.endOffset > 0 ? range.endOffset - 1 : range.endOffset] || range.endContainer;\n        var lastSelectionNode = endNode_1.lastChild.nodeName === 'BR' ? isNOU(endNode_1.lastChild.previousSibling) ? endNode_1 : endNode_1.lastChild.previousSibling : endNode_1.firstChild;\n        while (!isNOU(lastSelectionNode) && lastSelectionNode.nodeName !== '#text' && lastSelectionNode.nodeName !== 'IMG' && lastSelectionNode.nodeName !== 'BR' && lastSelectionNode.nodeName !== 'HR') {\n          lastSelectionNode = lastSelectionNode.lastChild;\n        }\n        domSelection.setSelectionText(docElement, startNode, lastSelectionNode, 0, 0);\n        range = domSelection.getRange(docElement);\n      }\n      var save = domSelection.save(range, docElement);\n      var nodes = void 0;\n      var isTableSelect = false;\n      if (endNode && tableCellSelection && endNode.nodeName !== '#text') {\n        nodes = tableCellSelection.getTextNodes();\n      }\n      if (nodes && nodes.length > 0) {\n        isTableSelect = true;\n      } else {\n        nodes = range.collapsed ? domSelection.getSelectionNodeCollection(range) : domSelection.getSelectionNodeCollectionBr(range);\n      }\n      var isCollapsed = false;\n      var isFormat = false;\n      var isCursor = false;\n      var preventRestore = false;\n      var isFontStyle = ['fontcolor', 'fontname', 'fontsize', 'backgroundcolor'].indexOf(format) > -1;\n      if (!isTableSelect && range.collapsed) {\n        var currentFormatNode = isFormatted.getFormattedNode(range.startContainer, format, endNode);\n        var currentSelector = !isNOU(currentFormatNode) ? currentFormatNode.getAttribute('style') === null ? currentFormatNode.nodeName : currentFormatNode.nodeName + '[style=\\'' + currentFormatNode.getAttribute('style') + '\\']' : null;\n        if (nodes.length > 0) {\n          isCollapsed = true;\n          range = nodeCutter.GetCursorRange(docElement, range, nodes[0]);\n        } else if (range.startContainer.nodeType === 3 && (range.startContainer.parentElement.childElementCount > 0 && range.startOffset > 0 && range.startContainer.parentElement.firstElementChild.tagName.toLowerCase() !== 'br' || !isNOU(currentFormatNode) && currentFormatNode === range.startContainer.parentElement.closest(currentSelector) && range.startContainer.parentElement.closest(currentSelector).textContent.replace(new RegExp('\\u200B', 'g'), '').trim().length !== 0)) {\n          isCollapsed = true;\n          range = nodeCutter.GetCursorRange(docElement, range, range.startContainer);\n          nodes.push(range.startContainer);\n        } else {\n          var cursorNode = this.insertCursorNode(docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode);\n          domSelection.endContainer = domSelection.startContainer = domSelection.getNodeArray(cursorNode, true);\n          var childNodes = cursorNode.nodeName === 'BR' && cursorNode.parentNode.childNodes;\n          if (!isNOU(childNodes) && childNodes.length === 1 && childNodes[0].nodeName === 'BR' && nodes.length === 0) {\n            domSelection.setSelectionText(docElement, range.startContainer, range.endContainer, 0, 0);\n            preventRestore = true;\n          } else {\n            domSelection.endOffset = domSelection.startOffset = 1;\n          }\n          if (cursorNode.nodeName === 'BR' && cursorNode.parentNode.textContent.length === 0) {\n            preventRestore = true;\n          }\n        }\n      }\n      isCursor = isTableSelect ? false : range.collapsed;\n      var isSubSup = false;\n      for (var index = 0; index < nodes.length; index++) {\n        var formatNode = isFormatted.getFormattedNode(nodes[index], format, endNode);\n        if (formatNode === null) {\n          if (format === 'subscript') {\n            formatNode = isFormatted.getFormattedNode(nodes[index], 'superscript', endNode);\n            isSubSup = formatNode === null ? false : true;\n          } else if (format === 'superscript') {\n            formatNode = isFormatted.getFormattedNode(nodes[index], 'subscript', endNode);\n            isSubSup = formatNode === null ? false : true;\n          }\n        }\n        if (index === 0 && formatNode === null) {\n          isFormat = true;\n        }\n        if (formatNode !== null && (!isFormat || isFontStyle)) {\n          nodes[index] = this.removeFormat(nodes, index, formatNode, isCursor, isTableSelect, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode);\n        } else {\n          nodes[index] = this.insertFormat(docElement, nodes, index, formatNode, isCursor, isTableSelect, isFormat, isFontStyle, range, nodeCutter, format, value, painterValues, domNode, endNode);\n        }\n        if (!isTableSelect) {\n          domSelection = this.applySelection(nodes, domSelection, nodeCutter, index, isCollapsed);\n        }\n      }\n      if (isIDevice()) {\n        setEditFrameFocus(endNode, selector);\n      }\n      if (!preventRestore && !isTableSelect) {\n        save.restore();\n      }\n      if (isSubSup) {\n        this.applyFormat(docElement, format, endNode, enterAction);\n      }\n    }\n  };\n  SelectionCommands.insertCursorNode = function (docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode) {\n    var cursorNodes = domSelection.getNodeCollection(range);\n    var domNode = new DOMNode(endNode, docElement);\n    var cursorFormat = cursorNodes.length > 0 ? cursorNodes.length > 1 && range.startContainer === range.endContainer ? this.getCursorFormat(isFormatted, cursorNodes, format, endNode) : value === '' && format === 'fontsize' && isFormatted.getFormattedNode(cursorNodes[0], format, endNode) == null && cursorNodes[0].parentElement.nodeName === 'SPAN' ? cursorNodes[0].parentElement : isFormatted.getFormattedNode(cursorNodes[0], format, endNode) : null;\n    var cursorNode = null;\n    if (cursorFormat) {\n      cursorNode = cursorNodes[0];\n      if (cursorFormat.firstChild.textContent.charCodeAt(0) === 8203 && cursorFormat.firstChild.nodeType === 3) {\n        var regEx = new RegExp('\\u200B', 'g');\n        var emptySpaceNode = void 0;\n        if (cursorNode.nodeName !== '#text') {\n          for (var i = 0; i < cursorNodes.length; i++) {\n            if (cursorNodes[i].nodeType === Node.TEXT_NODE) {\n              cursorNode = cursorNodes[i];\n            }\n          }\n        }\n        if (cursorFormat.firstChild === cursorNode) {\n          cursorNode.textContent = cursorFormat.parentElement && (domNode.isBlockNode(cursorFormat.parentElement) && cursorFormat.parentElement.textContent.length <= 1 ? cursorFormat.parentElement.childElementCount > 1 : cursorFormat.childElementCount === 0) && (cursorFormat.parentElement.textContent.length > 1 || cursorFormat.parentElement.firstChild && cursorFormat.parentElement.firstChild.nodeType === 1) ? cursorNode.textContent : cursorNode.textContent.replace(regEx, '');\n          emptySpaceNode = cursorNode;\n        } else {\n          cursorFormat.firstChild.textContent = cursorFormat.firstChild.textContent.replace(regEx, '');\n          emptySpaceNode = cursorFormat.firstChild;\n        }\n        var pointer = void 0;\n        if (emptySpaceNode.textContent.length === 0) {\n          if (!isNOU(emptySpaceNode.previousSibling)) {\n            cursorNode = emptySpaceNode.previousSibling;\n            pointer = emptySpaceNode.textContent.length - 1;\n            domSelection.setCursorPoint(docElement, emptySpaceNode, pointer);\n          } else if (!isNOU(emptySpaceNode.parentElement) && emptySpaceNode.parentElement.textContent.length === 0) {\n            var brElem = document.createElement('BR');\n            emptySpaceNode.parentElement.appendChild(brElem);\n            detach(emptySpaceNode);\n            cursorNode = brElem;\n            domSelection.setCursorPoint(docElement, cursorNode.parentElement, 0);\n          }\n        }\n      }\n      if (['fontcolor', 'fontname', 'fontsize', 'backgroundcolor'].indexOf(format) > -1) {\n        if (format === 'fontcolor') {\n          cursorFormat.style.color = value;\n        } else if (format === 'fontname') {\n          cursorFormat.style.fontFamily = value;\n        } else if (format === 'fontsize') {\n          cursorFormat.style.fontSize = value;\n        } else {\n          cursorFormat.style.backgroundColor = value;\n        }\n        cursorNode = cursorFormat;\n      } else {\n        InsertMethods.unwrap(cursorFormat);\n      }\n    } else {\n      if (cursorNodes.length > 1 && range.startOffset > 0 && cursorNodes[0].firstElementChild && cursorNodes[0].firstElementChild.tagName.toLowerCase() === 'br') {\n        cursorNodes[0].innerHTML = '';\n      }\n      if (cursorNodes.length === 1 && range.startOffset === 0 && (cursorNodes[0].nodeName === 'BR' || (isNOU(cursorNodes[0].nextSibling) ? false : cursorNodes[0].nextSibling.nodeName === 'BR'))) {\n        detach(cursorNodes[0].nodeName === '#text' ? cursorNodes[0].nextSibling : cursorNodes[0]);\n      }\n      if (!isNOU(cursorNodes[0] && cursorNodes[0].parentElement) && IsFormatted.inlineTags.indexOf(cursorNodes[0].parentElement.tagName.toLowerCase()) !== -1 && cursorNodes[0].textContent.includes('\\u200B')) {\n        var element = this.GetFormatNode(format, value);\n        var tempNode = cursorNodes[0];\n        if (format === 'fontsize') {\n          var currentFormatNode = cursorNodes[0];\n          while (currentFormatNode) {\n            var isSameTextContent = currentFormatNode.parentElement.textContent.trim() === cursorNodes[0].textContent.trim();\n            var previousElement = currentFormatNode.parentElement;\n            if (!domNode.isBlockNode(previousElement) && isSameTextContent && !(previousElement.nodeName === 'SPAN' && previousElement.classList.contains('e-img-inner'))) {\n              currentFormatNode = previousElement;\n            } else {\n              break;\n            }\n            cursorNodes[0] = currentFormatNode;\n          }\n        }\n        this.applyStyles(cursorNodes, 0, element);\n        return tempNode;\n      }\n      cursorNode = this.getInsertNode(docElement, range, format, value).firstChild;\n    }\n    return cursorNode;\n  };\n  SelectionCommands.getCursorFormat = function (isFormatted, cursorNodes, format, endNode) {\n    var currentNode;\n    for (var index = 0; index < cursorNodes.length; index++) {\n      currentNode = cursorNodes[index].lastElementChild ? cursorNodes[index].lastElementChild : cursorNodes[index];\n    }\n    return format === 'fontsize' && isFormatted.getFormattedNode(currentNode, format, endNode) == null && currentNode.parentElement.nodeName === 'SPAN' ? currentNode.parentElement : isFormatted.getFormattedNode(currentNode, format, endNode);\n  };\n  SelectionCommands.removeFormat = function (nodes, index, formatNode, isCursor, isTableCell, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode) {\n    var splitNode = null;\n    var startText = range.startContainer.nodeName === '#text' ? range.startContainer.textContent.substring(range.startOffset, range.startContainer.textContent.length) : range.startContainer.textContent;\n    var nodeText = nodes[index].textContent;\n    var isParentNodeSameAsParentElement = nodes[0].parentElement.nodeName === nodes[0].parentElement.parentElement.nodeName;\n    if (!(range.startContainer === range.endContainer && range.startOffset === 0 && range.endOffset === range.startContainer.length && (range.startContainer.textContent === formatNode.textContent || isParentNodeSameAsParentElement))) {\n      var nodeIndex = [];\n      var cloneNode = nodes[index];\n      var clonedElement = cloneNode;\n      do {\n        nodeIndex.push(domSelection.getIndex(cloneNode));\n        cloneNode = cloneNode.parentNode;\n      } while (cloneNode && cloneNode !== formatNode);\n      if (nodes[index].nodeName !== 'BR') {\n        if (clonedElement.nodeName === '#text' && clonedElement.textContent.includes('\\u200B')) {\n          clonedElement.remove();\n        }\n        if (!isTableCell) {\n          cloneNode = splitNode = isCursor && formatNode.textContent.length - 1 === range.startOffset ? nodeCutter.SplitNode(range, formatNode, true) : nodeCutter.GetSpliceNode(range, formatNode);\n        }\n      }\n      if (!isCursor) {\n        while (cloneNode && cloneNode.childNodes.length > 0 && nodeIndex.length - 1 >= 0 && cloneNode.childNodes.length > nodeIndex[nodeIndex.length - 1]) {\n          if (cloneNode.childNodes.length > 1 && nodeIndex.length > 1) {\n            cloneNode = cloneNode.childNodes[nodeIndex[nodeIndex.length - 2]];\n            break;\n          } else {\n            cloneNode = cloneNode.childNodes[nodeIndex[nodeIndex.length - 1]];\n            nodeIndex.pop();\n          }\n        }\n        if (nodes[index].nodeName !== 'BR') {\n          while (cloneNode.nodeType === 1 && cloneNode.childNodes.length > 0) {\n            cloneNode = cloneNode.childNodes[0];\n          }\n          if (cloneNode.nodeType === 3 && !(isCursor && cloneNode.nodeValue === '')) {\n            nodes[index] = cloneNode;\n          } else {\n            var divNode = document.createElement('div');\n            divNode.innerHTML = '&#8203;';\n            if (cloneNode.nodeType !== 3) {\n              cloneNode.insertBefore(divNode.firstChild, cloneNode.firstChild);\n              nodes[index] = cloneNode.firstChild;\n            } else {\n              cloneNode.parentNode.insertBefore(divNode.firstChild, cloneNode);\n              nodes[index] = cloneNode.previousSibling;\n              cloneNode.parentNode.removeChild(cloneNode);\n            }\n          }\n        }\n      } else {\n        var lastNode = splitNode;\n        for (; lastNode.firstChild !== null && lastNode.firstChild.nodeType !== 3; null) {\n          lastNode = lastNode.firstChild;\n        }\n        lastNode.innerHTML = '&#8203;';\n        nodes[index] = lastNode.firstChild;\n      }\n    } else if (isFontStyle && !nodes[index].contains(formatNode) && nodes[index].nodeType === 3 && nodes[index].textContent !== formatNode.textContent) {\n      // If the selection is within the format node .\n      var isFullNodeSelected = nodes[index].textContent === nodes[index].wholeText;\n      var nodeTraverse = nodes[index];\n      var styleElement = this.GetFormatNode(format, value);\n      // while loop and traverse back until text content does not match with parent text content\n      while (nodeTraverse && nodeTraverse.textContent === nodeTraverse.parentElement.textContent) {\n        nodeTraverse = nodeTraverse.parentElement;\n      }\n      if (isFullNodeSelected && formatNode.textContent !== nodeTraverse.textContent) {\n        var nodeArray = [];\n        var priorityNode = this.getPriorityFormatNode(nodeTraverse, endNode);\n        if (priorityNode && priorityNode.textContent === nodeTraverse.textContent) {\n          nodeTraverse = priorityNode;\n        }\n        nodeArray.push(nodeTraverse);\n        this.applyStyles(nodeArray, 0, styleElement);\n        return nodes[index];\n      }\n    }\n    var fontStyle;\n    if (format === 'backgroundcolor') {\n      fontStyle = formatNode.style.fontSize;\n    }\n    var bgStyle;\n    if (format === 'fontsize') {\n      var bg = closest(nodes[index].parentElement, 'span[style*=' + 'background-color' + ']');\n      if (!isNOU(bg)) {\n        bgStyle = bg.style.backgroundColor;\n      }\n    }\n    var formatNodeStyles = formatNode.getAttribute('style');\n    var formatNodeTagName = formatNode.tagName;\n    var child;\n    if (formatNodeTagName === 'A' && format === 'underline') {\n      formatNode.style.textDecoration = 'none';\n      child = [formatNode];\n    } else if (IsFormatted.inlineTags.indexOf(formatNodeTagName.toLowerCase()) !== -1 && isFontStyle && formatNodeTagName.toLocaleLowerCase() !== 'span') {\n      var fontNodeStyle = formatNode.style;\n      if (fontNodeStyle.color && format === 'fontcolor') {\n        if (formatNode.nodeName === 'A') {\n          fontNodeStyle.color = value;\n        } else {\n          fontNodeStyle.color = '';\n        }\n      } else if (fontNodeStyle.backgroundColor && format === 'backgroundcolor') {\n        fontNodeStyle.backgroundColor = '';\n      } else if (fontNodeStyle.fontSize && format === 'fontsize') {\n        fontNodeStyle.fontSize = '';\n      } else if (fontNodeStyle.fontFamily && format === 'fontname') {\n        fontNodeStyle.fontFamily = '';\n      }\n      if (formatNode.getAttribute('style') === '') {\n        formatNode.removeAttribute('style');\n      }\n      child = [formatNode];\n    } else {\n      child = InsertMethods.unwrap(formatNode);\n      var liElement = nodes[index].parentElement;\n      if (!isNOU(liElement) && liElement.tagName.toLowerCase() !== 'li') {\n        liElement = closest(liElement, 'li');\n      }\n      if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && liElement.textContent.trim() === nodes[index].textContent.trim()) {\n        if (format === 'bold') {\n          liElement.style.fontWeight = 'normal';\n        } else if (format === 'italic') {\n          liElement.style.fontStyle = 'normal';\n        }\n      } else if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && liElement.textContent.trim() !== nodes[index].textContent.trim()) {\n        SelectionCommands.conCatenateTextNode(liElement, format, '', 'normal', value);\n      }\n    }\n    if (child[0] && !isFontStyle) {\n      var nodeTraverse = child[index] ? child[index] : child[0];\n      var textNode = nodeTraverse;\n      for (; nodeTraverse && nodeTraverse.parentElement && nodeTraverse.parentElement !== endNode;\n      // eslint-disable-next-line\n      nodeTraverse = nodeTraverse) {\n        var nodeTraverseCondition = void 0;\n        if (formatNode.nodeName === 'SPAN') {\n          nodeTraverseCondition = nodeTraverse.parentElement.tagName.toLocaleLowerCase() === formatNode.tagName.toLocaleLowerCase() && nodeTraverse.parentElement.getAttribute('style') === formatNodeStyles;\n        } else {\n          nodeTraverseCondition = nodeTraverse.parentElement.tagName.toLocaleLowerCase() === formatNode.tagName.toLocaleLowerCase();\n        }\n        if (nodeTraverse.parentElement && nodeTraverseCondition && (nodeTraverse.parentElement.childElementCount > 1 || range.startOffset > 1)) {\n          if (textNode.parentElement && textNode.parentElement.tagName.toLocaleLowerCase() === formatNode.tagName.toLocaleLowerCase()) {\n            if (range.startOffset === range.endOffset && textNode.nodeType !== 1 && !isNOU(textNode.textContent) && textNode.parentElement.childElementCount > 1) {\n              range.setStart(textNode, 0);\n              range.setEnd(textNode, textNode.textContent.length);\n              nodeCutter.SplitNode(range, textNode.parentElement, false);\n            }\n          }\n          if (nodeTraverse.parentElement.tagName.toLocaleLowerCase() === 'span') {\n            if (formatNode.style.textDecoration === 'underline' && nodeTraverse.parentElement.style.textDecoration !== 'underline') {\n              nodeTraverse = nodeTraverse.parentElement;\n              continue;\n            }\n          }\n          InsertMethods.unwrap(nodeTraverse.parentElement);\n          nodeTraverse = !isNOU(nodeTraverse.parentElement) && !domNode.isBlockNode(nodeTraverse.parentElement) ? textNode : nodeTraverse.parentElement;\n        } else {\n          nodeTraverse = nodeTraverse.parentElement;\n        }\n      }\n    }\n    if (child.length > 0 && isFontStyle && !(format === 'fontname' && value === '' || format === 'fontsize' && value === '')) {\n      for (var num = 0; num < child.length; num++) {\n        if (child[num].nodeType !== 3 || child[num].textContent && child[num].textContent.trim().length > 0) {\n          child[num] = InsertMethods.Wrap(child[num], this.GetFormatNode(format, value, formatNodeTagName, formatNodeStyles));\n          var liElement = nodes[index].parentElement;\n          if (!isNOU(liElement) && liElement.tagName.toLowerCase() !== 'li') {\n            liElement = closest(liElement, 'li');\n          }\n          if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && liElement.textContent.trim() === nodes[index].textContent.trim()) {\n            if (format === 'fontname') {\n              liElement.style.fontFamily = value;\n            }\n          }\n          if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && liElement.textContent.trim() !== nodes[index].textContent.trim()) {\n            SelectionCommands.conCatenateTextNode(liElement, format, liElement.textContent, format, value);\n          }\n          if (child[num].textContent === startText) {\n            if (num === 0) {\n              range.setStartBefore(child[num]);\n            } else if (num === child.length - 1) {\n              range.setEndAfter(child[num]);\n            }\n          }\n        }\n      }\n      var currentNodeElem = nodes[index].parentElement;\n      if (!isNOU(fontStyle) && fontStyle !== '') {\n        currentNodeElem.style.fontSize = fontStyle;\n      }\n      if (!isNOU(bgStyle) && bgStyle !== '') {\n        currentNodeElem.style.backgroundColor = bgStyle;\n      }\n      if (format === 'fontsize' || format === 'fontcolor') {\n        var liElement = nodes[index].parentElement;\n        var parentElement = nodes[index].parentElement;\n        while (!isNOU(parentElement) && parentElement.tagName.toLowerCase() !== 'li') {\n          parentElement = parentElement.parentElement;\n          liElement = parentElement;\n        }\n        var num = index;\n        var liChildContent = '';\n        while (num >= 0 && !isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && liElement.contains(nodes[num]) && liElement.textContent.replace('/\\u200B/g', '').trim().includes(nodes[num].textContent.trim())) {\n          /* eslint-enable security/detect-object-injection */\n          liChildContent = ' ' + nodes[num].textContent.trim() + liChildContent;\n          num--;\n        }\n        var isNestedList = false;\n        var nestedListCount = 0;\n        var isNestedListItem = false;\n        if (!isNOU(liElement) && liElement.childNodes) {\n          for (var num_1 = 0; num_1 < liElement.childNodes.length; num_1++) {\n            if (liElement.childNodes[num_1].nodeName === ('OL' || 'UL')) {\n              nestedListCount++;\n              isNestedList = true;\n            }\n          }\n        }\n        if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && liElement.textContent.split('\\u200B').join('').trim() === liChildContent.split('\\u200B').join('').trim()) {\n          if (format === 'fontsize') {\n            liElement.style.fontSize = value;\n          } else {\n            liElement.style.color = value;\n            liElement.style.textDecoration = 'inherit';\n          }\n        } else if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && isNestedList) {\n          if (isNestedList && nestedListCount > 0) {\n            for (var num_2 = 0; num_2 < liElement.childNodes.length; num_2++) {\n              if (nodes[index].textContent === liElement.childNodes[num_2].textContent && nodes[index].textContent === nodeText && liElement.textContent.replace('/\\u200B/g', '').trim().includes(liChildContent.split('\\u200B').join('').trim())) {\n                isNestedListItem = true;\n              }\n            }\n          }\n          if (isNestedListItem) {\n            for (var num_3 = 0; num_3 < liElement.childNodes.length; num_3++) {\n              if (liElement.childNodes[num_3].nodeName === ('OL' || 'UL')) {\n                liElement.childNodes[num_3].style.fontSize = 'initial';\n              }\n            }\n            if (format === 'fontsize') {\n              liElement.style.fontSize = value;\n            } else {\n              liElement.style.color = value;\n              liElement.style.textDecoration = 'inherit';\n            }\n          }\n        }\n      }\n    }\n    return nodes[index];\n  };\n  SelectionCommands.insertFormat = function (docElement, nodes, index, formatNode, isCursor, isTableSelect, isFormat, isFontStyle, range, nodeCutter, format, value, painterValues, domNode, endNode) {\n    if (!isCursor) {\n      if (formatNode === null && isFormat || isFontStyle) {\n        if (!isTableSelect && nodes[index].nodeName !== 'BR') {\n          nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);\n          nodes[index].textContent = nodeCutter.TrimLineBreak(nodes[index].textContent);\n        }\n        if (format === 'uppercase' || format === 'lowercase') {\n          nodes[index].textContent = format === 'uppercase' ? nodes[index].textContent.toLocaleUpperCase() : nodes[index].textContent.toLocaleLowerCase();\n        } else if (!(isFontStyle === true && value === '')) {\n          var element = this.GetFormatNode(format, value);\n          if (value === 'formatPainter' || isFontStyle) {\n            var liElement = nodes[index].parentElement;\n            var parentElement = nodes[index].parentElement;\n            while (!isNOU(parentElement) && parentElement.tagName.toLowerCase() !== 'li') {\n              parentElement = parentElement.parentElement;\n              liElement = parentElement;\n            }\n            if (format === 'fontcolor' || format === 'fontname' || format === 'fontsize') {\n              var parentElem = nodes[index].parentElement;\n              if (!isNOU(parentElem) && parentElem.childNodes) {\n                for (var i = 0; i < parentElem.childNodes.length; i++) {\n                  if (this.concatenateTextExcludingList(nodes, index) === nodes[index].textContent) {\n                    var liElement_1 = void 0;\n                    if (parentElem.tagName === 'LI') {\n                      liElement_1 = parentElem;\n                    } else if (parentElem.closest('li')) {\n                      liElement_1 = parentElem.closest('li');\n                    }\n                    if (!isNOU(liElement_1)) {\n                      switch (format) {\n                        case 'fontcolor':\n                          liElement_1.style.color = value;\n                          break;\n                        case 'fontname':\n                          liElement_1.style.fontFamily = value;\n                          break;\n                        case 'fontsize':\n                          liElement_1.style.fontSize = value;\n                          break;\n                        default:\n                          break;\n                      }\n                    }\n                  }\n                  var childElement = parentElem.childNodes[i];\n                  if (childElement.tagName === 'OL' || childElement.tagName === 'UL') {\n                    switch (format) {\n                      case 'fontcolor':\n                        childElement.style.color = 'initial';\n                        break;\n                      case 'fontname':\n                        childElement.style.fontFamily = 'initial';\n                        break;\n                      case 'fontsize':\n                        childElement.style.fontSize = 'initial';\n                        break;\n                      default:\n                        break;\n                    }\n                  }\n                }\n              }\n            }\n            if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && liElement.textContent.trim() === nodes[index].textContent.trim()) {\n              if (format === 'fontsize') {\n                liElement.style.fontSize = value;\n              } else if (format === 'fontcolor') {\n                liElement.style.color = value;\n                liElement.style.textDecoration = 'inherit';\n              } else if (format === 'fontname') {\n                liElement.style.fontFamily = value;\n              }\n            }\n            if (value === 'formatPainter') {\n              return this.insertFormatPainterElem(nodes, index, range, nodeCutter, painterValues, domNode);\n            }\n            var currentNode = nodes[index];\n            var priorityNode = this.getPriorityFormatNode(currentNode, endNode);\n            // 1. Checking is there any priority node present in the selection range. (Use case for nested styles);\n            // 2  Or font style is applied. (Use case not a nested style)\n            if (!isNOU(priorityNode) || isFontStyle) {\n              var currentFormatNode = isNOU(priorityNode) ? currentNode : priorityNode;\n              currentFormatNode = !isNOU(priorityNode) && priorityNode.style.fontSize !== '' ? currentFormatNode.firstChild : currentFormatNode;\n              if (isNOU(priorityNode) || format === 'fontsize') {\n                while (currentFormatNode) {\n                  var isSameTextContent = currentFormatNode.parentElement.textContent.trim() === nodes[index].textContent.trim();\n                  var parent_1 = currentFormatNode.parentElement;\n                  if (!domNode.isBlockNode(parent_1) && isSameTextContent && !(parent_1.nodeName === 'SPAN' && parent_1.classList.contains('e-img-inner'))) {\n                    currentFormatNode = parent_1;\n                  } else {\n                    break;\n                  }\n                }\n              }\n              var nodeList = [];\n              // Since color is different for different themnes, we need to wrap the fontColor over the text node.\n              if (format === 'fontcolor') {\n                var closestAnchor = closest(nodes[index].parentElement, 'A');\n                if (!isNOU(closestAnchor) && closestAnchor.firstChild.textContent.trim() === nodes[index].textContent.trim()) {\n                  currentFormatNode = nodes[index];\n                }\n              }\n              if (nodes[index].textContent.trim() !== currentFormatNode.textContent.trim()) {\n                currentFormatNode = nodes[index];\n              }\n              nodeList[0] = currentFormatNode;\n              this.applyStyles(nodeList, 0, element);\n              if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && liElement.textContent.trim() !== nodes[index].textContent.trim()) {\n                SelectionCommands.conCatenateTextNode(liElement, format, liElement.textContent, format, value);\n              }\n            } else {\n              nodes[index] = this.applyStyles(nodes, index, element);\n            }\n          } else {\n            nodes[index] = this.applyStyles(nodes, index, element);\n            var liElement = nodes[index].parentElement;\n            if (!isNOU(liElement) && liElement.tagName.toLowerCase() !== 'li') {\n              liElement = closest(liElement, 'li');\n            }\n            if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && liElement.textContent.trim() === nodes[index].textContent.trim()) {\n              if (format === 'bold') {\n                liElement.style.fontWeight = 'bold';\n              } else if (format === 'italic') {\n                liElement.style.fontStyle = 'italic';\n              }\n            } else if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && liElement.textContent.trim() !== nodes[index].textContent.trim()) {\n              SelectionCommands.conCatenateTextNode(liElement, format, liElement.textContent, format);\n            }\n          }\n        }\n      } else {\n        if (!isTableSelect) {\n          nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);\n        }\n      }\n    } else {\n      if (format !== 'uppercase' && format !== 'lowercase') {\n        var element = this.getInsertNode(docElement, range, format, value);\n        nodes[index] = element.firstChild;\n        nodeCutter.position = 1;\n      } else {\n        nodeCutter.position = range.startOffset;\n      }\n    }\n    return nodes[index];\n  };\n  SelectionCommands.applyStyles = function (nodes, index, element) {\n    if (!(nodes[index].nodeName === 'BR' && this.enterAction === 'BR')) {\n      nodes[index] = index === nodes.length - 1 || nodes[index].nodeName === 'BR' ? InsertMethods.Wrap(nodes[index], element) : InsertMethods.WrapBefore(nodes[index], element, true);\n      nodes[index] = this.getChildNode(nodes[index], element);\n    }\n    return nodes[index];\n  };\n  SelectionCommands.getPriorityFormatNode = function (node, endNode) {\n    var isFormatted = new IsFormatted();\n    var fontSizeNode = isFormatted.getFormattedNode(node, 'fontsize', endNode);\n    var fontColorNode;\n    var backgroundColorNode;\n    var fontNameNode;\n    if (isNOU(fontSizeNode)) {\n      backgroundColorNode = isFormatted.getFormattedNode(node, 'backgroundcolor', endNode);\n      if (isNOU(backgroundColorNode)) {\n        fontNameNode = isFormatted.getFormattedNode(node, 'fontname', endNode);\n        if (isNOU(fontNameNode)) {\n          fontColorNode = isFormatted.getFormattedNode(node, 'fontcolor', endNode);\n          if (isNOU(fontColorNode)) {\n            return null;\n          } else {\n            return fontColorNode;\n          }\n        } else {\n          return fontNameNode;\n        }\n      } else {\n        return backgroundColorNode;\n      }\n    } else {\n      return fontSizeNode;\n    }\n  };\n  SelectionCommands.getInsertNode = function (docElement, range, format, value) {\n    var element = this.GetFormatNode(format, value);\n    element.innerHTML = '&#8203;';\n    if (Browser.isIE) {\n      var frag = docElement.createDocumentFragment();\n      frag.appendChild(element);\n      range.insertNode(frag);\n    } else {\n      range.insertNode(element);\n    }\n    return element;\n  };\n  SelectionCommands.getChildNode = function (node, element) {\n    if (node === undefined || node === null) {\n      element.innerHTML = '&#8203;';\n      node = element.firstChild;\n    }\n    return node;\n  };\n  SelectionCommands.applySelection = function (nodes, domSelection, nodeCutter, index, isCollapsed) {\n    if (nodes.length === 1 && !isCollapsed) {\n      domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n      domSelection.endContainer = domSelection.startContainer;\n      domSelection.startOffset = 0;\n      domSelection.endOffset = nodes[index].textContent.length;\n    } else if (nodes.length === 1 && isCollapsed) {\n      domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n      domSelection.endContainer = domSelection.startContainer;\n      domSelection.startOffset = nodeCutter.position;\n      domSelection.endOffset = nodeCutter.position;\n    } else if (index === 0) {\n      domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n      domSelection.startOffset = 0;\n    } else if (index === nodes.length - 1) {\n      domSelection.endContainer = domSelection.getNodeArray(nodes[index], false);\n      domSelection.endOffset = nodes[index].textContent.length;\n    }\n    return domSelection;\n  };\n  SelectionCommands.GetFormatNode = function (format, value, tagName, styles) {\n    var node;\n    switch (format) {\n      case 'bold':\n        return document.createElement('strong');\n      case 'italic':\n        return document.createElement('em');\n      case 'underline':\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.textDecoration = 'underline';\n        return node;\n      case 'strikethrough':\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.textDecoration = 'line-through';\n        return node;\n      case 'superscript':\n        return document.createElement('sup');\n      case 'subscript':\n        return document.createElement('sub');\n      case 'fontcolor':\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.color = value;\n        node.style.textDecoration = 'inherit';\n        return node;\n      case 'fontname':\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.fontFamily = value;\n        return node;\n      case 'fontsize':\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.fontSize = value;\n        return node;\n      case 'inlinecode':\n        return document.createElement('code');\n      default:\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.backgroundColor = value;\n        return node;\n    }\n  };\n  SelectionCommands.updateStyles = function (ele, tag, styles) {\n    if (styles !== null && tag === 'SPAN') {\n      ele.setAttribute('style', styles);\n    }\n  };\n  // Below function is used to insert the element created by the format painter plugin.\n  SelectionCommands.insertFormatPainterElem = function (nodes, index, range, nodeCutter, painterValues, domNode) {\n    var parent = !domNode.isBlockNode(nodes[index].parentElement) ? nodes[index].parentElement : nodes[index];\n    if (!domNode.isBlockNode(parent)) {\n      while (parent.textContent.trim() === parent.parentElement.textContent.trim() && !domNode.isBlockNode(parent.parentElement)) {\n        parent = parent.parentElement;\n      }\n    }\n    // The below code is used to remove the already present inline style from the text node.\n    if (!isNOU(parent) && parent.nodeType === 1 && !(parent.classList.contains('e-rte-img-caption') || parent.classList.contains('e-img-inner'))) {\n      this.formatPainterCleanup(index, nodes, parent, range, nodeCutter, domNode);\n    }\n    var elem = painterValues.element;\n    // The below code is used to apply the inline format copied.\n    if (!isNOU(elem)) {\n      // Step 1: Cloning the element that is created by format painter.\n      // Step 2: Finding the last child of the nested elememt using the paintervalues.lastchild nodename\n      // Step 3: Assigning the nodes[index] text content to the last child element.\n      // Step 4: Wrapping the cloned element with the nodes[index]\n      var clonedElement = elem.cloneNode(true);\n      var elemList = clonedElement.querySelectorAll(painterValues.lastChild.nodeName);\n      var lastElement = void 0;\n      if (elemList.length > 0) {\n        lastElement = elemList[elemList.length - 1];\n      } else {\n        if (!isNOU(clonedElement) && clonedElement.nodeName === painterValues.lastChild.nodeName) {\n          lastElement = clonedElement;\n        }\n      }\n      lastElement.textContent = nodes[index].textContent;\n      var lastChild = lastElement.childNodes[0];\n      nodes[index] = InsertMethods.Wrap(nodes[index], clonedElement);\n      nodes[index].textContent = '';\n      nodes[index] = lastChild;\n    }\n    return nodes[index];\n  };\n  SelectionCommands.formatPainterCleanup = function (index, nodes, parent, range, nodeCutter, domNode) {\n    var INVALID_TAGS = ['A', 'AUDIO', 'IMG', 'VIDEO', 'IFRAME'];\n    if (index === 0 && parent.textContent.trim() !== nodes[index].textContent.trim()) {\n      nodeCutter.SplitNode(range, parent, true);\n      var childELemList = nodes[index].parentElement.childNodes;\n      for (var i = 0; i < childELemList.length; i++) {\n        if (childELemList[i].textContent.trim() === nodes[i].textContent.trim()) {\n          parent.parentNode.insertBefore(childELemList[i], parent);\n          break;\n        }\n      }\n      var blockChildNodes = parent.parentElement.childNodes;\n      for (var k = 0; k < blockChildNodes.length; k++) {\n        if ((blockChildNodes[k].textContent.trim() === '' || blockChildNodes[k].textContent.length === 0) && blockChildNodes[k].textContent.charCodeAt(0) !== 160) {\n          // 160 is the char code for &nbsp;\n          detach(blockChildNodes[k]);\n        }\n      }\n    } else if (parent.textContent.trim() !== nodes[index].textContent.trim()) {\n      parent.parentElement.insertBefore(nodes[index], parent);\n    } else {\n      while (!isNOU(parent) && parent.nodeType !== 3 && !domNode.isBlockNode(parent)) {\n        var temp = void 0;\n        for (var i = 0; i < parent.childNodes.length; i++) {\n          var currentChild = parent.childNodes[i];\n          if (currentChild.textContent.trim().length !== 0 && currentChild.nodeType !== 3) {\n            temp = parent.childNodes[i];\n          }\n        }\n        if (INVALID_TAGS.indexOf(parent.tagName) === -1) {\n          InsertMethods.unwrap(parent);\n        }\n        parent = temp;\n      }\n    }\n  };\n  SelectionCommands.concatenateTextExcludingList = function (nodes, index) {\n    var result = '';\n    var parentNode = nodes[index].nodeName === '#text' ? closest(nodes[index].parentElement, 'li') : closest(nodes[index], 'li');\n    if (!isNOU(parentNode)) {\n      for (var i = 0; i < parentNode.childNodes.length; i++) {\n        var childNode = parentNode.childNodes[i];\n        if (childNode.nodeType === 3 || childNode.nodeType === 1 && childNode.tagName !== 'OL' && childNode.tagName !== 'UL') {\n          result += childNode.textContent;\n        }\n      }\n    }\n    return result;\n  };\n  SelectionCommands.conCatenateTextNode = function (liElement, format, value, formatStr, constVal) {\n    var result = '';\n    var colorStyle = '';\n    var fontSize = '';\n    var fontFamily = '';\n    switch (format) {\n      case 'bold':\n        liElement.querySelectorAll('strong').forEach(function (e) {\n          result = result + e.textContent;\n        });\n        if (result === value) {\n          liElement.style.fontWeight = formatStr;\n        }\n        break;\n      case 'italic':\n        liElement.querySelectorAll('em').forEach(function (e) {\n          result = result + e.textContent;\n        });\n        if (result === value) {\n          liElement.style.fontStyle = formatStr;\n        }\n        break;\n      case 'fontcolor':\n        liElement.querySelectorAll('span').forEach(function (span) {\n          colorStyle = span.style.color;\n          if (SelectionCommands.hasColorsEqual(colorStyle, constVal)) {\n            result = result + span.textContent;\n          }\n        });\n        if (!isNOU(result) && !isNOU(value) && result !== '' && value !== '' && result.replace(/\\s+/g, '') === value.replace(/\\s+/g, '')) {\n          liElement.style.color = constVal;\n          liElement.style.textDecoration = 'inherit';\n        }\n        break;\n      case 'fontsize':\n        liElement.querySelectorAll('span').forEach(function (span) {\n          fontSize = span.style.getPropertyValue('font-size');\n          if (fontSize === constVal) {\n            result = result + span.textContent;\n          }\n        });\n        if (!isNOU(result) && !isNOU(value) && result !== '' && value !== '' && result.replace(/\\s+/g, '') === value.replace(/\\s+/g, '')) {\n          liElement.style.fontSize = constVal;\n        }\n        break;\n      case 'fontname':\n        liElement.querySelectorAll('span').forEach(function (span) {\n          fontFamily = span.style.getPropertyValue('font-family');\n          fontFamily = fontFamily.replace(/ /g, '');\n          if (fontFamily === constVal) {\n            result = result + span.textContent;\n          }\n        });\n        if (!isNOU(result) && !isNOU(value) && result !== '' && value !== '' && result.replace(/\\s+/g, '') === value.replace(/\\s+/g, '')) {\n          liElement.style.fontFamily = constVal;\n        }\n        break;\n    }\n  };\n  SelectionCommands.hasColorsEqual = function (color1, color2) {\n    if (isNOU(color1) || isNOU(color2) || color1.trim() === '' || color2.trim() === '') {\n      return color1 === color2;\n    }\n    if (color1.startsWith('rgb(')) {\n      color1 = color1.replace('rgb(', 'rgba(').slice(0, -1) + ',1)';\n    }\n    if (color2.startsWith('rgb(')) {\n      color2 = color2.replace('rgb(', 'rgba(').slice(0, -1) + ',1)';\n    }\n    return color1.replace(/\\s+/g, '') === color2.replace(/\\s+/g, '');\n  };\n  SelectionCommands.enterAction = 'P';\n  return SelectionCommands;\n}();\nexport { SelectionCommands };","map":{"version":3,"names":["NodeSelection","NodeCutter","InsertMethods","IsFormatted","isIDevice","setEditFrameFocus","isNullOrUndefined","isNOU","Browser","closest","detach","DOMNode","SelectionCommands","applyFormat","docElement","format","endNode","enterAction","tableCellSelection","value","selector","painterValues","validFormats","indexOf","domSelection","domNode","nodeCutter","isFormatted","range","getRange","currentAnchorNode","startContainer","parentElement","collapsed","tagName","startOffset","textContent","length","emptyTextNode","document","createTextNode","parentNode","insertBefore","nextSibling","appendChild","newRange","createRange","setStart","setEnd","collapse","setRange","userAgent","endContainer","startChildNodes","childNodes","startNode","endNode_1","endOffset","lastSelectionNode","lastChild","nodeName","previousSibling","firstChild","setSelectionText","save","nodes","isTableSelect","getTextNodes","getSelectionNodeCollection","getSelectionNodeCollectionBr","isCollapsed","isFormat","isCursor","preventRestore","isFontStyle","currentFormatNode","getFormattedNode","currentSelector","getAttribute","GetCursorRange","nodeType","childElementCount","firstElementChild","toLowerCase","replace","RegExp","trim","push","cursorNode","insertCursorNode","getNodeArray","isSubSup","index","formatNode","removeFormat","insertFormat","applySelection","restore","cursorNodes","getNodeCollection","cursorFormat","getCursorFormat","charCodeAt","regEx","emptySpaceNode","i","Node","TEXT_NODE","isBlockNode","pointer","setCursorPoint","brElem","createElement","style","color","fontFamily","fontSize","backgroundColor","unwrap","innerHTML","inlineTags","includes","element","GetFormatNode","tempNode","isSameTextContent","previousElement","classList","contains","applyStyles","getInsertNode","currentNode","lastElementChild","isTableCell","splitNode","startText","substring","nodeText","isParentNodeSameAsParentElement","nodeIndex","cloneNode","clonedElement","getIndex","remove","SplitNode","GetSpliceNode","pop","nodeValue","divNode","removeChild","lastNode","isFullNodeSelected","wholeText","nodeTraverse","styleElement","nodeArray","priorityNode","getPriorityFormatNode","fontStyle","bgStyle","bg","formatNodeStyles","formatNodeTagName","child","textDecoration","toLocaleLowerCase","fontNodeStyle","removeAttribute","liElement","fontWeight","conCatenateTextNode","textNode","nodeTraverseCondition","num","Wrap","setStartBefore","setEndAfter","currentNodeElem","liChildContent","isNestedList","nestedListCount","isNestedListItem","num_1","split","join","num_2","num_3","TrimLineBreak","toLocaleUpperCase","parentElem","concatenateTextExcludingList","liElement_1","childElement","insertFormatPainterElem","parent_1","nodeList","closestAnchor","position","WrapBefore","getChildNode","node","fontSizeNode","fontColorNode","backgroundColorNode","fontNameNode","isIE","frag","createDocumentFragment","insertNode","undefined","styles","updateStyles","ele","tag","setAttribute","parent","formatPainterCleanup","elem","elemList","querySelectorAll","lastElement","INVALID_TAGS","childELemList","blockChildNodes","k","temp","currentChild","result","childNode","formatStr","constVal","colorStyle","forEach","e","span","hasColorsEqual","getPropertyValue","color1","color2","startsWith","slice"],"sources":["/var/www/vue/vue-gantt-chart/node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/selection-commands.js"],"sourcesContent":["/**\n * `Selection` module is used to handle RTE Selections.\n */\nimport { NodeSelection } from './../../selection/index';\nimport { NodeCutter } from './nodecutter';\nimport { InsertMethods } from './insert-methods';\nimport { IsFormatted } from './isformatted';\nimport { isIDevice, setEditFrameFocus } from '../../common/util';\nimport { isNullOrUndefined as isNOU, Browser, closest, detach } from '@syncfusion/ej2-base';\nimport { DOMNode } from './dom-node';\nvar SelectionCommands = /** @class */ (function () {\n    function SelectionCommands() {\n    }\n    /**\n     * applyFormat method\n     *\n     * @param {Document} docElement - specifies the document\n     * @param {string} format - specifies the string value\n     * @param {Node} endNode - specifies the end node\n     * @param {string} enterAction - specifies the enter key action\n     * @param {ITableSelection} tableCellSelection - specifies the table cell selection\n     * @param {string} value - specifies the string value\n     * @param {string} selector - specifies the string\n     * @param {FormatPainterValue} painterValues specifies the element created and last child\n     * @returns {void}\n     * @hidden\n\n     */\n    SelectionCommands.applyFormat = function (docElement, format, endNode, enterAction, tableCellSelection, value, selector, painterValues) {\n        this.enterAction = enterAction;\n        var validFormats = ['bold', 'italic', 'underline', 'strikethrough', 'superscript',\n            'subscript', 'uppercase', 'lowercase', 'fontcolor', 'fontname', 'fontsize', 'backgroundcolor', 'inlinecode'];\n        if (validFormats.indexOf(format) > -1 || value === 'formatPainter') {\n            if (format === 'backgroundcolor' && value === '') {\n                value = 'transparent';\n            }\n            var domSelection = new NodeSelection(endNode);\n            var domNode = new DOMNode(endNode, docElement);\n            var nodeCutter = new NodeCutter();\n            var isFormatted = new IsFormatted();\n            var range = domSelection.getRange(docElement);\n            var currentAnchorNode = range.startContainer.parentElement;\n            if (range.collapsed && !isNOU(currentAnchorNode) &&\n                currentAnchorNode.tagName === 'A' &&\n                (range.startOffset === currentAnchorNode.textContent.length || range.startOffset === 0)) {\n                var emptyTextNode = document.createTextNode('');\n                if (range.startOffset === 0) {\n                    currentAnchorNode.parentNode.insertBefore(emptyTextNode, currentAnchorNode);\n                }\n                else {\n                    if (!isNOU(currentAnchorNode.nextSibling)) {\n                        currentAnchorNode.parentElement.insertBefore(emptyTextNode, currentAnchorNode.nextSibling);\n                    }\n                    else {\n                        currentAnchorNode.parentNode.appendChild(emptyTextNode);\n                    }\n                }\n                // Set the range to the empty text node\n                var newRange = docElement.createRange();\n                range.setStart(emptyTextNode, 0);\n                range.setEnd(emptyTextNode, 0);\n                range.collapse(true);\n                domSelection.setRange(docElement, newRange);\n            }\n            if (Browser.userAgent.indexOf('Firefox') !== -1 && range.startContainer === range.endContainer && !isNOU(endNode) && range.startContainer === endNode) {\n                var startChildNodes = range.startContainer.childNodes;\n                var startNode = ((startChildNodes[(range.startOffset > 0) ? (range.startOffset - 1) :\n                    range.startOffset]) || range.startContainer);\n                var endNode_1 = (range.endContainer.childNodes[(range.endOffset > 0) ? (range.endOffset - 1) :\n                    range.endOffset] || range.endContainer);\n                var lastSelectionNode = (endNode_1.lastChild.nodeName === 'BR' ? (isNOU(endNode_1.lastChild.previousSibling) ? endNode_1\n                    : endNode_1.lastChild.previousSibling) : endNode_1.firstChild);\n                while (!isNOU(lastSelectionNode) && lastSelectionNode.nodeName !== '#text' && lastSelectionNode.nodeName !== 'IMG' &&\n                    lastSelectionNode.nodeName !== 'BR' && lastSelectionNode.nodeName !== 'HR') {\n                    lastSelectionNode = lastSelectionNode.lastChild;\n                }\n                domSelection.setSelectionText(docElement, startNode, lastSelectionNode, 0, 0);\n                range = domSelection.getRange(docElement);\n            }\n            var save = domSelection.save(range, docElement);\n            var nodes = void 0;\n            var isTableSelect = false;\n            if (endNode && tableCellSelection && endNode.nodeName !== '#text') {\n                nodes = tableCellSelection.getTextNodes();\n            }\n            if (nodes && nodes.length > 0) {\n                isTableSelect = true;\n            }\n            else {\n                nodes = range.collapsed ? domSelection.getSelectionNodeCollection(range) :\n                    domSelection.getSelectionNodeCollectionBr(range);\n            }\n            var isCollapsed = false;\n            var isFormat = false;\n            var isCursor = false;\n            var preventRestore = false;\n            var isFontStyle = (['fontcolor', 'fontname', 'fontsize', 'backgroundcolor'].indexOf(format) > -1);\n            if (!isTableSelect && range.collapsed) {\n                var currentFormatNode = isFormatted.getFormattedNode(range.startContainer, format, endNode);\n                var currentSelector = !isNOU(currentFormatNode) ?\n                    (currentFormatNode.getAttribute('style') === null ? currentFormatNode.nodeName :\n                        currentFormatNode.nodeName + '[style=\\'' + currentFormatNode.getAttribute('style') + '\\']') : null;\n                if (nodes.length > 0) {\n                    isCollapsed = true;\n                    range = nodeCutter.GetCursorRange(docElement, range, nodes[0]);\n                }\n                else if (range.startContainer.nodeType === 3 && ((range.startContainer.parentElement.childElementCount > 0 &&\n                    range.startOffset > 0 && range.startContainer.parentElement.firstElementChild.tagName.toLowerCase() !== 'br') ||\n                    !isNOU(currentFormatNode) && currentFormatNode ===\n                        (range.startContainer.parentElement.closest(currentSelector)) &&\n                        ((range.startContainer.parentElement.closest(currentSelector)).textContent.replace(new RegExp('\\u200B', 'g'), '').trim().length !== 0))) {\n                    isCollapsed = true;\n                    range = nodeCutter.GetCursorRange(docElement, range, range.startContainer);\n                    nodes.push(range.startContainer);\n                }\n                else {\n                    var cursorNode = this.insertCursorNode(docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode);\n                    domSelection.endContainer = domSelection.startContainer = domSelection.getNodeArray(cursorNode, true);\n                    var childNodes = cursorNode.nodeName === 'BR' && cursorNode.parentNode.childNodes;\n                    if (!isNOU(childNodes) && childNodes.length === 1 && childNodes[0].nodeName === 'BR' && nodes.length === 0) {\n                        domSelection.setSelectionText(docElement, range.startContainer, range.endContainer, 0, 0);\n                        preventRestore = true;\n                    }\n                    else {\n                        domSelection.endOffset = domSelection.startOffset = 1;\n                    }\n                    if (cursorNode.nodeName === 'BR' && cursorNode.parentNode.textContent.length === 0) {\n                        preventRestore = true;\n                    }\n                }\n            }\n            isCursor = isTableSelect ? false : range.collapsed;\n            var isSubSup = false;\n            for (var index = 0; index < nodes.length; index++) {\n                var formatNode = isFormatted.getFormattedNode(nodes[index], format, endNode);\n                if (formatNode === null) {\n                    if (format === 'subscript') {\n                        formatNode = isFormatted.getFormattedNode(nodes[index], 'superscript', endNode);\n                        isSubSup = formatNode === null ? false : true;\n                    }\n                    else if (format === 'superscript') {\n                        formatNode = isFormatted.getFormattedNode(nodes[index], 'subscript', endNode);\n                        isSubSup = formatNode === null ? false : true;\n                    }\n                }\n                if (index === 0 && formatNode === null) {\n                    isFormat = true;\n                }\n                if (formatNode !== null && (!isFormat || isFontStyle)) {\n                    nodes[index] = this.removeFormat(nodes, index, formatNode, isCursor, isTableSelect, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode);\n                }\n                else {\n                    nodes[index] = this.insertFormat(docElement, nodes, index, formatNode, isCursor, isTableSelect, isFormat, isFontStyle, range, nodeCutter, format, value, painterValues, domNode, endNode);\n                }\n                if (!isTableSelect) {\n                    domSelection = this.applySelection(nodes, domSelection, nodeCutter, index, isCollapsed);\n                }\n            }\n            if (isIDevice()) {\n                setEditFrameFocus(endNode, selector);\n            }\n            if (!preventRestore && !isTableSelect) {\n                save.restore();\n            }\n            if (isSubSup) {\n                this.applyFormat(docElement, format, endNode, enterAction);\n            }\n        }\n    };\n    SelectionCommands.insertCursorNode = function (docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode) {\n        var cursorNodes = domSelection.getNodeCollection(range);\n        var domNode = new DOMNode(endNode, docElement);\n        var cursorFormat = (cursorNodes.length > 0) ?\n            (cursorNodes.length > 1 && range.startContainer === range.endContainer) ?\n                this.getCursorFormat(isFormatted, cursorNodes, format, endNode) :\n                ((value === '' && format === 'fontsize' && isFormatted.getFormattedNode(cursorNodes[0], format, endNode) == null && cursorNodes[0].parentElement.nodeName === 'SPAN') ? cursorNodes[0].parentElement : isFormatted.getFormattedNode(cursorNodes[0], format, endNode)) : null;\n        var cursorNode = null;\n        if (cursorFormat) {\n            cursorNode = cursorNodes[0];\n            if (cursorFormat.firstChild.textContent.charCodeAt(0) === 8203 && cursorFormat.firstChild.nodeType === 3) {\n                var regEx = new RegExp('\\u200B', 'g');\n                var emptySpaceNode = void 0;\n                if (cursorNode.nodeName !== '#text') {\n                    for (var i = 0; i < cursorNodes.length; i++) {\n                        if (cursorNodes[i].nodeType === Node.TEXT_NODE) {\n                            cursorNode = cursorNodes[i];\n                        }\n                    }\n                }\n                if (cursorFormat.firstChild === cursorNode) {\n                    cursorNode.textContent = (cursorFormat.parentElement && (domNode.isBlockNode(cursorFormat.parentElement) &&\n                        cursorFormat.parentElement.textContent.length <= 1 ? cursorFormat.parentElement.childElementCount > 1 :\n                        cursorFormat.childElementCount === 0) &&\n                        (cursorFormat.parentElement.textContent.length > 1 ||\n                            cursorFormat.parentElement.firstChild && cursorFormat.parentElement.firstChild.nodeType === 1) ?\n                        cursorNode.textContent : cursorNode.textContent.replace(regEx, ''));\n                    emptySpaceNode = cursorNode;\n                }\n                else {\n                    cursorFormat.firstChild.textContent = cursorFormat.firstChild.textContent.replace(regEx, '');\n                    emptySpaceNode = cursorFormat.firstChild;\n                }\n                var pointer = void 0;\n                if (emptySpaceNode.textContent.length === 0) {\n                    if (!isNOU(emptySpaceNode.previousSibling)) {\n                        cursorNode = emptySpaceNode.previousSibling;\n                        pointer = emptySpaceNode.textContent.length - 1;\n                        domSelection.setCursorPoint(docElement, emptySpaceNode, pointer);\n                    }\n                    else if (!isNOU(emptySpaceNode.parentElement) && emptySpaceNode.parentElement.textContent.length === 0) {\n                        var brElem = document.createElement('BR');\n                        emptySpaceNode.parentElement.appendChild(brElem);\n                        detach(emptySpaceNode);\n                        cursorNode = brElem;\n                        domSelection.setCursorPoint(docElement, cursorNode.parentElement, 0);\n                    }\n                }\n            }\n            if ((['fontcolor', 'fontname', 'fontsize', 'backgroundcolor'].indexOf(format) > -1)) {\n                if (format === 'fontcolor') {\n                    cursorFormat.style.color = value;\n                }\n                else if (format === 'fontname') {\n                    cursorFormat.style.fontFamily = value;\n                }\n                else if (format === 'fontsize') {\n                    cursorFormat.style.fontSize = value;\n                }\n                else {\n                    cursorFormat.style.backgroundColor = value;\n                }\n                cursorNode = cursorFormat;\n            }\n            else {\n                InsertMethods.unwrap(cursorFormat);\n            }\n        }\n        else {\n            if (cursorNodes.length > 1 && range.startOffset > 0 && (cursorNodes[0].firstElementChild &&\n                cursorNodes[0].firstElementChild.tagName.toLowerCase() === 'br')) {\n                cursorNodes[0].innerHTML = '';\n            }\n            if (cursorNodes.length === 1 && range.startOffset === 0 && (cursorNodes[0].nodeName === 'BR' || (isNOU(cursorNodes[0].nextSibling) ? false : cursorNodes[0].nextSibling.nodeName === 'BR'))) {\n                detach(cursorNodes[0].nodeName === '#text' ? cursorNodes[0].nextSibling : cursorNodes[0]);\n            }\n            if (!isNOU(cursorNodes[0] && cursorNodes[0].parentElement) && IsFormatted.inlineTags.\n                indexOf((cursorNodes[0].parentElement).tagName.toLowerCase()) !== -1 && cursorNodes[0].textContent.includes('\\u200B')) {\n                var element = this.GetFormatNode(format, value);\n                var tempNode = cursorNodes[0];\n                if (format === 'fontsize') {\n                    var currentFormatNode = cursorNodes[0];\n                    while (currentFormatNode) {\n                        var isSameTextContent = currentFormatNode.parentElement.textContent.trim()\n                            === cursorNodes[0].textContent.trim();\n                        var previousElement = currentFormatNode.parentElement;\n                        if (!domNode.isBlockNode(previousElement) && isSameTextContent &&\n                            !(previousElement.nodeName === 'SPAN' && previousElement.classList.contains('e-img-inner'))) {\n                            currentFormatNode = previousElement;\n                        }\n                        else {\n                            break;\n                        }\n                        cursorNodes[0] = currentFormatNode;\n                    }\n                }\n                this.applyStyles(cursorNodes, 0, element);\n                return tempNode;\n            }\n            cursorNode = this.getInsertNode(docElement, range, format, value).firstChild;\n        }\n        return cursorNode;\n    };\n    SelectionCommands.getCursorFormat = function (isFormatted, cursorNodes, format, endNode) {\n        var currentNode;\n        for (var index = 0; index < cursorNodes.length; index++) {\n            currentNode = cursorNodes[index].lastElementChild ?\n                cursorNodes[index].lastElementChild : cursorNodes[index];\n        }\n        return (format === 'fontsize' && isFormatted.getFormattedNode(currentNode, format, endNode) == null && currentNode.parentElement.nodeName === 'SPAN') ? currentNode.parentElement : isFormatted.getFormattedNode(currentNode, format, endNode);\n    };\n    SelectionCommands.removeFormat = function (nodes, index, formatNode, isCursor, isTableCell, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode) {\n        var splitNode = null;\n        var startText = range.startContainer.nodeName === '#text' ?\n            range.startContainer.textContent.substring(range.startOffset, range.startContainer.textContent.length) :\n            range.startContainer.textContent;\n        var nodeText = nodes[index].textContent;\n        var isParentNodeSameAsParentElement = nodes[0].parentElement.nodeName === nodes[0].parentElement.parentElement.nodeName;\n        if (!(range.startContainer === range.endContainer && range.startOffset === 0\n            && range.endOffset === range.startContainer.length\n            && (range.startContainer.textContent === formatNode.textContent || isParentNodeSameAsParentElement))) {\n            var nodeIndex = [];\n            var cloneNode = nodes[index];\n            var clonedElement = cloneNode;\n            do {\n                nodeIndex.push(domSelection.getIndex(cloneNode));\n                cloneNode = cloneNode.parentNode;\n            } while (cloneNode && (cloneNode !== formatNode));\n            if (nodes[index].nodeName !== 'BR') {\n                if (clonedElement.nodeName === '#text' && clonedElement.textContent.includes('\\u200B')) {\n                    clonedElement.remove();\n                }\n                if (!isTableCell) {\n                    cloneNode = splitNode = (isCursor && (formatNode.textContent.length - 1) === range.startOffset) ?\n                        nodeCutter.SplitNode(range, formatNode, true)\n                        : nodeCutter.GetSpliceNode(range, formatNode);\n                }\n            }\n            if (!isCursor) {\n                while (cloneNode && cloneNode.childNodes.length > 0 && ((nodeIndex.length - 1) >= 0)\n                    && (cloneNode.childNodes.length > nodeIndex[nodeIndex.length - 1])) {\n                    if (cloneNode.childNodes.length > 1 && nodeIndex.length > 1) {\n                        cloneNode = cloneNode.childNodes[nodeIndex[nodeIndex.length - 2]];\n                        break;\n                    }\n                    else {\n                        cloneNode = cloneNode.childNodes[nodeIndex[nodeIndex.length - 1]];\n                        nodeIndex.pop();\n                    }\n                }\n                if (nodes[index].nodeName !== 'BR') {\n                    while (cloneNode.nodeType === 1 && cloneNode.childNodes.length > 0) {\n                        cloneNode = cloneNode.childNodes[0];\n                    }\n                    if (cloneNode.nodeType === 3 && !(isCursor && cloneNode.nodeValue === '')) {\n                        nodes[index] = cloneNode;\n                    }\n                    else {\n                        var divNode = document.createElement('div');\n                        divNode.innerHTML = '&#8203;';\n                        if (cloneNode.nodeType !== 3) {\n                            cloneNode.insertBefore(divNode.firstChild, cloneNode.firstChild);\n                            nodes[index] = cloneNode.firstChild;\n                        }\n                        else {\n                            cloneNode.parentNode.insertBefore(divNode.firstChild, cloneNode);\n                            nodes[index] = cloneNode.previousSibling;\n                            cloneNode.parentNode.removeChild(cloneNode);\n                        }\n                    }\n                }\n            }\n            else {\n                var lastNode = splitNode;\n                for (; lastNode.firstChild !== null && lastNode.firstChild.nodeType !== 3; null) {\n                    lastNode = lastNode.firstChild;\n                }\n                lastNode.innerHTML = '&#8203;';\n                nodes[index] = lastNode.firstChild;\n            }\n        }\n        else if (isFontStyle && !nodes[index].contains(formatNode) && nodes[index].nodeType === 3 &&\n            nodes[index].textContent !== formatNode.textContent) {\n            // If the selection is within the format node .\n            var isFullNodeSelected = nodes[index].textContent === nodes[index].wholeText;\n            var nodeTraverse = nodes[index];\n            var styleElement = this.GetFormatNode(format, value);\n            // while loop and traverse back until text content does not match with parent text content\n            while (nodeTraverse && nodeTraverse.textContent === nodeTraverse.parentElement.textContent) {\n                nodeTraverse = nodeTraverse.parentElement;\n            }\n            if (isFullNodeSelected && formatNode.textContent !== nodeTraverse.textContent) {\n                var nodeArray = [];\n                var priorityNode = this.getPriorityFormatNode(nodeTraverse, endNode);\n                if (priorityNode && priorityNode.textContent === nodeTraverse.textContent) {\n                    nodeTraverse = priorityNode;\n                }\n                nodeArray.push(nodeTraverse);\n                this.applyStyles(nodeArray, 0, styleElement);\n                return nodes[index];\n            }\n        }\n        var fontStyle;\n        if (format === 'backgroundcolor') {\n            fontStyle = formatNode.style.fontSize;\n        }\n        var bgStyle;\n        if (format === 'fontsize') {\n            var bg = closest(nodes[index].parentElement, 'span[style*=' + 'background-color' + ']');\n            if (!isNOU(bg)) {\n                bgStyle = bg.style.backgroundColor;\n            }\n        }\n        var formatNodeStyles = formatNode.getAttribute('style');\n        var formatNodeTagName = formatNode.tagName;\n        var child;\n        if (formatNodeTagName === 'A' && format === 'underline') {\n            formatNode.style.textDecoration = 'none';\n            child = [formatNode];\n        }\n        else if (IsFormatted.inlineTags.indexOf(formatNodeTagName.toLowerCase()) !== -1 && isFontStyle && formatNodeTagName.toLocaleLowerCase() !== 'span') {\n            var fontNodeStyle = formatNode.style;\n            if (fontNodeStyle.color && format === 'fontcolor') {\n                if (formatNode.nodeName === 'A') {\n                    fontNodeStyle.color = value;\n                }\n                else {\n                    fontNodeStyle.color = '';\n                }\n            }\n            else if (fontNodeStyle.backgroundColor && format === 'backgroundcolor') {\n                fontNodeStyle.backgroundColor = '';\n            }\n            else if (fontNodeStyle.fontSize && format === 'fontsize') {\n                fontNodeStyle.fontSize = '';\n            }\n            else if (fontNodeStyle.fontFamily && format === 'fontname') {\n                fontNodeStyle.fontFamily = '';\n            }\n            if (formatNode.getAttribute('style') === '') {\n                formatNode.removeAttribute('style');\n            }\n            child = [formatNode];\n        }\n        else {\n            child = InsertMethods.unwrap(formatNode);\n            var liElement = nodes[index].parentElement;\n            if (!isNOU(liElement) && liElement.tagName.toLowerCase() !== 'li') {\n                liElement = closest(liElement, 'li');\n            }\n            if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' &&\n                liElement.textContent.trim() === nodes[index].textContent.trim()) {\n                if (format === 'bold') {\n                    liElement.style.fontWeight = 'normal';\n                }\n                else if (format === 'italic') {\n                    liElement.style.fontStyle = 'normal';\n                }\n            }\n            else if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li'\n                && liElement.textContent.trim() !== nodes[index].textContent.trim()) {\n                SelectionCommands.conCatenateTextNode(liElement, format, '', 'normal', value);\n            }\n        }\n        if (child[0] && !isFontStyle) {\n            var nodeTraverse = child[index] ? child[index] : child[0];\n            var textNode = nodeTraverse;\n            for (; nodeTraverse && nodeTraverse.parentElement && nodeTraverse.parentElement !== endNode; \n            // eslint-disable-next-line\n            nodeTraverse = nodeTraverse) {\n                var nodeTraverseCondition = void 0;\n                if (formatNode.nodeName === 'SPAN') {\n                    nodeTraverseCondition = nodeTraverse.parentElement.tagName.toLocaleLowerCase()\n                        === formatNode.tagName.toLocaleLowerCase() && nodeTraverse.parentElement.getAttribute('style') === formatNodeStyles;\n                }\n                else {\n                    nodeTraverseCondition = nodeTraverse.parentElement.tagName.toLocaleLowerCase()\n                        === formatNode.tagName.toLocaleLowerCase();\n                }\n                if (nodeTraverse.parentElement && nodeTraverseCondition &&\n                    (nodeTraverse.parentElement.childElementCount > 1 || range.startOffset > 1)) {\n                    if (textNode.parentElement && textNode.parentElement.tagName.toLocaleLowerCase()\n                        === formatNode.tagName.toLocaleLowerCase()) {\n                        if ((range.startOffset === range.endOffset) && textNode.nodeType !== 1 &&\n                            !isNOU(textNode.textContent) && textNode.parentElement.childElementCount > 1) {\n                            range.setStart(textNode, 0);\n                            range.setEnd(textNode, textNode.textContent.length);\n                            nodeCutter.SplitNode(range, textNode.parentElement, false);\n                        }\n                    }\n                    if (nodeTraverse.parentElement.tagName.toLocaleLowerCase() === 'span') {\n                        if (formatNode.style.textDecoration === 'underline' &&\n                            nodeTraverse.parentElement.style.textDecoration !== 'underline') {\n                            nodeTraverse = nodeTraverse.parentElement;\n                            continue;\n                        }\n                    }\n                    InsertMethods.unwrap(nodeTraverse.parentElement);\n                    nodeTraverse = !isNOU(nodeTraverse.parentElement) && !domNode.isBlockNode(nodeTraverse.parentElement) ? textNode :\n                        nodeTraverse.parentElement;\n                }\n                else {\n                    nodeTraverse = nodeTraverse.parentElement;\n                }\n            }\n        }\n        if (child.length > 0 && isFontStyle && !((format === 'fontname' && value === '') || (format === 'fontsize' && value === ''))) {\n            for (var num = 0; num < child.length; num++) {\n                if (child[num].nodeType !== 3 || (child[num].textContent &&\n                    child[num].textContent.trim().length > 0)) {\n                    child[num] = InsertMethods.Wrap(child[num], this.GetFormatNode(format, value, formatNodeTagName, formatNodeStyles));\n                    var liElement = nodes[index].parentElement;\n                    if (!isNOU(liElement) && liElement.tagName.toLowerCase() !== 'li') {\n                        liElement = closest(liElement, 'li');\n                    }\n                    if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' &&\n                        liElement.textContent.trim() === nodes[index].textContent.trim()) {\n                        if (format === 'fontname') {\n                            liElement.style.fontFamily = value;\n                        }\n                    }\n                    if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li'\n                        && liElement.textContent.trim() !== nodes[index].textContent.trim()) {\n                        SelectionCommands.conCatenateTextNode(liElement, format, liElement.textContent, format, value);\n                    }\n                    if (child[num].textContent === startText) {\n                        if (num === 0) {\n                            range.setStartBefore(child[num]);\n                        }\n                        else if (num === child.length - 1) {\n                            range.setEndAfter(child[num]);\n                        }\n                    }\n                }\n            }\n            var currentNodeElem = nodes[index].parentElement;\n            if (!isNOU(fontStyle) && fontStyle !== '') {\n                currentNodeElem.style.fontSize = fontStyle;\n            }\n            if (!isNOU(bgStyle) && bgStyle !== '') {\n                currentNodeElem.style.backgroundColor = bgStyle;\n            }\n            if (format === 'fontsize' || format === 'fontcolor') {\n                var liElement = nodes[index].parentElement;\n                var parentElement = nodes[index].parentElement;\n                while (!isNOU(parentElement) && parentElement.tagName.toLowerCase() !== 'li') {\n                    parentElement = parentElement.parentElement;\n                    liElement = parentElement;\n                }\n                var num = index;\n                var liChildContent = '';\n                while (num >= 0 && !isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && liElement.contains(nodes[num]) &&\n                    liElement.textContent.replace('/\\u200B/g', '').trim().includes(nodes[num].textContent.trim())) {\n                    /* eslint-enable security/detect-object-injection */\n                    liChildContent = ' ' + nodes[num].textContent.trim() + liChildContent;\n                    num--;\n                }\n                var isNestedList = false;\n                var nestedListCount = 0;\n                var isNestedListItem = false;\n                if (!isNOU(liElement) && liElement.childNodes) {\n                    for (var num_1 = 0; num_1 < liElement.childNodes.length; num_1++) {\n                        if (liElement.childNodes[num_1].nodeName === ('OL' || 'UL')) {\n                            nestedListCount++;\n                            isNestedList = true;\n                        }\n                    }\n                }\n                if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' &&\n                    liElement.textContent.split('\\u200B').join('').trim() === liChildContent.split('\\u200B').join('').trim()) {\n                    if (format === 'fontsize') {\n                        liElement.style.fontSize = value;\n                    }\n                    else {\n                        liElement.style.color = value;\n                        liElement.style.textDecoration = 'inherit';\n                    }\n                }\n                else if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && isNestedList) {\n                    if (isNestedList && nestedListCount > 0) {\n                        for (var num_2 = 0; num_2 < liElement.childNodes.length; num_2++) {\n                            if (nodes[index].textContent === liElement.childNodes[num_2].textContent && nodes[index].textContent === nodeText && liElement.textContent.replace('/\\u200B/g', '').trim().includes(liChildContent.split('\\u200B').join('').trim())) {\n                                isNestedListItem = true;\n                            }\n                        }\n                    }\n                    if (isNestedListItem) {\n                        for (var num_3 = 0; num_3 < liElement.childNodes.length; num_3++) {\n                            if (liElement.childNodes[num_3].nodeName === ('OL' || 'UL')) {\n                                liElement.childNodes[num_3].style.fontSize = 'initial';\n                            }\n                        }\n                        if (format === 'fontsize') {\n                            liElement.style.fontSize = value;\n                        }\n                        else {\n                            liElement.style.color = value;\n                            liElement.style.textDecoration = 'inherit';\n                        }\n                    }\n                }\n            }\n        }\n        return nodes[index];\n    };\n    SelectionCommands.insertFormat = function (docElement, nodes, index, formatNode, isCursor, isTableSelect, isFormat, isFontStyle, range, nodeCutter, format, value, painterValues, domNode, endNode) {\n        if (!isCursor) {\n            if ((formatNode === null && isFormat) || isFontStyle) {\n                if (!isTableSelect && nodes[index].nodeName !== 'BR') {\n                    nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);\n                    nodes[index].textContent = nodeCutter.TrimLineBreak(nodes[index].textContent);\n                }\n                if (format === 'uppercase' || format === 'lowercase') {\n                    nodes[index].textContent = (format === 'uppercase') ? nodes[index].textContent.toLocaleUpperCase()\n                        : nodes[index].textContent.toLocaleLowerCase();\n                }\n                else if (!(isFontStyle === true && value === '')) {\n                    var element = this.GetFormatNode(format, value);\n                    if (value === 'formatPainter' || isFontStyle) {\n                        var liElement = nodes[index].parentElement;\n                        var parentElement = nodes[index].parentElement;\n                        while (!isNOU(parentElement) && parentElement.tagName.toLowerCase() !== 'li') {\n                            parentElement = parentElement.parentElement;\n                            liElement = parentElement;\n                        }\n                        if (format === 'fontcolor' || format === 'fontname' || format === 'fontsize') {\n                            var parentElem = nodes[index].parentElement;\n                            if (!isNOU(parentElem) && parentElem.childNodes) {\n                                for (var i = 0; i < parentElem.childNodes.length; i++) {\n                                    if (this.concatenateTextExcludingList(nodes, index) === nodes[index].textContent) {\n                                        var liElement_1 = void 0;\n                                        if (parentElem.tagName === 'LI') {\n                                            liElement_1 = parentElem;\n                                        }\n                                        else if (parentElem.closest('li')) {\n                                            liElement_1 = parentElem.closest('li');\n                                        }\n                                        if (!isNOU(liElement_1)) {\n                                            switch (format) {\n                                                case 'fontcolor':\n                                                    liElement_1.style.color = value;\n                                                    break;\n                                                case 'fontname':\n                                                    liElement_1.style.fontFamily = value;\n                                                    break;\n                                                case 'fontsize':\n                                                    liElement_1.style.fontSize = value;\n                                                    break;\n                                                default:\n                                                    break;\n                                            }\n                                        }\n                                    }\n                                    var childElement = parentElem.childNodes[i];\n                                    if (childElement.tagName === 'OL' || childElement.tagName === 'UL') {\n                                        switch (format) {\n                                            case 'fontcolor':\n                                                childElement.style.color = 'initial';\n                                                break;\n                                            case 'fontname':\n                                                childElement.style.fontFamily = 'initial';\n                                                break;\n                                            case 'fontsize':\n                                                childElement.style.fontSize = 'initial';\n                                                break;\n                                            default:\n                                                break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' &&\n                            liElement.textContent.trim() === nodes[index].textContent.trim()) {\n                            if (format === 'fontsize') {\n                                liElement.style.fontSize = value;\n                            }\n                            else if (format === 'fontcolor') {\n                                liElement.style.color = value;\n                                liElement.style.textDecoration = 'inherit';\n                            }\n                            else if (format === 'fontname') {\n                                liElement.style.fontFamily = value;\n                            }\n                        }\n                        if (value === 'formatPainter') {\n                            return this.insertFormatPainterElem(nodes, index, range, nodeCutter, painterValues, domNode);\n                        }\n                        var currentNode = nodes[index];\n                        var priorityNode = this.getPriorityFormatNode(currentNode, endNode);\n                        // 1. Checking is there any priority node present in the selection range. (Use case for nested styles);\n                        // 2  Or font style is applied. (Use case not a nested style)\n                        if (!isNOU(priorityNode) || isFontStyle) {\n                            var currentFormatNode = isNOU(priorityNode) ? currentNode : priorityNode;\n                            currentFormatNode = !isNOU(priorityNode) && priorityNode.style.fontSize !== '' ?\n                                currentFormatNode.firstChild : currentFormatNode;\n                            if (isNOU(priorityNode) || format === 'fontsize') {\n                                while (currentFormatNode) {\n                                    var isSameTextContent = currentFormatNode.parentElement.textContent.trim()\n                                        === nodes[index].textContent.trim();\n                                    var parent_1 = currentFormatNode.parentElement;\n                                    if (!domNode.isBlockNode(parent_1) && isSameTextContent &&\n                                        !(parent_1.nodeName === 'SPAN' && parent_1.classList.contains('e-img-inner'))) {\n                                        currentFormatNode = parent_1;\n                                    }\n                                    else {\n                                        break;\n                                    }\n                                }\n                            }\n                            var nodeList = [];\n                            // Since color is different for different themnes, we need to wrap the fontColor over the text node.\n                            if (format === 'fontcolor') {\n                                var closestAnchor = closest(nodes[index].parentElement, 'A');\n                                if (!isNOU(closestAnchor) && closestAnchor.firstChild.textContent.trim()\n                                    === nodes[index].textContent.trim()) {\n                                    currentFormatNode = nodes[index];\n                                }\n                            }\n                            if (nodes[index].textContent.trim() !== currentFormatNode.textContent.trim()) {\n                                currentFormatNode = nodes[index];\n                            }\n                            nodeList[0] = currentFormatNode;\n                            this.applyStyles(nodeList, 0, element);\n                            if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li'\n                                && liElement.textContent.trim() !== nodes[index].textContent.trim()) {\n                                SelectionCommands.conCatenateTextNode(liElement, format, liElement.textContent, format, value);\n                            }\n                        }\n                        else {\n                            nodes[index] = this.applyStyles(nodes, index, element);\n                        }\n                    }\n                    else {\n                        nodes[index] = this.applyStyles(nodes, index, element);\n                        var liElement = nodes[index].parentElement;\n                        if (!isNOU(liElement) && liElement.tagName.toLowerCase() !== 'li') {\n                            liElement = closest(liElement, 'li');\n                        }\n                        if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' &&\n                            liElement.textContent.trim() === nodes[index].textContent.trim()) {\n                            if (format === 'bold') {\n                                liElement.style.fontWeight = 'bold';\n                            }\n                            else if (format === 'italic') {\n                                liElement.style.fontStyle = 'italic';\n                            }\n                        }\n                        else if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li'\n                            && liElement.textContent.trim() !== nodes[index].textContent.trim()) {\n                            SelectionCommands.conCatenateTextNode(liElement, format, liElement.textContent, format);\n                        }\n                    }\n                }\n            }\n            else {\n                if (!isTableSelect) {\n                    nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);\n                }\n            }\n        }\n        else {\n            if (format !== 'uppercase' && format !== 'lowercase') {\n                var element = this.getInsertNode(docElement, range, format, value);\n                nodes[index] = element.firstChild;\n                nodeCutter.position = 1;\n            }\n            else {\n                nodeCutter.position = range.startOffset;\n            }\n        }\n        return nodes[index];\n    };\n    SelectionCommands.applyStyles = function (nodes, index, element) {\n        if (!(nodes[index].nodeName === 'BR' && this.enterAction === 'BR')) {\n            nodes[index] = (index === (nodes.length - 1)) || nodes[index].nodeName === 'BR' ?\n                InsertMethods.Wrap(nodes[index], element)\n                : InsertMethods.WrapBefore(nodes[index], element, true);\n            nodes[index] = this.getChildNode(nodes[index], element);\n        }\n        return nodes[index];\n    };\n    SelectionCommands.getPriorityFormatNode = function (node, endNode) {\n        var isFormatted = new IsFormatted();\n        var fontSizeNode = isFormatted.getFormattedNode(node, 'fontsize', endNode);\n        var fontColorNode;\n        var backgroundColorNode;\n        var fontNameNode;\n        if (isNOU(fontSizeNode)) {\n            backgroundColorNode = isFormatted.getFormattedNode(node, 'backgroundcolor', endNode);\n            if (isNOU(backgroundColorNode)) {\n                fontNameNode = isFormatted.getFormattedNode(node, 'fontname', endNode);\n                if (isNOU(fontNameNode)) {\n                    fontColorNode = isFormatted.getFormattedNode(node, 'fontcolor', endNode);\n                    if (isNOU(fontColorNode)) {\n                        return null;\n                    }\n                    else {\n                        return fontColorNode;\n                    }\n                }\n                else {\n                    return fontNameNode;\n                }\n            }\n            else {\n                return backgroundColorNode;\n            }\n        }\n        else {\n            return fontSizeNode;\n        }\n    };\n    SelectionCommands.getInsertNode = function (docElement, range, format, value) {\n        var element = this.GetFormatNode(format, value);\n        element.innerHTML = '&#8203;';\n        if (Browser.isIE) {\n            var frag = docElement.createDocumentFragment();\n            frag.appendChild(element);\n            range.insertNode(frag);\n        }\n        else {\n            range.insertNode(element);\n        }\n        return element;\n    };\n    SelectionCommands.getChildNode = function (node, element) {\n        if (node === undefined || node === null) {\n            element.innerHTML = '&#8203;';\n            node = element.firstChild;\n        }\n        return node;\n    };\n    SelectionCommands.applySelection = function (nodes, domSelection, nodeCutter, index, isCollapsed) {\n        if (nodes.length === 1 && !isCollapsed) {\n            domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n            domSelection.endContainer = domSelection.startContainer;\n            domSelection.startOffset = 0;\n            domSelection.endOffset = nodes[index].textContent.length;\n        }\n        else if (nodes.length === 1 && isCollapsed) {\n            domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n            domSelection.endContainer = domSelection.startContainer;\n            domSelection.startOffset = nodeCutter.position;\n            domSelection.endOffset = nodeCutter.position;\n        }\n        else if (index === 0) {\n            domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n            domSelection.startOffset = 0;\n        }\n        else if (index === nodes.length - 1) {\n            domSelection.endContainer = domSelection.getNodeArray(nodes[index], false);\n            domSelection.endOffset = nodes[index].textContent.length;\n        }\n        return domSelection;\n    };\n    SelectionCommands.GetFormatNode = function (format, value, tagName, styles) {\n        var node;\n        switch (format) {\n            case 'bold':\n                return document.createElement('strong');\n            case 'italic':\n                return document.createElement('em');\n            case 'underline':\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.textDecoration = 'underline';\n                return node;\n            case 'strikethrough':\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.textDecoration = 'line-through';\n                return node;\n            case 'superscript':\n                return document.createElement('sup');\n            case 'subscript':\n                return document.createElement('sub');\n            case 'fontcolor':\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.color = value;\n                node.style.textDecoration = 'inherit';\n                return node;\n            case 'fontname':\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.fontFamily = value;\n                return node;\n            case 'fontsize':\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.fontSize = value;\n                return node;\n            case 'inlinecode':\n                return document.createElement('code');\n            default:\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.backgroundColor = value;\n                return node;\n        }\n    };\n    SelectionCommands.updateStyles = function (ele, tag, styles) {\n        if (styles !== null && tag === 'SPAN') {\n            ele.setAttribute('style', styles);\n        }\n    };\n    // Below function is used to insert the element created by the format painter plugin.\n    SelectionCommands.insertFormatPainterElem = function (nodes, index, range, nodeCutter, painterValues, domNode) {\n        var parent = !domNode.isBlockNode(nodes[index].parentElement) ?\n            nodes[index].parentElement : nodes[index];\n        if (!domNode.isBlockNode(parent)) {\n            while (parent.textContent.trim() === parent.parentElement.textContent.trim() && !domNode.isBlockNode(parent.parentElement)) {\n                parent = parent.parentElement;\n            }\n        }\n        // The below code is used to remove the already present inline style from the text node.\n        if (!isNOU(parent) && parent.nodeType === 1 && !(parent.classList.contains('e-rte-img-caption') || parent.classList.contains('e-img-inner'))) {\n            this.formatPainterCleanup(index, nodes, parent, range, nodeCutter, domNode);\n        }\n        var elem = painterValues.element;\n        // The below code is used to apply the inline format copied.\n        if (!isNOU(elem)) {\n            // Step 1: Cloning the element that is created by format painter.\n            // Step 2: Finding the last child of the nested elememt using the paintervalues.lastchild nodename\n            // Step 3: Assigning the nodes[index] text content to the last child element.\n            // Step 4: Wrapping the cloned element with the nodes[index]\n            var clonedElement = elem.cloneNode(true);\n            var elemList = clonedElement.querySelectorAll(painterValues.lastChild.nodeName);\n            var lastElement = void 0;\n            if (elemList.length > 0) {\n                lastElement = elemList[elemList.length - 1];\n            }\n            else {\n                if (!isNOU(clonedElement) && clonedElement.nodeName === painterValues.lastChild.nodeName) {\n                    lastElement = clonedElement;\n                }\n            }\n            lastElement.textContent = nodes[index].textContent;\n            var lastChild = lastElement.childNodes[0];\n            nodes[index] = InsertMethods.Wrap(nodes[index], clonedElement);\n            nodes[index].textContent = '';\n            nodes[index] = lastChild;\n        }\n        return nodes[index];\n    };\n    SelectionCommands.formatPainterCleanup = function (index, nodes, parent, range, nodeCutter, domNode) {\n        var INVALID_TAGS = ['A', 'AUDIO', 'IMG', 'VIDEO', 'IFRAME'];\n        if (index === 0 && parent.textContent.trim() !== nodes[index].textContent.trim()) {\n            nodeCutter.SplitNode(range, parent, true);\n            var childELemList = nodes[index].parentElement.childNodes;\n            for (var i = 0; i < childELemList.length; i++) {\n                if (childELemList[i].textContent.trim() === nodes[i].textContent.trim()) {\n                    parent.parentNode.insertBefore(childELemList[i], parent);\n                    break;\n                }\n            }\n            var blockChildNodes = parent.parentElement.childNodes;\n            for (var k = 0; k < blockChildNodes.length; k++) {\n                if ((blockChildNodes[k].textContent.trim() === '' || blockChildNodes[k].textContent.length === 0) &&\n                    blockChildNodes[k].textContent.charCodeAt(0) !== 160) {\n                    // 160 is the char code for &nbsp;\n                    detach(blockChildNodes[k]);\n                }\n            }\n        }\n        else if (parent.textContent.trim() !== nodes[index].textContent.trim()) {\n            parent.parentElement.insertBefore(nodes[index], parent);\n        }\n        else {\n            while (!isNOU(parent) && parent.nodeType !== 3 && !domNode.isBlockNode(parent)) {\n                var temp = void 0;\n                for (var i = 0; i < parent.childNodes.length; i++) {\n                    var currentChild = parent.childNodes[i];\n                    if (currentChild.textContent.trim().length !== 0 && currentChild.nodeType !== 3) {\n                        temp = parent.childNodes[i];\n                    }\n                }\n                if (INVALID_TAGS.indexOf(parent.tagName) === -1) {\n                    InsertMethods.unwrap(parent);\n                }\n                parent = temp;\n            }\n        }\n    };\n    SelectionCommands.concatenateTextExcludingList = function (nodes, index) {\n        var result = '';\n        var parentNode = nodes[index].nodeName === '#text' ? closest(nodes[index].parentElement, 'li') : closest(nodes[index], 'li');\n        if (!isNOU(parentNode)) {\n            for (var i = 0; i < parentNode.childNodes.length; i++) {\n                var childNode = parentNode.childNodes[i];\n                if ((childNode.nodeType === 3) || (childNode.nodeType === 1 && (childNode.tagName !== 'OL' && childNode.tagName !== 'UL'))) {\n                    result += childNode.textContent;\n                }\n            }\n        }\n        return result;\n    };\n    SelectionCommands.conCatenateTextNode = function (liElement, format, value, formatStr, constVal) {\n        var result = '';\n        var colorStyle = '';\n        var fontSize = '';\n        var fontFamily = '';\n        switch (format) {\n            case 'bold':\n                liElement.querySelectorAll('strong').forEach(function (e) {\n                    result = result + e.textContent;\n                });\n                if (result === value) {\n                    liElement.style.fontWeight = formatStr;\n                }\n                break;\n            case 'italic':\n                liElement.querySelectorAll('em').forEach(function (e) {\n                    result = result + e.textContent;\n                });\n                if (result === value) {\n                    liElement.style.fontStyle = formatStr;\n                }\n                break;\n            case 'fontcolor':\n                liElement.querySelectorAll('span').forEach(function (span) {\n                    colorStyle = span.style.color;\n                    if (SelectionCommands.hasColorsEqual(colorStyle, constVal)) {\n                        result = result + span.textContent;\n                    }\n                });\n                if (!isNOU(result) && !isNOU(value) && result !== '' && value !== '' && result.replace(/\\s+/g, '') === value.replace(/\\s+/g, '')) {\n                    liElement.style.color = constVal;\n                    liElement.style.textDecoration = 'inherit';\n                }\n                break;\n            case 'fontsize':\n                liElement.querySelectorAll('span').forEach(function (span) {\n                    fontSize = span.style.getPropertyValue('font-size');\n                    if (fontSize === constVal) {\n                        result = result + span.textContent;\n                    }\n                });\n                if (!isNOU(result) && !isNOU(value) && result !== '' && value !== '' && result.replace(/\\s+/g, '') === value.replace(/\\s+/g, '')) {\n                    liElement.style.fontSize = constVal;\n                }\n                break;\n            case 'fontname':\n                liElement.querySelectorAll('span').forEach(function (span) {\n                    fontFamily = span.style.getPropertyValue('font-family');\n                    fontFamily = fontFamily.replace(/ /g, '');\n                    if (fontFamily === constVal) {\n                        result = result + span.textContent;\n                    }\n                });\n                if (!isNOU(result) && !isNOU(value) && result !== '' && value !== '' && result.replace(/\\s+/g, '') === value.replace(/\\s+/g, '')) {\n                    liElement.style.fontFamily = constVal;\n                }\n                break;\n        }\n    };\n    SelectionCommands.hasColorsEqual = function (color1, color2) {\n        if (isNOU(color1) || isNOU(color2) || color1.trim() === '' || color2.trim() === '') {\n            return color1 === color2;\n        }\n        if (color1.startsWith('rgb(')) {\n            color1 = color1.replace('rgb(', 'rgba(').slice(0, -1) + ',1)';\n        }\n        if (color2.startsWith('rgb(')) {\n            color2 = color2.replace('rgb(', 'rgba(').slice(0, -1) + ',1)';\n        }\n        return color1.replace(/\\s+/g, '') === color2.replace(/\\s+/g, '');\n    };\n    SelectionCommands.enterAction = 'P';\n    return SelectionCommands;\n}());\nexport { SelectionCommands };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}