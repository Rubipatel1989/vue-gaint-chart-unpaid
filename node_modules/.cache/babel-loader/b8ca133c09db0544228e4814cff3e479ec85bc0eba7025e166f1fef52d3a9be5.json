{"ast":null,"code":"import { Popup } from '@syncfusion/ej2-popups';\nimport { CLS_QUICK_POP } from '../base/classes';\nimport * as events from '../base/constant';\n/**\n * `Popup renderer` module is used to render popup in RichTextEditor.\n *\n * @hidden\n\n */\nvar PopupRenderer = /** @class */function () {\n  /**\n   * Constructor for popup renderer module\n   *\n   * @param {IRichTextEditor} parent - specifies the parent.\n   */\n  function PopupRenderer(parent) {\n    this.parent = parent;\n  }\n  PopupRenderer.prototype.quickToolbarOpen = function () {\n    var args = this.popupObj;\n    this.parent.trigger(events.quickToolbarOpen, args);\n  };\n  /**\n   * renderPopup method\n   *\n   * @param {BaseQuickToolbar} args - specifies  the arguments.\n   * @returns {void}\n   * @hidden\n    */\n  PopupRenderer.prototype.renderPopup = function (args) {\n    this.setPanel(args.element);\n    this.renderPanel();\n    args.popupObj = new Popup(args.element, {\n      targetType: 'relative',\n      relateTo: this.parent.element,\n      open: this.quickToolbarOpen.bind(this)\n    });\n    this.popupObj = args.popupObj;\n    args.popupObj.hide();\n  };\n  /**\n   * The function is used to add popup class in Quick Toolbar\n   *\n   * @returns {void}\n   * @hidden\n    */\n  PopupRenderer.prototype.renderPanel = function () {\n    this.getPanel().classList.add(CLS_QUICK_POP);\n  };\n  /**\n   * Get the popup element of RichTextEditor\n   *\n   * @returns {Element} - specifies the element\n   * @hidden\n    */\n  PopupRenderer.prototype.getPanel = function () {\n    return this.popupPanel;\n  };\n  /**\n   * Set the popup element of RichTextEditor\n   *\n   * @returns {void}\n   * @param  {Element} panel - specifies the element\n   * @hidden\n    */\n  PopupRenderer.prototype.setPanel = function (panel) {\n    this.popupPanel = panel;\n  };\n  return PopupRenderer;\n}();\nexport { PopupRenderer };","map":{"version":3,"names":["Popup","CLS_QUICK_POP","events","PopupRenderer","parent","prototype","quickToolbarOpen","args","popupObj","trigger","renderPopup","setPanel","element","renderPanel","targetType","relateTo","open","bind","hide","getPanel","classList","add","popupPanel","panel"],"sources":["/var/www/vue/vue-gantt-chart/node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/renderer/popup-renderer.js"],"sourcesContent":["import { Popup } from '@syncfusion/ej2-popups';\nimport { CLS_QUICK_POP } from '../base/classes';\nimport * as events from '../base/constant';\n/**\n * `Popup renderer` module is used to render popup in RichTextEditor.\n *\n * @hidden\n\n */\nvar PopupRenderer = /** @class */ (function () {\n    /**\n     * Constructor for popup renderer module\n     *\n     * @param {IRichTextEditor} parent - specifies the parent.\n     */\n    function PopupRenderer(parent) {\n        this.parent = parent;\n    }\n    PopupRenderer.prototype.quickToolbarOpen = function () {\n        var args = this.popupObj;\n        this.parent.trigger(events.quickToolbarOpen, args);\n    };\n    /**\n     * renderPopup method\n     *\n     * @param {BaseQuickToolbar} args - specifies  the arguments.\n     * @returns {void}\n     * @hidden\n\n     */\n    PopupRenderer.prototype.renderPopup = function (args) {\n        this.setPanel(args.element);\n        this.renderPanel();\n        args.popupObj = new Popup(args.element, {\n            targetType: 'relative',\n            relateTo: this.parent.element,\n            open: this.quickToolbarOpen.bind(this)\n        });\n        this.popupObj = args.popupObj;\n        args.popupObj.hide();\n    };\n    /**\n     * The function is used to add popup class in Quick Toolbar\n     *\n     * @returns {void}\n     * @hidden\n\n     */\n    PopupRenderer.prototype.renderPanel = function () {\n        this.getPanel().classList.add(CLS_QUICK_POP);\n    };\n    /**\n     * Get the popup element of RichTextEditor\n     *\n     * @returns {Element} - specifies the element\n     * @hidden\n\n     */\n    PopupRenderer.prototype.getPanel = function () {\n        return this.popupPanel;\n    };\n    /**\n     * Set the popup element of RichTextEditor\n     *\n     * @returns {void}\n     * @param  {Element} panel - specifies the element\n     * @hidden\n\n     */\n    PopupRenderer.prototype.setPanel = function (panel) {\n        this.popupPanel = panel;\n    };\n    return PopupRenderer;\n}());\nexport { PopupRenderer };\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,wBAAwB;AAC9C,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,OAAO,KAAKC,MAAM,MAAM,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,aAAa,GAAG,aAAe,YAAY;EAC3C;AACJ;AACA;AACA;AACA;EACI,SAASA,aAAaA,CAACC,MAAM,EAAE;IAC3B,IAAI,CAACA,MAAM,GAAGA,MAAM;EACxB;EACAD,aAAa,CAACE,SAAS,CAACC,gBAAgB,GAAG,YAAY;IACnD,IAAIC,IAAI,GAAG,IAAI,CAACC,QAAQ;IACxB,IAAI,CAACJ,MAAM,CAACK,OAAO,CAACP,MAAM,CAACI,gBAAgB,EAAEC,IAAI,CAAC;EACtD,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EAEIJ,aAAa,CAACE,SAAS,CAACK,WAAW,GAAG,UAAUH,IAAI,EAAE;IAClD,IAAI,CAACI,QAAQ,CAACJ,IAAI,CAACK,OAAO,CAAC;IAC3B,IAAI,CAACC,WAAW,CAAC,CAAC;IAClBN,IAAI,CAACC,QAAQ,GAAG,IAAIR,KAAK,CAACO,IAAI,CAACK,OAAO,EAAE;MACpCE,UAAU,EAAE,UAAU;MACtBC,QAAQ,EAAE,IAAI,CAACX,MAAM,CAACQ,OAAO;MAC7BI,IAAI,EAAE,IAAI,CAACV,gBAAgB,CAACW,IAAI,CAAC,IAAI;IACzC,CAAC,CAAC;IACF,IAAI,CAACT,QAAQ,GAAGD,IAAI,CAACC,QAAQ;IAC7BD,IAAI,CAACC,QAAQ,CAACU,IAAI,CAAC,CAAC;EACxB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EAEIf,aAAa,CAACE,SAAS,CAACQ,WAAW,GAAG,YAAY;IAC9C,IAAI,CAACM,QAAQ,CAAC,CAAC,CAACC,SAAS,CAACC,GAAG,CAACpB,aAAa,CAAC;EAChD,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EAEIE,aAAa,CAACE,SAAS,CAACc,QAAQ,GAAG,YAAY;IAC3C,OAAO,IAAI,CAACG,UAAU;EAC1B,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EAEInB,aAAa,CAACE,SAAS,CAACM,QAAQ,GAAG,UAAUY,KAAK,EAAE;IAChD,IAAI,CAACD,UAAU,GAAGC,KAAK;EAC3B,CAAC;EACD,OAAOpB,aAAa;AACxB,CAAC,CAAC,CAAE;AACJ,SAASA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}