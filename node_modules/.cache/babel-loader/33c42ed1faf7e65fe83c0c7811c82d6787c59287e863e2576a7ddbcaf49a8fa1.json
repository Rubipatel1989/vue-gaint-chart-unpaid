{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component, addClass, createElement, EventHandler, isNullOrUndefined, extend, merge, SanitizeHtmlHelper } from '@syncfusion/ej2-base';\nimport { removeClass, Complex, Collection, getValue } from '@syncfusion/ej2-base';\nimport { Event, Property, NotifyPropertyChanges, setValue, KeyboardEvents, L10n } from '@syncfusion/ej2-base';\nimport { Column } from '../models/column';\nimport { getNumberFormat } from '@syncfusion/ej2-grids';\nimport { Freeze as FreezeColumn } from '@syncfusion/ej2-grids';\nimport { RowDropSettings, getUid, parentsUntil } from '@syncfusion/ej2-grids';\nimport { LoadingIndicator } from '../models/loading-indicator';\nimport { FilterSettings } from '../models/filter-settings';\nimport { TextWrapSettings } from '../models/textwrap-settings';\nimport { Logger as TreeLogger } from '../actions/logger';\nimport { TreeClipboard } from '../actions/clipboard';\nimport { Selection as TreeGridSelection } from '../actions/selection';\nimport { Print } from '../actions/print';\nimport * as events from '../base/constant';\nimport { SearchSettings } from '../models/search-settings';\nimport { SelectionSettings } from '../models/selection-settings';\nimport { getActualProperties, getObject } from '@syncfusion/ej2-grids';\nimport { DataManager, RemoteSaveAdaptor, Query, JsonAdaptor, Deferred, UrlAdaptor } from '@syncfusion/ej2-data';\nimport { createSpinner, hideSpinner, showSpinner } from '@syncfusion/ej2-popups';\nimport { isRemoteData, isOffline, extendArray, isCountRequired, findChildrenRecords } from '../utils';\nimport { Grid, Logger } from '@syncfusion/ej2-grids';\nimport { Render } from '../renderer/render';\nimport { DataManipulation } from './data';\nimport { iterateArrayOrObject } from '@syncfusion/ej2-grids';\nimport { ToolbarItem, ContextMenuItems } from '../enum';\nimport { PageSettings } from '../models/page-settings';\nimport { AggregateRow } from '../models/summary';\nimport { EditSettings } from '../models/edit-settings';\nimport { SortSettings } from '../models/sort-settings';\nimport { isHidden, getExpandStatus } from '../utils';\nimport { editAction } from '../actions/crud-actions';\nimport { InfiniteScrollSettings } from '../models/infinite-scroll-settings';\nimport * as literals from '../base/constant';\n/**\n * Represents the TreeGrid component.\n * ```html\n * <div id='treegrid'></div>\n * <script>\n *  var treegridObj = new TreeGrid({ allowPaging: true });\n *  treegridObj.appendTo('#treegrid');\n * </script>\n * ```\n */\nvar TreeGrid = /** @class */function (_super) {\n  __extends(TreeGrid, _super);\n  function TreeGrid(options, element) {\n    var _this = _super.call(this, options, element) || this;\n    _this.dataResults = {};\n    _this.uniqueIDCollection = {};\n    _this.uniqueIDFilterCollection = {};\n    _this.changedRecords = 'changedRecords';\n    _this.deletedRecords = 'deletedRecords';\n    _this.addedRecords = 'addedRecords';\n    _this.indentOutdentAction = 'indentOutdentAction';\n    _this.isFromChartSide = false;\n    _this.modifiedRecords = [];\n    _this.stackedHeader = false;\n    _this.objectEqualityChecker = function (old, current) {\n      if (old) {\n        var keys = Object.keys(old);\n        var isEqual = true;\n        var excludeKeys = ['Children', 'childRecords', 'taskData', 'uniqueID', 'parentItem', 'parentUniqueID', 'index'];\n        for (var i = 0; i < keys.length; i++) {\n          if (old[keys[parseInt(i.toString(), 10)]] !== current[keys[parseInt(i.toString(), 10)]] && excludeKeys.indexOf(keys[parseInt(i.toString(), 10)]) === -1) {\n            var isDate = old[keys[parseInt(i.toString(), 10)]] instanceof Date && current[keys[parseInt(i.toString(), 10)]] instanceof Date;\n            if (!isDate || old[keys[parseInt(i.toString(), 10)]].getTime() !== current[keys[parseInt(i.toString(), 10)]].getTime()) {\n              isEqual = false;\n              break;\n            }\n          }\n        }\n        return isEqual;\n      } else {\n        return false;\n      }\n    };\n    TreeGrid_1.Inject(TreeGridSelection, TreeLogger);\n    setValue('mergePersistData', _this.mergePersistTreeGridData, _this);\n    var logger = 'Logger';\n    if (!isNullOrUndefined(_this.injectedModules[\"\" + logger])) {\n      Grid.Inject(Logger);\n    }\n    var freezeModulePresent = _this.injectedModules.filter(function (e) {\n      if (e.prototype.getModuleName() === 'freeze') {\n        Grid.Inject(FreezeColumn);\n      }\n    });\n    _this.grid = new Grid();\n    return _this;\n  }\n  TreeGrid_1 = TreeGrid;\n  /**\n   * Export TreeGrid data to Excel file(.xlsx).\n   *\n   * @param  {ExcelExportProperties | TreeGridExcelExportProperties} excelExportProperties - Defines the export properties of the Tree Grid.\n   * @param  {boolean} isMultipleExport - Define to enable multiple export.\n   * @param  {workbook} workbook - Defines the Workbook if multiple export is enabled.\n   * @param  {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.\n   * @returns {Promise<any>} - Returns promise object of export action\n   */\n  /* eslint-disable */\n  TreeGrid.prototype.excelExport = function (excelExportProperties, isMultipleExport, workbook, isBlob) {\n    /* eslint-enable */\n    return this.excelExportModule.Map(excelExportProperties, isMultipleExport, workbook, isBlob, false);\n  };\n  /**\n   * Export TreeGrid data to CSV file.\n   *\n   * @param  {ExcelExportProperties} excelExportProperties - Defines the export properties of the TreeGrid.\n   * @param  {boolean} isMultipleExport - Define to enable multiple export.\n   * @param  {workbook} workbook - Defines the Workbook if multiple export is enabled.\n   * @param  {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.\n   * @returns {Promise<any>} - Returns promise object of export action\n   */\n  /* eslint-disable */\n  TreeGrid.prototype.csvExport = function (excelExportProperties, isMultipleExport, workbook, isBlob) {\n    /* eslint-enable */\n    return this.excelExportModule.Map(excelExportProperties, isMultipleExport, workbook, isBlob, true);\n  };\n  /**\n   * Export TreeGrid data to PDF document.\n   *\n   * @param {PdfExportProperties | TreeGridPdfExportProperties} pdfExportProperties - Defines the export properties of the Tree Grid.\n   * @param {boolean} isMultipleExport - Define to enable multiple export.\n   * @param {Object} pdfDoc - Defined the Pdf Document if multiple export is enabled.\n   * @param {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.\n   * @returns {Promise<any>} - Returns promise object of export action\n   */\n  TreeGrid.prototype.pdfExport = function (pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {\n    return this.pdfExportModule.Map(pdfExportProperties, isMultipleExport, pdfDoc, isBlob);\n  };\n  /**\n   * Sends a post request to export tree grid to excel file in server side.\n   *\n   * @param  {string} url - Pass URL for server side excel export action.\n   * @returns {void}\n   */\n  TreeGrid.prototype.serverExcelExport = function (url) {\n    this.isExcel = true;\n    this.exportTreeGrid(url);\n  };\n  /**\n   * Sends a post request to export tree grid to pdf file in server side.\n   *\n   * @param  {string} url - Pass URL for server-side pdf export action.\n   * @returns {void}\n   */\n  TreeGrid.prototype.serverPdfExport = function (url) {\n    this.isExcel = false;\n    this.exportTreeGrid(url);\n  };\n  /**\n   * Sends a Post request to export Tree Grid to CSV file in server side.\n   *\n   * @param  {string} url - Pass URL for server-side csv export action.\n   * @returns {void}\n   */\n  TreeGrid.prototype.serverCsvExport = function (url) {\n    this.isExcel = true;\n    this.exportTreeGrid(url);\n  };\n  /**\n   * Exports the TreeGrid data to the specified URL using a POST request.\n   *\n   * @param {string} url - Defines exporting url\n   * @returns {void}\n   */\n  TreeGrid.prototype.exportTreeGrid = function (url) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    var treegrid = this;\n    var query = treegrid.grid.getDataModule().generateQuery(true);\n    var state = new UrlAdaptor().processQuery(new DataManager({\n      url: ''\n    }), query);\n    var queries = JSON.parse(state.data);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var treeGridModel = JSON.parse(this.addOnPersist(['allowPaging', 'pageSettings', 'sortSettings', 'allowPdfExport', 'allowExcelExport', 'aggregates', 'filterSettings', 'columns', 'locale', 'searchSettings', 'idMapping', 'parentIdMapping', 'childMapping', 'treeColumnIndex']));\n    var include = ['field', 'headerText', 'type', 'format', 'visible', 'template', 'index', 'width', 'textAlign', 'headerTextAlign', 'columns'];\n    treeGridModel.filterSettings.columns = queries.where;\n    treeGridModel.searchSettings.fields = queries.search && queries.search[0]['fields'] || [];\n    treeGridModel.sortSettings.columns = queries.sorted;\n    treeGridModel.columns = this.setHeaderText(treeGridModel.columns, include);\n    var form = this.createElement('form', {\n      id: 'ExportForm',\n      styles: 'display:none;'\n    });\n    var treeGridInput = this.createElement('input', {\n      id: 'treeGridInput',\n      attrs: {\n        name: 'treeGridModel'\n      }\n    });\n    treeGridInput.value = JSON.stringify(treeGridModel);\n    form.method = 'POST';\n    form.action = url;\n    form.appendChild(treeGridInput);\n    document.body.appendChild(form);\n    form.submit();\n    form.remove();\n  };\n  /**\n   * Sets the header text and other properties for an array of columns based on specified criteria.\n   *\n   * @param {Column[]} columns - Defines array of columns\n   * @param {string[]} include - Defines array of sting\n   * @returns {Column[]} returns array of columns\n   */\n  TreeGrid.prototype.setHeaderText = function (columns, include) {\n    for (var i = 0; i < columns.length; i++) {\n      var column = this.getColumnByUid(columns[parseInt(i.toString(), 10)].uid);\n      if (this.stackedHeader && isNullOrUndefined(column)) {\n        column = !isNullOrUndefined(columns[parseInt(i.toString(), 10)].field) ? this.getColumnByField(columns[parseInt(i.toString(), 10)].field) : columns[parseInt(i.toString(), 10)];\n      }\n      columns[parseInt(i.toString(), 10)].headerText = column.headerText;\n      if (!isNullOrUndefined(column.template)) {\n        columns[parseInt(i.toString(), 10)].template = 'true';\n      }\n      if (columns[parseInt(i.toString(), 10)].format) {\n        columns[parseInt(i.toString(), 10)].format = getNumberFormat(this.getFormat(column.format), column.type, false, this.currencyCode);\n        if (!this.isExcel && (column.type === 'datetime' || column.type === 'date')) {\n          columns[parseInt(i.toString(), 10)].format = columns[parseInt(i.toString(), 10)].format.toString().replace('AM/PM', 'tt');\n        }\n        columns[parseInt(i.toString(), 10)].type = column.type;\n      }\n      if (columns[parseInt(i.toString(), 10)].columns) {\n        this.setHeaderText(columns[parseInt(i.toString(), 10)].columns, include);\n      }\n      var keys = Object.keys(columns[parseInt(i.toString(), 10)]);\n      for (var j = 0; j < keys.length; j++) {\n        if (include.indexOf(keys[parseInt(j.toString(), 10)]) < 0) {\n          delete columns[parseInt(i.toString(), 10)][keys[parseInt(j.toString(), 10)]];\n        }\n      }\n    }\n    return columns;\n  };\n  /**\n   * Retrieves the appropriate format string from the given format options.\n   *\n   * @param {string | NumberFormatOptions | DateFormatOptions} format - The format options to retrieve the format string from.\n   * @returns {string} The format string extracted from the provided format options.\n   */\n  TreeGrid.prototype.getFormat = function (format) {\n    return typeof format === 'object' ? !isNullOrUndefined(format.format) ? format.format : format.skeleton : format;\n  };\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @private\n   * @returns {string} Returns TreeGrid module name\n   */\n  TreeGrid.prototype.getModuleName = function () {\n    return 'treegrid';\n  };\n  /**\n   * For internal use only - Initialize the event handler;\n   *\n   * @private\n   * @returns {void}\n   */\n  TreeGrid.prototype.preRender = function () {\n    this.TreeGridLocale();\n    this.initProperties();\n    this.defaultLocale = {\n      Above: 'Above',\n      Below: 'Below',\n      Child: 'Child',\n      AddRow: 'Add Row',\n      ExpandAll: 'Expand All',\n      CollapseAll: 'Collapse All',\n      RowIndent: 'Indent',\n      RowOutdent: 'Outdent'\n    };\n    this.l10n = new L10n('treegrid', this.defaultLocale, this.locale);\n    if (this.isSelfReference && isNullOrUndefined(this.childMapping)) {\n      this.childMapping = 'Children';\n    }\n  };\n  /**\n   * Sorts a column with the given options.\n   *\n   * @param {string} columnName - Defines the column name to be sorted.\n   * @param {SortDirection} direction - Defines the direction of sorting field.\n   * @param {boolean} isMultiSort - Specifies whether the previous sorted columns are to be maintained.\n   * @returns {void}\n   */\n  TreeGrid.prototype.sortByColumn = function (columnName, direction, isMultiSort) {\n    if (this.sortModule) {\n      this.sortModule.sortColumn(columnName, direction, isMultiSort);\n    }\n  };\n  /**\n   * Clears all the sorted columns of the TreeGrid.\n   *\n   * @returns {void}\n   */\n  TreeGrid.prototype.clearSorting = function () {\n    if (this.sortModule) {\n      this.sortModule.clearSorting();\n    }\n  };\n  /**\n   * Remove sorted column by field name.\n   *\n   * @param {string} field - Defines the column field name to remove sort.\n   * @returns {void}\n   * @hidden\n   */\n  TreeGrid.prototype.removeSortColumn = function (field) {\n    if (this.sortModule) {\n      this.sortModule.removeSortColumn(field);\n    }\n  };\n  /**\n   * Searches TreeGrid records using the given key.\n   * You can customize the default search option by using the\n   * [`searchSettings`](./#searchsettings/).\n   *\n   * @param  {string} searchString - Defines the key.\n   * @returns {void}\n   */\n  TreeGrid.prototype.search = function (searchString) {\n    this.grid.search(searchString);\n  };\n  /**\n   * Changes the column width to automatically fit its content to ensure that the width shows the content without wrapping/hiding.\n   * > * This method ignores the hidden columns.\n   * > * Uses the `autoFitColumns` method in the `dataBound` event to resize at initial rendering.\n   *\n   * @param  {string |string[]} fieldNames - Defines the column names.\n   * @returns {void}\n   *\n   *\n   *\n   */\n  TreeGrid.prototype.autoFitColumns = function (fieldNames) {\n    this.resizeModule.autoFitColumns(fieldNames);\n    this.updateColumnModel();\n  };\n  /**\n   * Changes the TreeGrid column positions by field names.\n   *\n   * @param  {string} fromFName - Defines the origin field name.\n   * @param  {string} toFName - Defines the destination field name.\n   * @returns {void}\n   */\n  TreeGrid.prototype.reorderColumns = function (fromFName, toFName) {\n    this.grid.reorderColumns(fromFName, toFName);\n  };\n  TreeGrid.prototype.TreeGridLocale = function () {\n    if (!isNullOrUndefined(this.locale)) {\n      /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n      var locale = L10n.locale;\n      var localeObject = {};\n      setValue(this.locale, {}, localeObject);\n      var gridLocale = void 0;\n      gridLocale = {};\n      gridLocale = getObject(this.locale, locale);\n      var treeGridLocale = void 0;\n      treeGridLocale = {};\n      treeGridLocale = getObject(this.getModuleName(), gridLocale);\n      setValue('grid', treeGridLocale, getObject(this.locale, localeObject));\n      L10n.load(localeObject);\n    }\n  };\n  /**\n   * By default, prints all the pages of the TreeGrid and hides the pager.\n   * > You can customize print options using the\n   * [`printMode`](./#printmode).\n   *\n   * @returns {void}\n   */\n  TreeGrid.prototype.print = function () {\n    this.printModule.print();\n  };\n  TreeGrid.prototype.treeGridkeyActionHandler = function (e) {\n    if (this.allowKeyboard) {\n      var target = void 0;\n      var parentTarget = void 0;\n      var column = void 0;\n      var row = void 0;\n      var summaryElement = void 0;\n      switch (e.action) {\n        case 'ctrlDownArrow':\n          this.expandAll();\n          break;\n        case 'ctrlUpArrow':\n          this.collapseAll();\n          break;\n        case 'ctrlShiftUpArrow':\n          target = e.target;\n          column = target.closest('.e-rowcell');\n          if (!isNullOrUndefined(column)) {\n            row = column.closest('tr');\n            if (!isNullOrUndefined(row) && !isNullOrUndefined(row.getElementsByClassName('e-treegridexpand')[0])) {\n              this.expandCollapseRequest(row.querySelector('.e-treegridexpand'));\n            }\n          }\n          break;\n        case 'ctrlShiftDownArrow':\n          target = e.target;\n          column = target.closest('.e-rowcell');\n          if (!isNullOrUndefined(column)) {\n            row = column.closest('tr');\n            if (!isNullOrUndefined(row) && !isNullOrUndefined(row.getElementsByClassName('e-treegridcollapse')[0])) {\n              this.expandCollapseRequest(row.querySelector('.e-treegridcollapse'));\n            }\n          }\n          break;\n        case 'downArrow':\n          if (!this.enableVirtualization && isNullOrUndefined(this.rowTemplate)) {\n            target = e.target;\n            if (!isNullOrUndefined(target.querySelectorAll('.e-rowcell'))) {\n              target = parentsUntil(target, 'e-rowcell');\n            }\n            if (!isNullOrUndefined(target)) {\n              parentTarget = target.parentElement;\n              if (!isNullOrUndefined(parentTarget)) {\n                var cellIndex = parentTarget.cellIndex;\n                if (this.grid.getColumnByIndex(cellIndex).editType === 'dropdownedit' && isNullOrUndefined(this.grid.getColumnByIndex(cellIndex).edit['obj'])) {\n                  parentTarget = target;\n                }\n                summaryElement = this.findnextRowElement(parentTarget);\n                if (summaryElement !== null) {\n                  var cellIndex_1 = target.cellIndex;\n                  var row_1 = summaryElement.children[parseInt(cellIndex_1.toString(), 10)];\n                  if (!isNullOrUndefined(row_1) && !this.grid.isEdit) {\n                    addClass([row_1], 'e-focused');\n                    addClass([row_1], 'e-focus');\n                  }\n                } else {\n                  this.clearSelection();\n                }\n              }\n            }\n          }\n          break;\n        case 'upArrow':\n          if (!this.enableVirtualization && isNullOrUndefined(this.rowTemplate)) {\n            target = e.target;\n            if (!isNullOrUndefined(target.querySelectorAll('.e-rowcell'))) {\n              target = parentsUntil(target, 'e-rowcell');\n            }\n            if (!isNullOrUndefined(target)) {\n              parentTarget = target.parentElement;\n              if (!isNullOrUndefined(parentTarget)) {\n                var cellIndex = parentTarget.cellIndex;\n                if (this.grid.getColumnByIndex(cellIndex).editType === 'dropdownedit' && isNullOrUndefined(this.grid.getColumnByIndex(cellIndex).edit['obj'])) {\n                  parentTarget = target;\n                }\n                summaryElement = this.findPreviousRowElement(parentTarget);\n                if (summaryElement !== null) {\n                  var cellIndex_2 = target.cellIndex;\n                  if (!isNullOrUndefined(cellIndex_2)) {\n                    var row_2 = summaryElement.children[parseInt(cellIndex_2.toString(), 10)];\n                    if (!isNullOrUndefined(row_2) && !this.grid.isEdit) {\n                      addClass([row_2], 'e-focused');\n                      addClass([row_2], 'e-focus');\n                    }\n                  }\n                } else {\n                  this.clearSelection();\n                }\n              }\n            }\n          }\n      }\n    }\n  };\n  // Get Proper Row Element from the summary\n  TreeGrid.prototype.findnextRowElement = function (summaryRowElement) {\n    var rowElement = summaryRowElement.nextElementSibling;\n    if (rowElement !== null && (rowElement.className.indexOf('e-summaryrow') !== -1 || rowElement.classList.contains('e-childrow-hidden'))) {\n      rowElement = this.findnextRowElement(rowElement);\n    }\n    return rowElement;\n  };\n  // Get Proper Row Element from the summary\n  TreeGrid.prototype.findPreviousRowElement = function (summaryRowElement) {\n    var rowElement = summaryRowElement.previousElementSibling;\n    if (rowElement !== null && (rowElement.className.indexOf('e-summaryrow') !== -1 || rowElement.classList.contains('e-childrow-hidden'))) {\n      rowElement = this.findPreviousRowElement(rowElement);\n    }\n    return rowElement;\n  };\n  TreeGrid.prototype.initProperties = function () {\n    this.defaultLocale = {};\n    this.flatData = [];\n    this.infiniteScrollData = [];\n    this.remoteCollapsedData = [];\n    this.remoteExpandedData = [];\n    this.parentData = [];\n    this.columnModel = [];\n    this.isExpandAll = false;\n    this.isCollapseAll = false;\n    this.keyConfigs = {\n      ctrlDownArrow: 'ctrl+downarrow',\n      ctrlUpArrow: 'ctrl+uparrow',\n      ctrlShiftUpArrow: 'ctrl+shift+uparrow',\n      ctrlShiftDownArrow: 'ctrl+shift+downarrow',\n      downArrow: 'downArrow',\n      upArrow: 'upArrow'\n    };\n    this.isLocalData = !(this.dataSource instanceof DataManager) || this.dataSource.dataSource.offline || !isNullOrUndefined(this.dataSource.ready) || this.dataSource.adaptor instanceof RemoteSaveAdaptor;\n    this.isSelfReference = !isNullOrUndefined(this.parentIdMapping);\n  };\n  /**\n   * Binding events to the element while component creation.\n   *\n   * @hidden\n   * @returns {void}\n   */\n  TreeGrid.prototype.wireEvents = function () {\n    EventHandler.add(this.grid.element, 'click', this.mouseClickHandler, this);\n    EventHandler.add(this.element, 'touchend', this.mouseClickHandler, this);\n    this.keyboardModule = new KeyboardEvents(this.element, {\n      keyAction: this.treeGridkeyActionHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n    if (this.allowKeyboard) {\n      this.element.tabIndex = this.element.tabIndex === -1 ? 0 : this.element.tabIndex;\n    }\n  };\n  /**\n   * To provide the array of modules needed for component rendering\n   *\n   * @returns {ModuleDeclaration[]} - Returns TreeGrid modules collection\n   * @hidden\n   */\n  TreeGrid.prototype.requiredModules = function () {\n    var modules = [];\n    var splitFrozenCount = 'splitFrozenCount';\n    if (!this.isReact && isNullOrUndefined(this['changedProperties'].columns)) {\n      this.grid[\"\" + splitFrozenCount](this.getColumns());\n    }\n    if (this.isDestroyed) {\n      return modules;\n    }\n    modules.push({\n      member: 'filter',\n      args: [this, this.filterSettings],\n      name: 'Filter'\n    });\n    if (!isNullOrUndefined(this.toolbar)) {\n      modules.push({\n        member: 'toolbar',\n        args: [this],\n        name: 'Toolbar'\n      });\n    }\n    if (this.contextMenuItems) {\n      modules.push({\n        member: 'contextMenu',\n        args: [this],\n        name: 'ContextMenu'\n      });\n    }\n    if (this.allowPaging) {\n      modules.push({\n        member: 'pager',\n        args: [this, this.pageSettings],\n        name: 'Page'\n      });\n    }\n    if (this.allowReordering) {\n      modules.push({\n        member: 'reorder',\n        args: [this],\n        name: 'Reorder'\n      });\n    }\n    if (this.allowSorting) {\n      modules.push({\n        member: 'sort',\n        args: [this],\n        name: 'Sort'\n      });\n    }\n    if (this.aggregates.length > 0) {\n      modules.push({\n        member: 'summary',\n        args: [this],\n        name: 'Aggregate'\n      });\n    }\n    if (this.resizeCheck()) {\n      modules.push({\n        member: 'resize',\n        args: [this],\n        name: 'Resize'\n      });\n    }\n    if (this.allowExcelExport) {\n      modules.push({\n        member: 'ExcelExport',\n        args: [this],\n        name: 'ExcelExport'\n      });\n    }\n    var freezePresent = this.injectedModules.filter(function (e) {\n      return e.prototype.getModuleName() === 'freeze';\n    });\n    if ((this.frozenColumns || this.frozenRows || this.getFrozenColumns() || this.grid.getFrozenLeftColumnsCount() || this.grid.getFrozenRightColumnsCount()) && freezePresent.length > 0) {\n      modules.push({\n        member: 'freeze',\n        args: [this],\n        name: 'Freeze'\n      });\n    }\n    if (this.detailTemplate) {\n      modules.push({\n        member: 'detailRow',\n        args: [this],\n        name: 'DetailRow'\n      });\n    }\n    if (this.allowPdfExport) {\n      modules.push({\n        member: 'PdfExport',\n        args: [this],\n        name: 'PdfExport'\n      });\n    }\n    if (this.showColumnMenu) {\n      modules.push({\n        member: 'columnMenu',\n        args: [this],\n        name: 'ColumnMenu'\n      });\n    }\n    if (this.showColumnChooser) {\n      modules.push({\n        member: 'ColumnChooser',\n        args: [this],\n        name: 'ColumnChooser'\n      });\n    }\n    this.extendRequiredModules(modules);\n    return modules;\n  };\n  TreeGrid.prototype.resizeCheck = function () {\n    var columnMenu = this.showColumnMenu && (!this.columnMenuItems || this.columnMenuItems.filter(function (c) {\n      return c === 'AutoFit' || c === 'AutoFitAll';\n    }).length) ? true : false;\n    var contextMenu = this.contextMenuItems && this.contextMenuItems.filter(function (c) {\n      return c === 'AutoFit' || c === 'AutoFitAll';\n    }).length ? true : false;\n    return this.allowResizing || columnMenu || contextMenu;\n  };\n  TreeGrid.prototype.extendRequiredModules = function (modules) {\n    var IsRowDDInjected = this.injectedModules.filter(function (e) {\n      return e.prototype.getModuleName() === 'rowDragAndDrop';\n    });\n    if (this.allowRowDragAndDrop || IsRowDDInjected.length) {\n      if (!isNullOrUndefined(this.toolbar) && (this.toolbar['includes']('Indent') || this.toolbar['includes']('Outdent'))) {\n        this.isIndentEnabled = true;\n      }\n      modules.push({\n        member: 'rowDragAndDrop',\n        args: [this],\n        name: 'RowDD'\n      });\n    }\n    if (this.editSettings.allowAdding || this.editSettings.allowDeleting || this.editSettings.allowEditing) {\n      modules.push({\n        member: 'edit',\n        args: [this],\n        name: 'Edit'\n      });\n    }\n    if (!isNullOrUndefined(this.columns) && this.isCommandColumn(this.columns)) {\n      modules.push({\n        member: 'commandColumn',\n        args: [this],\n        name: 'CommandColumn'\n      });\n    }\n    if (this.allowSelection) {\n      modules.push({\n        member: 'selection',\n        args: [this],\n        name: 'Selection'\n      });\n    }\n    if (this.enableVirtualization) {\n      modules.push({\n        member: 'virtualScroll',\n        args: [this],\n        name: 'VirtualScroll'\n      });\n    }\n    if (this.enableInfiniteScrolling) {\n      modules.push({\n        member: 'infiniteScroll',\n        args: [this],\n        name: 'InfiniteScroll'\n      });\n    }\n    modules.push({\n      member: 'logger',\n      args: [this.grid]\n    });\n  };\n  TreeGrid.prototype.isCommandColumn = function (columns) {\n    var _this = this;\n    return columns.some(function (col) {\n      if (col.columns) {\n        return _this.isCommandColumn(col.columns);\n      }\n      return !!(col.commands || col.commandsTemplate);\n    });\n  };\n  /**\n   * Unbinding events from the element while component destroy.\n   *\n   * @hidden\n   * @returns {void}\n   */\n  TreeGrid.prototype.unwireEvents = function () {\n    if (this.grid && this.grid.element) {\n      EventHandler.remove(this.grid.element, 'click', this.mouseClickHandler);\n    }\n    if (this.element) {\n      EventHandler.remove(this.element, 'touchend', this.mouseClickHandler);\n      if (this.keyboardModule) {\n        this.keyboardModule.destroy();\n        this.keyboardModule = null;\n      }\n      if (this.allowKeyboard) {\n        this.element.removeAttribute('tabIndex');\n      }\n    }\n  };\n  /**\n   * Logs tree grid error message on console\n   *\n   * @param {string | string[]} types - Tree Grid error type\n   * @param {object} args - Error details\n   * @hidden\n   * @private\n   * @returns {void}\n   */\n  TreeGrid.prototype.log = function (types, args) {\n    if (this.loggerModule) {\n      this.loggerModule.treeLog(types, args, this);\n    }\n  };\n  /**\n   * For internal use only - To Initialize the component rendering.\n   *\n   * @private\n   * @returns {void}\n   */\n  TreeGrid.prototype.render = function () {\n    var _this = this;\n    if (this.isReact) {\n      this.grid.isReact = true;\n      this.grid.portals = [];\n    }\n    if (this.isVue) {\n      this.grid.isVue = true;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.grid.vueInstance = this.vueInstance;\n    }\n    createSpinner({\n      target: this.element\n    }, this.createElement);\n    this.log(['mapping_fields_missing']);\n    this.renderModule = new Render(this);\n    this.dataModule = new DataManipulation(this);\n    this.printModule = new Print(this);\n    this.trigger(events.load);\n    this.autoGenerateColumns();\n    this.initialRender = true;\n    if (!isNullOrUndefined(this.dataSource)) {\n      this.convertTreeData(this.dataSource);\n    }\n    this.loadGrid();\n    if (this.element.classList.contains('e-treegrid') && this.rowDropSettings.targetID) {\n      this.grid.rowDropSettings.targetID += '_gridcontrol';\n    }\n    this.addListener();\n    var gridContainer = createElement('div', {\n      id: this.element.id + '_gridcontrol'\n    });\n    addClass([this.element], 'e-treegrid');\n    if (!isNullOrUndefined(this.height) && typeof this.height === 'string' && this.height.indexOf('%') !== -1) {\n      this.element.style.height = this.height;\n    }\n    if (!isNullOrUndefined(this.width) && typeof this.width === 'string' && this.width.indexOf('%') !== -1) {\n      this.element.style.width = this.width;\n    }\n    this.element.appendChild(gridContainer);\n    var gridRequiredModules = this.grid.requiredModules;\n    this.grid.requiredModules = function () {\n      var modules = [];\n      modules = gridRequiredModules.apply(this);\n      for (var i = 0; i < modules.length; i++) {\n        if (modules[parseInt(i.toString(), 10)].member === 'virtualscroll') {\n          modules[parseInt(i.toString(), 10)].member = 'treeVirtualScroll';\n        }\n      }\n      return modules;\n    };\n    var root = 'root';\n    this.grid[\"\" + root] = this[\"\" + root] ? this[\"\" + root] : this;\n    this.grid.appendTo(gridContainer);\n    this.actionFailureHandler();\n    var gridContent = this.element.getElementsByClassName('e-gridcontent')[0].childNodes[0];\n    gridContent.setAttribute('tabindex', '0');\n    var contentTable = this.element.getElementsByClassName('e-content')[0].querySelector('.e-table');\n    if (!isNullOrUndefined(contentTable)) {\n      contentTable.setAttribute('role', 'treegrid');\n    }\n    if (this.isIndentEnabled) {\n      this.refreshToolbarItems();\n    }\n    this.wireEvents();\n    this.renderComplete();\n    var destroyTemplate = 'destroyTemplate';\n    var destroyTemplateFn = this.grid[\"\" + destroyTemplate];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.grid[\"\" + destroyTemplate] = function (args, index) {\n      destroyTemplateFn.apply(_this.grid);\n      var portals = 'portals';\n      if (!(_this.isReact && isNullOrUndefined(_this[\"\" + portals]))) {\n        _this.clearTemplate(args, index);\n      }\n    };\n  };\n  TreeGrid.prototype.actionFailureHandler = function () {\n    var _this = this;\n    var failureCases = [];\n    var primaryKeyFieldNames = this.getPrimaryKeyFieldNames();\n    var RecordsCount = this.flatData.length;\n    if ((this.editSettings.allowAdding || this.editSettings.allowDeleting || this.editSettings.allowEditing) && primaryKeyFieldNames.length === 0 && RecordsCount !== 0) {\n      failureCases.push('For the CRUD actions, it is necessary to enable Primary Key field for the unique data column.');\n    }\n    if (this.allowRowDragAndDrop && primaryKeyFieldNames.length === 0 && RecordsCount !== 0) {\n      failureCases.push('For the Row Drag and Drop actions, it is necessary to enable Primary Key field for the unique data column.');\n    }\n    if (this.allowPaging && this.enableVirtualization) {\n      failureCases.push('Paging is not allowed in virtualization case.');\n    }\n    if (RecordsCount === 0 && this.columns.length === 0) {\n      failureCases.push('Either of the Data source or columns should be given.');\n    }\n    if (this.frozenColumns > 0 && this.columnModel.filter(function (col) {\n      return col.isFrozen;\n    })) {\n      failureCases.push('Use only one attribute for Frozen either IsFrozen or FrozenColumns.');\n    }\n    if (this.enableVirtualization && !isNullOrUndefined(this.detailTemplate)) {\n      failureCases.push('Virtual scrolling is not compatible with the detail template');\n    }\n    if ((this.frozenColumns > 0 || this.columnModel.filter(function (col) {\n      return col.isFrozen;\n    }) || this.frozenRows > 0) && (!isNullOrUndefined(this.detailTemplate) || !isNullOrUndefined(this.rowTemplate))) {\n      failureCases.push('Frozen rows and columns are not supported with the Detail template and row template.');\n    }\n    if ((this.frozenColumns > 0 || this.columnModel.filter(function (col) {\n      return col.isFrozen;\n    }).length > 0 || this.frozenRows > 0) && this.editSettings.mode === 'Cell') {\n      failureCases.push('Frozen rows and columns are not supported with cell editing.');\n    }\n    if (this.allowSelection && !isNullOrUndefined(this.rowTemplate)) {\n      failureCases.push('Selection is not supported in RowTemplate');\n    }\n    if (this.treeColumnIndex < 0) {\n      failureCases.push('For showing tree structure it is must to set the TreeColumnIndex value.');\n    }\n    if (this.treeColumnIndex >= this.columns.length) {\n      failureCases.push('TreeColumnIndex value should not exceed the total column count.');\n    }\n    if (this.enableVirtualization && (this.columnModel.some(function (col) {\n      return /%$/.test(col.width);\n    }) || /%$/.test(this.height.toString()))) {\n      failureCases.push('column width and height should be in pixels');\n    }\n    if (this.childMapping !== 'Children' && !isNullOrUndefined(this.idMapping)) {\n      failureCases.push('Both IdMapping and ChildMapping should not be used together for tree grid rendering.');\n    }\n    if (!isNullOrUndefined(this.idMapping) && isNullOrUndefined(this.parentIdMapping) || isNullOrUndefined(this.idMapping) && !isNullOrUndefined(this.parentIdMapping)) {\n      failureCases.push('IdMapping and ParentIdMapping properties should be defined and vice versa.');\n    }\n    var checkboxColumn = this.columnModel.filter(function (col) {\n      return col.showCheckbox;\n    });\n    var treeColumn = this.columns[this.treeColumnIndex];\n    if (checkboxColumn.length !== 0) {\n      if (checkboxColumn !== treeColumn) {\n        failureCases.push('ShowCheckbox column should not be defined other than the tree column.');\n      }\n      if (checkboxColumn.length > 1) {\n        failureCases.push('Only one column can have the ShowCheckbox option enabled.');\n      }\n    }\n    var alignColumn = this.columnModel.filter(function (col) {\n      return col.textAlign === 'Right' && col.field === _this.columnModel[_this.treeColumnIndex].field;\n    });\n    if (alignColumn.length !== 0) {\n      failureCases.push('TextAlign right for the tree column is not applicable.');\n    }\n    if (failureCases.length > 0) {\n      var failureEventArgs_1 = {\n        error: {}\n      };\n      failureCases.forEach(function (failureCase, index) {\n        failureEventArgs_1.error[parseInt(index.toString(), 10)] = failureCase;\n      });\n      this.trigger(events.actionFailure, failureEventArgs_1);\n    }\n  };\n  TreeGrid.prototype.refreshToolbarItems = function () {\n    var toolbarElement = this.toolbarModule.getToolbar();\n    var indentID = this.element.id + '_gridcontrol_indent';\n    var outdentID = this.element.id + '_gridcontrol_outdent';\n    var indentElement = toolbarElement.querySelector('#' + indentID).parentElement;\n    var outdentElement = toolbarElement.querySelector('#' + outdentID).parentElement;\n    indentElement.classList.add('e-hidden');\n    outdentElement.classList.add('e-hidden');\n  };\n  TreeGrid.prototype.afterGridRender = function () {\n    if (!isNullOrUndefined(this.grid.clipboardModule)) {\n      this.grid.clipboardModule.destroy();\n    }\n    this.clipboardModule = this.grid.clipboardModule = new TreeClipboard(this, this.grid.serviceLocator);\n  };\n  TreeGrid.prototype.convertTreeData = function (data) {\n    var _this = this;\n    if (isCountRequired(this)) {\n      data = getValue('result', data);\n    }\n    if (data instanceof Array && data.length > 0 && Object.prototype.hasOwnProperty.call(data[0], 'level')) {\n      this.flatData = data;\n      this.flatData.filter(function (e) {\n        setValue('uniqueIDCollection.' + e.uniqueID, e, _this);\n        if (e.level === 0) {\n          _this.parentData.push(e);\n        }\n      });\n    } else {\n      if (isCountRequired(this)) {\n        var griddata = getValue('result', this.dataSource);\n        this.dataModule.convertToFlatData(griddata);\n      } else {\n        this.dataModule.convertToFlatData(data);\n      }\n    }\n  };\n  // private getGridData(): Object {\n  //   if (isRemoteData(this)) {\n  //     return this.dataSource;\n  //   } else if (this.isLocalData && this.dataSource instanceof DataManager) {\n  //     this.dataSource.dataSource.json = this.flatData;\n  //     return this.dataSource;\n  //   }\n  //   return this.flatData;\n  // }\n  TreeGrid.prototype.bindGridProperties = function () {\n    this.bindedDataSource();\n    this.grid.enableRtl = this.enableRtl;\n    this.grid.allowKeyboard = this.allowKeyboard;\n    this.grid.columns = this.getGridColumns(this.columns);\n    this.grid.allowExcelExport = this.allowExcelExport;\n    this.grid.allowPdfExport = this.allowPdfExport;\n    this.grid.query = this.query;\n    this.grid.columnQueryMode = this.columnQueryMode;\n    this.grid.allowPaging = this.allowPaging;\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    this.grid.pageSettings = getActualProperties(this.pageSettings);\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    this.grid.pagerTemplate = this.pagerTemplate;\n    this.grid.showColumnMenu = this.showColumnMenu;\n    this.grid.allowSorting = this.allowSorting;\n    this.grid.allowFiltering = this.allowFiltering;\n    this.grid.enableVirtualization = this.enableVirtualization;\n    this.grid.enableColumnVirtualization = this.enableColumnVirtualization;\n    this.grid.enableInfiniteScrolling = this.enableInfiniteScrolling;\n    this.grid.infiniteScrollSettings = this.infiniteScrollSettings;\n    this.grid.enableVirtualMaskRow = this.enableVirtualMaskRow;\n    this.grid.loadingIndicator = this.loadingIndicator;\n    this.grid.width = this.width;\n    this.grid.height = this.height;\n    this.grid.enableAltRow = this.enableAltRow;\n    this.grid.allowReordering = this.allowReordering;\n    this.grid.allowTextWrap = this.allowTextWrap;\n    this.grid.allowResizing = this.allowResizing;\n    this.grid.enableHover = this.enableHover;\n    this.grid.enableAutoFill = this.enableAutoFill;\n    this.grid.enableAdaptiveUI = this.enableAdaptiveUI;\n    this.grid.enableImmutableMode = this.enableImmutableMode;\n    this.grid.allowRowDragAndDrop = this.allowRowDragAndDrop;\n    this.grid.rowDropSettings = getActualProperties(this.rowDropSettings);\n    this.grid.rowHeight = this.rowHeight;\n    this.grid.gridLines = this.gridLines;\n    this.grid.allowSelection = this.allowSelection;\n    this.grid.toolbar = getActualProperties(this.getGridToolbar());\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    this.grid.toolbarTemplate = this.toolbarTemplate;\n    this.grid.showColumnChooser = this.showColumnChooser;\n    this.grid.filterSettings = getActualProperties(this.filterSettings);\n    this.grid.selectionSettings = getActualProperties(this.selectionSettings);\n    this.grid.sortSettings = getActualProperties(this.sortSettings);\n    this.grid.searchSettings = getActualProperties(this.searchSettings);\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    this.grid.aggregates = getActualProperties(this.aggregates);\n    this.grid.textWrapSettings = getActualProperties(this.textWrapSettings);\n    this.grid.printMode = getActualProperties(this.printMode);\n    this.grid.locale = getActualProperties(this.locale);\n    this.grid.selectedRowIndex = this.selectedRowIndex;\n    this.grid.contextMenuItems = getActualProperties(this.getContextMenu());\n    this.grid.columnMenuItems = getActualProperties(this.columnMenuItems);\n    this.grid.editSettings = this.getGridEditSettings();\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    this.grid.rowTemplate = getActualProperties(this.rowTemplate);\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    this.grid.detailTemplate = getActualProperties(this.detailTemplate);\n    this.grid.frozenRows = this.frozenRows;\n    this.grid.frozenColumns = this.frozenColumns;\n    this.grid.clipMode = getActualProperties(this.clipMode);\n    var templateInstance = 'templateDotnetInstance';\n    this.grid[\"\" + templateInstance] = this[\"\" + templateInstance];\n    var isJsComponent = 'isJsComponent';\n    this.grid[\"\" + isJsComponent] = true;\n    var enableHtmlSanitizer = 'enableHtmlSanitizer';\n    this.grid[\"\" + enableHtmlSanitizer] = this.enableHtmlSanitizer;\n  };\n  TreeGrid.prototype.triggerEvents = function (args) {\n    this.trigger(getObject('name', args), args);\n  };\n  TreeGrid.prototype.IsExpandCollapseClicked = function (args) {\n    if (!this.isFromChartSide && !isNullOrUndefined(args.target) && (args.target.classList.contains('e-treegridexpand') || args.target.classList.contains('e-treegridcollapse') || args.target.classList.contains('e-summarycell')) && !this.selectionSettings.checkboxOnly) {\n      if (!isNullOrUndefined(args.data) && args.data['hasChildRecords'] || args.rowIndex !== -1 && isNullOrUndefined(args.data)) {\n        args.cancel = true;\n        return;\n      }\n    }\n  };\n  TreeGrid.prototype.bindGridEvents = function () {\n    var _this = this;\n    this.grid.rowSelecting = function (args) {\n      _this.IsExpandCollapseClicked(args);\n      if (!isNullOrUndefined(args.data) && _this.selectionSettings.persistSelection && _this.columnModel.filter(function (col) {\n        return col.type === 'checkbox';\n      }).length > 0 && isRemoteData(_this)) {\n        if (!isNullOrUndefined(args.data.parentItem) || args.isHeaderCheckboxClicked) {\n          _this.parentQuery = _this.query.queries.filter(function (q) {\n            return q.e.field === _this.parentIdMapping;\n          });\n          _this.query.queries = _this.query.queries.slice(0, 0);\n        }\n      }\n      if (_this.pageSettings.pageSizeMode === 'Root') {\n        _this.grid.selectionModule['totalRecordsCount'] = _this.grid.currentViewData.length;\n      }\n      _this.trigger(events.rowSelecting, args);\n    };\n    this.grid.rowDeselecting = function (args) {\n      _this.IsExpandCollapseClicked(args);\n      if (!isNullOrUndefined(args.data) && _this.selectionSettings.persistSelection && _this.columnModel.filter(function (col) {\n        return col.type === 'checkbox';\n      }).length > 0 && isRemoteData(_this)) {\n        _this.parentQuery = _this.query.queries.filter(function (q) {\n          return q.e.field === _this.parentIdMapping;\n        });\n        _this.query.queries = _this.query.queries.slice(0, 0);\n      }\n      _this.trigger(events.rowDeselecting, args);\n    };\n    this.grid.rowSelected = function (args) {\n      if (_this.enableVirtualization && args.isHeaderCheckboxClicked && _this.grid.currentViewData.length !== _this.grid.selectionModule.selectedRowIndexes.length) {\n        var updateRowSelection = 'updateRowSelection';\n        for (var i = 0; i < _this.getRows().length; i++) {\n          if (_this.getRows()[parseInt(i.toString(), 10)].getElementsByClassName('e-frame e-icons e-uncheck').length) {\n            _this.grid.selectionModule[\"\" + updateRowSelection](_this.getRows()[parseInt(i.toString(), 10)], _this.getCurrentViewRecords()[parseInt(i.toString(), 10)].index);\n          }\n        }\n      }\n      _this.selectedRowIndex = _this.grid.selectedRowIndex;\n      _this.notify(events.rowSelected, args);\n      _this.trigger(events.rowSelected, args);\n    };\n    this.grid.rowDeselected = function (args) {\n      _this.selectedRowIndex = _this.grid.selectedRowIndex;\n      if (!isNullOrUndefined(args.data)) {\n        _this.notify(events.rowDeselected, args);\n      }\n      _this.trigger(events.rowDeselected, args);\n    };\n    this.grid.resizeStop = function (args) {\n      _this.updateColumnModel();\n      _this.trigger(events.resizeStop, args);\n    };\n    this.grid.excelQueryCellInfo = function (args) {\n      _this.notify('excelCellInfo', args);\n      args = _this.dataResults;\n    };\n    this.grid.pdfQueryCellInfo = function (args) {\n      _this.notify('pdfCellInfo', args);\n      args = _this.dataResults;\n    };\n    this.grid.checkBoxChange = function (args) {\n      _this.trigger(events.checkboxChange, args);\n    };\n    this.grid.pdfExportComplete = this.triggerEvents.bind(this);\n    this.grid.excelExportComplete = this.triggerEvents.bind(this);\n    this.grid.excelHeaderQueryCellInfo = this.triggerEvents.bind(this);\n    this.grid.pdfHeaderQueryCellInfo = this.triggerEvents.bind(this);\n    this.grid.dataSourceChanged = this.triggerEvents.bind(this);\n    this.grid.recordDoubleClick = this.triggerEvents.bind(this);\n    this.grid.cellDeselected = this.triggerEvents.bind(this);\n    this.grid.cellDeselecting = this.triggerEvents.bind(this);\n    this.grid.columnMenuOpen = this.triggerEvents.bind(this);\n    this.grid.columnMenuClick = this.triggerEvents.bind(this);\n    this.grid.cellSelected = this.triggerEvents.bind(this);\n    this.grid.headerCellInfo = this.triggerEvents.bind(this);\n    this.grid.resizeStart = this.triggerEvents.bind(this);\n    this.grid.resizing = this.triggerEvents.bind(this);\n    this.grid.columnDrag = this.triggerEvents.bind(this);\n    this.grid.columnDragStart = this.triggerEvents.bind(this);\n    this.grid.columnDrop = this.triggerEvents.bind(this);\n    this.grid.beforePrint = this.triggerEvents.bind(this);\n    this.grid.beforeCopy = this.triggerEvents.bind(this);\n    this.grid.beforePaste = function (args) {\n      var rows = _this.getRows();\n      var rowIndex = 'rowIndex';\n      while (rows[args[\"\" + rowIndex]].classList.contains('e-summaryrow')) {\n        args[\"\" + rowIndex]++;\n      }\n      _this.trigger(events.beforePaste, args);\n    };\n    this.grid.load = function () {\n      _this.grid.on('initial-end', _this.afterGridRender, _this);\n      if (!isNullOrUndefined(_this.loggerModule)) {\n        var loggerModule = 'loggerModule';\n        _this.loggerModule = _this.grid[\"\" + loggerModule] = new TreeLogger(_this.grid);\n      }\n    };\n    this.grid.printComplete = this.triggerEvents.bind(this);\n    this.grid.actionFailure = function (args) {\n      _this.trigger(events.actionFailure, args);\n    };\n    this.extendedGridDataBoundEvent();\n    this.extendedGridEvents();\n    this.extendedGridActionEvents();\n    this.extendedGridEditEvents();\n    this.bindGridDragEvents();\n    this.bindCallBackEvents();\n  };\n  TreeGrid.prototype.lastRowBorder = function (visiblerow, isAddBorder) {\n    for (var j = 0; j < visiblerow.cells.length; j++) {\n      if (isAddBorder) {\n        addClass([visiblerow.cells[parseInt(j.toString(), 10)]], 'e-lastrowcell');\n      } else {\n        removeClass([visiblerow.cells[parseInt(j.toString(), 10)]], 'e-lastrowcell');\n      }\n    }\n  };\n  TreeGrid.prototype.isPixelHeight = function () {\n    if (this.height !== 'auto' && this.height.toString().indexOf('%') === -1) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  TreeGrid.prototype.extendedGridDataBoundEvent = function () {\n    var _this = this;\n    this.grid.dataBound = function (args) {\n      _this.updateRowTemplate();\n      _this.updateColumnModel();\n      _this.updateAltRow(_this.getRows());\n      _this.notify('dataBoundArg', args);\n      if (isRemoteData(_this) && !isOffline(_this) && !_this.hasChildMapping) {\n        var req = void 0;\n        if (_this.dataResults.result) {\n          req = 0;\n        } else {\n          req = 1;\n        }\n        setValue('grid.contentModule.isLoaded', !(req > 0), _this);\n      }\n      if (_this.isPixelHeight() && _this.initialRender) {\n        var rows = _this.getContentTable().rows;\n        var totalRows = [].slice.call(rows);\n        for (var i = totalRows.length - 1; i > 0; i--) {\n          if (!isHidden(totalRows[parseInt(i.toString(), 10)])) {\n            if (totalRows[parseInt(i.toString(), 10)].nextElementSibling) {\n              _this.lastRowBorder(totalRows[parseInt(i.toString(), 10)], true);\n            }\n            break;\n          }\n        }\n      }\n      var action = 'action';\n      if (_this.enableVirtualization && _this.selectionSettings.persistSelection && (_this.dataResults[\"\" + action] === 'expand' || _this.dataResults[\"\" + action] === 'collapse')) {\n        var refreshPersistSelection = 'refreshPersistSelection';\n        _this.grid.selectionModule[\"\" + refreshPersistSelection]();\n        if (_this.grid.selectionSettings.type === 'Single') {\n          var updateRowSelection = 'updateRowSelection';\n          var index = _this.getCurrentViewRecords().indexOf(_this.grid.selectionModule['data']);\n          _this.grid.selectionModule[\"\" + updateRowSelection](_this.getRows()[parseInt(index.toString(), 10)], index);\n        }\n      }\n      if (_this.enableVirtualization && _this.selectionSettings.persistSelection && !isNullOrUndefined(_this.virtualScrollModule.prevSelectedRecord)) {\n        for (var i = 0; i < _this.virtualScrollModule.prevSelectedRecord.length; i++) {\n          var updateRowSelection = 'updateRowSelection';\n          var index =\n          // eslint-disable-next-line max-len\n          _this.getCurrentViewRecords().indexOf(_this.virtualScrollModule.prevSelectedRecord[parseInt(i.toString(), 10)]);\n          _this.grid.selectionModule[\"\" + updateRowSelection](_this.getRows()[parseInt(index.toString(), 10)], index);\n        }\n      }\n      _this.trigger(events.dataBound, args);\n      _this.initialRender = false;\n    };\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    var treeGrid = this;\n    this.grid.beforeDataBound = function (args) {\n      var dataSource = 'dataSource';\n      var requestType = getObject('action', args);\n      if ((isRemoteData(treeGrid) && !isOffline(treeGrid) || isCountRequired(this)) && requestType !== 'edit') {\n        treeGrid.notify('updateRemoteLevel', args);\n        args = treeGrid.dataResults;\n      } else if (treeGrid.flatData.length === 0 && isOffline(treeGrid) && treeGrid.dataSource instanceof DataManager) {\n        var dm = treeGrid.dataSource;\n        treeGrid.dataModule.convertToFlatData(dm.dataSource.json);\n        args.result = treeGrid.grid.dataSource[\"\" + dataSource].json = treeGrid.flatData;\n      }\n      if (!isRemoteData(treeGrid) && !isCountRequired(this) && !isNullOrUndefined(treeGrid.dataSource)) {\n        if (this.isPrinting) {\n          setValue('isPrinting', true, args);\n        }\n        treeGrid.notify('dataProcessor', args);\n        //args = treeGrid.dataModule.dataProcessor(args);\n      }\n      extend(args, treeGrid.dataResults);\n      if (treeGrid.enableImmutableMode) {\n        args.result = args.result.slice();\n      }\n      if (treeGrid.initialRender) {\n        this.contentModule.objectEqualityChecker = treeGrid.objectEqualityChecker;\n      }\n      // treeGrid.notify(events.beforeDataBound, args);\n      if (!this.isPrinting) {\n        var callBackPromise_1 = new Deferred();\n        treeGrid.trigger(events.beforeDataBound, args, function (beforeDataBoundArgs) {\n          callBackPromise_1.resolve(beforeDataBoundArgs);\n        });\n        return callBackPromise_1;\n      }\n    };\n    this.grid.log = function (type, args) {\n      if (_this.loggerModule) {\n        _this.loggerModule.log(type, args);\n      }\n    };\n  };\n  TreeGrid.prototype.bindCallBackEvents = function () {\n    var _this = this;\n    this.grid.toolbarClick = function (args) {\n      if (args.item.id === _this.grid.element.id + '_excelexport' && _this.allowExcelExport === false || args.item.id === _this.grid.element.id + '_pdfexport' && _this.allowPdfExport === false || args.item.id === _this.grid.element.id + '_csvexport' && _this.allowExcelExport === false) {\n        return;\n      }\n      var callBackPromise = new Deferred();\n      _this.trigger(events.toolbarClick, args, function (toolbarargs) {\n        if (!toolbarargs.cancel) {\n          _this.notify(events.toolbarClick, args);\n        }\n        callBackPromise.resolve(toolbarargs);\n      });\n      return callBackPromise;\n    };\n    this.grid.cellSelecting = function (args) {\n      var actualTarget = 'actualTarget';\n      var target = _this.grid.selectionModule[\"\" + actualTarget];\n      if (!isNullOrUndefined(target) && (target.classList.contains('e-treegridexpand') || target.classList.contains('e-treegridcollapse'))) {\n        args.cancel = true;\n      }\n      var callBackPromise = new Deferred();\n      _this.trigger(getObject('name', args), args, function (cellselectingArgs) {\n        callBackPromise.resolve(cellselectingArgs);\n      });\n      return callBackPromise;\n    };\n    this.grid.beginEdit = function (args) {\n      if (!isNullOrUndefined(args.row) && args.row.classList.contains('e-summaryrow')) {\n        args.cancel = true;\n        return;\n      }\n      var callBackPromise = new Deferred();\n      _this.trigger(events.beginEdit, args, function (begineditArgs) {\n        callBackPromise.resolve(begineditArgs);\n      });\n      return callBackPromise;\n    };\n  };\n  TreeGrid.prototype.extendedGridEditEvents = function () {\n    var _this = this;\n    this.grid.dataStateChange = function (args) {\n      if (_this.isExpandRefresh) {\n        _this.isExpandRefresh = false;\n        _this.grid.dataSource = {\n          result: _this.flatData,\n          count: getValue('count', _this.grid.dataSource)\n        };\n      } else {\n        if (args.action.requestType !== 'infiniteScroll') {\n          _this.infiniteScrollData = [];\n        }\n        _this.trigger(events.dataStateChange, args);\n      }\n    };\n    this.grid.cellSave = function (args) {\n      if (_this.grid.isContextMenuOpen()) {\n        var contextitems = _this.grid.contextMenuModule.contextMenu.element.getElementsByClassName('e-selected')[0];\n        if (isNullOrUndefined(contextitems) || contextitems.id !== _this.element.id + '_gridcontrol_cmenu_Save') {\n          args.cancel = true;\n        }\n      }\n      var callBackPromise = new Deferred();\n      _this.trigger(events.cellSave, args, function (cellsaveArgs) {\n        if (!cellsaveArgs.cancel) {\n          _this.notify(events.cellSave, cellsaveArgs);\n        }\n        callBackPromise.resolve(cellsaveArgs);\n      });\n      return callBackPromise;\n    };\n    this.grid.cellSaved = function (args) {\n      _this.trigger(events.cellSaved, args);\n      _this.notify(events.cellSaved, args);\n    };\n    this.grid.cellEdit = function (args) {\n      var prom = 'promise';\n      var promise = new Deferred();\n      args[\"\" + prom] = promise;\n      _this.notify(events.cellEdit, args);\n      return promise;\n    };\n    this.grid.batchAdd = function (args) {\n      _this.trigger(events.batchAdd, args);\n      _this.notify(events.batchAdd, args);\n    };\n    this.grid.beforeBatchSave = function (args) {\n      _this.trigger(events.beforeBatchSave, args);\n      _this.notify(events.beforeBatchSave, args);\n    };\n    this.grid.beforeBatchAdd = function (args) {\n      _this.trigger(events.beforeBatchAdd, args);\n      _this.notify(events.beforeBatchAdd, args);\n    };\n    this.grid.batchDelete = function (args) {\n      _this.trigger(events.batchDelete, args);\n      _this.notify(events.batchDelete, args);\n    };\n    this.grid.beforeBatchDelete = function (args) {\n      _this.trigger(events.beforeBatchDelete, args);\n      _this.notify(events.beforeBatchDelete, args);\n    };\n    this.grid.batchCancel = function (args) {\n      if (_this.editSettings.mode !== 'Cell') {\n        _this.trigger(events.batchCancel, args);\n      }\n      _this.notify(events.batchCancel, args);\n    };\n  };\n  TreeGrid.prototype.updateRowTemplate = function () {\n    var _this = this;\n    if (this.rowTemplate) {\n      if (this.isReact && this.getContentTable().rows.length === 0) {\n        setTimeout(function () {\n          _this.treeColumnRowTemplate();\n          if (_this.enableCollapseAll) {\n            var currentData = _this.getCurrentViewRecords();\n            var rows = _this.getContentTable().rows;\n            for (var i = 0; i < rows.length; i++) {\n              var args = {\n                data: currentData[parseInt(i.toString(), 10)],\n                row: rows[parseInt(i.toString(), 10)]\n              };\n              _this.renderModule.RowModifier(args);\n            }\n          }\n        }, 0);\n      } else {\n        this.treeColumnRowTemplate();\n      }\n    }\n  };\n  TreeGrid.prototype.bindedDataSource = function () {\n    var dataSource = 'dataSource';\n    var isDataAvailable = 'isDataAvailable';\n    var adaptor = 'adaptor';\n    var ready = 'ready';\n    if (this.dataSource && isCountRequired(this)) {\n      var data = this.flatData;\n      var datacount = getValue('count', this.dataSource);\n      this.grid.dataSource = {\n        result: data,\n        count: datacount\n      };\n    } else {\n      this.grid.dataSource = !(this.dataSource instanceof DataManager) ? this.flatData : new DataManager(this.dataSource.dataSource, this.dataSource.defaultQuery, this.dataSource.adaptor);\n    }\n    if (this.dataSource instanceof DataManager && (this.dataSource.dataSource.offline || this.dataSource.ready)) {\n      this.grid.dataSource[\"\" + dataSource].json = extendArray(this.dataSource[\"\" + dataSource].json);\n      this.grid.dataSource[\"\" + ready] = this.dataSource.ready;\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      var proxy_1 = this;\n      if (!isNullOrUndefined(this.grid.dataSource[\"\" + ready])) {\n        this.grid.dataSource[\"\" + ready].then(function (e) {\n          var dm = proxy_1.grid.dataSource;\n          dm[\"\" + dataSource].offline = true;\n          dm[\"\" + isDataAvailable] = true;\n          dm[\"\" + dataSource].json = e.result;\n          dm[\"\" + adaptor] = new JsonAdaptor();\n        });\n      }\n    }\n  };\n  TreeGrid.prototype.extendedGridActionEvents = function () {\n    var _this = this;\n    this.grid.actionBegin = function (args) {\n      if (args.requestType === 'sorting' && args.target && args.target.parentElement && args.target.parentElement.classList.contains('e-hierarchycheckbox')) {\n        args.cancel = true;\n      }\n      var requestType = getObject('requestType', args);\n      if (requestType === 'reorder') {\n        _this.notify('getColumnIndex', {});\n      }\n      if (isRemoteData(_this) && _this.enableVirtualization) {\n        if (args.requestType === 'virtualscroll') {\n          _this.query.expand('VirtualScrollingAction');\n          _this.showSpinner();\n        } else if (args.requestType === 'searching' && args.searchString === '') {\n          _this.query.expand('ClearSearchingAction');\n        } else if (args.action === 'clearFilter') {\n          _this.query.expand('ClearFilteringAction');\n        }\n      }\n      _this.notify('actionBegin', {\n        editAction: args\n      });\n      if (!isRemoteData(_this) && !isNullOrUndefined(_this.filterModule) && !isCountRequired(_this) && _this.grid.filterSettings.columns.length === 0 && _this.grid.searchSettings.key.length === 0) {\n        _this.notify('clearFilters', {\n          flatData: _this.grid.dataSource\n        });\n        _this.grid.setProperties({\n          dataSource: _this.dataResults.result\n        }, true);\n        if (isNullOrUndefined(_this.grid['changedProperties'].dataSource)) {\n          _this.grid.renderModule.data.dataManager = _this.grid.dataSource instanceof DataManager ? _this.grid.dataSource : isNullOrUndefined(_this.grid.dataSource) ? new DataManager() : new DataManager(_this.grid.dataSource);\n          _this.grid.renderModule.data.isQueryInvokedFromData = true;\n          _this.grid.query = _this.grid.query instanceof Query ? _this.grid.query : new Query();\n        }\n      }\n      if (_this.action !== 'indenting' && _this.action !== 'outdenting') {\n        var callBackPromise_2 = new Deferred();\n        _this.trigger(events.actionBegin, args, function (actionArgs) {\n          if (!actionArgs.cancel) {\n            _this.notify(events.beginEdit, actionArgs);\n          }\n          callBackPromise_2.resolve(actionArgs);\n        });\n        return callBackPromise_2;\n      }\n    };\n    this.grid.actionComplete = function (args) {\n      _this.notify('actioncomplete', args);\n      _this.updateColumnModel();\n      _this.updateTreeGridModel();\n      if (args.requestType === 'reorder') {\n        _this.notify('setColumnIndex', {});\n      }\n      _this.notify('actionComplete', {\n        editAction: args\n      });\n      if (args.requestType === 'add' && _this.editSettings.newRowPosition !== 'Top' && _this.editSettings.newRowPosition !== 'Bottom') {\n        _this.notify(events.beginAdd, args);\n      }\n      if (args.requestType === 'batchsave') {\n        _this.notify(events.batchSave, args);\n      }\n      _this.notify('updateGridActions', args);\n      if (args.requestType === 'save' && _this.aggregates.map(function (ag) {\n        return ag.showChildSummary === true;\n      }).length) {\n        _this.grid.refresh();\n      }\n      if (args.action === 'filter') {\n        if (_this.filterModule['currentFilterObject'] !== '' && _this.enableVirtualization && !_this.initialRender && !(isRemoteData(_this) && _this.enableVirtualization)) {\n          _this.expandAll();\n        }\n      }\n      if (args.requestType === 'searching') {\n        if (_this.searchSettings.key !== '' && _this.enableVirtualization && !_this.initialRender && !(isRemoteData(_this) && _this.enableVirtualization)) {\n          _this.expandAll();\n        }\n      }\n      if (args.action === 'clearFilter' && _this.enableCollapseAll) {\n        _this.collapseAll();\n      }\n      if (_this.action === 'indenting' || _this.action === 'outdenting') {\n        _this.action = _this.action === 'indenting' ? 'indented' : 'outdented';\n        var selectedItem_1 = [_this.selectedRecords];\n        var actionArgs = {\n          data: selectedItem_1,\n          dropIndex: _this.dropIndex,\n          dropPosition: _this.dropPosition,\n          modifiedRecords: _this.modifiedRecords,\n          requestType: _this.action,\n          row: _this.selectedRows\n        };\n        _this.trigger(events.actionComplete, actionArgs);\n        var currentPageItem = _this.getCurrentViewRecords().filter(function (e) {\n          return e.uniqueID === selectedItem_1[0].uniqueID;\n        });\n        if (!currentPageItem.length) {\n          _this.refreshToolbarItems();\n        }\n        _this.action = '';\n        _this.selectedRecords = _this.selectedRows = _this.modifiedRecords = [];\n      } else {\n        if (_this.grid.isFrozenGrid() && _this.enableVirtualization && args['tableName'] === 'movable') {\n          var movableContent = _this.grid.element.querySelector('.' + literals.movableContent);\n          var frozenContent = _this.grid.element.querySelector('.' + literals.frozenContent);\n          movableContent.style.height = frozenContent.style.height = 'auto';\n        }\n        _this.trigger(events.actionComplete, args);\n      }\n    };\n  };\n  TreeGrid.prototype.extendedGridEvents = function () {\n    var _this = this;\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    var treeGrid = this;\n    this.grid.recordDoubleClick = function (args) {\n      _this.trigger(events.recordDoubleClick, args);\n      _this.notify(events.recordDoubleClick, args);\n    };\n    this.grid.detailDataBound = function (args) {\n      _this.notify('detaildataBound', args);\n      _this.trigger(events.detailDataBound, args);\n    };\n    this.grid.rowDataBound = function (args) {\n      if (isNullOrUndefined(this.isPrinting)) {\n        setValue('isPrinting', false, args);\n      } else {\n        setValue('isPrinting', this.isPrinting, args);\n      }\n      treeGrid.renderModule.RowModifier(args);\n    };\n    this.grid.queryCellInfo = function (args) {\n      if (isNullOrUndefined(this.isPrinting)) {\n        setValue('isPrinting', false, args);\n      } else {\n        setValue('isPrinting', this.isPrinting, args);\n      }\n      treeGrid.renderModule.cellRender(args);\n    };\n    this.grid.contextMenuClick = function (args) {\n      _this.notify(events.contextMenuClick, args);\n      _this.trigger(events.contextMenuClick, args);\n    };\n    this.grid.contextMenuOpen = function (args) {\n      _this.notify(events.contextMenuOpen, args);\n      _this.trigger(events.contextMenuOpen, args);\n    };\n    this.grid.queryCellInfo = function (args) {\n      _this.renderModule.cellRender(args);\n    };\n  };\n  TreeGrid.prototype.bindGridDragEvents = function () {\n    var _this = this;\n    this.grid.rowDragStartHelper = function (args) {\n      _this.trigger(events.rowDragStartHelper, args);\n    };\n    this.grid.rowDragStart = function (args) {\n      _this.trigger(events.rowDragStart, args);\n    };\n    this.grid.rowDrag = function (args) {\n      if (_this.grid.isEdit) {\n        args.cancel = true;\n        return;\n      }\n      _this.notify(events.rowdraging, args);\n      _this.trigger(events.rowDrag, args);\n    };\n    this.grid.rowDrop = function (args) {\n      if (_this.grid.isEdit) {\n        args.cancel = true;\n        return;\n      }\n      _this.notify(events.rowDropped, args);\n      args.cancel = true;\n    };\n  };\n  /**\n   * Renders TreeGrid component\n   *\n   * @private\n   * @returns {void}\n   */\n  TreeGrid.prototype.loadGrid = function () {\n    this.bindGridProperties();\n    this.bindGridEvents();\n    setValue('registeredTemplate', this.registeredTemplate, this.grid);\n    var ref = 'viewContainerRef';\n    setValue('viewContainerRef', this[\"\" + ref], this.grid);\n  };\n  /**\n   * AutoGenerate TreeGrid columns from first record\n   *\n   * @hidden\n   * @returns {void}\n   */\n  TreeGrid.prototype.autoGenerateColumns = function () {\n    if (!this.columns.length && !this.dataModule.isRemote() && Object.keys(this.dataSource).length) {\n      this.columns = [];\n      // if (this.dataSource instanceof DataManager) {\n      //   record = (<DataManager>this.dataSource).dataSource.json[0];\n      // } else {\n      var record = this.dataSource[0];\n      // }\n      var keys = Object.keys(record);\n      for (var i = 0; i < keys.length; i++) {\n        if ([this.childMapping, this.parentIdMapping].indexOf(keys[parseInt(i.toString(), 10)]) === -1) {\n          this.columns.push(keys[parseInt(i.toString(), 10)]);\n        }\n      }\n    }\n  };\n  TreeGrid.prototype.getGridEditSettings = function () {\n    var edit = {};\n    var guid = 'guid';\n    edit.allowAdding = this.editSettings.allowAdding;\n    edit.allowEditing = this.editSettings.allowEditing;\n    edit.allowDeleting = this.editSettings.allowDeleting;\n    edit.newRowPosition = this.editSettings.newRowPosition === 'Bottom' ? 'Bottom' : 'Top';\n    edit.allowEditOnDblClick = this.editSettings.allowEditOnDblClick;\n    edit.showConfirmDialog = this.editSettings.showConfirmDialog;\n    edit.template = this.editSettings.template;\n    edit.showDeleteConfirmDialog = this.editSettings.showDeleteConfirmDialog;\n    edit.allowNextRowEdit = this.editSettings.allowNextRowEdit;\n    edit[\"\" + guid] = this.editSettings[\"\" + guid];\n    edit.dialog = this.editSettings.dialog;\n    switch (this.editSettings.mode) {\n      case 'Dialog':\n        edit.mode = this.editSettings.mode;\n        break;\n      case 'Batch':\n        edit.mode = this.editSettings.mode;\n        break;\n      case 'Row':\n        edit.mode = 'Normal';\n        break;\n      case 'Cell':\n        edit.mode = 'Normal';\n        edit.showConfirmDialog = false;\n        break;\n    }\n    return edit;\n  };\n  /**\n   * Defines grid toolbar from treegrid toolbar model\n   *\n   * @hidden\n   * @returns {Object[]} - returns context menu items\n   */\n  TreeGrid.prototype.getContextMenu = function () {\n    if (this.contextMenuItems) {\n      var items = [];\n      for (var i = 0; i < this.contextMenuItems.length; i++) {\n        switch (this.contextMenuItems[parseInt(i.toString(), 10)]) {\n          case 'AddRow':\n          case ContextMenuItems.AddRow:\n            items.push({\n              text: this.l10n.getConstant('AddRow'),\n              target: '.e-content',\n              id: this.element.id + '_gridcontrol_cmenu_AddRow',\n              items: [{\n                text: this.l10n.getConstant('Above'),\n                id: 'Above'\n              }, {\n                text: this.l10n.getConstant('Below'),\n                id: 'Below'\n              }, {\n                text: this.l10n.getConstant('Child'),\n                id: 'Child'\n              }]\n            });\n            break;\n          case 'Indent':\n          case ContextMenuItems.RowIndent:\n            items.push({\n              text: this.l10n.getConstant('RowIndent'),\n              target: '.e-content',\n              iconCss: 'e-indent e-icons',\n              id: this.element.id + '_gridcontrol_cmenu_Indent'\n            });\n            break;\n          case 'Outdent':\n          case ContextMenuItems.RowOutdent:\n            items.push({\n              text: this.l10n.getConstant('RowOutdent'),\n              target: '.e-content',\n              iconCss: 'e-outdent e-icons',\n              id: this.element.id + '_gridcontrol_cmenu_Outdent'\n            });\n            break;\n          default:\n            items.push(this.contextMenuItems[parseInt(i.toString(), 10)]);\n        }\n      }\n      return items;\n    } else {\n      return null;\n    }\n  };\n  /**\n   * Defines grid toolbar from treegrid toolbar model\n   *\n   * @hidden\n   * @returns {Object[]} - Returns toolbar items\n   */\n  TreeGrid.prototype.getGridToolbar = function () {\n    if (this.toolbar) {\n      this.l10n = new L10n('treegrid', this.defaultLocale, this.locale);\n      var items = [];\n      var tooltipText = void 0;\n      for (var i = 0; i < this.toolbar.length; i++) {\n        switch (this.toolbar[parseInt(i.toString(), 10)]) {\n          case 'Search':\n          case ToolbarItem.Search:\n            items.push('Search');\n            break;\n          case 'Print':\n          case ToolbarItem.Print:\n            items.push('Print');\n            break;\n          case 'ExpandAll':\n          case ToolbarItem.ExpandAll:\n            tooltipText = this.l10n.getConstant('ExpandAll');\n            items.push({\n              text: tooltipText,\n              tooltipText: tooltipText,\n              prefixIcon: 'e-expand',\n              id: this.element.id + '_gridcontrol_expandall'\n            });\n            break;\n          case 'CollapseAll':\n          case ToolbarItem.CollapseAll:\n            tooltipText = this.l10n.getConstant('CollapseAll');\n            items.push({\n              text: tooltipText,\n              tooltipText: tooltipText,\n              prefixIcon: 'e-collapse',\n              id: this.element.id + '_gridcontrol_collapseall'\n            });\n            break;\n          case 'Indent':\n          case ToolbarItem.RowIndent:\n            tooltipText = this.l10n.getConstant('RowIndent');\n            items.push({\n              text: tooltipText,\n              tooltipText: tooltipText,\n              prefixIcon: 'e-indent',\n              id: this.element.id + '_gridcontrol_indent'\n            });\n            break;\n          case 'Outdent':\n          case ToolbarItem.RowOutdent:\n            tooltipText = this.l10n.getConstant('RowOutdent');\n            items.push({\n              text: tooltipText,\n              tooltipText: tooltipText,\n              prefixIcon: 'e-outdent',\n              id: this.element.id + '_gridcontrol_outdent'\n            });\n            break;\n          default:\n            items.push(this.toolbar[parseInt(i.toString(), 10)]);\n        }\n      }\n      return items;\n    } else {\n      return null;\n    }\n  };\n  TreeGrid.prototype.getGridColumns = function (columns, isEmptyColumnModel, index) {\n    if (isEmptyColumnModel === void 0) {\n      isEmptyColumnModel = true;\n    }\n    if (index === void 0) {\n      index = 0;\n    }\n    var column = columns;\n    var stackedColumn = 'columns';\n    if (isEmptyColumnModel) {\n      this.columnModel = [];\n    }\n    var treeGridColumn;\n    var gridColumn;\n    if (this.columnModel.length === 0) {\n      index = index === 0 ? -1 : index;\n    }\n    var gridColumnCollection = [];\n    for (var i = 0; i < column.length; i++) {\n      index = index + 1;\n      var treeColumn = this.grid.getColumnByUid(column[parseInt(i.toString(), 10)].uid);\n      gridColumn = treeColumn ? treeColumn : {};\n      treeGridColumn = {};\n      if (typeof this.columns[parseInt(i.toString(), 10)] === 'string') {\n        gridColumn.field = treeGridColumn.field = this.columns[parseInt(i.toString(), 10)];\n      } else {\n        for (var _i = 0, _a = Object.keys(column[parseInt(i.toString(), 10)]); _i < _a.length; _i++) {\n          var prop = _a[_i];\n          if (index === this.treeColumnIndex && prop === 'template') {\n            treeGridColumn[\"\" + prop] = column[parseInt(i.toString(), 10)][\"\" + prop];\n          } else if (prop === 'columns' && !isNullOrUndefined(column[parseInt(i.toString(), 10)][\"\" + prop])) {\n            gridColumn[\"\" + prop] = this.getGridColumns(column[parseInt(i.toString(), 10)][\"\" + prop], false, this.columnModel.length - 1);\n            treeGridColumn[\"\" + prop] = column[parseInt(i.toString(), 10)][\"\" + prop];\n          } else if (this.initialRender && !isNullOrUndefined(treeColumn) && this.enablePersistence && prop === 'edit') {\n            gridColumn[\"\" + prop] = treeGridColumn[\"\" + prop] = treeColumn[\"\" + prop];\n          } else if (!treeColumn || prop !== 'sortComparer') {\n            gridColumn[\"\" + prop] = treeGridColumn[\"\" + prop] = column[parseInt(i.toString(), 10)][\"\" + prop];\n          }\n        }\n      }\n      if (!treeGridColumn[\"\" + stackedColumn]) {\n        this.columnModel.push(new Column(treeGridColumn));\n      }\n      gridColumnCollection.push(gridColumn);\n      if (!isNullOrUndefined(this.columnModel[this.treeColumnIndex]) && this.enableRtl) {\n        if (gridColumn.field === this.columnModel[this.treeColumnIndex].field) {\n          if (isNullOrUndefined(this.treeColumnTextAlign)) {\n            this.treeColumnTextAlign = this.columnModel[this.treeColumnIndex].textAlign;\n            this.treeColumnField = this.columnModel[this.treeColumnIndex].field;\n          }\n          gridColumn.textAlign = 'Right';\n        }\n      }\n    }\n    return gridColumnCollection;\n  };\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @param {TreeGridModel} newProp - properties details which has to be modified\n   * @hidden\n   * @returns {void}\n   */\n  TreeGrid.prototype.onPropertyChanged = function (newProp) {\n    var properties = Object.keys(newProp);\n    var requireRefresh = false;\n    if (properties.indexOf('columns') > -1 && !isNullOrUndefined(newProp.columns) && this.frozenColumns === 0 && this.frozenRows === 0 && !this.columnModel.some(function (col) {\n      return col.isFrozen || col.freeze;\n    })) {\n      this.grid.columns = this.getGridColumns(newProp.columns);\n      this.grid['updateColumnObject']();\n      requireRefresh = true;\n    }\n    for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n      var prop = properties_1[_i];\n      switch (prop) {\n        case 'treeColumnIndex':\n          this.grid.refreshColumns();\n          break;\n        case 'allowPaging':\n          this.grid.allowPaging = this.allowPaging;\n          break;\n        case 'pageSettings':\n          /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n          this.grid.pageSettings = getActualProperties(this.pageSettings);\n          requireRefresh = true;\n          break;\n        case 'enableVirtualization':\n          this.grid.enableVirtualization = this.enableVirtualization;\n          break;\n        case 'enableColumnVirtualization':\n          this.grid.enableColumnVirtualization = this.enableColumnVirtualization;\n          break;\n        case 'toolbar':\n          this.grid.toolbar = this.getGridToolbar();\n          break;\n        case 'allowSelection':\n          this.grid.allowSelection = this.allowSelection;\n          break;\n        case 'selectionSettings':\n          this.grid.selectionSettings = getActualProperties(this.selectionSettings);\n          break;\n        case 'allowSorting':\n          this.grid.allowSorting = this.allowSorting;\n          break;\n        case 'allowMultiSorting':\n          this.grid.allowMultiSorting = this.allowMultiSorting;\n          break;\n        case 'sortSettings':\n          this.grid.sortSettings = getActualProperties(this.sortSettings);\n          break;\n        case 'searchSettings':\n          this.grid.searchSettings = getActualProperties(this.searchSettings);\n          break;\n        case 'allowFiltering':\n          this.grid.allowFiltering = this.allowFiltering;\n          break;\n        case 'filterSettings':\n          if (!this.initialRender) {\n            this.grid.filterSettings = getActualProperties(this.filterSettings);\n          }\n          break;\n        case 'showColumnMenu':\n          this.grid.showColumnMenu = this.showColumnMenu;\n          break;\n        case 'allowRowDragAndDrop':\n          this.grid.allowRowDragAndDrop = this.allowRowDragAndDrop;\n          break;\n        case 'aggregates':\n          /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n          this.grid.aggregates = getActualProperties(this.aggregates);\n          break;\n        case 'enableInfiniteScrolling':\n          this.grid.enableInfiniteScrolling = this.enableInfiniteScrolling;\n          break;\n        case 'dataSource':\n          this.isLocalData = !(this.dataSource instanceof DataManager) || !isNullOrUndefined(this.dataSource.ready) || this.dataSource.adaptor instanceof RemoteSaveAdaptor;\n          this.convertTreeData(this.dataSource);\n          if (this.isLocalData) {\n            if (isCountRequired(this)) {\n              var count = getValue('count', this.dataSource);\n              this.grid.dataSource = {\n                result: this.flatData,\n                count: count\n              };\n            } else {\n              var data = this.dataSource;\n              this.grid.dataSource = !(data instanceof DataManager) ? this.flatData : new DataManager(data.dataSource, data.defaultQuery, data.adaptor);\n            }\n            if (this.enableVirtualization) {\n              this.grid.contentModule.isDataSourceChanged = true;\n            }\n          } else {\n            this.bindedDataSource();\n            if (this.enableVirtualization) {\n              this.grid.contentModule.removeEventListener();\n              this.grid.contentModule.eventListener('on');\n              this.grid.contentModule.renderTable();\n            }\n          }\n          break;\n        case 'query':\n          this.grid.query = this.query;\n          break;\n        case 'enableCollapseAll':\n          if (newProp[\"\" + prop]) {\n            this.collapseAll();\n          } else {\n            this.expandAll();\n          }\n          break;\n        case 'expandStateMapping':\n          this.grid.refresh();\n          break;\n        case 'gridLines':\n          this.grid.gridLines = this.gridLines;\n          break;\n        case 'rowTemplate':\n          /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n          this.grid.rowTemplate = getActualProperties(this.rowTemplate);\n          break;\n        case 'frozenRows':\n          this.grid.frozenRows = this.frozenRows;\n          break;\n        case 'frozenColumns':\n          this.grid.frozenColumns = this.frozenColumns;\n          break;\n        case 'rowHeight':\n          this.grid.rowHeight = this.rowHeight;\n          break;\n        case 'height':\n          if (!isNullOrUndefined(this.height) && typeof this.height === 'string' && this.height.indexOf('%') !== -1) {\n            this.element.style.height = this.height;\n          }\n          this.grid.height = this.height;\n          break;\n        case 'width':\n          if (!isNullOrUndefined(this.width) && typeof this.width === 'string' && this.width.indexOf('%') !== -1) {\n            this.element.style.width = this.width;\n          }\n          this.grid.width = this.width;\n          break;\n        case 'locale':\n          this.grid.locale = this.locale;\n          this.TreeGridLocale();\n          this.grid.toolbar = this.getGridToolbar();\n          this.grid.contextMenuItems = this.getContextMenu();\n          break;\n        case 'selectedRowIndex':\n          this.grid.selectedRowIndex = this.selectedRowIndex;\n          break;\n        case 'enableAltRow':\n          this.grid.enableAltRow = this.enableAltRow;\n          break;\n        case 'enableHover':\n          this.grid.enableHover = this.enableHover;\n          break;\n        case 'enableAutoFill':\n          this.grid.enableAutoFill = this.enableAutoFill;\n          break;\n        case 'enableAdaptiveUI':\n          this.grid.enableAdaptiveUI = this.enableAdaptiveUI;\n          break;\n        case 'enableImmutableMode':\n          this.grid.enableImmutableMode = this.enableImmutableMode;\n          break;\n        case 'allowExcelExport':\n          this.grid.allowExcelExport = this.allowExcelExport;\n          break;\n        case 'allowPdfExport':\n          this.grid.allowPdfExport = this.allowPdfExport;\n          break;\n        case 'enableRtl':\n          if (!isNullOrUndefined(this.treeColumnField)) {\n            this.updateTreeColumnTextAlign();\n          }\n          this.grid.enableRtl = this.enableRtl;\n          break;\n        case 'allowReordering':\n          this.grid.allowReordering = this.allowReordering;\n          break;\n        case 'allowResizing':\n          this.grid.allowResizing = this.allowResizing;\n          break;\n        case 'textWrapSettings':\n          this.grid.textWrapSettings = getActualProperties(this.textWrapSettings);\n          break;\n        case 'allowTextWrap':\n          this.grid.allowTextWrap = getActualProperties(this.allowTextWrap);\n          this.grid.refresh();\n          break;\n        case 'contextMenuItems':\n          this.grid.contextMenuItems = this.getContextMenu();\n          break;\n        case 'showColumnChooser':\n          this.grid.showColumnChooser = this.showColumnChooser;\n          break;\n        case 'detailTemplate':\n          /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n          this.grid.detailTemplate = getActualProperties(this.detailTemplate);\n          break;\n        case 'columnMenuItems':\n          this.grid.columnMenuItems = getActualProperties(this.columnMenuItems);\n          break;\n        case 'editSettings':\n          if (this.grid.isEdit && this.grid.editSettings.mode === 'Normal' && newProp[\"\" + prop].mode && (newProp[\"\" + prop].mode === 'Cell' || newProp[\"\" + prop].mode === 'Row')) {\n            this.grid.closeEdit();\n          }\n          this.grid.editSettings = this.getGridEditSettings();\n          break;\n      }\n      if (requireRefresh) {\n        this.grid.refresh();\n      }\n    }\n  };\n  TreeGrid.prototype.updateTreeColumnTextAlign = function () {\n    var gridColumn = this.grid.getColumnByField(this.treeColumnField);\n    gridColumn.textAlign = this.enableRtl ? 'Right' : this.treeColumnTextAlign;\n    this.grid.refreshColumns();\n  };\n  /**\n   * Destroys the component (detaches/removes all event handlers, attributes, classes, and empties the component element).\n   *\n   * @method destroy\n   * @returns {void}\n   */\n  TreeGrid.prototype.destroy = function () {\n    var treeGridElement = this.element;\n    if (!treeGridElement) {\n      return;\n    }\n    var hasTreeGridChild = treeGridElement.querySelector('.' + 'e-gridheader') && treeGridElement.querySelector('.' + 'e-gridcontent') ? true : false;\n    if (hasTreeGridChild) {\n      this.unwireEvents();\n    }\n    this.removeListener();\n    if (hasTreeGridChild) {\n      _super.prototype.destroy.call(this);\n    }\n    if (this.grid) {\n      this.grid.destroy();\n    }\n    if (this.dataModule) {\n      this.dataModule.destroy();\n    }\n    var modules = ['dataModule', 'sortModule', 'renderModule', 'filterModule', 'printModule', 'clipboardModule', 'excelExportModule', 'pdfExportModule', 'toolbarModule', 'summaryModule', 'reorderModule', 'resizeModule', 'pagerModule', 'keyboardModule', 'columnMenuModule', 'contextMenuModule', 'editModule', 'virtualScrollModule', 'selectionModule', 'detailRow', 'rowDragAndDropModule', 'freezeModule'];\n    for (var i = 0; i < modules.length; i++) {\n      if (this[modules[parseInt(i.toString(), 10)]]) {\n        this[modules[parseInt(i.toString(), 10)]] = null;\n      }\n    }\n    this.element.innerHTML = '';\n    this.grid = null;\n  };\n  /**\n   * Update the TreeGrid model\n   *\n   * @method dataBind\n   * @returns {void}\n   * @private\n   */\n  TreeGrid.prototype.dataBind = function () {\n    if (isNullOrUndefined(this.grid)) {\n      return;\n    }\n    if (!isNullOrUndefined(this.rowDropSettings.targetID) && isNullOrUndefined(document.getElementById(this.grid.rowDropSettings.targetID))) {\n      document.getElementById(this.rowDropSettings.targetID).id = this.grid.rowDropSettings.targetID;\n      this.rowDropSettings.targetID = this.grid.rowDropSettings.targetID;\n    }\n    _super.prototype.dataBind.call(this);\n    this.grid.dataBind();\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   *\n   * @returns {string} - Returns persist properties details\n   * @hidden\n   */\n  TreeGrid.prototype.getPersistData = function () {\n    var keyEntity = ['pageSettings', 'sortSettings', 'filterSettings', 'columns', 'searchSettings', 'selectedRowIndex', 'treeColumnIndex', 'scrollPosition'];\n    var ignoreOnPersist = {\n      pageSettings: ['template', 'pageSizes', 'pageSizeMode', 'enableQueryString', 'totalRecordsCount', 'pageCount'],\n      filterSettings: ['type', 'mode', 'showFilterBarStatus', 'immediateModeDelay', 'ignoreAccent', 'hierarchyMode'],\n      searchSettings: ['fields', 'operator', 'ignoreCase'],\n      sortSettings: [],\n      columns: [],\n      selectedRowIndex: [],\n      scrollPosition: []\n    };\n    var ignoreOnColumn = ['filter', 'edit', 'filterBarTemplate', 'headerTemplate', 'template', 'commandTemplate', 'commands', 'dataSource'];\n    for (var i = 0; i < keyEntity.length; i++) {\n      var currentObject = this[keyEntity[parseInt(i.toString(), 10)]];\n      for (var k = 0, val = ignoreOnPersist[keyEntity[parseInt(i.toString(), 10)]]; !isNullOrUndefined(val) && k < val.length; k++) {\n        var objVal = val[parseInt(k.toString(), 10)];\n        delete currentObject[\"\" + objVal];\n      }\n    }\n    this.ignoreInArrays(ignoreOnColumn, this.columns);\n    return this.addOnPersist(keyEntity);\n  };\n  TreeGrid.prototype.ignoreInArrays = function (ignoreOnColumn, columns) {\n    for (var i = 0; i < columns.length; i++) {\n      if (columns[parseInt(i.toString(), 10)].columns) {\n        this.ignoreInColumn(ignoreOnColumn, columns[parseInt(i.toString(), 10)]);\n        this.ignoreInArrays(ignoreOnColumn, columns[parseInt(i.toString(), 10)].columns);\n      } else {\n        this.ignoreInColumn(ignoreOnColumn, columns[parseInt(i.toString(), 10)]);\n      }\n    }\n  };\n  TreeGrid.prototype.ignoreInColumn = function (ignoreOnColumn, column) {\n    if (isNullOrUndefined(column.template)) {\n      for (var i = 0; i < ignoreOnColumn.length; i++) {\n        delete column[ignoreOnColumn[parseInt(i.toString(), 10)]];\n        column.filter = {};\n      }\n    }\n  };\n  TreeGrid.prototype.mouseClickHandler = function (e) {\n    var _this = this;\n    if (!isNullOrUndefined(e.touches)) {\n      return;\n    }\n    var target = e.target;\n    if ((target.classList.contains('e-treegridexpand') || target.classList.contains('e-treegridcollapse')) && !this.isEditCollapse && !this.grid.isEdit) {\n      this.expandCollapseRequest(target);\n    }\n    var isEllipsisTooltip = 'isEllipsisTooltip';\n    if ((target.classList.contains('e-treegridexpand') || target.classList.contains('e-treegridcollapse')) && this.grid[\"\" + isEllipsisTooltip]()) {\n      this.grid['toolTipObj'].close();\n    }\n    this.isEditCollapse = false;\n    this.notify('checkboxSelection', {\n      target: target\n    });\n    if (this.grid.isCheckBoxSelection && !this.grid.isPersistSelection) {\n      if (this.aggregates.map(function (ag) {\n        return ag.showChildSummary === true;\n      }).length) {\n        var checkedTarget = this.grid.getHeaderContent().querySelector('.e-checkselectall');\n        var checkedLen = this.grid.getSelectedRowIndexes().length;\n        var totalRecords = this.getCurrentViewRecords().length;\n        if (checkedLen === totalRecords) {\n          var spanEle = checkedTarget.nextElementSibling;\n          removeClass([spanEle], ['e-stop', 'e-uncheck']);\n          addClass([spanEle], ['e-check']);\n        }\n      }\n    }\n    if ((target.classList.contains('e-flmenu-cancelbtn') || target.classList.contains('e-flmenu-okbtn') || target.classList.contains('e-content') || target.classList.contains('e-rowcell')) && !isNullOrUndefined(this.grid.filterModule) && this.isReact) {\n      if (!isNullOrUndefined(this.grid.filterModule['column'])) {\n        if (this.grid.filterModule['column'].filterTemplate) {\n          var elem = document.getElementById(this.grid.filterModule.filterModule['dlgObj'].element.id);\n          this.grid.filterModule['fltrDlgDetails'].isOpen = false;\n          if (this.grid.filterModule.filterModule['dlgObj'] && !this.grid.filterModule.filterModule['dlgObj'].isDestroyed && elem) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.clearTemplate(['filterTemplate'], undefined, function () {\n              _this.grid.filterModule.filterModule['dlgObj'].destroy();\n            });\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Returns TreeGrid rows\n   *\n   * @returns {HTMLTableRowElement[]} - Returns row elements collection\n   */\n  TreeGrid.prototype.getRows = function () {\n    return this.grid.getRows();\n  };\n  /**\n   * Gets the pager of the TreeGrid.\n   *\n   * @returns {Element} - Returns pager element\n   */\n  TreeGrid.prototype.getPager = function () {\n    return this.grid.getPager(); //get element from pager\n  };\n  /**\n   * Adds a new record to the TreeGrid. Without passing parameters, it adds empty rows.\n   * > `editSettings.allowEditing` should be true.\n   *\n   * @param {Object} data - Defines the new add record data.\n   * @param {number} index - Defines the row index to be added.\n   * @param {RowPosition} position - Defines the new row position to be added.\n   * @returns {void}\n   */\n  TreeGrid.prototype.addRecord = function (data, index, position) {\n    if (this.editModule) {\n      var isAddedRowByMethod = 'isAddedRowByMethod';\n      this.editModule[\"\" + isAddedRowByMethod] = true;\n      this.editModule.addRecord(data, index, position);\n    }\n  };\n  /**\n   * Cancels edited state.\n   *\n   * @returns {void}\n   */\n  TreeGrid.prototype.closeEdit = function () {\n    if (this.grid.editModule) {\n      this.editModule['closeEdit']();\n    }\n  };\n  /**\n   * Saves the cell that is currently edited. It does not save the value to the DataSource.\n   *\n   * @returns {void}\n   */\n  TreeGrid.prototype.saveCell = function () {\n    if (this.grid.editModule) {\n      this.grid.editModule.saveCell();\n    }\n  };\n  /**\n   * To update the specified cell by given value without changing into edited state.\n   *\n   * @param {number} rowIndex Defines the row index.\n   * @param {string} field Defines the column field.\n   * @param {string | number | boolean | Date} value - Defines the value to be changed.\n   * @returns {void}\n   */\n  TreeGrid.prototype.updateCell = function (rowIndex, field, value) {\n    if (this.grid.editModule) {\n      this.grid.editModule.updateCell(rowIndex, field, value);\n    }\n  };\n  /**\n   * To update the specified row by given values without changing into edited state.\n   *\n   * @param {number} index Defines the row index.\n   * @param {Object} data Defines the data object to be updated.\n   * @returns {void}\n   */\n  TreeGrid.prototype.updateRow = function (index, data) {\n    if (this.grid.editModule) {\n      if (!isNullOrUndefined(index)) {\n        var griddata = this.grid.getCurrentViewRecords()[parseInt(index.toString(), 10)];\n        extend(griddata, data);\n        this.grid.editModule.updateRow(index, griddata);\n      } else {\n        this.grid.editModule.updateRow(index, data);\n      }\n    }\n  };\n  /**\n   * Delete a record with Given options. If fieldName and data is not given then TreeGrid will delete the selected record.\n   * > `editSettings.allowDeleting` should be true.\n   *\n   * @param {string} fieldName - Defines the primary key field, 'Name of the column'.\n   * @param {Object} data - Defines the JSON data of the record to be deleted.\n   * @returns {void}\n   */\n  TreeGrid.prototype.deleteRecord = function (fieldName, data) {\n    if (isNullOrUndefined(fieldName) && isNullOrUndefined(data) || this.getSelectedRecords().length <= 0) {\n      var error = 'The provided value for the fieldName and data is undefined. Please ensure the fieldName and data contains number.';\n      this.trigger(events.actionFailure, {\n        error: error\n      });\n    }\n    if (this.grid.editModule) {\n      this.grid.editModule.deleteRecord(fieldName, data);\n    }\n  };\n  /**\n   * To edit any particular row by TR element.\n   *\n   * @param {HTMLTableRowElement} row - Defines the table row to be edited.\n   * @returns {void}\n   */\n  TreeGrid.prototype.startEdit = function (row) {\n    if (this.grid.editModule) {\n      this.grid.editModule.startEdit(row);\n    }\n  };\n  /**\n   * To edit any particular cell using row index and cell index.\n   *\n   * @param {number} rowIndex - Defines row index to edit a particular cell.\n   * @param {string} field - Defines the field name of the column to perform cell edit.\n   * @returns {void}\n   */\n  TreeGrid.prototype.editCell = function (rowIndex, field) {\n    if (this.editModule) {\n      this.editModule.editCell(rowIndex, field);\n    }\n  };\n  /**\n   * Enables or disables ToolBar items.\n   *\n   * @param {string[]} items - Defines the collection of itemID of ToolBar items.\n   * @param {boolean} isEnable - Defines the items to be enabled or disabled.\n   * @returns {void}\n   */\n  TreeGrid.prototype.enableToolbarItems = function (items, isEnable) {\n    if (this.grid.toolbarModule) {\n      this.grid.toolbarModule.enableItems(items, isEnable);\n    }\n  };\n  /**\n   * If TreeGrid is in editable state, you can save a record by invoking endEdit.\n   *\n   * @returns {void}\n   */\n  TreeGrid.prototype.endEdit = function () {\n    if (this.grid.editModule) {\n      this.grid.editModule.endEdit();\n    }\n  };\n  /**\n   * Column chooser can be displayed on screen by given position(X and Y axis).\n   *\n   * @param {number} x - Defines the X axis.\n   * @param {number} y - Defines the Y axis.\n   * @returns {void}\n   */\n  TreeGrid.prototype.openColumnChooser = function (x, y) {\n    if (this.columnChooserModule) {\n      this.columnChooserModule.openColumnChooser(x, y);\n    }\n  };\n  /**\n   * Delete any visible row by TR element.\n   *\n   * @param {HTMLTableRowElement} tr - Defines the table row element.\n   * @returns {void}\n   */\n  TreeGrid.prototype.deleteRow = function (tr) {\n    if (this.grid.editModule) {\n      this.grid.editModule.deleteRow(tr);\n    }\n  };\n  /**\n   * Get the names of the primary key columns of the TreeGrid.\n   *\n   * @returns {string[]} - Returns primary key collection\n   */\n  TreeGrid.prototype.getPrimaryKeyFieldNames = function () {\n    return this.grid.getPrimaryKeyFieldNames();\n  };\n  /**\n   * Updates particular cell value based on the given primary key value.\n   * > Primary key column must be specified using `columns.isPrimaryKey` property.\n   *\n   * @param {string| number} key - Specifies the PrimaryKey value of dataSource.\n   * @param {string } field - Specifies the field name which you want to update.\n   * @param {string | number | boolean | Date} value - To update new value for the particular cell.\n   * @returns {void}\n   */\n  TreeGrid.prototype.setCellValue = function (key, field, value) {\n    this.grid.setCellValue(key, field, value);\n    var rowIndex = this.grid.getRowIndexByPrimaryKey(key);\n    var record = this.getCurrentViewRecords()[parseInt(rowIndex.toString(), 10)];\n    editAction({\n      value: record,\n      action: 'edit'\n    }, this, this.isSelfReference, record.index, this.grid.selectedRowIndex, field);\n  };\n  /**\n   * Updates and refresh the particular row values based on the given primary key value.\n   * > Primary key column must be specified using `columns.isPrimaryKey` property.\n   *\n   *  @param {string| number} key - Specifies the PrimaryKey value of dataSource.\n   *  @param {Object} rowData - To update new data for the particular row.\n   * @returns {void}\n   */\n  TreeGrid.prototype.setRowData = function (key, rowData) {\n    var currentRecords = this.getCurrentViewRecords();\n    var primaryKey = this.grid.getPrimaryKeyFieldNames()[0];\n    var level = 0;\n    var record = {};\n    currentRecords.some(function (value) {\n      if (value[\"\" + primaryKey] === key) {\n        record = value;\n        return true;\n      } else {\n        return false;\n      }\n    });\n    level = record.level;\n    rowData.level = level;\n    rowData.index = record.index;\n    rowData.childRecords = record.childRecords;\n    rowData.taskData = record.taskData;\n    rowData.uniqueID = record.uniqueID;\n    rowData.parentItem = record.parentItem;\n    rowData.checkboxState = record.checkboxState;\n    rowData.hasChildRecords = record.hasChildRecords;\n    rowData.parentUniqueID = record.parentUniqueID;\n    rowData.expanded = record.expanded;\n    this.grid.setRowData(key, rowData);\n    var visibleRecords = this.getVisibleRecords();\n    if (visibleRecords.length > 0 && key === visibleRecords[visibleRecords.length - 1][\"\" + primaryKey]) {\n      var table = this.getContentTable();\n      var sHeight = table.scrollHeight;\n      var clientHeight = this.getContent().clientHeight;\n      this.lastRowBorder(this.getRows()[currentRecords.indexOf(record)], sHeight <= clientHeight);\n    }\n  };\n  /**\n   * Navigates to the specified target page.\n   *\n   * @param  {number} pageNo - Defines the page number to navigate.\n   * @returns {void}\n   */\n  TreeGrid.prototype.goToPage = function (pageNo) {\n    if (this.grid.pagerModule) {\n      this.grid.pagerModule.goToPage(pageNo);\n    }\n  };\n  /**\n   * Defines the text of external message.\n   *\n   * @param  {string} message - Defines the message to update.\n   * @returns {void}\n   */\n  TreeGrid.prototype.updateExternalMessage = function (message) {\n    if (this.pagerModule) {\n      this.grid.pagerModule.updateExternalMessage(message);\n    }\n  };\n  /**\n   * Gets a cell by row and column index.\n   *\n   * @param  {number} rowIndex - Specifies the row index.\n   * @param  {number} columnIndex - Specifies the column index.\n   * @returns {Element} - Returns cell element in grid content\n   */\n  TreeGrid.prototype.getCellFromIndex = function (rowIndex, columnIndex) {\n    return this.grid.getCellFromIndex(rowIndex, columnIndex);\n  };\n  /**\n   * Gets a Column by column name.\n   *\n   * @param  {string} field - Specifies the column name.\n   * @returns {Column} - Returns tree grid column\n   */\n  TreeGrid.prototype.getColumnByField = function (field) {\n    return iterateArrayOrObject(this.columnModel, function (item) {\n      if (item.field === field) {\n        return item;\n      }\n      return undefined;\n    })[0];\n  };\n  /**\n   * Gets a column by UID.\n   *\n   * @param  {string} uid - Specifies the column UID.\n   * @returns {Column} - Returns tree grid column\n   */\n  TreeGrid.prototype.getColumnByUid = function (uid) {\n    var Columns = this.initialRender ? this.grid.columns : this.columns;\n    var columnModel = 'columnModel';\n    if (this.grid.columns.length !== this.columnModel.length) {\n      Columns = this.grid[\"\" + columnModel];\n    }\n    return iterateArrayOrObject(Columns, function (item) {\n      if (item.uid === uid) {\n        return item;\n      }\n      return undefined;\n    })[0];\n  };\n  /**\n   * Gets the collection of column fields.\n   *\n   * @returns {string[]} - Returns column field name as collection\n   */\n  TreeGrid.prototype.getColumnFieldNames = function () {\n    return this.grid.getColumnFieldNames();\n  };\n  /**\n   * Gets the footer div of the TreeGrid.\n   *\n   * @returns {Element} - Returns footer content div element\n   */\n  TreeGrid.prototype.getFooterContent = function () {\n    return this.grid.getFooterContent();\n  };\n  /**\n   * Gets the footer table element of the TreeGrid.\n   *\n   * @returns {Element} - Returns footer content table element\n   */\n  TreeGrid.prototype.getFooterContentTable = function () {\n    return this.grid.getFooterContentTable();\n  };\n  /**\n   * Shows a column by its column name.\n   *\n   * @param  {string|string[]} keys - Defines a single or collection of column names.\n   * @param  {string} showBy - Defines the column key either as field name or header text.\n   * @returns {void}\n   */\n  TreeGrid.prototype.showColumns = function (keys, showBy) {\n    this.grid.showColumns(keys, showBy);\n    this.updateColumnModel();\n  };\n  /**\n   * Hides a column by column name.\n   *\n   * @param  {string|string[]} keys - Defines a single or collection of column names.\n   * @param  {string} hideBy - Defines the column key either as field name or header text.\n   * @returns {void}\n   */\n  TreeGrid.prototype.hideColumns = function (keys, hideBy) {\n    this.grid.hideColumns(keys, hideBy);\n    this.updateColumnModel();\n  };\n  /**\n   * Gets a column header by column name.\n   *\n   * @param  {string} field - Specifies the column name.\n   * @returns {Element} - Returns column header element\n   */\n  TreeGrid.prototype.getColumnHeaderByField = function (field) {\n    return this.grid.getColumnHeaderByField(field);\n  };\n  /**\n   * Gets a column header by column index.\n   *\n   * @param  {number} index - Specifies the column index.\n   * @returns {Element} - Returns column header element\n   */\n  TreeGrid.prototype.getColumnHeaderByIndex = function (index) {\n    return this.grid.getColumnHeaderByIndex(index);\n  };\n  /**\n   * Gets a column header by UID.\n   *\n   * @param {string} uid - Specifies the column uid.\n   * @returns {Element} - Returns column header element\n   */\n  TreeGrid.prototype.getColumnHeaderByUid = function (uid) {\n    return this.grid.getColumnHeaderByUid(uid);\n  };\n  /**\n   * Gets a column index by column name.\n   *\n   * @param  {string} field - Specifies the column name.\n   * @returns {number} - Returns column index\n   */\n  TreeGrid.prototype.getColumnIndexByField = function (field) {\n    return this.grid.getColumnIndexByField(field);\n  };\n  TreeGrid.prototype.getVirtualColIndexByUid = function (uid) {\n    var columnModel = 'columnModel';\n    var index = iterateArrayOrObject(this.grid[\"\" + columnModel], function (item, index) {\n      if (item.uid === uid) {\n        return index;\n      }\n      return undefined;\n    })[0];\n    return !isNullOrUndefined(index) ? index : -1;\n  };\n  /**\n   * Gets a column index by UID.\n   *\n   * @param  {string} uid - Specifies the column UID.\n   * @returns {number} - Returns column index\n   */\n  TreeGrid.prototype.getColumnIndexByUid = function (uid) {\n    return this.grid.getColumnIndexByUid(uid);\n  };\n  /**\n   * Gets the columns from the TreeGrid.\n   *\n   * @param {boolean} isRefresh - Defined whether to update DOM\n   * @returns {Column[]} - Returns treegrid columns collection\n   */\n  TreeGrid.prototype.getColumns = function (isRefresh) {\n    this.updateColumnModel(this.grid.getColumns(isRefresh));\n    return this.columnModel;\n  };\n  TreeGrid.prototype.updateColumnModel = function (column) {\n    var temp;\n    var field;\n    var gridColumns = isNullOrUndefined(column) ? this.grid.getColumns() : column;\n    if (this.treeColumnIndex !== -1 && this.columnModel[this.treeColumnIndex] && !isNullOrUndefined(this.columnModel[this.treeColumnIndex].template)) {\n      temp = this.columnModel[this.treeColumnIndex].template;\n      field = this.columnModel[this.treeColumnIndex].field;\n    }\n    var gridColumn;\n    if (!this.enableColumnVirtualization || this.enableColumnVirtualization && this.columnModel.length === gridColumns.length) {\n      this.columnModel = [];\n      for (var i = 0; i < gridColumns.length; i++) {\n        gridColumn = {};\n        for (var _i = 0, _a = Object.keys(gridColumns[parseInt(i.toString(), 10)]); _i < _a.length; _i++) {\n          var prop = _a[_i];\n          gridColumn[\"\" + prop] = gridColumns[parseInt(i.toString(), 10)][\"\" + prop];\n        }\n        this.columnModel.push(new Column(gridColumn));\n        if (field === this.columnModel[parseInt(i.toString(), 10)].field && this.columnModel[parseInt(i.toString(), 10)].type !== 'checkbox' && !isNullOrUndefined(temp) && temp !== '') {\n          this.columnModel[parseInt(i.toString(), 10)].template = temp;\n        }\n      }\n    }\n    var deepMerge = 'deepMerge';\n    this[\"\" + deepMerge] = ['columns']; // Workaround for blazor updateModel\n    if (this.grid.columns.length !== this.columnModel.length) {\n      this.stackedHeader = true;\n    }\n    if (this.stackedHeader && !isNullOrUndefined(this.detailTemplate)) {\n      var error = 'Stacked header is not compatible with the detail template';\n      this.trigger(events.actionFailure, {\n        error: error\n      });\n    }\n    if (this.stackedHeader && this.allowResizing && !isNullOrUndefined(this.columns)) {\n      this.updateColumnsWidth(this.columns);\n    }\n    if (!this.stackedHeader && !isNullOrUndefined(this.columns)) {\n      merge(this.columns, this.columnModel);\n    }\n    this[\"\" + deepMerge] = undefined; // Workaround for blazor updateModel\n    return this.columnModel;\n  };\n  TreeGrid.prototype.updateColumnsWidth = function (columns) {\n    var _this = this;\n    columns.forEach(function (column) {\n      if (!isNullOrUndefined(column) && column.columns) {\n        _this.updateColumnsWidth(column.columns);\n      } else if (!isNullOrUndefined(column) && column.field) {\n        var currentColumn = _this.grid.getColumnByField(column.field);\n        if (!isNullOrUndefined(currentColumn)) {\n          column.width = currentColumn.width;\n        }\n      }\n    });\n  };\n  /**\n   * Gets the content div of the TreeGrid.\n   *\n   * @returns {Element} - Return tree grid content element\n   */\n  TreeGrid.prototype.getContent = function () {\n    return this.grid.getContent();\n  };\n  TreeGrid.prototype.mergePersistTreeGridData = function () {\n    var persist1 = 'mergePersistGridData';\n    this.grid[\"\" + persist1].apply(this);\n  };\n  TreeGrid.prototype.mergeColumns = function (storedColumn, columns) {\n    var persist2 = 'mergeColumns';\n    this.grid[\"\" + persist2].apply(this, [storedColumn, columns]);\n  };\n  TreeGrid.prototype.setFrozenCount = function () {\n    var persist3 = 'setFrozenCount';\n    this.grid[\"\" + persist3].apply(this.grid);\n  };\n  TreeGrid.prototype.splitFrozenCount = function (columns) {\n    var persist4 = 'splitFrozenCount';\n    this.grid[\"\" + persist4].apply(this.grid, [columns]);\n  };\n  TreeGrid.prototype.isFrozenGrid = function () {\n    return this.grid.isFrozenGrid();\n  };\n  TreeGrid.prototype.updateTreeGridModel = function () {\n    this.setProperties({\n      filterSettings: getObject('properties', this.grid.filterSettings)\n    }, true);\n    this.setProperties({\n      pageSettings: getObject('properties', this.grid.pageSettings)\n    }, true);\n    this.setProperties({\n      searchSettings: getObject('properties', this.grid.searchSettings)\n    }, true);\n    this.setProperties({\n      sortSettings: getObject('properties', this.grid.sortSettings)\n    }, true);\n  };\n  /**\n   * Gets the content table of the TreeGrid.\n   *\n   * @returns {Element} - Returns content table element\n   */\n  TreeGrid.prototype.getContentTable = function () {\n    return this.grid.getContentTable();\n  };\n  /**\n   * Gets all the TreeGrid's data rows.\n   *\n   * @returns {Element[]} - Returns row elements\n   */\n  TreeGrid.prototype.getDataRows = function () {\n    var dRows = [];\n    var rows = this.grid.getDataRows();\n    for (var i = 0, len = rows.length; i < len; i++) {\n      if (!rows[parseInt(i.toString(), 10)].classList.contains('e-summaryrow')) {\n        dRows.push(rows[parseInt(i.toString(), 10)]);\n      }\n    }\n    return dRows;\n  };\n  /**\n   * Get current visible data of TreeGrid.\n   *\n   * @returns {Object[]} - Returns current view records\n   * @isGenericType true\n   */\n  TreeGrid.prototype.getCurrentViewRecords = function () {\n    var isSummaryRow = 'isSummaryRow';\n    return this.grid.currentViewData.filter(function (e) {\n      return isNullOrUndefined(e[\"\" + isSummaryRow]);\n    });\n  };\n  /**\n   * Gets the added, edited,and deleted data before bulk save to the DataSource in batch mode.\n   *\n   * @returns {Object} - Returns batch changes\n   */\n  TreeGrid.prototype.getBatchChanges = function () {\n    return this.grid.editModule.getBatchChanges();\n  };\n  /**\n   * Gets the header div of the TreeGrid.\n   *\n   * @returns {Element} - Returns Header content element\n   */\n  TreeGrid.prototype.getHeaderContent = function () {\n    return this.grid.getHeaderContent();\n  };\n  /**\n   * Gets the header table element of the TreeGrid.\n   *\n   * @returns {Element} - Return header table element\n   */\n  TreeGrid.prototype.getHeaderTable = function () {\n    return this.grid.getHeaderTable();\n  };\n  /**\n   * Gets a row by index.\n   *\n   * @param  {number} index - Specifies the row index.\n   * @returns {Element} - Returns row element\n   */\n  TreeGrid.prototype.getRowByIndex = function (index) {\n    return this.grid.getRowByIndex(index);\n  };\n  /**\n   * Get a row information based on cell\n   *\n   * @param {Element | EventTarget} target - Target row element\n   * @returns {RowInfo} - Returns row information in a JSON object\n   */\n  TreeGrid.prototype.getRowInfo = function (target) {\n    return this.grid.getRowInfo(target);\n  };\n  /**\n   * Gets UID by column name.\n   *\n   * @param  {string} field - Specifies the column name.\n   * @returns {string} - Returns unique id based on column field name given\n   */\n  TreeGrid.prototype.getUidByColumnField = function (field) {\n    return this.grid.getUidByColumnField(field);\n  };\n  /**\n   * Gets the visible columns from the TreeGrid.\n   *\n   * @returns {Column[]} - Returns visible columns collection\n   */\n  TreeGrid.prototype.getVisibleColumns = function () {\n    var cols = [];\n    for (var _i = 0, _a = this.columnModel; _i < _a.length; _i++) {\n      var col = _a[_i];\n      if (col.visible) {\n        cols.push(col);\n      }\n    }\n    return cols;\n  };\n  /**\n   * By default, TreeGrid shows the spinner for all its actions. You can use this method to show spinner at your needed time.\n   *\n   * @returns {void}\n   */\n  TreeGrid.prototype.showSpinner = function () {\n    showSpinner(this.element);\n  };\n  /**\n   * Manually shown spinner needs to hide by `hideSpinnner`.\n   *\n   * @returns {void}\n   */\n  TreeGrid.prototype.hideSpinner = function () {\n    hideSpinner(this.element);\n  };\n  /**\n   * Refreshes the TreeGrid header and content.\n   *\n   * @returns {void}\n   */\n  TreeGrid.prototype.refresh = function () {\n    this.uniqueIDCollection = {};\n    this.convertTreeData(this.dataSource);\n    if (!isCountRequired(this)) {\n      if (!(this.dataSource instanceof DataManager)) {\n        this.grid.dataSource = this.flatData;\n      } else {\n        this.grid.setProperties({\n          dataSource: new DataManager(this.dataSource.dataSource, this.dataSource.defaultQuery, this.dataSource.adaptor)\n        }, true);\n      }\n    }\n    this.grid.refresh();\n  };\n  /**\n   * Get the records of checked rows.\n   *\n   * @returns {Object[]} - Returns records that has been checked\n   * @isGenericType true\n   */\n  TreeGrid.prototype.getCheckedRecords = function () {\n    return this.selectionModule.getCheckedrecords();\n  };\n  /**\n   * Get the visible records corresponding to rows visually displayed.\n   *\n   * @returns {Object[]} - Returns visible records based on collapse state of rows\n   * @isGenericType true\n   */\n  TreeGrid.prototype.getVisibleRecords = function () {\n    var visibleRecords = [];\n    var currentViewRecords = this.getCurrentViewRecords();\n    if (!this.allowPaging) {\n      for (var i = 0; i < currentViewRecords.length; i++) {\n        visibleRecords.push(currentViewRecords[parseInt(i.toString(), 10)]);\n        if (!currentViewRecords[parseInt(i.toString(), 10)].expanded) {\n          i += findChildrenRecords(currentViewRecords[parseInt(i.toString(), 10)]).length;\n        }\n      }\n    } else {\n      visibleRecords = currentViewRecords;\n    }\n    return visibleRecords;\n  };\n  /**\n   * Get the indexes of checked rows.\n   *\n   * @returns {number[]} - Returns checked row indexes\n   */\n  TreeGrid.prototype.getCheckedRowIndexes = function () {\n    return this.selectionModule.getCheckedRowIndexes();\n  };\n  /**\n   * Checked the checkboxes using rowIndexes.\n   *\n   * @param {number[]} indexes - row indexes\n   * @returns {void}\n   */\n  TreeGrid.prototype.selectCheckboxes = function (indexes) {\n    this.selectionModule.selectCheckboxes(indexes);\n  };\n  /**\n   * Refreshes the TreeGrid column changes.\n   *\n   * @param {boolean} refreshUI - Defined whether to refresh the DOM\n   * @returns {void}\n   */\n  TreeGrid.prototype.refreshColumns = function (refreshUI) {\n    if (isNullOrUndefined(refreshUI) || refreshUI) {\n      this.grid.columns = this.getGridColumns(this.columns);\n      this.grid.refreshColumns();\n    } else {\n      this.grid.setProperties({\n        columns: this.getGridColumns(this.columns)\n      }, true);\n    }\n  };\n  /**\n   * Refreshes the TreeGrid header.\n   *\n   * @returns {void}\n   */\n  TreeGrid.prototype.refreshHeader = function () {\n    this.grid.refreshHeader();\n  };\n  /**\n   * Expands or collapse child records\n   *\n   * @param {HTMLElement} target - Expand collapse icon cell as target element\n   * @returns {void}\n   * @hidden\n   */\n  TreeGrid.prototype.expandCollapseRequest = function (target) {\n    if (this.editSettings.mode === 'Batch') {\n      var obj = 'dialogObj';\n      var showDialog = 'showDialog';\n      if ((this.getBatchChanges()[this.changedRecords].length || this.getBatchChanges()[this.deletedRecords].length || this.getBatchChanges()[this.addedRecords].length) && this.editSettings.showConfirmDialog) {\n        var dialogObj = this.grid.editModule[\"\" + obj];\n        this.grid.editModule[\"\" + showDialog]('CancelEdit', dialogObj);\n        this.targetElement = target;\n        return;\n      }\n    }\n    if (this.rowTemplate) {\n      var rowInfo = target.closest('.e-treerowcell').parentElement;\n      var record = this.getCurrentViewRecords()[rowInfo.rowIndex];\n      if (target.classList.contains('e-treegridexpand')) {\n        this.collapseRow(rowInfo, record);\n      } else {\n        this.expandRow(rowInfo, record);\n      }\n    } else {\n      var rowInfo_1 = this.grid.getRowInfo(target);\n      var record = rowInfo_1.rowData;\n      if (this.grid.isFrozenGrid() && this.enableVirtualization && !Object.keys(record).length) {\n        var freezeRows = 'freezeRows';\n        record = this.grid.contentModule[\"\" + freezeRows].filter(function (e) {\n          return e.uid === rowInfo_1.row.getAttribute('data-uid');\n        })[0].data;\n      }\n      if (this.enableImmutableMode) {\n        record = this.getCurrentViewRecords()[rowInfo_1.rowIndex];\n      }\n      if (target.classList.contains('e-treegridexpand')) {\n        this.collapseRow(rowInfo_1.row, record);\n      } else {\n        this.expandRow(rowInfo_1.row, record);\n      }\n    }\n  };\n  /**\n   * Expands child rows\n   *\n   * @param {HTMLTableRowElement} row - Expands the given row\n   * @param {Object} record - Expands the given record\n   * @param {Object} key - Primary key value\n   * @param {number} level - Specifies the hierarchical level of the record\n   * @returns {void}\n   */\n  TreeGrid.prototype.expandRow = function (row, record, key, level) {\n    var _this = this;\n    this.isCollapseAll = false;\n    var parentRec = this.parentData;\n    if (!this.enableVirtualization) {\n      parentRec = this.flatData.filter(function (e) {\n        return e.hasChildRecords;\n      });\n    }\n    record = this.getCollapseExpandRecords(row, record);\n    if (isNullOrUndefined(row) && isNullOrUndefined(record)) {\n      return;\n    }\n    if (!isNullOrUndefined(row) && row.cells[0].classList.contains('e-lastrowcell')) {\n      this.lastRowBorder(row, false);\n    }\n    if (this.isExpandAll && !isRemoteData(this)) {\n      var args = {\n        data: parentRec,\n        row: row,\n        cancel: false\n      };\n      var pagerValuePresent = false;\n      if (this.grid.pagerModule && !isNullOrUndefined(this.grid.pagerModule.pagerObj.pagerdropdownModule)) {\n        pagerValuePresent = this.grid.pagerModule.pagerObj.pagerdropdownModule['dropDownListObject'].value ? true : false;\n      }\n      if (!this.isExpandingEventTriggered) {\n        this.trigger(events.expanding, args, function (expandingArgs) {\n          _this.expandAllPrevent = expandingArgs.cancel;\n          if (!expandingArgs.cancel && !isNullOrUndefined(record)) {\n            if (expandingArgs.expandAll) {\n              _this.expandCollapseAllChildren(record, 'expand', key, level);\n            }\n            _this.expandRows(row, record, parentRec);\n          }\n        });\n      } else if ((!this.allowPaging || pagerValuePresent && this.grid.pagerModule.pagerObj.pagerdropdownModule['dropDownListObject'].value === 'All') && !this.expandAllPrevent && this.isExpandingEventTriggered) {\n        this.expandRows(row, record, parentRec);\n      }\n      this.isExpandingEventTriggered = true;\n    } else if (!this.isExpandAll || this.isExpandAll && isRemoteData(this)) {\n      var args = {\n        data: record,\n        row: row,\n        cancel: false\n      };\n      this.trigger(events.expanding, args, function (expandingArgs) {\n        if (!expandingArgs.cancel) {\n          if (expandingArgs.expandAll) {\n            _this.expandCollapseAllChildren(record, 'expand', key, level);\n          }\n          _this.expandRows(row, record, parentRec);\n        }\n      });\n    }\n  };\n  // Internal method to handle the rows expand\n  TreeGrid.prototype.expandRows = function (row, record, parentRec) {\n    this.expandCollapse('expand', row, record);\n    var children = 'Children';\n    if (!(isRemoteData(this) && !isOffline(this)) && (!isCountRequired(this) || !isNullOrUndefined(record[\"\" + children]))) {\n      var expandArgs = {\n        data: record,\n        row: row\n      };\n      if (!isNullOrUndefined(this.expandStateMapping)) {\n        this.updateExpandStateMapping(expandArgs.data, true);\n      }\n      if (this.isExpandAll && !this.isExpandedEventTriggered) {\n        this.isExpandedEventTriggered = true;\n        expandArgs = {\n          data: parentRec,\n          row: row\n        };\n        this.trigger(events.expanded, expandArgs);\n      } else if (!this.isExpandAll && this.enableVirtualization && this.selectionSettings.persistSelection && !isNullOrUndefined(this.virtualScrollModule.prevSelectedRecord)) {\n        this.virtualScrollModule.prevSelectedRecord = [];\n      } else if (!this.isExpandAll) {\n        this.trigger(events.expanded, expandArgs);\n      }\n    }\n  };\n  TreeGrid.prototype.expandCollapseAllChildren = function (record, action, key, level) {\n    if (!isNullOrUndefined(key) && record[this.getPrimaryKeyFieldNames()[0]] !== key || !isNullOrUndefined(level) && level !== record.level) {\n      return;\n    }\n    var records = findChildrenRecords(record).filter(function (e) {\n      return e.hasChildRecords;\n    });\n    records.unshift(record);\n    for (var i = 0; i < records.length; i++) {\n      this.expandCollapse(action, null, records[parseInt(i.toString(), 10)]);\n    }\n  };\n  TreeGrid.prototype.getCollapseExpandRecords = function (row, record) {\n    if (this.allowPaging && this.pageSettings.pageSizeMode === 'All' && this.isExpandAll && isNullOrUndefined(record) && !isRemoteData(this)) {\n      record = this.flatData.filter(function (e) {\n        return e.hasChildRecords;\n      });\n    } else if (isNullOrUndefined(record) && !isNullOrUndefined(row)) {\n      if (this.detailTemplate) {\n        record = this.grid.getCurrentViewRecords()[row.getAttribute('data-rowindex')];\n      } else {\n        if (this.enableVirtualization && (this.isCollapseAll || this.isExpandAll)) {\n          if (row.rowIndex === -1) {\n            record = this.grid.getCurrentViewRecords()[parseInt(row.getAttribute('data-rowindex'), 10)];\n          } else {\n            record = this.grid.getCurrentViewRecords()[row.rowIndex];\n          }\n        } else if (this.rowTemplate) {\n          record = this.grid.getCurrentViewRecords()[row.rowIndex];\n        } else {\n          record = this.grid.getCurrentViewRecords()[parseInt(row.getAttribute('data-rowindex'), 10)];\n        }\n      }\n    }\n    return record;\n  };\n  /**\n   * Collapses child rows\n   *\n   * @param {HTMLTableRowElement} row - Collapse the given row\n   * @param {Object} record - Collapse the given record\n   * @param {Object} key - Primary key value\n   * @returns {void}\n   */\n  TreeGrid.prototype.collapseRow = function (row, record, key) {\n    var _this = this;\n    this.isExpandAll = false;\n    var parentRec = this.parentData;\n    if (!this.enableVirtualization) {\n      parentRec = this.flatData.filter(function (e) {\n        return e.hasChildRecords;\n      });\n    }\n    record = this.getCollapseExpandRecords(row, record);\n    if (isNullOrUndefined(row) && isNullOrUndefined(record)) {\n      return;\n    }\n    if (this.isCollapseAll && !isRemoteData(this)) {\n      var args = {\n        data: parentRec,\n        row: row,\n        cancel: false\n      };\n      if (!this.isCollapsingEventTriggered) {\n        this.trigger(events.collapsing, args, function (collapsingArgs) {\n          _this.collapseAllPrevent = collapsingArgs.cancel;\n          if (!collapsingArgs.cancel) {\n            if (collapsingArgs.collapseAll) {\n              _this.expandCollapseAllChildren(record, 'collapse', key);\n            }\n            _this.collapseRows(row, record, parentRec);\n          }\n        });\n      } else if (!this.allowPaging && !this.collapseAllPrevent && this.isCollapsingEventTriggered) {\n        this.collapseRows(row, record, parentRec);\n      }\n      this.isCollapsingEventTriggered = true;\n    } else if (!this.isCollapseAll || this.isCollapseAll && isRemoteData(this)) {\n      var args = {\n        data: record,\n        row: row,\n        cancel: false\n      };\n      this.trigger(events.collapsing, args, function (collapsingArgs) {\n        if (!collapsingArgs.cancel) {\n          _this.collapseRows(row, record, parentRec);\n        }\n      });\n    }\n  };\n  // Internal method for handling the rows collapse\n  TreeGrid.prototype.collapseRows = function (row, record, parentRec) {\n    this.expandCollapse('collapse', row, record);\n    var collapseArgs = {\n      data: record,\n      row: row\n    };\n    if (!isRemoteData(this)) {\n      if (!isNullOrUndefined(this.expandStateMapping)) {\n        this.updateExpandStateMapping(collapseArgs.data, false);\n      }\n      if (this.isCollapseAll && !this.isCollapsedEventTriggered) {\n        this.isCollapsedEventTriggered = true;\n        collapseArgs = {\n          data: parentRec,\n          row: row\n        };\n        this.trigger(events.collapsed, collapseArgs);\n      } else if (!this.isCollapseAll) {\n        this.trigger(events.collapsed, collapseArgs);\n      }\n      if (this.enableInfiniteScrolling) {\n        var scrollHeight = this.grid.getContent().firstElementChild.scrollHeight;\n        var scrollTop = this.grid.getContent().firstElementChild.scrollTop;\n        if (scrollHeight - scrollTop < this.grid.getRowHeight() + +this.height) {\n          this.grid.getContent().firstElementChild.scrollBy(0, this.grid.getRowHeight());\n        }\n      }\n    }\n  };\n  TreeGrid.prototype.updateExpandStateMapping = function (record, state) {\n    var totalRecords = record;\n    if (totalRecords.length) {\n      for (var i = 0; i < totalRecords.length; i++) {\n        totalRecords[parseInt(i.toString(), 10)][this.expandStateMapping] = state;\n        editAction({\n          value: totalRecords[parseInt(i.toString(), 10)],\n          action: 'edit'\n        }, this, this.isSelfReference, totalRecords[parseInt(i.toString(), 10)].index, this.grid.selectedRowIndex, this.expandStateMapping);\n      }\n    } else {\n      record[\"\" + this.expandStateMapping] = state;\n      editAction({\n        value: record,\n        action: 'edit'\n      }, this, this.isSelfReference, record.index, this.grid.selectedRowIndex, this.expandStateMapping);\n    }\n  };\n  /**\n   * Expands the records at specific hierarchical level\n   *\n   * @param {number} level - Expands the parent rows at given level\n   * @returns {void}\n   */\n  TreeGrid.prototype.expandAtLevel = function (level) {\n    if ((this.allowPaging && this.pageSettings.pageSizeMode === 'All' || this.enableVirtualization) && !isRemoteData(this)) {\n      var rec = this.grid.dataSource.filter(function (e) {\n        if (e.hasChildRecords && e.level === level) {\n          e.expanded = true;\n        }\n        return e.hasChildRecords && e.level === level;\n      });\n      this.expandAction(rec, null, level, true);\n    } else {\n      var rec = this.getRecordDetails(level);\n      var record = getObject('records', rec);\n      this.expandAction(record, null, level);\n    }\n  };\n  /**\n   * Expands the records by given primary key value\n   *\n   * @param {Object} key - Expands the parent rows with given primary key value\n   * @returns {void}\n   */\n  TreeGrid.prototype.expandByKey = function (key) {\n    this.expandCollapseActionByKey(key, 'Expand');\n  };\n  TreeGrid.prototype.expandAction = function (record, key, level, isPaging) {\n    if (isPaging === void 0) {\n      isPaging = false;\n    }\n    var _loop_1 = function (i) {\n      if (!isNullOrUndefined(record[parseInt(i.toString(), 10)].parentItem)) {\n        var puniqueID_1 = record[parseInt(i.toString(), 10)].parentItem.uniqueID;\n        var parentItem = this_1.flatData.filter(function (e) {\n          return e.uniqueID === puniqueID_1;\n        });\n        if (isRemoteData(this_1)) {\n          parentItem = this_1.getCurrentViewRecords().filter(function (e) {\n            return e.uniqueID === puniqueID_1;\n          });\n        }\n        if (parentItem[0].expanded === false) {\n          record.push(parentItem[0]);\n          parentItem[0].expanded = true;\n        } else {\n          if (!getExpandStatus(this_1, parentItem[0], this_1.parentData)) {\n            if (parentItem[0].expanded && parentItem[0].parentItem !== undefined) {\n              record.push(parentItem[0]);\n            }\n          }\n        }\n      }\n      if (!isPaging) {\n        this_1.expandRow(null, record[parseInt(i.toString(), 10)], key, level);\n      }\n    };\n    var this_1 = this;\n    for (var i = 0; i < record.length; i++) {\n      _loop_1(i);\n    }\n    if (isPaging) {\n      this.expandRow(null, record, key, level);\n    }\n  };\n  TreeGrid.prototype.getRecordDetails = function (level) {\n    var rows = this.getRows().filter(function (e) {\n      return e.className.indexOf('level' + level) !== -1 && (e.querySelector('.e-treegridcollapse') || e.querySelector('.e-treegridexpand'));\n    });\n    var records = this.getCurrentViewRecords().filter(function (e) {\n      return e.level === level && e.hasChildRecords;\n    });\n    var obj = {\n      records: records,\n      rows: rows\n    };\n    return obj;\n  };\n  /**\n   * Collapses the records at specific hierarchical level\n   *\n   * @param {number} level - Define the parent row level which needs to be collapsed\n   * @returns {void}\n   */\n  TreeGrid.prototype.collapseAtLevel = function (level) {\n    if ((this.allowPaging && this.pageSettings.pageSizeMode === 'All' || this.enableVirtualization) && !isRemoteData(this)) {\n      var record = this.grid.dataSource.filter(function (e) {\n        if (e.hasChildRecords && e.level === level) {\n          e.expanded = false;\n        }\n        return e.hasChildRecords && e.level === level;\n      });\n      this.collapseAction(record, null, true);\n    } else {\n      var rec = this.getRecordDetails(level);\n      var records = getObject('records', rec);\n      this.collapseAction(records);\n    }\n  };\n  /**\n   * Collapses the records by given primary key value\n   *\n   * @param {Object} key - Collapses the parent rows with given primary key value\n   * @returns {void}\n   */\n  TreeGrid.prototype.collapseByKey = function (key) {\n    this.expandCollapseActionByKey(key, 'Collapse');\n  };\n  TreeGrid.prototype.expandCollapseActionByKey = function (key, action) {\n    var primaryKeyField = this.getPrimaryKeyFieldNames()[0];\n    var dataSource = isRemoteData(this) ? this.getCurrentViewRecords() : this.grid.dataSource;\n    if (!isNullOrUndefined(primaryKeyField)) {\n      var rec = dataSource.filter(function (e) {\n        return e[\"\" + primaryKeyField].toString() === key.toString();\n      });\n      if (action === 'Expand') {\n        this.expandAction(rec, key, null);\n      } else {\n        this.collapseAction(rec, key);\n      }\n    }\n  };\n  TreeGrid.prototype.collapseAction = function (record, key, isPaging) {\n    if (isPaging === void 0) {\n      isPaging = false;\n    }\n    if (isPaging) {\n      this.collapseRow(null, record);\n    } else {\n      for (var i = 0; i < record.length; i++) {\n        this.collapseRow(null, record[parseInt(i.toString(), 10)], key);\n      }\n    }\n    if (!this.grid.contentModule.isDataSourceChanged && this.enableVirtualization && this.getRows() && this.parentData.length === this.getRows().length) {\n      var endIndex = 'endIndex';\n      this.grid.contentModule.startIndex = -1;\n      this.grid.contentModule[\"\" + endIndex] = -1;\n    }\n  };\n  /**\n   * Expands All the rows\n   *\n   * @returns {void}\n   */\n  TreeGrid.prototype.expandAll = function () {\n    if (this.getCurrentViewRecords().length === 0) {\n      var error = 'The provided value for the datasource is undefined. Please ensure to add the dataSource.';\n      this.trigger(events.actionFailure, {\n        error: error\n      });\n    }\n    this.isExpandedEventTriggered = false;\n    this.isExpandingEventTriggered = false;\n    this.expandCollapseAll('expand');\n  };\n  /**\n   * Collapses All the rows\n   *\n   * @returns {void}\n   */\n  TreeGrid.prototype.collapseAll = function () {\n    if (this.getCurrentViewRecords().length === 0) {\n      var error = 'The provided value for the datasource is undefined. Please ensure to add the dataSource.';\n      this.trigger(events.actionFailure, {\n        error: error\n      });\n    }\n    this.isCollapsedEventTriggered = false;\n    this.isCollapsingEventTriggered = false;\n    this.expandCollapseAll('collapse');\n  };\n  TreeGrid.prototype.expandCollapseAll = function (action) {\n    var rows;\n    if (this.rowTemplate) {\n      rows = [].slice.call(this.grid.getContentTable().querySelectorAll('tr')).filter(function (e) {\n        return e.querySelector('.e-treegrid' + (action === 'expand' ? 'collapse' : 'expand'));\n      });\n    } else {\n      rows = this.getRows().filter(function (e) {\n        return e.querySelector('.e-treegrid' + (action === 'expand' ? 'collapse' : 'expand'));\n      });\n    }\n    if (!rows.length && this.getRows().length) {\n      rows.push(this.getRows()[0]);\n    }\n    this.isExpandAll = true;\n    this.isCollapseAll = true;\n    if ((this.allowPaging && this.pageSettings.pageSizeMode === 'All' || this.enableVirtualization || this.enableInfiniteScrolling) && !isRemoteData(this)) {\n      this.flatData.filter(function (e) {\n        if (e.hasChildRecords) {\n          e.expanded = action === 'collapse' ? false : true;\n        }\n      });\n      if (rows.length) {\n        for (var i = 0; i < rows.length; i++) {\n          if (action === 'collapse') {\n            if (!isNullOrUndefined(this.getCurrentViewRecords()[rows[parseInt(i.toString(), 10)].rowIndex])) {\n              this.collapseRow(rows[parseInt(i.toString(), 10)]);\n            }\n          } else {\n            if (!this.enableVirtualization) {\n              this.expandRow(rows[parseInt(i.toString(), 10)]);\n            } else if (rows[0].getAttribute('aria-expanded') !== 'true') {\n              this.expandRow(rows[0]);\n            }\n          }\n        }\n      } else if (this.allowPaging) {\n        var isExpandCollapseall = this.enableCollapseAll;\n        this.setProperties({\n          enableCollapseAll: true\n        }, true);\n        this.grid.pagerModule.goToPage(1);\n        this.setProperties({\n          enableCollapseAll: isExpandCollapseall\n        }, true);\n      }\n    } else {\n      for (var i = 0; i < rows.length; i++) {\n        if (action === 'collapse') {\n          this.collapseRow(rows[parseInt(i.toString(), 10)]);\n        } else {\n          this.expandRow(rows[parseInt(i.toString(), 10)]);\n        }\n      }\n    }\n    this.isExpandAll = false;\n    this.isCollapseAll = false;\n  };\n  TreeGrid.prototype.expandCollapse = function (action, row, record, isChild) {\n    var _this = this;\n    var expandingArgs = {\n      row: row,\n      data: record,\n      childData: [],\n      requestType: action\n    };\n    var childRecords = this.grid.currentViewData.filter(function (e) {\n      return e.parentUniqueID === record.uniqueID;\n    });\n    var targetEle;\n    if (!isRemoteData(this) && action === 'expand' && this.isSelfReference && isCountRequired(this) && !childRecords.length || action === 'collapse' || this.isExpandAll && !this.loadChildOnDemand && !isRemoteData(this) && this.isSelfReference && isCountRequired(this)) {\n      this.updateChildOnDemand(expandingArgs);\n    }\n    var gridRows = this.getRows();\n    if (this.rowTemplate) {\n      var rows = this.getContentTable().rows;\n      gridRows = [].slice.call(rows);\n    }\n    var rowIndex;\n    if (isNullOrUndefined(row)) {\n      rowIndex = this.grid.currentViewData.indexOf(record);\n      row = gridRows[parseInt(rowIndex.toString(), 10)];\n    } else {\n      rowIndex = +row.getAttribute('data-rowindex');\n    }\n    if (!isNullOrUndefined(row)) {\n      row.setAttribute('aria-expanded', action === 'expand' ? 'true' : 'false');\n    }\n    if ((this.allowPaging && this.pageSettings.pageSizeMode === 'All' || this.enableVirtualization) && !isRemoteData(this) && !isCountRequired(this)) {\n      this.notify(events.localPagedExpandCollapse, {\n        action: action,\n        row: row,\n        record: record\n      });\n    } else {\n      var displayAction = void 0;\n      if (action === 'expand') {\n        displayAction = 'e-childrow-visible';\n        if (!isChild) {\n          record.expanded = true;\n          this.uniqueIDCollection[record.uniqueID].expanded = record.expanded;\n        }\n        if (!isNullOrUndefined(row)) {\n          targetEle = row.getElementsByClassName('e-treegridcollapse')[0];\n        }\n        if (isChild && !isNullOrUndefined(record[this.expandStateMapping]) && record[this.expandStateMapping] && isNullOrUndefined(targetEle)) {\n          targetEle = row.getElementsByClassName('e-treegridexpand')[0];\n        }\n        if (isNullOrUndefined(targetEle)) {\n          return;\n        }\n        if (!targetEle.classList.contains('e-treegridexpand')) {\n          addClass([targetEle], 'e-treegridexpand');\n        }\n        removeClass([targetEle], 'e-treegridcollapse');\n      } else {\n        displayAction = 'e-childrow-hidden';\n        if (!isChild || isCountRequired(this)) {\n          record.expanded = false;\n          this.uniqueIDCollection[record.uniqueID].expanded = record.expanded;\n        }\n        if (!isNullOrUndefined(row)) {\n          targetEle = row.getElementsByClassName('e-treegridexpand')[0];\n        }\n        if (isChild && !isNullOrUndefined(record[this.expandStateMapping]) && !record[this.expandStateMapping] && isNullOrUndefined(targetEle)) {\n          targetEle = row.getElementsByClassName('e-treegridcollapse')[0];\n        }\n        if (isNullOrUndefined(targetEle)) {\n          return;\n        }\n        if (!targetEle.classList.contains('e-treegridcollapse')) {\n          addClass([targetEle], 'e-treegridcollapse');\n        }\n        removeClass([targetEle], 'e-treegridexpand');\n      }\n      row.querySelectorAll('.e-treerowcell')[0].setAttribute('aria-expanded', action === 'expand' ? 'true' : 'false');\n      var detailrows = gridRows.filter(function (r) {\n        return r.classList.contains('e-griddetailrowindex' + record.index + 'level' + (record.level + 1));\n      });\n      if (isRemoteData(this) && !isOffline(this)) {\n        this.remoteExpand(action, row, record);\n      } else {\n        if (!isCountRequired(this) || childRecords.length || action === 'collapse') {\n          this.localExpand(action, row, record);\n        }\n        var lastrowIdx = this.getVisibleRecords()[this.getVisibleRecords().length - 1]['index'];\n        var lastRow = this.getRowByIndex(lastrowIdx);\n        if (this.grid.getContentTable().clientHeight <= this.grid.getContent().clientHeight && !isNullOrUndefined(lastRow) && !lastRow.cells[0].classList.contains('e-lastrowcell')) {\n          this.lastRowBorder(lastRow, true);\n        }\n      }\n      if (isCountRequired(this) && action === 'expand') {\n        var currentData = this.getCurrentViewRecords();\n        var visibleRecords = currentData.filter(function (e) {\n          return getExpandStatus(_this, e, _this.parentData);\n        });\n        this.dataResults.result = visibleRecords;\n      }\n      if (!isNullOrUndefined(targetEle) && targetEle.closest('.e-treerowcell').classList.contains('e-cellselectionbackground')) {\n        targetEle.closest('.e-treerowcell').classList.remove('e-cellselectionbackground');\n        targetEle.closest('.e-treerowcell').removeAttribute('aria-selected');\n      }\n      if (this.isPixelHeight() && !row.cells[0].classList.contains('e-lastrowcell')) {\n        var totalRows = this.getRows();\n        var rows = this.getContentTable().rows;\n        totalRows = [].slice.call(rows);\n        for (var i = totalRows.length - 1; i >= 0; i--) {\n          if (!isHidden(totalRows[parseInt(i.toString(), 10)])) {\n            var table = this.getContentTable();\n            var sHeight = table.scrollHeight;\n            var clientHeight = this.getContent().clientHeight;\n            this.lastRowBorder(totalRows[parseInt(i.toString(), 10)], sHeight <= clientHeight);\n            break;\n          }\n        }\n      }\n      this.notify('rowExpandCollapse', {\n        detailrows: detailrows,\n        action: displayAction,\n        record: record,\n        row: row\n      });\n      this.updateAltRow(gridRows);\n    }\n  };\n  TreeGrid.prototype.updateChildOnDemand = function (expandingArgs) {\n    var _this = this;\n    if (expandingArgs.requestType === 'collapse' && isCountRequired(this)) {\n      var flatDataRecords = this.flatData.slice();\n      for (var i = 0; i < flatDataRecords.length; i++) {\n        if (flatDataRecords[parseInt(i.toString(), 10)]['parentUniqueID'] === expandingArgs.data['uniqueID']) {\n          flatDataRecords.splice(i, 1);\n          i = i - 1;\n        }\n      }\n      this.dataResults.result = flatDataRecords;\n      return;\n    }\n    var deff = new Deferred();\n    var childDataBind = 'childDataBind';\n    expandingArgs[\"\" + childDataBind] = deff.resolve;\n    var record = expandingArgs.data;\n    this.trigger(events.dataStateChange, expandingArgs);\n    deff.promise.then(function () {\n      if (expandingArgs.childData.length) {\n        if (isCountRequired(_this)) {\n          _this.flatData = _this.dataResults.result;\n        }\n        if (_this.enableInfiniteScrolling && isCountRequired(_this)) {\n          _this.flatData = _this.infiniteScrollData;\n        }\n        var currentData = _this.flatData;\n        var index = 0;\n        for (var i = 0; i < currentData.length; i++) {\n          if (currentData[parseInt(i.toString(), 10)].taskData === record.taskData) {\n            index = i;\n            break;\n          }\n        }\n        var data_1 = getValue('result', _this.dataSource);\n        var childData = extendArray(expandingArgs.childData);\n        var length_1 = record[_this.childMapping] ? record[_this.childMapping].length > childData.length ? record[_this.childMapping].length : childData.length : childData.length;\n        for (var i = 0; i < length_1; i++) {\n          if (record[_this.childMapping]) {\n            data_1.filter(function (e, i) {\n              if (e[_this.parentIdMapping] === record[_this.idMapping]) {\n                data_1.splice(i, 1);\n              }\n            });\n          }\n          if (childData[parseInt(i.toString(), 10)]) {\n            childData[parseInt(i.toString(), 10)].level = record.level + 1;\n            childData[parseInt(i.toString(), 10)].index = Math.ceil(Math.random() * 1000);\n            childData[parseInt(i.toString(), 10)].parentItem = extend({}, record);\n            childData[parseInt(i.toString(), 10)].taskData = extend({}, childData[parseInt(i.toString(), 10)]);\n            delete childData[parseInt(i.toString(), 10)].parentItem.childRecords;\n            delete childData[parseInt(i.toString(), 10)].taskData.parentItem;\n            childData[parseInt(i.toString(), 10)].parentUniqueID = record.uniqueID;\n            childData[parseInt(i.toString(), 10)].uniqueID = getUid(_this.element.id + '_data_');\n            setValue('uniqueIDCollection.' + childData[parseInt(i.toString(), 10)].uniqueID, childData[parseInt(i.toString(), 10)], _this);\n            if (!isNullOrUndefined(childData[parseInt(i.toString(), 10)][_this.childMapping]) || childData[parseInt(i.toString(), 10)][_this.hasChildMapping] && isCountRequired(_this)) {\n              childData[parseInt(i.toString(), 10)].hasChildRecords = true;\n            }\n            if (isCountRequired(_this) && record[_this.childMapping] && record[_this.childMapping][parseInt(i.toString(), 10)]) {\n              currentData.splice(index + 1 + i, 0, childData[parseInt(i.toString(), 10)]);\n            } else {\n              currentData.splice(index + 1 + i, record[_this.childMapping] && record[_this.childMapping][parseInt(i.toString(), 10)] ? 1 : 0, childData[parseInt(i.toString(), 10)]);\n            }\n          } else {\n            currentData.splice(index + 1 + i, 1);\n          }\n        }\n        currentData[parseInt(index.toString(), 10)][\"\" + _this.childMapping] = childData;\n        currentData[parseInt(index.toString(), 10)].childRecords = childData;\n        currentData[parseInt(index.toString(), 10)].expanded = true;\n        setValue('uniqueIDCollection.' + currentData[parseInt(index.toString(), 10)].uniqueID, currentData[parseInt(index.toString(), 10)], _this);\n        for (var j = 0; j < expandingArgs.childData.length; j++) {\n          data_1.push(expandingArgs.childData[parseInt(j.toString(), 10)]);\n        }\n      }\n      if (isCountRequired(_this) && !_this.loadChildOnDemand && expandingArgs.requestType === 'expand') {\n        _this.dataResults['expandRecord'] = {};\n        _this.dataResults['expandRecord'] = expandingArgs.data;\n      }\n      _this.isExpandRefresh = true;\n      var scrollHeightBeforeRefresh = _this.getContentTable().parentElement.scrollTop;\n      _this.grid.refresh();\n      if (_this.enableInfiniteScrolling) {\n        _this.getContentTable().parentElement.scrollTop = scrollHeightBeforeRefresh;\n      }\n      _this.trigger(events.expanded, expandingArgs);\n    });\n  };\n  TreeGrid.prototype.remoteExpand = function (action, row, record) {\n    var gridRows = this.getRows();\n    var fetchRemoteChildData = 'fetchRemoteChildData';\n    if (this.rowTemplate) {\n      var rows_1 = this.getContentTable().rows;\n      gridRows = [].slice.call(rows_1);\n    }\n    var args = {\n      data: record,\n      row: row\n    };\n    var rows = [];\n    rows = gridRows.filter(function (r) {\n      return r.querySelector('.e-gridrowindex' + record.index + 'level' + (record.level + 1)) || r.querySelector('.e-gridrowindex' + record.index + 'level0' + '.e-summarycell');\n    });\n    if (action === 'expand') {\n      this.notify(events.remoteExpand, {\n        record: record,\n        rows: rows,\n        parentRow: row\n      });\n      var args_1 = {\n        row: row,\n        data: record\n      };\n      if (rows.length > 0) {\n        this.trigger(events.expanded, args_1);\n      }\n    } else if (action === 'collapse' && this.enableVirtualization) {\n      this.dataModule[\"\" + fetchRemoteChildData]({\n        action: action,\n        record: args.data,\n        rows: null,\n        parentRow: args.row\n      });\n    } else {\n      this.collapseRemoteChild({\n        record: record,\n        rows: rows\n      });\n      this.trigger(events.collapsed, args);\n    }\n  };\n  TreeGrid.prototype.localExpand = function (action, row, record) {\n    var rows;\n    var childRecords = this.grid.currentViewData.filter(function (e) {\n      return e.parentUniqueID === record.uniqueID;\n    });\n    if (this.isPixelHeight() && row.cells[0].classList.contains('e-lastrowcell')) {\n      this.lastRowBorder(row, false);\n    }\n    var movableRows;\n    var freezeRightRows;\n    var gridRows = this.getRows();\n    if (this.rowTemplate) {\n      var rows_2 = this.getContentTable().rows;\n      gridRows = [].slice.call(rows_2);\n    }\n    var displayAction = action === 'expand' ? 'e-childrow-visible' : 'e-childrow-hidden';\n    var primaryKeyField = this.getPrimaryKeyFieldNames()[0];\n    if (this.enableImmutableMode && !this.allowPaging) {\n      rows = [];\n      for (var i = 0; i < childRecords.length; i++) {\n        var rowIndex = this.grid.getRowIndexByPrimaryKey(childRecords[parseInt(i.toString(), 10)][\"\" + primaryKeyField]);\n        rows.push(this.getRows()[parseInt(rowIndex.toString(), 10)]);\n      }\n    } else {\n      rows = gridRows.filter(function (r) {\n        return r.querySelector('.e-gridrowindex' + record.index + 'level' + (record.level + 1));\n      });\n    }\n    var freeze = this.grid.getFrozenLeftColumnsCount() > 0 || this.grid.getFrozenRightColumnsCount() > 0 ? true : false;\n    if (this.frozenRows || this.frozenColumns || this.getFrozenColumns() || freeze) {\n      movableRows = this.getRows().filter(function (r) {\n        return r.querySelector('.e-gridrowindex' + record.index + 'level' + (record.level + 1));\n      });\n    }\n    if (freeze) {\n      freezeRightRows = this.getRows().filter(function (r) {\n        return r.querySelector('.e-gridrowindex' + record.index + 'level' + (record.level + 1));\n      });\n    }\n    var gridRowsObject = this.grid.getRowsObject();\n    var currentViewData = this.grid.currentViewData;\n    var currentRecord = currentViewData.filter(function (e) {\n      return e.uniqueID === record.uniqueID;\n    });\n    var currentIndex = currentViewData.indexOf(currentRecord[0]);\n    if (!isNullOrUndefined(gridRowsObject[parseInt(currentIndex.toString(), 10)].visible) && gridRowsObject[parseInt(currentIndex.toString(), 10)].visible !== false) {\n      gridRowsObject[parseInt(currentIndex.toString(), 10)].visible = true;\n    }\n    var detailrows = gridRows.filter(function (r) {\n      return r.classList.contains('e-griddetailrowindex' + record.index + 'level' + (record.level + 1));\n    });\n    for (var i = 0; i < rows.length; i++) {\n      if (!isNullOrUndefined(rows[parseInt(i.toString(), 10)])) {\n        this.toggleRowVisibility(rows[parseInt(i.toString(), 10)], displayAction);\n      }\n      if (!isNullOrUndefined(rows[parseInt(i.toString(), 10)]) && !this.allowPaging && !(this.enableVirtualization || this.enableInfiniteScrolling || isRemoteData(this) || isCountRequired(this))) {\n        gridRowsObject[rows[parseInt(i.toString(), 10)].rowIndex].visible = displayAction !== 'e-childrow-hidden' ? true : false;\n        var parentRecord = currentViewData.filter(function (e) {\n          return e.uniqueID === currentRecord[0].parentUniqueID;\n        });\n        if (!isNullOrUndefined(parentRecord[0]) && gridRows[currentViewData.indexOf(parentRecord[0])].getElementsByClassName('e-treegridcollapse').length) {\n          gridRowsObject[parseInt(currentIndex.toString(), 10)].visible = false;\n        }\n      }\n      if (!isNullOrUndefined(movableRows)) {\n        this.toggleRowVisibility(movableRows[parseInt(i.toString(), 10)], displayAction);\n      }\n      if (!isNullOrUndefined(freezeRightRows)) {\n        this.toggleRowVisibility(freezeRightRows[parseInt(i.toString(), 10)], displayAction);\n      }\n      this.notify('childRowExpand', {\n        row: rows[parseInt(i.toString(), 10)]\n      });\n      if (!isNullOrUndefined(childRecords[parseInt(i.toString(), 10)].childRecords) && childRecords[parseInt(i.toString(), 10)].childRecords.length > 0 && (action !== 'expand' || isNullOrUndefined(childRecords[parseInt(i.toString(), 10)].expanded) || childRecords[parseInt(i.toString(), 10)].expanded)) {\n        this.expandCollapse(action, rows[parseInt(i.toString(), 10)], childRecords[parseInt(i.toString(), 10)], true);\n        if (this.frozenColumns <= this.treeColumnIndex && !isNullOrUndefined(movableRows)) {\n          this.expandCollapse(action, movableRows[parseInt(i.toString(), 10)], childRecords[parseInt(i.toString(), 10)], true);\n        }\n      }\n    }\n    for (var i = 0; i < detailrows.length; i++) {\n      if (!isNullOrUndefined(detailrows[parseInt(i.toString(), 10)]) && !this.allowPaging && !(this.enableVirtualization || this.enableInfiniteScrolling || isRemoteData(this) || isCountRequired(this))) {\n        gridRowsObject[detailrows[parseInt(i.toString(), 10)].rowIndex].visible = displayAction !== 'e-childrow-hidden' ? true : false;\n        this.toggleRowVisibility(detailrows[parseInt(i.toString(), 10)], displayAction);\n      }\n    }\n    if (!this.allowPaging && !(this.enableVirtualization || this.enableInfiniteScrolling || isRemoteData(this) || isCountRequired(this))) {\n      this.grid.notify('refresh-Expand-and-Collapse', {\n        rows: this.grid.getRowsObject()\n      });\n    }\n  };\n  TreeGrid.prototype.toggleRowVisibility = function (row, displayAction) {\n    if (row) {\n      row.classList.remove('e-childrow-hidden', 'e-childrow-visible');\n      row.classList.add(displayAction);\n    }\n  };\n  TreeGrid.prototype.updateAltRow = function (rows) {\n    if (this.enableAltRow && !this.rowTemplate) {\n      var visibleRowCount = 0;\n      for (var i = 0; rows && i < rows.length; i++) {\n        var gridRow = rows[parseInt(i.toString(), 10)];\n        if (!gridRow.classList.contains('e-childrow-hidden')) {\n          if (gridRow.classList.contains('e-altrow')) {\n            removeClass([gridRow], 'e-altrow');\n          }\n          if (visibleRowCount % 2 !== 0 && !gridRow.classList.contains('e-summaryrow') && !gridRow.classList.contains('e-detailrow')) {\n            addClass([gridRow], 'e-altrow');\n          }\n          if (!gridRow.classList.contains('e-summaryrow') && !gridRow.classList.contains('e-detailrow')) {\n            visibleRowCount++;\n          }\n        }\n      }\n    }\n  };\n  TreeGrid.prototype.treeColumnRowTemplate = function () {\n    var rows = this.getContentTable().rows;\n    rows = [].slice.call(rows);\n    var rowsObject = this.grid.getRowsObject();\n    for (var i = 0; i < rows.length; i++) {\n      var rcell = this.grid.getContentTable().rows[parseInt(i.toString(), 10)].cells[this.treeColumnIndex];\n      var row = rows[parseInt(i.toString(), 10)];\n      var rowData = rowsObject.length !== 0 ? rowsObject[parseInt(i.toString(), 10)].data : new Object();\n      var arg = {\n        data: rowData,\n        row: row,\n        cell: rcell,\n        column: this.getColumns()[this.treeColumnIndex]\n      };\n      this.renderModule.cellRender(arg);\n    }\n  };\n  TreeGrid.prototype.collapseRemoteChild = function (rowDetails, isChild) {\n    if (!isNullOrUndefined(isChild) && !isChild && this.loadChildOnDemand) {\n      rowDetails.record.expanded = false;\n    }\n    var rows = rowDetails.rows;\n    var row;\n    var childRecord;\n    var movablerows = [];\n    var rightrows = [];\n    var freeze = this.getFrozenLeftColumnsCount() > 0 || this.getFrozenRightColumnsCount() > 0 ? true : false;\n    if (freeze) {\n      movablerows = this.getRows().filter(function (r) {\n        return r.querySelector('.e-gridrowindex' + rowDetails.record.index + 'level' + (rowDetails.record.level + 1));\n      });\n      rightrows = this.getRows().filter(function (r) {\n        return r.querySelector('.e-gridrowindex' + rowDetails.record.index + 'level' + (rowDetails.record.level + 1));\n      });\n    }\n    for (var i = 0; i < rows.length; i++) {\n      this.toggleRowVisibility(rows[parseInt(i.toString(), 10)], 'e-childrow-hidden');\n      row = rows[parseInt(i.toString(), 10)];\n      var collapsingTd = rows[parseInt(i.toString(), 10)].querySelector('.e-detailrowexpand');\n      if (!isNullOrUndefined(collapsingTd)) {\n        this.grid.detailRowModule.collapse(collapsingTd);\n      }\n      if (freeze) {\n        this.toggleRowVisibility(movablerows[parseInt(i.toString(), 10)], 'e-childrow-hidden');\n        this.toggleRowVisibility(rightrows[parseInt(i.toString(), 10)], 'e-childrow-hidden');\n        if (!rows[parseInt(i.toString(), 10)].querySelector('.e-treecolumn-container .e-treegridexpand')) {\n          if (movablerows[parseInt(i.toString(), 10)].querySelector('.e-treecolumn-container .e-treegridexpand')) {\n            row = movablerows[parseInt(i.toString(), 10)];\n          } else if (rightrows[parseInt(i.toString(), 10)].querySelector('.e-treecolumn-container .e-treegridexpand')) {\n            row = rightrows[parseInt(i.toString(), 10)];\n          }\n        }\n      }\n      if (row.querySelector('.e-treecolumn-container .e-treegridexpand')) {\n        var expandElement = row.querySelector('.e-treecolumn-container .e-treegridexpand');\n        childRecord = this.rowTemplate ? this.grid.getCurrentViewRecords()[rows[parseInt(i.toString(), 10)].rowIndex] : this.grid.getRowObjectFromUID(rows[parseInt(i.toString(), 10)].getAttribute('data-Uid')).data;\n        if (!isNullOrUndefined(expandElement) && childRecord.expanded) {\n          removeClass([expandElement], 'e-treegridexpand');\n          addClass([expandElement], 'e-treegridcollapse');\n        }\n        var cRow = [];\n        var eRows = this.getRows();\n        for (var i_1 = 0; i_1 < eRows.length; i_1++) {\n          if (eRows[parseInt(i_1.toString(), 10)].querySelector('.e-gridrowindex' + childRecord.index + 'level' + (childRecord.level + 1))) {\n            cRow.push(eRows[parseInt(i_1.toString(), 10)]);\n          }\n        }\n        if (cRow.length && childRecord.expanded) {\n          this.collapseRemoteChild({\n            record: childRecord,\n            rows: cRow\n          }, false);\n        }\n      }\n    }\n  };\n  /**\n   * Method to sanitize html element\n   *\n   * @param {any} value - Specifies the html value to sanitize\n   * @returns {any} Returns the sanitized html value\n   * @hidden\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  TreeGrid.prototype.sanitize = function (value) {\n    if (this.enableHtmlSanitizer && typeof value === 'string') {\n      return SanitizeHtmlHelper.sanitize(value);\n    }\n    return value;\n  };\n  /**\n   * Updates the rows and cells\n   *\n   * @param {Object[]} records - Updates the given records\n   * @param {HTMLTableRowElement[]} rows - Updates the given rows\n   * @param {number} index -  Updates the given cell index\n   * @returns {void}\n   */\n  TreeGrid.prototype.updateRowAndCellElements = function (records, rows, index) {\n    for (var i = 0; i < records.length; i++) {\n      this.renderModule.cellRender({\n        data: records[parseInt(i.toString(), 10)],\n        cell: rows[parseInt(i.toString(), 10)].cells[parseInt(index.toString(), 10)],\n        column: this.grid.getColumns()[this.treeColumnIndex],\n        requestType: 'rowDragAndDrop'\n      });\n      if (this['action'] === 'indenting' || this['action'] === 'outdenting') {\n        this.renderModule.RowModifier({\n          data: records[parseInt(i.toString(), 10)],\n          row: rows[parseInt(i.toString(), 10)]\n        });\n      }\n    }\n  };\n  /**\n   * @hidden\n   * @returns {void}\n   */\n  TreeGrid.prototype.addListener = function () {\n    this.on('updateResults', this.updateResultModel, this);\n    this.grid.on('initial-end', this.afterGridRender, this);\n  };\n  TreeGrid.prototype.updateResultModel = function (returnResult) {\n    this.dataResults = returnResult;\n  };\n  /**\n   * @hidden\n   * @returns {void}\n   */\n  TreeGrid.prototype.removeListener = function () {\n    if (this.isDestroyed) {\n      return;\n    }\n    this.off('updateResults', this.updateResultModel);\n    this.grid.off('initial-end', this.afterGridRender);\n  };\n  /**\n   * Filters TreeGrid row by column name with the given options.\n   *\n   * @param  {string} fieldName - Defines the field name of the column.\n   * @param  {string} filterOperator - Defines the operator to filter records.\n   * @param  {string | number | Date | boolean} filterValue - Defines the value used to filter records.\n   * @param  {string} predicate - Defines the relationship between one filter query and another by using AND or OR predicate.\n   * @param  {boolean} matchCase - If match case is set to true, the TreeGrid filters the records with exact match. if false, it filters\n   * case insensitive records (uppercase and lowercase letters are treated the same).\n   * @param  {boolean} ignoreAccent - If ignoreAccent is set to true,\n   * then filter ignores diacritic characters or accents while filtering.\n   * @param  {string} actualFilterValue - Defines the actual filter value for filter column.\n   * @param  {string} actualOperator - Defines the actual filter operator for filter column.\n   * @returns {void}\n   */\n  TreeGrid.prototype.filterByColumn = function (fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator) {\n    this.grid.filterByColumn(fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator);\n  };\n  /**\n   * Clears all the filtered rows of the TreeGrid.\n   *\n   * @returns {void}\n   */\n  TreeGrid.prototype.clearFiltering = function () {\n    this.grid.clearFiltering();\n  };\n  /**\n   * Removes filtered column by field name.\n   *\n   * @param  {string} field - Defines column field name to remove filter.\n   * @param  {boolean} isClearFilterBar -  Specifies whether the filter bar value needs to be cleared.\n   * @returns {void}\n   * @hidden\n   */\n  TreeGrid.prototype.removeFilteredColsByField = function (field, isClearFilterBar) {\n    this.grid.removeFilteredColsByField(field, isClearFilterBar);\n  };\n  /**\n   * Selects a row by given index.\n   *\n   * @param  {number} index - Defines the row index.\n   * @param  {boolean} isToggle - If set to true, then it toggles the selection.\n   * @returns {void}\n   */\n  TreeGrid.prototype.selectRow = function (index, isToggle) {\n    this.grid.selectRow(index, isToggle);\n  };\n  /**\n   * Selects a collection of rows by indexes.\n   *\n   * @param  {number[]} rowIndexes - Specifies the row indexes.\n   * @returns {void}\n   */\n  TreeGrid.prototype.selectRows = function (rowIndexes) {\n    this.grid.selectRows(rowIndexes);\n  };\n  /**\n   * Deselects the current selected rows and cells.\n   *\n   * @returns {void}\n   */\n  TreeGrid.prototype.clearSelection = function () {\n    if (!isNullOrUndefined(this.grid.selectionModule)) {\n      this.grid.selectionModule['actualTarget'] = null;\n    }\n    this.grid.clearSelection();\n  };\n  /**\n   * Copy the selected rows or cells data into clipboard.\n   *\n   * @param {boolean} withHeader - Specifies whether the column header text needs to be copied along with rows or cells.\n   * @returns {void}\n   */\n  TreeGrid.prototype.copy = function (withHeader) {\n    this.clipboardModule.copy(withHeader);\n  };\n  /**\n   * Paste data from clipboard to selected cells.\n   *\n   * @param {boolean} data - Specifies the date for paste.\n   * @param {boolean} rowIndex - Specifies the row index.\n   * @param {boolean} colIndex - Specifies the column index.\n   * @returns {void}\n   */\n  TreeGrid.prototype.paste = function (data, rowIndex, colIndex) {\n    this.clipboardModule.paste(data, rowIndex, colIndex);\n  };\n  /**\n   * Selects a cell by the given index.\n   *\n   * @param  {IIndex} cellIndex - Defines the row and column indexes.\n   * @param  {boolean} isToggle - If set to true, then it toggles the selection.\n   * @returns {void}\n   */\n  TreeGrid.prototype.selectCell = function (cellIndex, isToggle) {\n    this.grid.selectCell(cellIndex, isToggle);\n  };\n  /**\n   * Gets the collection of selected rows.\n   *\n   * @returns {Element[]} - Returns selected row elements collection\n   */\n  TreeGrid.prototype.getSelectedRows = function () {\n    return this.grid.getSelectedRows();\n  };\n  /**\n   * Gets a movable table cell by row and column index.\n   *\n   * @param  {number} rowIndex - Specifies the row index.\n   * @param  {number} columnIndex - Specifies the column index.\n   * @returns {Element} - Returns movable cell element from the indexes passed\n   *\n    */\n  TreeGrid.prototype.getMovableCellFromIndex = function (rowIndex, columnIndex) {\n    return this.grid.getCellFromIndex(rowIndex, columnIndex);\n  };\n  /**\n   * Gets all the TreeGrid's movable table data rows.\n   *\n   * @returns {Element[]} - Returns element collection of movable rows\n   *\n    */\n  TreeGrid.prototype.getMovableDataRows = function () {\n    return this.grid.getDataRows();\n  };\n  /**\n   * Gets a movable tables row by index.\n   *\n   * @param  {number} index - Specifies the row index.\n   * @returns {Element} - Returns movable row based on index passed\n   *\n    */\n  TreeGrid.prototype.getMovableRowByIndex = function (index) {\n    return this.grid.getRowByIndex(index);\n  };\n  /**\n   * Gets the TreeGrid's movable content rows from frozen treegrid.\n   *\n   * @returns {Element[]}: Returns movable row element\n    */\n  TreeGrid.prototype.getMovableRows = function () {\n    return this.grid.getRows();\n  };\n  /**\n   * Gets a frozen right tables row element by index.\n   *\n   * @param  {number} index - Specifies the row index.\n   * @returns {Element} returns the element\n   *\n    */\n  TreeGrid.prototype.getFrozenRightRowByIndex = function (index) {\n    return this.grid.getRowByIndex(index);\n  };\n  /**\n   * Gets the Tree Grid's frozen right content rows from frozen Tree Grid.\n   *\n   * @returns {Element[]} returns the element\n   *\n    */\n  TreeGrid.prototype.getFrozenRightRows = function () {\n    return this.grid.getRows();\n  };\n  /**\n   * Gets all the Tree Grid's frozen right table data rows.\n   *\n   * @returns {Element[]} Returns the Element\n   *\n    */\n  TreeGrid.prototype.getFrozenRightDataRows = function () {\n    return this.grid.getDataRows();\n  };\n  /**\n   * Gets a frozen right table cell by row and column index.\n   *\n   * @param  {number} rowIndex - Specifies the row index.\n   * @param  {number} columnIndex - Specifies the column index.\n   * @returns {Element} Returns the Element\n   *\n    */\n  TreeGrid.prototype.getFrozenRightCellFromIndex = function (rowIndex, columnIndex) {\n    return this.grid.getCellFromIndex(rowIndex, columnIndex);\n  };\n  /**\n   * Gets a frozen left column header by column index.\n   *\n   * @param  {number} index - Specifies the column index.\n   * @returns {Element} Returns the Element\n   *\n    */\n  TreeGrid.prototype.getFrozenLeftColumnHeaderByIndex = function (index) {\n    return this.grid.getColumnHeaderByIndex(index);\n  };\n  /**\n   * Gets a frozen right column header by column index.\n   *\n   * @param  {number} index - Specifies the column index.\n   * @returns {Element} Returns the Element\n   *\n    */\n  TreeGrid.prototype.getFrozenRightColumnHeaderByIndex = function (index) {\n    return this.grid.getColumnHeaderByIndex(index);\n  };\n  /**\n   * Gets a movable column header by column index.\n   *\n   * @param  {number} index - Specifies the column index.\n   * @returns {Element} Returns the Element\n   *\n    */\n  TreeGrid.prototype.getMovableColumnHeaderByIndex = function (index) {\n    return this.grid.getColumnHeaderByIndex(index);\n  };\n  /**\n   * @hidden\n   * @returns {number} Returns the movable column count\n   */\n  TreeGrid.prototype.getMovableColumnsCount = function () {\n    return this.grid.getMovableColumnsCount();\n  };\n  /**\n   * @hidden\n   * @returns {number} Returns the Frozen Left column\n   */\n  TreeGrid.prototype.getFrozenLeftColumnsCount = function () {\n    return this.grid.getFrozenLeftColumnsCount();\n  };\n  /**\n   * @hidden\n   * @returns {number} Returns the Frozen Right column count\n   */\n  TreeGrid.prototype.getFrozenRightColumnsCount = function () {\n    return this.grid.getFrozenRightColumnsCount();\n  };\n  /**\n   * @hidden\n   * @returns {Column[]} Returns the column\n   */\n  TreeGrid.prototype.getFrozenLeftColumns = function () {\n    this.updateColumnModel(this.grid.getFrozenLeftColumns());\n    return this.columnModel;\n  };\n  /**\n   * @hidden\n   * @returns {Column[]} Returns the column\n   */\n  TreeGrid.prototype.getFrozenRightColumns = function () {\n    this.updateColumnModel(this.grid.getFrozenRightColumns());\n    return this.columnModel;\n  };\n  /**\n   * @hidden\n   * @returns {number} Returns the visible movable count\n   */\n  TreeGrid.prototype.getVisibleMovableCount = function () {\n    return this.grid.getVisibleMovableCount();\n  };\n  /**\n   * @hidden\n   * @returns {number} Returns the visible Frozen Right count\n   */\n  TreeGrid.prototype.getVisibleFrozenRightCount = function () {\n    return this.grid.getVisibleFrozenRightCount();\n  };\n  /**\n   * @hidden\n   * @returns {number} Returns the visible Frozen left count\n   */\n  TreeGrid.prototype.getVisibleFrozenLeftCount = function () {\n    return this.grid.getVisibleFrozenLeftCount();\n  };\n  /**\n   * @hidden\n   * @returns {Column[]} Returns the column\n   */\n  TreeGrid.prototype.getMovableColumns = function () {\n    this.updateColumnModel(this.grid.getMovableColumns());\n    return this.columnModel;\n  };\n  /**\n   * Gets the number of frozen column in tree grid\n   *\n   * @hidden\n   * @returns {number} - Returns frozen column count\n   */\n  TreeGrid.prototype.getFrozenColumns = function () {\n    return this.getFrozenCount(!isNullOrUndefined(this.columns) && this.columns, 0) + this.frozenColumns;\n  };\n  TreeGrid.prototype.getFrozenCount = function (cols, cnt) {\n    for (var j = 0, len = cols.length; j < len; j++) {\n      if (cols[parseInt(j.toString(), 10)].columns) {\n        cnt = this.getFrozenCount(cols[parseInt(j.toString(), 10)].columns, cnt);\n      } else {\n        if (cols[parseInt(j.toString(), 10)].isFrozen) {\n          cnt++;\n        }\n      }\n    }\n    return cnt;\n  };\n  /**\n   * Gets the collection of selected row indexes.\n   *\n   * @returns {number[]} - Returns selected rows index collection\n   */\n  TreeGrid.prototype.getSelectedRowIndexes = function () {\n    return this.grid.getSelectedRowIndexes();\n  };\n  /**\n   * Gets the collection of selected row and cell indexes.\n   *\n   * @returns {ISelectedCell[]} - Returns selected cell's index details\n   */\n  TreeGrid.prototype.getSelectedRowCellIndexes = function () {\n    return this.grid.getSelectedRowCellIndexes();\n  };\n  /**\n   * Gets the collection of selected records.\n   *\n   * @isGenericType true\n   * @returns {Object[]} - Returns selected records collection\n   */\n  TreeGrid.prototype.getSelectedRecords = function () {\n    return this.grid.getSelectedRecords();\n  };\n  /**\n   * Gets the data module.\n   *\n   * @returns {{baseModule: Data, treeModule: DataManipulation}}: Returns grid and treegrid data module\n   */\n  TreeGrid.prototype.getDataModule = function () {\n    return {\n      baseModule: this.grid.getDataModule(),\n      treeModule: this.dataModule\n    };\n  };\n  /**\n   * Reorder the rows based on given indexes and position\n   *\n   * @param {number[]} fromIndexes - Source indexes of rows\n   * @param {number} toIndex - Destination index of row\n   * @param {string} position - Defines drop position as above or below or child\n   * @returns {void}\n   */\n  TreeGrid.prototype.reorderRows = function (fromIndexes, toIndex, position) {\n    this.rowDragAndDropModule.reorderRows(fromIndexes, toIndex, position);\n  };\n  /**\n   * Indents the record to one level of hierarchy. Moves the selected row as the last child of its previous row.\n   *\n   * @param {Object} record – specifies the record to do indented\n   * @returns {void}\n   */\n  TreeGrid.prototype.indent = function (record) {\n    if (!isNullOrUndefined(this.rowDragAndDropModule)) {\n      record = record;\n      this.rowDragAndDropModule[this.indentOutdentAction](record, 'indent');\n    }\n  };\n  /**\n   * Outdent the record to one level of hierarchy. Moves the selected row as sibling to its parent row.\n   *\n   * @param {Object} record – specifies the record to do outdented\n   * @returns {void}\n   */\n  TreeGrid.prototype.outdent = function (record) {\n    if (!isNullOrUndefined(this.rowDragAndDropModule)) {\n      record = record;\n      this.rowDragAndDropModule[this.indentOutdentAction](record, 'outdent');\n    }\n  };\n  var TreeGrid_1;\n  __decorate([Property(0)], TreeGrid.prototype, \"frozenRows\", void 0);\n  __decorate([Property(0)], TreeGrid.prototype, \"frozenColumns\", void 0);\n  __decorate([Property('Ellipsis')], TreeGrid.prototype, \"clipMode\", void 0);\n  __decorate([Property([])], TreeGrid.prototype, \"columns\", void 0);\n  __decorate([Property(null)], TreeGrid.prototype, \"childMapping\", void 0);\n  __decorate([Property(null)], TreeGrid.prototype, \"hasChildMapping\", void 0);\n  __decorate([Property(0)], TreeGrid.prototype, \"treeColumnIndex\", void 0);\n  __decorate([Property(null)], TreeGrid.prototype, \"idMapping\", void 0);\n  __decorate([Property(null)], TreeGrid.prototype, \"parentIdMapping\", void 0);\n  __decorate([Property(false)], TreeGrid.prototype, \"enableCollapseAll\", void 0);\n  __decorate([Property(null)], TreeGrid.prototype, \"expandStateMapping\", void 0);\n  __decorate([Property(false)], TreeGrid.prototype, \"allowRowDragAndDrop\", void 0);\n  __decorate([Property([])], TreeGrid.prototype, \"dataSource\", void 0);\n  __decorate([Property()], TreeGrid.prototype, \"query\", void 0);\n  __decorate([Property()], TreeGrid.prototype, \"cloneQuery\", void 0);\n  __decorate([Property('AllPages')], TreeGrid.prototype, \"printMode\", void 0);\n  __decorate([Property(false)], TreeGrid.prototype, \"allowPaging\", void 0);\n  __decorate([Property(true)], TreeGrid.prototype, \"loadChildOnDemand\", void 0);\n  __decorate([Property(false)], TreeGrid.prototype, \"allowTextWrap\", void 0);\n  __decorate([Complex({}, TextWrapSettings)], TreeGrid.prototype, \"textWrapSettings\", void 0);\n  __decorate([Property(false)], TreeGrid.prototype, \"allowReordering\", void 0);\n  __decorate([Property(false)], TreeGrid.prototype, \"allowResizing\", void 0);\n  __decorate([Property(false)], TreeGrid.prototype, \"autoCheckHierarchy\", void 0);\n  __decorate([Complex({}, PageSettings)], TreeGrid.prototype, \"pageSettings\", void 0);\n  __decorate([Complex({}, RowDropSettings)], TreeGrid.prototype, \"rowDropSettings\", void 0);\n  __decorate([Property('USD')], TreeGrid.prototype, \"currencyCode\", void 0);\n  __decorate([Property()], TreeGrid.prototype, \"pagerTemplate\", void 0);\n  __decorate([Property(false)], TreeGrid.prototype, \"showColumnMenu\", void 0);\n  __decorate([Property(false)], TreeGrid.prototype, \"showColumnChooser\", void 0);\n  __decorate([Property(false)], TreeGrid.prototype, \"allowSorting\", void 0);\n  __decorate([Property(true)], TreeGrid.prototype, \"allowMultiSorting\", void 0);\n  __decorate([Complex({}, SortSettings)], TreeGrid.prototype, \"sortSettings\", void 0);\n  __decorate([Collection([], AggregateRow)], TreeGrid.prototype, \"aggregates\", void 0);\n  __decorate([Complex({}, EditSettings)], TreeGrid.prototype, \"editSettings\", void 0);\n  __decorate([Property(false)], TreeGrid.prototype, \"allowFiltering\", void 0);\n  __decorate([Property()], TreeGrid.prototype, \"detailTemplate\", void 0);\n  __decorate([Complex({}, FilterSettings)], TreeGrid.prototype, \"filterSettings\", void 0);\n  __decorate([Complex({}, SearchSettings)], TreeGrid.prototype, \"searchSettings\", void 0);\n  __decorate([Property()], TreeGrid.prototype, \"toolbar\", void 0);\n  __decorate([Property()], TreeGrid.prototype, \"toolbarTemplate\", void 0);\n  __decorate([Property('Default')], TreeGrid.prototype, \"gridLines\", void 0);\n  __decorate([Property()], TreeGrid.prototype, \"contextMenuItems\", void 0);\n  __decorate([Property()], TreeGrid.prototype, \"columnMenuItems\", void 0);\n  __decorate([Property()], TreeGrid.prototype, \"rowTemplate\", void 0);\n  __decorate([Property('Parent')], TreeGrid.prototype, \"copyHierarchyMode\", void 0);\n  __decorate([Property(null)], TreeGrid.prototype, \"rowHeight\", void 0);\n  __decorate([Property(true)], TreeGrid.prototype, \"enableAltRow\", void 0);\n  __decorate([Property(true)], TreeGrid.prototype, \"allowKeyboard\", void 0);\n  __decorate([Property(false)], TreeGrid.prototype, \"enableHover\", void 0);\n  __decorate([Property(false)], TreeGrid.prototype, \"enableAutoFill\", void 0);\n  __decorate([Property(false)], TreeGrid.prototype, \"enableAdaptiveUI\", void 0);\n  __decorate([Property(false)], TreeGrid.prototype, \"enableImmutableMode\", void 0);\n  __decorate([Property('auto')], TreeGrid.prototype, \"height\", void 0);\n  __decorate([Property('auto')], TreeGrid.prototype, \"width\", void 0);\n  __decorate([Complex({}, LoadingIndicator)], TreeGrid.prototype, \"loadingIndicator\", void 0);\n  __decorate([Property(true)], TreeGrid.prototype, \"enableVirtualMaskRow\", void 0);\n  __decorate([Property(false)], TreeGrid.prototype, \"enableVirtualization\", void 0);\n  __decorate([Property(false)], TreeGrid.prototype, \"enableColumnVirtualization\", void 0);\n  __decorate([Property(false)], TreeGrid.prototype, \"enableHtmlSanitizer\", void 0);\n  __decorate([Property(false)], TreeGrid.prototype, \"enableInfiniteScrolling\", void 0);\n  __decorate([Complex({}, InfiniteScrollSettings)], TreeGrid.prototype, \"infiniteScrollSettings\", void 0);\n  __decorate([Property('All')], TreeGrid.prototype, \"columnQueryMode\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"created\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"load\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"expanding\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"expanded\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"collapsing\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"collapsed\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"cellSave\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"cellSaved\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"actionBegin\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"actionComplete\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"beginEdit\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"batchAdd\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"batchDelete\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"batchCancel\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"beforeBatchAdd\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"beforeBatchDelete\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"beforeBatchSave\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"cellEdit\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"actionFailure\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"dataBound\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"dataSourceChanged\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"dataStateChange\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"recordDoubleClick\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"rowDataBound\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"detailDataBound\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"queryCellInfo\", void 0);\n  __decorate([Property(true)], TreeGrid.prototype, \"allowSelection\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"rowSelecting\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"rowSelected\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"rowDeselecting\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"rowDeselected\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"headerCellInfo\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"cellSelecting\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"columnMenuOpen\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"columnMenuClick\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"cellSelected\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"cellDeselecting\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"cellDeselected\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"resizeStart\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"resizing\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"resizeStop\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"columnDragStart\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"columnDrag\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"columnDrop\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"checkboxChange\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"printComplete\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"beforePrint\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"toolbarClick\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"beforeDataBound\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"contextMenuOpen\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"contextMenuClick\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"beforeCopy\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"beforePaste\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"rowDrag\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"rowDragStart\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"rowDragStartHelper\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"rowDrop\", void 0);\n  __decorate([Property(-1)], TreeGrid.prototype, \"selectedRowIndex\", void 0);\n  __decorate([Complex({}, SelectionSettings)], TreeGrid.prototype, \"selectionSettings\", void 0);\n  __decorate([Property(false)], TreeGrid.prototype, \"allowExcelExport\", void 0);\n  __decorate([Property(false)], TreeGrid.prototype, \"allowPdfExport\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"pdfQueryCellInfo\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"pdfHeaderQueryCellInfo\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"excelQueryCellInfo\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"excelHeaderQueryCellInfo\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"beforeExcelExport\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"excelExportComplete\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"beforePdfExport\", void 0);\n  __decorate([Event()], TreeGrid.prototype, \"pdfExportComplete\", void 0);\n  TreeGrid = TreeGrid_1 = __decorate([NotifyPropertyChanges], TreeGrid);\n  return TreeGrid;\n}(Component);\nexport { TreeGrid };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Component","addClass","createElement","EventHandler","isNullOrUndefined","extend","merge","SanitizeHtmlHelper","removeClass","Complex","Collection","getValue","Event","Property","NotifyPropertyChanges","setValue","KeyboardEvents","L10n","Column","getNumberFormat","Freeze","FreezeColumn","RowDropSettings","getUid","parentsUntil","LoadingIndicator","FilterSettings","TextWrapSettings","Logger","TreeLogger","TreeClipboard","Selection","TreeGridSelection","Print","events","SearchSettings","SelectionSettings","getActualProperties","getObject","DataManager","RemoteSaveAdaptor","Query","JsonAdaptor","Deferred","UrlAdaptor","createSpinner","hideSpinner","showSpinner","isRemoteData","isOffline","extendArray","isCountRequired","findChildrenRecords","Grid","Render","DataManipulation","iterateArrayOrObject","ToolbarItem","ContextMenuItems","PageSettings","AggregateRow","EditSettings","SortSettings","isHidden","getExpandStatus","editAction","InfiniteScrollSettings","literals","TreeGrid","_super","options","element","_this","call","dataResults","uniqueIDCollection","uniqueIDFilterCollection","changedRecords","deletedRecords","addedRecords","indentOutdentAction","isFromChartSide","modifiedRecords","stackedHeader","objectEqualityChecker","old","current","keys","isEqual","excludeKeys","parseInt","toString","indexOf","isDate","Date","getTime","TreeGrid_1","Inject","mergePersistTreeGridData","logger","injectedModules","freezeModulePresent","filter","e","getModuleName","grid","excelExport","excelExportProperties","isMultipleExport","workbook","isBlob","excelExportModule","Map","csvExport","pdfExport","pdfExportProperties","pdfDoc","pdfExportModule","serverExcelExport","url","isExcel","exportTreeGrid","serverPdfExport","serverCsvExport","treegrid","query","getDataModule","generateQuery","state","processQuery","queries","JSON","parse","data","treeGridModel","addOnPersist","include","filterSettings","columns","where","searchSettings","fields","search","sortSettings","sorted","setHeaderText","form","id","styles","treeGridInput","attrs","name","value","stringify","method","action","appendChild","document","body","submit","remove","column","getColumnByUid","uid","field","getColumnByField","headerText","template","format","getFormat","type","currencyCode","replace","j","skeleton","preRender","TreeGridLocale","initProperties","defaultLocale","Above","Below","Child","AddRow","ExpandAll","CollapseAll","RowIndent","RowOutdent","l10n","locale","isSelfReference","childMapping","sortByColumn","columnName","direction","isMultiSort","sortModule","sortColumn","clearSorting","removeSortColumn","searchString","autoFitColumns","fieldNames","resizeModule","updateColumnModel","reorderColumns","fromFName","toFName","localeObject","gridLocale","treeGridLocale","load","print","printModule","treeGridkeyActionHandler","allowKeyboard","parentTarget","row","summaryElement","expandAll","collapseAll","closest","getElementsByClassName","expandCollapseRequest","querySelector","enableVirtualization","rowTemplate","querySelectorAll","parentElement","cellIndex","getColumnByIndex","editType","edit","findnextRowElement","cellIndex_1","row_1","children","isEdit","clearSelection","findPreviousRowElement","cellIndex_2","row_2","summaryRowElement","rowElement","nextElementSibling","className","classList","contains","previousElementSibling","flatData","infiniteScrollData","remoteCollapsedData","remoteExpandedData","parentData","columnModel","isExpandAll","isCollapseAll","keyConfigs","ctrlDownArrow","ctrlUpArrow","ctrlShiftUpArrow","ctrlShiftDownArrow","downArrow","upArrow","isLocalData","dataSource","offline","ready","adaptor","parentIdMapping","wireEvents","add","mouseClickHandler","keyboardModule","keyAction","bind","eventName","tabIndex","requiredModules","modules","splitFrozenCount","isReact","getColumns","isDestroyed","push","member","args","toolbar","contextMenuItems","allowPaging","pageSettings","allowReordering","allowSorting","aggregates","resizeCheck","allowExcelExport","freezePresent","frozenColumns","frozenRows","getFrozenColumns","getFrozenLeftColumnsCount","getFrozenRightColumnsCount","detailTemplate","allowPdfExport","showColumnMenu","showColumnChooser","extendRequiredModules","columnMenu","columnMenuItems","contextMenu","allowResizing","IsRowDDInjected","allowRowDragAndDrop","isIndentEnabled","editSettings","allowAdding","allowDeleting","allowEditing","isCommandColumn","allowSelection","enableInfiniteScrolling","some","col","commands","commandsTemplate","unwireEvents","destroy","removeAttribute","log","types","loggerModule","treeLog","render","portals","isVue","vueInstance","renderModule","dataModule","trigger","autoGenerateColumns","initialRender","convertTreeData","loadGrid","rowDropSettings","targetID","addListener","gridContainer","height","style","width","gridRequiredModules","apply","root","appendTo","actionFailureHandler","gridContent","childNodes","setAttribute","contentTable","refreshToolbarItems","renderComplete","destroyTemplate","destroyTemplateFn","index","clearTemplate","failureCases","primaryKeyFieldNames","getPrimaryKeyFieldNames","RecordsCount","isFrozen","mode","treeColumnIndex","test","idMapping","checkboxColumn","showCheckbox","treeColumn","alignColumn","textAlign","failureEventArgs_1","error","forEach","failureCase","actionFailure","toolbarElement","toolbarModule","getToolbar","indentID","outdentID","indentElement","outdentElement","afterGridRender","clipboardModule","serviceLocator","uniqueID","level","griddata","convertToFlatData","bindGridProperties","bindedDataSource","enableRtl","getGridColumns","columnQueryMode","pagerTemplate","allowFiltering","enableColumnVirtualization","infiniteScrollSettings","enableVirtualMaskRow","loadingIndicator","enableAltRow","allowTextWrap","enableHover","enableAutoFill","enableAdaptiveUI","enableImmutableMode","rowHeight","gridLines","getGridToolbar","toolbarTemplate","selectionSettings","textWrapSettings","printMode","selectedRowIndex","getContextMenu","getGridEditSettings","clipMode","templateInstance","isJsComponent","enableHtmlSanitizer","triggerEvents","IsExpandCollapseClicked","checkboxOnly","rowIndex","cancel","bindGridEvents","rowSelecting","persistSelection","parentItem","isHeaderCheckboxClicked","parentQuery","q","slice","pageSizeMode","selectionModule","currentViewData","rowDeselecting","rowSelected","selectedRowIndexes","updateRowSelection","getRows","getCurrentViewRecords","notify","rowDeselected","resizeStop","excelQueryCellInfo","pdfQueryCellInfo","checkBoxChange","checkboxChange","pdfExportComplete","excelExportComplete","excelHeaderQueryCellInfo","pdfHeaderQueryCellInfo","dataSourceChanged","recordDoubleClick","cellDeselected","cellDeselecting","columnMenuOpen","columnMenuClick","cellSelected","headerCellInfo","resizeStart","resizing","columnDrag","columnDragStart","columnDrop","beforePrint","beforeCopy","beforePaste","rows","on","printComplete","extendedGridDataBoundEvent","extendedGridEvents","extendedGridActionEvents","extendedGridEditEvents","bindGridDragEvents","bindCallBackEvents","lastRowBorder","visiblerow","isAddBorder","cells","isPixelHeight","dataBound","updateRowTemplate","updateAltRow","hasChildMapping","req","result","getContentTable","totalRows","refreshPersistSelection","virtualScrollModule","prevSelectedRecord","treeGrid","beforeDataBound","requestType","dm","json","isPrinting","contentModule","callBackPromise_1","beforeDataBoundArgs","resolve","toolbarClick","item","callBackPromise","toolbarargs","cellSelecting","actualTarget","cellselectingArgs","beginEdit","begineditArgs","dataStateChange","isExpandRefresh","count","cellSave","isContextMenuOpen","contextitems","contextMenuModule","cellsaveArgs","cellSaved","cellEdit","prom","promise","batchAdd","beforeBatchSave","beforeBatchAdd","batchDelete","beforeBatchDelete","batchCancel","setTimeout","treeColumnRowTemplate","enableCollapseAll","currentData","RowModifier","isDataAvailable","datacount","defaultQuery","proxy_1","then","actionBegin","expand","filterModule","setProperties","dataManager","isQueryInvokedFromData","callBackPromise_2","actionArgs","actionComplete","updateTreeGridModel","newRowPosition","beginAdd","batchSave","map","ag","showChildSummary","refresh","selectedItem_1","selectedRecords","dropIndex","dropPosition","selectedRows","currentPageItem","isFrozenGrid","movableContent","frozenContent","detailDataBound","rowDataBound","queryCellInfo","cellRender","contextMenuClick","contextMenuOpen","rowDragStartHelper","rowDragStart","rowDrag","rowdraging","rowDrop","rowDropped","registeredTemplate","ref","isRemote","record","guid","allowEditOnDblClick","showConfirmDialog","showDeleteConfirmDialog","allowNextRowEdit","dialog","items","text","getConstant","iconCss","tooltipText","Search","prefixIcon","isEmptyColumnModel","stackedColumn","treeGridColumn","gridColumn","gridColumnCollection","_i","_a","prop","enablePersistence","treeColumnTextAlign","treeColumnField","onPropertyChanged","newProp","properties","requireRefresh","freeze","properties_1","refreshColumns","allowMultiSorting","isDataSourceChanged","removeEventListener","eventListener","renderTable","updateTreeColumnTextAlign","closeEdit","treeGridElement","hasTreeGridChild","removeListener","innerHTML","dataBind","getElementById","getPersistData","keyEntity","ignoreOnPersist","scrollPosition","ignoreOnColumn","currentObject","k","val","objVal","ignoreInArrays","ignoreInColumn","touches","isEditCollapse","isEllipsisTooltip","close","isCheckBoxSelection","isPersistSelection","checkedTarget","getHeaderContent","checkedLen","getSelectedRowIndexes","totalRecords","spanEle","filterTemplate","elem","isOpen","undefined","getPager","addRecord","position","editModule","isAddedRowByMethod","saveCell","updateCell","updateRow","deleteRecord","fieldName","getSelectedRecords","startEdit","editCell","enableToolbarItems","isEnable","enableItems","endEdit","openColumnChooser","x","y","columnChooserModule","deleteRow","tr","setCellValue","getRowIndexByPrimaryKey","setRowData","rowData","currentRecords","primaryKey","childRecords","taskData","checkboxState","hasChildRecords","parentUniqueID","expanded","visibleRecords","getVisibleRecords","table","sHeight","scrollHeight","clientHeight","getContent","goToPage","pageNo","pagerModule","updateExternalMessage","message","getCellFromIndex","columnIndex","Columns","getColumnFieldNames","getFooterContent","getFooterContentTable","showColumns","showBy","hideColumns","hideBy","getColumnHeaderByField","getColumnHeaderByIndex","getColumnHeaderByUid","getColumnIndexByField","getVirtualColIndexByUid","getColumnIndexByUid","isRefresh","temp","gridColumns","deepMerge","updateColumnsWidth","currentColumn","persist1","mergeColumns","storedColumn","persist2","setFrozenCount","persist3","persist4","getDataRows","dRows","len","isSummaryRow","getBatchChanges","getHeaderTable","getRowByIndex","getRowInfo","getUidByColumnField","getVisibleColumns","cols","visible","getCheckedRecords","getCheckedrecords","currentViewRecords","getCheckedRowIndexes","selectCheckboxes","indexes","refreshUI","refreshHeader","obj","showDialog","dialogObj","targetElement","rowInfo","collapseRow","expandRow","rowInfo_1","freezeRows","getAttribute","parentRec","getCollapseExpandRecords","pagerValuePresent","pagerObj","pagerdropdownModule","isExpandingEventTriggered","expanding","expandingArgs","expandAllPrevent","expandCollapseAllChildren","expandRows","expandCollapse","expandArgs","expandStateMapping","updateExpandStateMapping","isExpandedEventTriggered","records","unshift","isCollapsingEventTriggered","collapsing","collapsingArgs","collapseAllPrevent","collapseRows","collapseArgs","isCollapsedEventTriggered","collapsed","firstElementChild","scrollTop","getRowHeight","scrollBy","expandAtLevel","rec","expandAction","getRecordDetails","expandByKey","expandCollapseActionByKey","isPaging","_loop_1","puniqueID_1","this_1","collapseAtLevel","collapseAction","collapseByKey","primaryKeyField","endIndex","startIndex","expandCollapseAll","isExpandCollapseall","isChild","childData","targetEle","loadChildOnDemand","updateChildOnDemand","gridRows","localPagedExpandCollapse","displayAction","detailrows","remoteExpand","localExpand","lastrowIdx","lastRow","flatDataRecords","splice","deff","childDataBind","data_1","length_1","Math","ceil","random","scrollHeightBeforeRefresh","fetchRemoteChildData","rows_1","parentRow","args_1","collapseRemoteChild","movableRows","freezeRightRows","rows_2","gridRowsObject","getRowsObject","currentRecord","currentIndex","toggleRowVisibility","parentRecord","visibleRowCount","gridRow","rowsObject","rcell","arg","cell","rowDetails","childRecord","movablerows","rightrows","collapsingTd","detailRowModule","collapse","expandElement","getRowObjectFromUID","cRow","eRows","i_1","sanitize","updateRowAndCellElements","updateResultModel","returnResult","off","filterByColumn","filterOperator","filterValue","predicate","matchCase","ignoreAccent","actualFilterValue","actualOperator","clearFiltering","removeFilteredColsByField","isClearFilterBar","selectRow","isToggle","selectRows","rowIndexes","copy","withHeader","paste","colIndex","selectCell","getSelectedRows","getMovableCellFromIndex","getMovableDataRows","getMovableRowByIndex","getMovableRows","getFrozenRightRowByIndex","getFrozenRightRows","getFrozenRightDataRows","getFrozenRightCellFromIndex","getFrozenLeftColumnHeaderByIndex","getFrozenRightColumnHeaderByIndex","getMovableColumnHeaderByIndex","getMovableColumnsCount","getFrozenLeftColumns","getFrozenRightColumns","getVisibleMovableCount","getVisibleFrozenRightCount","getVisibleFrozenLeftCount","getMovableColumns","getFrozenCount","cnt","getSelectedRowCellIndexes","baseModule","treeModule","reorderRows","fromIndexes","toIndex","rowDragAndDropModule","indent","outdent"],"sources":["/var/www/vue/vue-gantt-chart/node_modules/@syncfusion/ej2-treegrid/src/treegrid/base/treegrid.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component, addClass, createElement, EventHandler, isNullOrUndefined, extend, merge, SanitizeHtmlHelper } from '@syncfusion/ej2-base';\nimport { removeClass, Complex, Collection, getValue } from '@syncfusion/ej2-base';\nimport { Event, Property, NotifyPropertyChanges, setValue, KeyboardEvents, L10n } from '@syncfusion/ej2-base';\nimport { Column } from '../models/column';\nimport { getNumberFormat } from '@syncfusion/ej2-grids';\nimport { Freeze as FreezeColumn } from '@syncfusion/ej2-grids';\nimport { RowDropSettings, getUid, parentsUntil } from '@syncfusion/ej2-grids';\nimport { LoadingIndicator } from '../models/loading-indicator';\nimport { FilterSettings } from '../models/filter-settings';\nimport { TextWrapSettings } from '../models/textwrap-settings';\nimport { Logger as TreeLogger } from '../actions/logger';\nimport { TreeClipboard } from '../actions/clipboard';\nimport { Selection as TreeGridSelection } from '../actions/selection';\nimport { Print } from '../actions/print';\nimport * as events from '../base/constant';\nimport { SearchSettings } from '../models/search-settings';\nimport { SelectionSettings } from '../models/selection-settings';\nimport { getActualProperties, getObject } from '@syncfusion/ej2-grids';\nimport { DataManager, RemoteSaveAdaptor, Query, JsonAdaptor, Deferred, UrlAdaptor } from '@syncfusion/ej2-data';\nimport { createSpinner, hideSpinner, showSpinner } from '@syncfusion/ej2-popups';\nimport { isRemoteData, isOffline, extendArray, isCountRequired, findChildrenRecords } from '../utils';\nimport { Grid, Logger } from '@syncfusion/ej2-grids';\nimport { Render } from '../renderer/render';\nimport { DataManipulation } from './data';\nimport { iterateArrayOrObject } from '@syncfusion/ej2-grids';\nimport { ToolbarItem, ContextMenuItems } from '../enum';\nimport { PageSettings } from '../models/page-settings';\nimport { AggregateRow } from '../models/summary';\nimport { EditSettings } from '../models/edit-settings';\nimport { SortSettings } from '../models/sort-settings';\nimport { isHidden, getExpandStatus } from '../utils';\nimport { editAction } from '../actions/crud-actions';\nimport { InfiniteScrollSettings } from '../models/infinite-scroll-settings';\nimport * as literals from '../base/constant';\n/**\n * Represents the TreeGrid component.\n * ```html\n * <div id='treegrid'></div>\n * <script>\n *  var treegridObj = new TreeGrid({ allowPaging: true });\n *  treegridObj.appendTo('#treegrid');\n * </script>\n * ```\n */\nvar TreeGrid = /** @class */ (function (_super) {\n    __extends(TreeGrid, _super);\n    function TreeGrid(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        _this.dataResults = {};\n        _this.uniqueIDCollection = {};\n        _this.uniqueIDFilterCollection = {};\n        _this.changedRecords = 'changedRecords';\n        _this.deletedRecords = 'deletedRecords';\n        _this.addedRecords = 'addedRecords';\n        _this.indentOutdentAction = 'indentOutdentAction';\n        _this.isFromChartSide = false;\n        _this.modifiedRecords = [];\n        _this.stackedHeader = false;\n        _this.objectEqualityChecker = function (old, current) {\n            if (old) {\n                var keys = Object.keys(old);\n                var isEqual = true;\n                var excludeKeys = ['Children', 'childRecords', 'taskData', 'uniqueID', 'parentItem', 'parentUniqueID', 'index'];\n                for (var i = 0; i < keys.length; i++) {\n                    if (old[keys[parseInt(i.toString(), 10)]] !== current[keys[parseInt(i.toString(), 10)]] &&\n                        excludeKeys.indexOf(keys[parseInt(i.toString(), 10)]) === -1) {\n                        var isDate = old[keys[parseInt(i.toString(), 10)]] instanceof Date &&\n                            current[keys[parseInt(i.toString(), 10)]] instanceof Date;\n                        if (!isDate || (old[keys[parseInt(i.toString(), 10)]].getTime() !==\n                            current[keys[parseInt(i.toString(), 10)]].getTime())) {\n                            isEqual = false;\n                            break;\n                        }\n                    }\n                }\n                return isEqual;\n            }\n            else {\n                return false;\n            }\n        };\n        TreeGrid_1.Inject(TreeGridSelection, TreeLogger);\n        setValue('mergePersistData', _this.mergePersistTreeGridData, _this);\n        var logger = 'Logger';\n        if (!isNullOrUndefined(_this.injectedModules[\"\" + logger])) {\n            Grid.Inject(Logger);\n        }\n        var freezeModulePresent = _this.injectedModules.filter(function (e) {\n            if (e.prototype.getModuleName() === 'freeze') {\n                Grid.Inject(FreezeColumn);\n            }\n        });\n        _this.grid = new Grid();\n        return _this;\n    }\n    TreeGrid_1 = TreeGrid;\n    /**\n     * Export TreeGrid data to Excel file(.xlsx).\n     *\n     * @param  {ExcelExportProperties | TreeGridExcelExportProperties} excelExportProperties - Defines the export properties of the Tree Grid.\n     * @param  {boolean} isMultipleExport - Define to enable multiple export.\n     * @param  {workbook} workbook - Defines the Workbook if multiple export is enabled.\n     * @param  {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.\n     * @returns {Promise<any>} - Returns promise object of export action\n     */\n    /* eslint-disable */\n    TreeGrid.prototype.excelExport = function (excelExportProperties, isMultipleExport, workbook, isBlob) {\n        /* eslint-enable */\n        return this.excelExportModule.Map(excelExportProperties, isMultipleExport, workbook, isBlob, false);\n    };\n    /**\n     * Export TreeGrid data to CSV file.\n     *\n     * @param  {ExcelExportProperties} excelExportProperties - Defines the export properties of the TreeGrid.\n     * @param  {boolean} isMultipleExport - Define to enable multiple export.\n     * @param  {workbook} workbook - Defines the Workbook if multiple export is enabled.\n     * @param  {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.\n     * @returns {Promise<any>} - Returns promise object of export action\n     */\n    /* eslint-disable */\n    TreeGrid.prototype.csvExport = function (excelExportProperties, isMultipleExport, workbook, isBlob) {\n        /* eslint-enable */\n        return this.excelExportModule.Map(excelExportProperties, isMultipleExport, workbook, isBlob, true);\n    };\n    /**\n     * Export TreeGrid data to PDF document.\n     *\n     * @param {PdfExportProperties | TreeGridPdfExportProperties} pdfExportProperties - Defines the export properties of the Tree Grid.\n     * @param {boolean} isMultipleExport - Define to enable multiple export.\n     * @param {Object} pdfDoc - Defined the Pdf Document if multiple export is enabled.\n     * @param {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.\n     * @returns {Promise<any>} - Returns promise object of export action\n     */\n    TreeGrid.prototype.pdfExport = function (pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {\n        return this.pdfExportModule.Map(pdfExportProperties, isMultipleExport, pdfDoc, isBlob);\n    };\n    /**\n     * Sends a post request to export tree grid to excel file in server side.\n     *\n     * @param  {string} url - Pass URL for server side excel export action.\n     * @returns {void}\n     */\n    TreeGrid.prototype.serverExcelExport = function (url) {\n        this.isExcel = true;\n        this.exportTreeGrid(url);\n    };\n    /**\n     * Sends a post request to export tree grid to pdf file in server side.\n     *\n     * @param  {string} url - Pass URL for server-side pdf export action.\n     * @returns {void}\n     */\n    TreeGrid.prototype.serverPdfExport = function (url) {\n        this.isExcel = false;\n        this.exportTreeGrid(url);\n    };\n    /**\n     * Sends a Post request to export Tree Grid to CSV file in server side.\n     *\n     * @param  {string} url - Pass URL for server-side csv export action.\n     * @returns {void}\n     */\n    TreeGrid.prototype.serverCsvExport = function (url) {\n        this.isExcel = true;\n        this.exportTreeGrid(url);\n    };\n    /**\n     * Exports the TreeGrid data to the specified URL using a POST request.\n     *\n     * @param {string} url - Defines exporting url\n     * @returns {void}\n     */\n    TreeGrid.prototype.exportTreeGrid = function (url) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        var treegrid = this;\n        var query = treegrid.grid.getDataModule().generateQuery(true);\n        var state = new UrlAdaptor().processQuery(new DataManager({ url: '' }), query);\n        var queries = JSON.parse(state.data);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var treeGridModel = JSON.parse(this.addOnPersist(['allowPaging', 'pageSettings', 'sortSettings', 'allowPdfExport', 'allowExcelExport', 'aggregates',\n            'filterSettings', 'columns', 'locale', 'searchSettings', 'idMapping', 'parentIdMapping', 'childMapping', 'treeColumnIndex']));\n        var include = ['field', 'headerText', 'type', 'format', 'visible',\n            'template', 'index', 'width', 'textAlign', 'headerTextAlign', 'columns'];\n        treeGridModel.filterSettings.columns = queries.where;\n        treeGridModel.searchSettings.fields = queries.search && queries.search[0]['fields'] || [];\n        treeGridModel.sortSettings.columns = queries.sorted;\n        treeGridModel.columns = this.setHeaderText(treeGridModel.columns, include);\n        var form = this.createElement('form', { id: 'ExportForm', styles: 'display:none;' });\n        var treeGridInput = this.createElement('input', { id: 'treeGridInput', attrs: { name: 'treeGridModel' } });\n        treeGridInput.value = JSON.stringify(treeGridModel);\n        form.method = 'POST';\n        form.action = url;\n        form.appendChild(treeGridInput);\n        document.body.appendChild(form);\n        form.submit();\n        form.remove();\n    };\n    /**\n     * Sets the header text and other properties for an array of columns based on specified criteria.\n     *\n     * @param {Column[]} columns - Defines array of columns\n     * @param {string[]} include - Defines array of sting\n     * @returns {Column[]} returns array of columns\n     */\n    TreeGrid.prototype.setHeaderText = function (columns, include) {\n        for (var i = 0; i < columns.length; i++) {\n            var column = this.getColumnByUid(columns[parseInt(i.toString(), 10)].uid);\n            if (this.stackedHeader && isNullOrUndefined(column)) {\n                column = !isNullOrUndefined(columns[parseInt(i.toString(), 10)].field) ?\n                    this.getColumnByField(columns[parseInt(i.toString(), 10)].field) : columns[parseInt(i.toString(), 10)];\n            }\n            columns[parseInt(i.toString(), 10)].headerText = column.headerText;\n            if (!isNullOrUndefined(column.template)) {\n                columns[parseInt(i.toString(), 10)].template = 'true';\n            }\n            if (columns[parseInt(i.toString(), 10)].format) {\n                columns[parseInt(i.toString(), 10)].format = getNumberFormat(this.getFormat(column.format), column.type, false, this.currencyCode);\n                if (!this.isExcel && (column.type === 'datetime' || column.type === 'date')) {\n                    columns[parseInt(i.toString(), 10)].format = columns[parseInt(i.toString(), 10)].format.toString().replace('AM/PM', 'tt');\n                }\n                columns[parseInt(i.toString(), 10)].type = column.type;\n            }\n            if (columns[parseInt(i.toString(), 10)].columns) {\n                this.setHeaderText(columns[parseInt(i.toString(), 10)].columns, include);\n            }\n            var keys = Object.keys(columns[parseInt(i.toString(), 10)]);\n            for (var j = 0; j < keys.length; j++) {\n                if (include.indexOf(keys[parseInt(j.toString(), 10)]) < 0) {\n                    delete columns[parseInt(i.toString(), 10)][keys[parseInt(j.toString(), 10)]];\n                }\n            }\n        }\n        return columns;\n    };\n    /**\n     * Retrieves the appropriate format string from the given format options.\n     *\n     * @param {string | NumberFormatOptions | DateFormatOptions} format - The format options to retrieve the format string from.\n     * @returns {string} The format string extracted from the provided format options.\n     */\n    TreeGrid.prototype.getFormat = function (format) {\n        return typeof (format) === 'object' ? !isNullOrUndefined(format.format) ?\n            format.format : format.skeleton : format;\n    };\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns TreeGrid module name\n     */\n    TreeGrid.prototype.getModuleName = function () {\n        return 'treegrid';\n    };\n    /**\n     * For internal use only - Initialize the event handler;\n     *\n     * @private\n     * @returns {void}\n     */\n    TreeGrid.prototype.preRender = function () {\n        this.TreeGridLocale();\n        this.initProperties();\n        this.defaultLocale = {\n            Above: 'Above',\n            Below: 'Below',\n            Child: 'Child',\n            AddRow: 'Add Row',\n            ExpandAll: 'Expand All',\n            CollapseAll: 'Collapse All',\n            RowIndent: 'Indent',\n            RowOutdent: 'Outdent'\n        };\n        this.l10n = new L10n('treegrid', this.defaultLocale, this.locale);\n        if (this.isSelfReference && isNullOrUndefined(this.childMapping)) {\n            this.childMapping = 'Children';\n        }\n    };\n    /**\n     * Sorts a column with the given options.\n     *\n     * @param {string} columnName - Defines the column name to be sorted.\n     * @param {SortDirection} direction - Defines the direction of sorting field.\n     * @param {boolean} isMultiSort - Specifies whether the previous sorted columns are to be maintained.\n     * @returns {void}\n     */\n    TreeGrid.prototype.sortByColumn = function (columnName, direction, isMultiSort) {\n        if (this.sortModule) {\n            this.sortModule.sortColumn(columnName, direction, isMultiSort);\n        }\n    };\n    /**\n     * Clears all the sorted columns of the TreeGrid.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.clearSorting = function () {\n        if (this.sortModule) {\n            this.sortModule.clearSorting();\n        }\n    };\n    /**\n     * Remove sorted column by field name.\n     *\n     * @param {string} field - Defines the column field name to remove sort.\n     * @returns {void}\n     * @hidden\n     */\n    TreeGrid.prototype.removeSortColumn = function (field) {\n        if (this.sortModule) {\n            this.sortModule.removeSortColumn(field);\n        }\n    };\n    /**\n     * Searches TreeGrid records using the given key.\n     * You can customize the default search option by using the\n     * [`searchSettings`](./#searchsettings/).\n     *\n     * @param  {string} searchString - Defines the key.\n     * @returns {void}\n     */\n    TreeGrid.prototype.search = function (searchString) {\n        this.grid.search(searchString);\n    };\n    /**\n     * Changes the column width to automatically fit its content to ensure that the width shows the content without wrapping/hiding.\n     * > * This method ignores the hidden columns.\n     * > * Uses the `autoFitColumns` method in the `dataBound` event to resize at initial rendering.\n     *\n     * @param  {string |string[]} fieldNames - Defines the column names.\n     * @returns {void}\n     *\n     *\n     *\n     */\n    TreeGrid.prototype.autoFitColumns = function (fieldNames) {\n        this.resizeModule.autoFitColumns(fieldNames);\n        this.updateColumnModel();\n    };\n    /**\n     * Changes the TreeGrid column positions by field names.\n     *\n     * @param  {string} fromFName - Defines the origin field name.\n     * @param  {string} toFName - Defines the destination field name.\n     * @returns {void}\n     */\n    TreeGrid.prototype.reorderColumns = function (fromFName, toFName) {\n        this.grid.reorderColumns(fromFName, toFName);\n    };\n    TreeGrid.prototype.TreeGridLocale = function () {\n        if (!isNullOrUndefined(this.locale)) {\n            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n            var locale = L10n.locale;\n            var localeObject = {};\n            setValue(this.locale, {}, localeObject);\n            var gridLocale = void 0;\n            gridLocale = {};\n            gridLocale = getObject(this.locale, locale);\n            var treeGridLocale = void 0;\n            treeGridLocale = {};\n            treeGridLocale = getObject(this.getModuleName(), gridLocale);\n            setValue('grid', treeGridLocale, getObject(this.locale, localeObject));\n            L10n.load(localeObject);\n        }\n    };\n    /**\n     * By default, prints all the pages of the TreeGrid and hides the pager.\n     * > You can customize print options using the\n     * [`printMode`](./#printmode).\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.print = function () {\n        this.printModule.print();\n    };\n    TreeGrid.prototype.treeGridkeyActionHandler = function (e) {\n        if (this.allowKeyboard) {\n            var target = void 0;\n            var parentTarget = void 0;\n            var column = void 0;\n            var row = void 0;\n            var summaryElement = void 0;\n            switch (e.action) {\n                case 'ctrlDownArrow':\n                    this.expandAll();\n                    break;\n                case 'ctrlUpArrow':\n                    this.collapseAll();\n                    break;\n                case 'ctrlShiftUpArrow':\n                    target = e.target;\n                    column = target.closest('.e-rowcell');\n                    if (!isNullOrUndefined(column)) {\n                        row = column.closest('tr');\n                        if (!isNullOrUndefined(row) && !(isNullOrUndefined(row.getElementsByClassName('e-treegridexpand')[0]))) {\n                            this.expandCollapseRequest(row.querySelector('.e-treegridexpand'));\n                        }\n                    }\n                    break;\n                case 'ctrlShiftDownArrow':\n                    target = e.target;\n                    column = target.closest('.e-rowcell');\n                    if (!isNullOrUndefined(column)) {\n                        row = column.closest('tr');\n                        if (!isNullOrUndefined(row) && !(isNullOrUndefined(row.getElementsByClassName('e-treegridcollapse')[0]))) {\n                            this.expandCollapseRequest(row.querySelector('.e-treegridcollapse'));\n                        }\n                    }\n                    break;\n                case 'downArrow':\n                    if (!this.enableVirtualization && isNullOrUndefined(this.rowTemplate)) {\n                        target = e.target;\n                        if (!isNullOrUndefined(target.querySelectorAll('.e-rowcell'))) {\n                            target = parentsUntil(target, 'e-rowcell');\n                        }\n                        if (!isNullOrUndefined(target)) {\n                            parentTarget = target.parentElement;\n                            if (!isNullOrUndefined(parentTarget)) {\n                                var cellIndex = parentTarget.cellIndex;\n                                if (this.grid.getColumnByIndex(cellIndex).editType === 'dropdownedit' && isNullOrUndefined(this.grid.getColumnByIndex(cellIndex).edit['obj'])) {\n                                    parentTarget = target;\n                                }\n                                summaryElement = this.findnextRowElement(parentTarget);\n                                if (summaryElement !== null) {\n                                    var cellIndex_1 = target.cellIndex;\n                                    var row_1 = summaryElement.children[parseInt(cellIndex_1.toString(), 10)];\n                                    if (!isNullOrUndefined(row_1) && !this.grid.isEdit) {\n                                        addClass([row_1], 'e-focused');\n                                        addClass([row_1], 'e-focus');\n                                    }\n                                }\n                                else {\n                                    this.clearSelection();\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 'upArrow':\n                    if (!this.enableVirtualization && isNullOrUndefined(this.rowTemplate)) {\n                        target = e.target;\n                        if (!isNullOrUndefined(target.querySelectorAll('.e-rowcell'))) {\n                            target = parentsUntil(target, 'e-rowcell');\n                        }\n                        if (!isNullOrUndefined(target)) {\n                            parentTarget = target.parentElement;\n                            if (!isNullOrUndefined(parentTarget)) {\n                                var cellIndex = parentTarget.cellIndex;\n                                if (this.grid.getColumnByIndex(cellIndex).editType === 'dropdownedit' && isNullOrUndefined(this.grid.getColumnByIndex(cellIndex).edit['obj'])) {\n                                    parentTarget = target;\n                                }\n                                summaryElement = this.findPreviousRowElement(parentTarget);\n                                if (summaryElement !== null) {\n                                    var cellIndex_2 = target.cellIndex;\n                                    if (!isNullOrUndefined(cellIndex_2)) {\n                                        var row_2 = summaryElement.children[parseInt(cellIndex_2.toString(), 10)];\n                                        if (!isNullOrUndefined(row_2) && !this.grid.isEdit) {\n                                            addClass([row_2], 'e-focused');\n                                            addClass([row_2], 'e-focus');\n                                        }\n                                    }\n                                }\n                                else {\n                                    this.clearSelection();\n                                }\n                            }\n                        }\n                    }\n            }\n        }\n    };\n    // Get Proper Row Element from the summary\n    TreeGrid.prototype.findnextRowElement = function (summaryRowElement) {\n        var rowElement = summaryRowElement.nextElementSibling;\n        if (rowElement !== null && (rowElement.className.indexOf('e-summaryrow') !== -1 ||\n            rowElement.classList.contains('e-childrow-hidden'))) {\n            rowElement = this.findnextRowElement(rowElement);\n        }\n        return rowElement;\n    };\n    // Get Proper Row Element from the summary\n    TreeGrid.prototype.findPreviousRowElement = function (summaryRowElement) {\n        var rowElement = summaryRowElement.previousElementSibling;\n        if (rowElement !== null && (rowElement.className.indexOf('e-summaryrow') !== -1 ||\n            rowElement.classList.contains('e-childrow-hidden'))) {\n            rowElement = this.findPreviousRowElement(rowElement);\n        }\n        return rowElement;\n    };\n    TreeGrid.prototype.initProperties = function () {\n        this.defaultLocale = {};\n        this.flatData = [];\n        this.infiniteScrollData = [];\n        this.remoteCollapsedData = [];\n        this.remoteExpandedData = [];\n        this.parentData = [];\n        this.columnModel = [];\n        this.isExpandAll = false;\n        this.isCollapseAll = false;\n        this.keyConfigs = {\n            ctrlDownArrow: 'ctrl+downarrow',\n            ctrlUpArrow: 'ctrl+uparrow',\n            ctrlShiftUpArrow: 'ctrl+shift+uparrow',\n            ctrlShiftDownArrow: 'ctrl+shift+downarrow',\n            downArrow: 'downArrow',\n            upArrow: 'upArrow'\n        };\n        this.isLocalData = (!(this.dataSource instanceof DataManager) || this.dataSource.dataSource.offline\n            || (!isNullOrUndefined(this.dataSource.ready)) || this.dataSource.adaptor instanceof RemoteSaveAdaptor);\n        this.isSelfReference = !isNullOrUndefined(this.parentIdMapping);\n    };\n    /**\n     * Binding events to the element while component creation.\n     *\n     * @hidden\n     * @returns {void}\n     */\n    TreeGrid.prototype.wireEvents = function () {\n        EventHandler.add(this.grid.element, 'click', this.mouseClickHandler, this);\n        EventHandler.add(this.element, 'touchend', this.mouseClickHandler, this);\n        this.keyboardModule = new KeyboardEvents(this.element, {\n            keyAction: this.treeGridkeyActionHandler.bind(this),\n            keyConfigs: this.keyConfigs,\n            eventName: 'keydown'\n        });\n        if (this.allowKeyboard) {\n            this.element.tabIndex = this.element.tabIndex === -1 ? 0 : this.element.tabIndex;\n        }\n    };\n    /**\n     * To provide the array of modules needed for component rendering\n     *\n     * @returns {ModuleDeclaration[]} - Returns TreeGrid modules collection\n     * @hidden\n     */\n    TreeGrid.prototype.requiredModules = function () {\n        var modules = [];\n        var splitFrozenCount = 'splitFrozenCount';\n        if (!this.isReact && isNullOrUndefined(this['changedProperties'].columns)) {\n            this.grid[\"\" + splitFrozenCount](this.getColumns());\n        }\n        if (this.isDestroyed) {\n            return modules;\n        }\n        modules.push({\n            member: 'filter', args: [this, this.filterSettings],\n            name: 'Filter'\n        });\n        if (!isNullOrUndefined(this.toolbar)) {\n            modules.push({\n                member: 'toolbar',\n                args: [this],\n                name: 'Toolbar'\n            });\n        }\n        if (this.contextMenuItems) {\n            modules.push({\n                member: 'contextMenu',\n                args: [this],\n                name: 'ContextMenu'\n            });\n        }\n        if (this.allowPaging) {\n            modules.push({\n                member: 'pager',\n                args: [this, this.pageSettings],\n                name: 'Page'\n            });\n        }\n        if (this.allowReordering) {\n            modules.push({\n                member: 'reorder',\n                args: [this],\n                name: 'Reorder'\n            });\n        }\n        if (this.allowSorting) {\n            modules.push({\n                member: 'sort',\n                args: [this],\n                name: 'Sort'\n            });\n        }\n        if (this.aggregates.length > 0) {\n            modules.push({\n                member: 'summary', args: [this],\n                name: 'Aggregate'\n            });\n        }\n        if (this.resizeCheck()) {\n            modules.push({\n                member: 'resize', args: [this],\n                name: 'Resize'\n            });\n        }\n        if (this.allowExcelExport) {\n            modules.push({\n                member: 'ExcelExport', args: [this],\n                name: 'ExcelExport'\n            });\n        }\n        var freezePresent = this.injectedModules.filter(function (e) {\n            return e.prototype.getModuleName() === 'freeze';\n        });\n        if ((this.frozenColumns || this.frozenRows || this.getFrozenColumns() ||\n            this.grid.getFrozenLeftColumnsCount() || this.grid.getFrozenRightColumnsCount()) && freezePresent.length > 0) {\n            modules.push({\n                member: 'freeze', args: [this],\n                name: 'Freeze'\n            });\n        }\n        if (this.detailTemplate) {\n            modules.push({\n                member: 'detailRow', args: [this],\n                name: 'DetailRow'\n            });\n        }\n        if (this.allowPdfExport) {\n            modules.push({\n                member: 'PdfExport', args: [this],\n                name: 'PdfExport'\n            });\n        }\n        if (this.showColumnMenu) {\n            modules.push({\n                member: 'columnMenu', args: [this],\n                name: 'ColumnMenu'\n            });\n        }\n        if (this.showColumnChooser) {\n            modules.push({\n                member: 'ColumnChooser', args: [this],\n                name: 'ColumnChooser'\n            });\n        }\n        this.extendRequiredModules(modules);\n        return modules;\n    };\n    TreeGrid.prototype.resizeCheck = function () {\n        var columnMenu = this.showColumnMenu && (!this.columnMenuItems || this.columnMenuItems\n            .filter(function (c) { return c === 'AutoFit' || c === 'AutoFitAll'; }).length) ? true : false;\n        var contextMenu = this.contextMenuItems && this.contextMenuItems\n            .filter(function (c) { return c === 'AutoFit' || c === 'AutoFitAll'; }).length ? true : false;\n        return this.allowResizing || columnMenu || contextMenu;\n    };\n    TreeGrid.prototype.extendRequiredModules = function (modules) {\n        var IsRowDDInjected = this.injectedModules.filter(function (e) {\n            return e.prototype.getModuleName() === 'rowDragAndDrop';\n        });\n        if (this.allowRowDragAndDrop || IsRowDDInjected.length) {\n            if ((!isNullOrUndefined(this.toolbar) && (this.toolbar['includes']('Indent') ||\n                this.toolbar['includes']('Outdent')))) {\n                this.isIndentEnabled = true;\n            }\n            modules.push({\n                member: 'rowDragAndDrop',\n                args: [this],\n                name: 'RowDD'\n            });\n        }\n        if (this.editSettings.allowAdding || this.editSettings.allowDeleting || this.editSettings.allowEditing) {\n            modules.push({\n                member: 'edit',\n                args: [this],\n                name: 'Edit'\n            });\n        }\n        if (!isNullOrUndefined(this.columns) && this.isCommandColumn(this.columns)) {\n            modules.push({\n                member: 'commandColumn',\n                args: [this],\n                name: 'CommandColumn'\n            });\n        }\n        if (this.allowSelection) {\n            modules.push({\n                member: 'selection',\n                args: [this],\n                name: 'Selection'\n            });\n        }\n        if (this.enableVirtualization) {\n            modules.push({\n                member: 'virtualScroll',\n                args: [this],\n                name: 'VirtualScroll'\n            });\n        }\n        if (this.enableInfiniteScrolling) {\n            modules.push({\n                member: 'infiniteScroll',\n                args: [this],\n                name: 'InfiniteScroll'\n            });\n        }\n        modules.push({\n            member: 'logger',\n            args: [this.grid]\n        });\n    };\n    TreeGrid.prototype.isCommandColumn = function (columns) {\n        var _this = this;\n        return columns.some(function (col) {\n            if (col.columns) {\n                return _this.isCommandColumn(col.columns);\n            }\n            return !!(col.commands || col.commandsTemplate);\n        });\n    };\n    /**\n     * Unbinding events from the element while component destroy.\n     *\n     * @hidden\n     * @returns {void}\n     */\n    TreeGrid.prototype.unwireEvents = function () {\n        if (this.grid && this.grid.element) {\n            EventHandler.remove(this.grid.element, 'click', this.mouseClickHandler);\n        }\n        if (this.element) {\n            EventHandler.remove(this.element, 'touchend', this.mouseClickHandler);\n            if (this.keyboardModule) {\n                this.keyboardModule.destroy();\n                this.keyboardModule = null;\n            }\n            if (this.allowKeyboard) {\n                this.element.removeAttribute('tabIndex');\n            }\n        }\n    };\n    /**\n     * Logs tree grid error message on console\n     *\n     * @param {string | string[]} types - Tree Grid error type\n     * @param {object} args - Error details\n     * @hidden\n     * @private\n     * @returns {void}\n     */\n    TreeGrid.prototype.log = function (types, args) {\n        if (this.loggerModule) {\n            this.loggerModule.treeLog(types, args, this);\n        }\n    };\n    /**\n     * For internal use only - To Initialize the component rendering.\n     *\n     * @private\n     * @returns {void}\n     */\n    TreeGrid.prototype.render = function () {\n        var _this = this;\n        if (this.isReact) {\n            this.grid.isReact = true;\n            this.grid.portals = [];\n        }\n        if (this.isVue) {\n            this.grid.isVue = true;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.grid.vueInstance = this.vueInstance;\n        }\n        createSpinner({ target: this.element }, this.createElement);\n        this.log(['mapping_fields_missing']);\n        this.renderModule = new Render(this);\n        this.dataModule = new DataManipulation(this);\n        this.printModule = new Print(this);\n        this.trigger(events.load);\n        this.autoGenerateColumns();\n        this.initialRender = true;\n        if (!isNullOrUndefined(this.dataSource)) {\n            this.convertTreeData(this.dataSource);\n        }\n        this.loadGrid();\n        if (this.element.classList.contains('e-treegrid') && this.rowDropSettings.targetID) {\n            this.grid.rowDropSettings.targetID += '_gridcontrol';\n        }\n        this.addListener();\n        var gridContainer = createElement('div', { id: this.element.id + '_gridcontrol' });\n        addClass([this.element], 'e-treegrid');\n        if (!isNullOrUndefined(this.height) && typeof (this.height) === 'string' && this.height.indexOf('%') !== -1) {\n            this.element.style.height = this.height;\n        }\n        if (!isNullOrUndefined(this.width) && typeof (this.width) === 'string' && this.width.indexOf('%') !== -1) {\n            this.element.style.width = this.width;\n        }\n        this.element.appendChild(gridContainer);\n        var gridRequiredModules = this.grid.requiredModules;\n        this.grid.requiredModules = function () {\n            var modules = [];\n            modules = gridRequiredModules.apply(this);\n            for (var i = 0; i < modules.length; i++) {\n                if (modules[parseInt(i.toString(), 10)].member === 'virtualscroll') {\n                    modules[parseInt(i.toString(), 10)].member = 'treeVirtualScroll';\n                }\n            }\n            return modules;\n        };\n        var root = 'root';\n        this.grid[\"\" + root] = this[\"\" + root] ? this[\"\" + root] : this;\n        this.grid.appendTo(gridContainer);\n        this.actionFailureHandler();\n        var gridContent = this.element.getElementsByClassName('e-gridcontent')[0].childNodes[0];\n        gridContent.setAttribute('tabindex', '0');\n        var contentTable = this.element.getElementsByClassName('e-content')[0].querySelector('.e-table');\n        if (!isNullOrUndefined(contentTable)) {\n            contentTable.setAttribute('role', 'treegrid');\n        }\n        if (this.isIndentEnabled) {\n            this.refreshToolbarItems();\n        }\n        this.wireEvents();\n        this.renderComplete();\n        var destroyTemplate = 'destroyTemplate';\n        var destroyTemplateFn = this.grid[\"\" + destroyTemplate];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.grid[\"\" + destroyTemplate] = function (args, index) {\n            destroyTemplateFn.apply(_this.grid);\n            var portals = 'portals';\n            if (!(_this.isReact && isNullOrUndefined(_this[\"\" + portals]))) {\n                _this.clearTemplate(args, index);\n            }\n        };\n    };\n    TreeGrid.prototype.actionFailureHandler = function () {\n        var _this = this;\n        var failureCases = [];\n        var primaryKeyFieldNames = this.getPrimaryKeyFieldNames();\n        var RecordsCount = this.flatData.length;\n        if ((this.editSettings.allowAdding || this.editSettings.allowDeleting || this.editSettings.allowEditing)\n            && primaryKeyFieldNames.length === 0 && RecordsCount !== 0) {\n            failureCases.push('For the CRUD actions, it is necessary to enable Primary Key field for the unique data column.');\n        }\n        if (this.allowRowDragAndDrop && primaryKeyFieldNames.length === 0 && RecordsCount !== 0) {\n            failureCases.push('For the Row Drag and Drop actions, it is necessary to enable Primary Key field for the unique data column.');\n        }\n        if (this.allowPaging && this.enableVirtualization) {\n            failureCases.push('Paging is not allowed in virtualization case.');\n        }\n        if (RecordsCount === 0 && this.columns.length === 0) {\n            failureCases.push('Either of the Data source or columns should be given.');\n        }\n        if (this.frozenColumns > 0 && this.columnModel.filter(function (col) { return col.isFrozen; })) {\n            failureCases.push('Use only one attribute for Frozen either IsFrozen or FrozenColumns.');\n        }\n        if (this.enableVirtualization && !isNullOrUndefined(this.detailTemplate)) {\n            failureCases.push('Virtual scrolling is not compatible with the detail template');\n        }\n        if ((this.frozenColumns > 0 || this.columnModel.filter(function (col) { return col.isFrozen; }) || this.frozenRows > 0)\n            && (!isNullOrUndefined(this.detailTemplate) || !isNullOrUndefined(this.rowTemplate))) {\n            failureCases.push('Frozen rows and columns are not supported with the Detail template and row template.');\n        }\n        if ((this.frozenColumns > 0 || this.columnModel.filter(function (col) { return col.isFrozen; }).length > 0 || this.frozenRows > 0) && this.editSettings.mode === 'Cell') {\n            failureCases.push('Frozen rows and columns are not supported with cell editing.');\n        }\n        if (this.allowSelection && !isNullOrUndefined(this.rowTemplate)) {\n            failureCases.push('Selection is not supported in RowTemplate');\n        }\n        if (this.treeColumnIndex < 0) {\n            failureCases.push('For showing tree structure it is must to set the TreeColumnIndex value.');\n        }\n        if (this.treeColumnIndex >= this.columns.length) {\n            failureCases.push('TreeColumnIndex value should not exceed the total column count.');\n        }\n        if (this.enableVirtualization &&\n            (this.columnModel.some(function (col) { return /%$/.test(col.width); }) ||\n                /%$/.test(this.height.toString()))) {\n            failureCases.push('column width and height should be in pixels');\n        }\n        if ((this.childMapping !== 'Children') && !isNullOrUndefined(this.idMapping)) {\n            failureCases.push('Both IdMapping and ChildMapping should not be used together for tree grid rendering.');\n        }\n        if ((!isNullOrUndefined(this.idMapping) && (isNullOrUndefined(this.parentIdMapping))) ||\n            ((isNullOrUndefined(this.idMapping) && (!isNullOrUndefined(this.parentIdMapping))))) {\n            failureCases.push('IdMapping and ParentIdMapping properties should be defined and vice versa.');\n        }\n        var checkboxColumn = this.columnModel.filter(function (col) { return col.showCheckbox; });\n        var treeColumn = this.columns[this.treeColumnIndex];\n        if (checkboxColumn.length !== 0) {\n            if (checkboxColumn !== treeColumn) {\n                failureCases.push('ShowCheckbox column should not be defined other than the tree column.');\n            }\n            if (checkboxColumn.length > 1) {\n                failureCases.push('Only one column can have the ShowCheckbox option enabled.');\n            }\n        }\n        var alignColumn = this.columnModel.filter(function (col) { return col.textAlign === 'Right' && col.field === _this.columnModel[_this.treeColumnIndex].field; });\n        if (alignColumn.length !== 0) {\n            failureCases.push('TextAlign right for the tree column is not applicable.');\n        }\n        if (failureCases.length > 0) {\n            var failureEventArgs_1 = {\n                error: {}\n            };\n            failureCases.forEach(function (failureCase, index) {\n                failureEventArgs_1.error[parseInt(index.toString(), 10)] = failureCase;\n            });\n            this.trigger(events.actionFailure, failureEventArgs_1);\n        }\n    };\n    TreeGrid.prototype.refreshToolbarItems = function () {\n        var toolbarElement = this.toolbarModule.getToolbar();\n        var indentID = this.element.id + '_gridcontrol_indent';\n        var outdentID = this.element.id + '_gridcontrol_outdent';\n        var indentElement = toolbarElement.querySelector('#' + indentID).parentElement;\n        var outdentElement = toolbarElement.querySelector('#' + outdentID).parentElement;\n        indentElement.classList.add('e-hidden');\n        outdentElement.classList.add('e-hidden');\n    };\n    TreeGrid.prototype.afterGridRender = function () {\n        if (!isNullOrUndefined(this.grid.clipboardModule)) {\n            this.grid.clipboardModule.destroy();\n        }\n        this.clipboardModule = this.grid.clipboardModule = new TreeClipboard(this, this.grid.serviceLocator);\n    };\n    TreeGrid.prototype.convertTreeData = function (data) {\n        var _this = this;\n        if (isCountRequired(this)) {\n            data = getValue('result', data);\n        }\n        if (data instanceof Array && data.length > 0 && Object.prototype.hasOwnProperty.call(data[0], 'level')) {\n            this.flatData = data;\n            this.flatData.filter(function (e) {\n                setValue('uniqueIDCollection.' + e.uniqueID, e, _this);\n                if (e.level === 0) {\n                    _this.parentData.push(e);\n                }\n            });\n        }\n        else {\n            if (isCountRequired(this)) {\n                var griddata = getValue('result', this.dataSource);\n                this.dataModule.convertToFlatData(griddata);\n            }\n            else {\n                this.dataModule.convertToFlatData(data);\n            }\n        }\n    };\n    // private getGridData(): Object {\n    //   if (isRemoteData(this)) {\n    //     return this.dataSource;\n    //   } else if (this.isLocalData && this.dataSource instanceof DataManager) {\n    //     this.dataSource.dataSource.json = this.flatData;\n    //     return this.dataSource;\n    //   }\n    //   return this.flatData;\n    // }\n    TreeGrid.prototype.bindGridProperties = function () {\n        this.bindedDataSource();\n        this.grid.enableRtl = this.enableRtl;\n        this.grid.allowKeyboard = this.allowKeyboard;\n        this.grid.columns = this.getGridColumns(this.columns);\n        this.grid.allowExcelExport = this.allowExcelExport;\n        this.grid.allowPdfExport = this.allowPdfExport;\n        this.grid.query = this.query;\n        this.grid.columnQueryMode = this.columnQueryMode;\n        this.grid.allowPaging = this.allowPaging;\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        this.grid.pageSettings = getActualProperties(this.pageSettings);\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        this.grid.pagerTemplate = this.pagerTemplate;\n        this.grid.showColumnMenu = this.showColumnMenu;\n        this.grid.allowSorting = this.allowSorting;\n        this.grid.allowFiltering = this.allowFiltering;\n        this.grid.enableVirtualization = this.enableVirtualization;\n        this.grid.enableColumnVirtualization = this.enableColumnVirtualization;\n        this.grid.enableInfiniteScrolling = this.enableInfiniteScrolling;\n        this.grid.infiniteScrollSettings = this.infiniteScrollSettings;\n        this.grid.enableVirtualMaskRow = this.enableVirtualMaskRow;\n        this.grid.loadingIndicator = this.loadingIndicator;\n        this.grid.width = this.width;\n        this.grid.height = this.height;\n        this.grid.enableAltRow = this.enableAltRow;\n        this.grid.allowReordering = this.allowReordering;\n        this.grid.allowTextWrap = this.allowTextWrap;\n        this.grid.allowResizing = this.allowResizing;\n        this.grid.enableHover = this.enableHover;\n        this.grid.enableAutoFill = this.enableAutoFill;\n        this.grid.enableAdaptiveUI = this.enableAdaptiveUI;\n        this.grid.enableImmutableMode = this.enableImmutableMode;\n        this.grid.allowRowDragAndDrop = this.allowRowDragAndDrop;\n        this.grid.rowDropSettings = getActualProperties(this.rowDropSettings);\n        this.grid.rowHeight = this.rowHeight;\n        this.grid.gridLines = this.gridLines;\n        this.grid.allowSelection = this.allowSelection;\n        this.grid.toolbar = getActualProperties(this.getGridToolbar());\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        this.grid.toolbarTemplate = this.toolbarTemplate;\n        this.grid.showColumnChooser = this.showColumnChooser;\n        this.grid.filterSettings = getActualProperties(this.filterSettings);\n        this.grid.selectionSettings = getActualProperties(this.selectionSettings);\n        this.grid.sortSettings = getActualProperties(this.sortSettings);\n        this.grid.searchSettings = getActualProperties(this.searchSettings);\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        this.grid.aggregates = getActualProperties(this.aggregates);\n        this.grid.textWrapSettings = getActualProperties(this.textWrapSettings);\n        this.grid.printMode = getActualProperties(this.printMode);\n        this.grid.locale = getActualProperties(this.locale);\n        this.grid.selectedRowIndex = this.selectedRowIndex;\n        this.grid.contextMenuItems = getActualProperties(this.getContextMenu());\n        this.grid.columnMenuItems = getActualProperties(this.columnMenuItems);\n        this.grid.editSettings = this.getGridEditSettings();\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        this.grid.rowTemplate = getActualProperties(this.rowTemplate);\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        this.grid.detailTemplate = getActualProperties(this.detailTemplate);\n        this.grid.frozenRows = this.frozenRows;\n        this.grid.frozenColumns = this.frozenColumns;\n        this.grid.clipMode = getActualProperties(this.clipMode);\n        var templateInstance = 'templateDotnetInstance';\n        this.grid[\"\" + templateInstance] = this[\"\" + templateInstance];\n        var isJsComponent = 'isJsComponent';\n        this.grid[\"\" + isJsComponent] = true;\n        var enableHtmlSanitizer = 'enableHtmlSanitizer';\n        this.grid[\"\" + enableHtmlSanitizer] = this.enableHtmlSanitizer;\n    };\n    TreeGrid.prototype.triggerEvents = function (args) {\n        this.trigger(getObject('name', args), args);\n    };\n    TreeGrid.prototype.IsExpandCollapseClicked = function (args) {\n        if (!this.isFromChartSide && !isNullOrUndefined(args.target) && (args.target.classList.contains('e-treegridexpand')\n            || args.target.classList.contains('e-treegridcollapse') || args.target.classList.contains('e-summarycell'))\n            && !this.selectionSettings.checkboxOnly) {\n            if ((!isNullOrUndefined(args.data) && args.data['hasChildRecords']) || (args.rowIndex !== -1 && isNullOrUndefined(args.data))) {\n                args.cancel = true;\n                return;\n            }\n        }\n    };\n    TreeGrid.prototype.bindGridEvents = function () {\n        var _this = this;\n        this.grid.rowSelecting = function (args) {\n            _this.IsExpandCollapseClicked(args);\n            if (!isNullOrUndefined(args.data) && _this.selectionSettings.persistSelection\n                && _this.columnModel.filter(function (col) { return col.type === 'checkbox'; }).length > 0 && isRemoteData(_this)) {\n                if (!isNullOrUndefined(args.data.parentItem) || args.isHeaderCheckboxClicked) {\n                    _this.parentQuery = _this.query.queries.filter(function (q) { return q.e.field === _this.parentIdMapping; });\n                    _this.query.queries = _this.query.queries.slice(0, 0);\n                }\n            }\n            if (_this.pageSettings.pageSizeMode === 'Root') {\n                _this.grid.selectionModule['totalRecordsCount'] = _this.grid.currentViewData.length;\n            }\n            _this.trigger(events.rowSelecting, args);\n        };\n        this.grid.rowDeselecting = function (args) {\n            _this.IsExpandCollapseClicked(args);\n            if (!isNullOrUndefined(args.data) && _this.selectionSettings.persistSelection\n                && _this.columnModel.filter(function (col) { return col.type === 'checkbox'; }).length > 0 && isRemoteData(_this)) {\n                _this.parentQuery = _this.query.queries.filter(function (q) { return q.e.field === _this.parentIdMapping; });\n                _this.query.queries = _this.query.queries.slice(0, 0);\n            }\n            _this.trigger(events.rowDeselecting, args);\n        };\n        this.grid.rowSelected = function (args) {\n            if (_this.enableVirtualization && args.isHeaderCheckboxClicked &&\n                _this.grid.currentViewData.length !== _this.grid.selectionModule.selectedRowIndexes.length) {\n                var updateRowSelection = 'updateRowSelection';\n                for (var i = 0; i < _this.getRows().length; i++) {\n                    if (_this.getRows()[parseInt(i.toString(), 10)].getElementsByClassName('e-frame e-icons e-uncheck').length) {\n                        _this.grid.selectionModule[\"\" + updateRowSelection](_this.getRows()[parseInt(i.toString(), 10)], _this.getCurrentViewRecords()[parseInt(i.toString(), 10)].index);\n                    }\n                }\n            }\n            _this.selectedRowIndex = _this.grid.selectedRowIndex;\n            _this.notify(events.rowSelected, args);\n            _this.trigger(events.rowSelected, args);\n        };\n        this.grid.rowDeselected = function (args) {\n            _this.selectedRowIndex = _this.grid.selectedRowIndex;\n            if (!isNullOrUndefined(args.data)) {\n                _this.notify(events.rowDeselected, args);\n            }\n            _this.trigger(events.rowDeselected, args);\n        };\n        this.grid.resizeStop = function (args) {\n            _this.updateColumnModel();\n            _this.trigger(events.resizeStop, args);\n        };\n        this.grid.excelQueryCellInfo = function (args) {\n            _this.notify('excelCellInfo', args);\n            args = _this.dataResults;\n        };\n        this.grid.pdfQueryCellInfo = function (args) {\n            _this.notify('pdfCellInfo', args);\n            args = _this.dataResults;\n        };\n        this.grid.checkBoxChange = function (args) {\n            _this.trigger(events.checkboxChange, args);\n        };\n        this.grid.pdfExportComplete = this.triggerEvents.bind(this);\n        this.grid.excelExportComplete = this.triggerEvents.bind(this);\n        this.grid.excelHeaderQueryCellInfo = this.triggerEvents.bind(this);\n        this.grid.pdfHeaderQueryCellInfo = this.triggerEvents.bind(this);\n        this.grid.dataSourceChanged = this.triggerEvents.bind(this);\n        this.grid.recordDoubleClick = this.triggerEvents.bind(this);\n        this.grid.cellDeselected = this.triggerEvents.bind(this);\n        this.grid.cellDeselecting = this.triggerEvents.bind(this);\n        this.grid.columnMenuOpen = this.triggerEvents.bind(this);\n        this.grid.columnMenuClick = this.triggerEvents.bind(this);\n        this.grid.cellSelected = this.triggerEvents.bind(this);\n        this.grid.headerCellInfo = this.triggerEvents.bind(this);\n        this.grid.resizeStart = this.triggerEvents.bind(this);\n        this.grid.resizing = this.triggerEvents.bind(this);\n        this.grid.columnDrag = this.triggerEvents.bind(this);\n        this.grid.columnDragStart = this.triggerEvents.bind(this);\n        this.grid.columnDrop = this.triggerEvents.bind(this);\n        this.grid.beforePrint = this.triggerEvents.bind(this);\n        this.grid.beforeCopy = this.triggerEvents.bind(this);\n        this.grid.beforePaste = function (args) {\n            var rows = _this.getRows();\n            var rowIndex = 'rowIndex';\n            while (rows[args[\"\" + rowIndex]].classList.contains('e-summaryrow')) {\n                args[\"\" + rowIndex]++;\n            }\n            _this.trigger(events.beforePaste, args);\n        };\n        this.grid.load = function () {\n            _this.grid.on('initial-end', _this.afterGridRender, _this);\n            if (!isNullOrUndefined(_this.loggerModule)) {\n                var loggerModule = 'loggerModule';\n                _this.loggerModule = _this.grid[\"\" + loggerModule] = new TreeLogger(_this.grid);\n            }\n        };\n        this.grid.printComplete = this.triggerEvents.bind(this);\n        this.grid.actionFailure = function (args) {\n            _this.trigger(events.actionFailure, args);\n        };\n        this.extendedGridDataBoundEvent();\n        this.extendedGridEvents();\n        this.extendedGridActionEvents();\n        this.extendedGridEditEvents();\n        this.bindGridDragEvents();\n        this.bindCallBackEvents();\n    };\n    TreeGrid.prototype.lastRowBorder = function (visiblerow, isAddBorder) {\n        for (var j = 0; j < visiblerow.cells.length; j++) {\n            if (isAddBorder) {\n                addClass([visiblerow.cells[parseInt(j.toString(), 10)]], 'e-lastrowcell');\n            }\n            else {\n                removeClass([visiblerow.cells[parseInt(j.toString(), 10)]], 'e-lastrowcell');\n            }\n        }\n    };\n    TreeGrid.prototype.isPixelHeight = function () {\n        if (this.height !== 'auto' && this.height.toString().indexOf('%') === -1) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    TreeGrid.prototype.extendedGridDataBoundEvent = function () {\n        var _this = this;\n        this.grid.dataBound = function (args) {\n            _this.updateRowTemplate();\n            _this.updateColumnModel();\n            _this.updateAltRow(_this.getRows());\n            _this.notify('dataBoundArg', args);\n            if (isRemoteData(_this) && !isOffline(_this) && !_this.hasChildMapping) {\n                var req = void 0;\n                if (_this.dataResults.result) {\n                    req = 0;\n                }\n                else {\n                    req = 1;\n                }\n                setValue('grid.contentModule.isLoaded', !(req > 0), _this);\n            }\n            if (_this.isPixelHeight() && _this.initialRender) {\n                var rows = _this.getContentTable().rows;\n                var totalRows = [].slice.call(rows);\n                for (var i = totalRows.length - 1; i > 0; i--) {\n                    if (!isHidden(totalRows[parseInt(i.toString(), 10)])) {\n                        if (totalRows[parseInt(i.toString(), 10)].nextElementSibling) {\n                            _this.lastRowBorder(totalRows[parseInt(i.toString(), 10)], true);\n                        }\n                        break;\n                    }\n                }\n            }\n            var action = 'action';\n            if (_this.enableVirtualization && _this.selectionSettings.persistSelection && (_this.dataResults[\"\" + action] === 'expand' || _this.dataResults[\"\" + action] === 'collapse')) {\n                var refreshPersistSelection = 'refreshPersistSelection';\n                _this.grid.selectionModule[\"\" + refreshPersistSelection]();\n                if (_this.grid.selectionSettings.type === 'Single') {\n                    var updateRowSelection = 'updateRowSelection';\n                    var index = _this.getCurrentViewRecords().indexOf(_this.grid.selectionModule['data']);\n                    _this.grid.selectionModule[\"\" + updateRowSelection](_this.getRows()[parseInt(index.toString(), 10)], index);\n                }\n            }\n            if (_this.enableVirtualization && _this.selectionSettings.persistSelection\n                && !isNullOrUndefined(_this.virtualScrollModule.prevSelectedRecord)) {\n                for (var i = 0; i < _this.virtualScrollModule.prevSelectedRecord.length; i++) {\n                    var updateRowSelection = 'updateRowSelection';\n                    var index = \n                    // eslint-disable-next-line max-len\n                    _this.getCurrentViewRecords().indexOf(_this.virtualScrollModule.prevSelectedRecord[parseInt(i.toString(), 10)]);\n                    _this.grid.selectionModule[\"\" + updateRowSelection](_this.getRows()[parseInt(index.toString(), 10)], index);\n                }\n            }\n            _this.trigger(events.dataBound, args);\n            _this.initialRender = false;\n        };\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        var treeGrid = this;\n        this.grid.beforeDataBound = function (args) {\n            var dataSource = 'dataSource';\n            var requestType = getObject('action', args);\n            if (((isRemoteData(treeGrid) && !isOffline(treeGrid)) || isCountRequired(this)) && requestType !== 'edit') {\n                treeGrid.notify('updateRemoteLevel', args);\n                args = (treeGrid.dataResults);\n            }\n            else if (treeGrid.flatData.length === 0 && isOffline(treeGrid) && treeGrid.dataSource instanceof DataManager) {\n                var dm = treeGrid.dataSource;\n                treeGrid.dataModule.convertToFlatData(dm.dataSource.json);\n                args.result = treeGrid.grid.dataSource[\"\" + dataSource].json = treeGrid.flatData;\n            }\n            if (!isRemoteData(treeGrid) && !isCountRequired(this) && !isNullOrUndefined(treeGrid.dataSource)) {\n                if (this.isPrinting) {\n                    setValue('isPrinting', true, args);\n                }\n                treeGrid.notify('dataProcessor', args);\n                //args = treeGrid.dataModule.dataProcessor(args);\n            }\n            extend(args, treeGrid.dataResults);\n            if (treeGrid.enableImmutableMode) {\n                args.result = args.result.slice();\n            }\n            if (treeGrid.initialRender) {\n                this.contentModule.objectEqualityChecker = treeGrid.objectEqualityChecker;\n            }\n            // treeGrid.notify(events.beforeDataBound, args);\n            if (!this.isPrinting) {\n                var callBackPromise_1 = new Deferred();\n                treeGrid.trigger(events.beforeDataBound, args, function (beforeDataBoundArgs) {\n                    callBackPromise_1.resolve(beforeDataBoundArgs);\n                });\n                return callBackPromise_1;\n            }\n        };\n        this.grid.log = function (type, args) {\n            if (_this.loggerModule) {\n                _this.loggerModule.log(type, args);\n            }\n        };\n    };\n    TreeGrid.prototype.bindCallBackEvents = function () {\n        var _this = this;\n        this.grid.toolbarClick = function (args) {\n            if ((args.item.id === _this.grid.element.id + '_excelexport' && _this.allowExcelExport === false) ||\n                (args.item.id === _this.grid.element.id + '_pdfexport' && _this.allowPdfExport === false) ||\n                (args.item.id === _this.grid.element.id + '_csvexport' && _this.allowExcelExport === false)) {\n                return;\n            }\n            var callBackPromise = new Deferred();\n            _this.trigger(events.toolbarClick, args, function (toolbarargs) {\n                if (!toolbarargs.cancel) {\n                    _this.notify(events.toolbarClick, args);\n                }\n                callBackPromise.resolve(toolbarargs);\n            });\n            return callBackPromise;\n        };\n        this.grid.cellSelecting = function (args) {\n            var actualTarget = 'actualTarget';\n            var target = _this.grid.selectionModule[\"\" + actualTarget];\n            if (!isNullOrUndefined(target) && (target.classList.contains('e-treegridexpand') || target.classList.contains('e-treegridcollapse'))) {\n                args.cancel = true;\n            }\n            var callBackPromise = new Deferred();\n            _this.trigger(getObject('name', args), args, function (cellselectingArgs) {\n                callBackPromise.resolve(cellselectingArgs);\n            });\n            return callBackPromise;\n        };\n        this.grid.beginEdit = function (args) {\n            if (!isNullOrUndefined(args.row) && args.row.classList.contains('e-summaryrow')) {\n                args.cancel = true;\n                return;\n            }\n            var callBackPromise = new Deferred();\n            _this.trigger(events.beginEdit, args, function (begineditArgs) {\n                callBackPromise.resolve(begineditArgs);\n            });\n            return callBackPromise;\n        };\n    };\n    TreeGrid.prototype.extendedGridEditEvents = function () {\n        var _this = this;\n        this.grid.dataStateChange = function (args) {\n            if (_this.isExpandRefresh) {\n                _this.isExpandRefresh = false;\n                _this.grid.dataSource = { result: _this.flatData, count: getValue('count', _this.grid.dataSource) };\n            }\n            else {\n                if (args.action.requestType !== 'infiniteScroll') {\n                    _this.infiniteScrollData = [];\n                }\n                _this.trigger(events.dataStateChange, args);\n            }\n        };\n        this.grid.cellSave = function (args) {\n            if (_this.grid.isContextMenuOpen()) {\n                var contextitems = _this.grid.contextMenuModule.contextMenu.element.getElementsByClassName('e-selected')[0];\n                if ((isNullOrUndefined(contextitems) || contextitems.id !== _this.element.id + '_gridcontrol_cmenu_Save')) {\n                    args.cancel = true;\n                }\n            }\n            var callBackPromise = new Deferred();\n            _this.trigger(events.cellSave, args, function (cellsaveArgs) {\n                if (!cellsaveArgs.cancel) {\n                    _this.notify(events.cellSave, cellsaveArgs);\n                }\n                callBackPromise.resolve(cellsaveArgs);\n            });\n            return callBackPromise;\n        };\n        this.grid.cellSaved = function (args) {\n            _this.trigger(events.cellSaved, args);\n            _this.notify(events.cellSaved, args);\n        };\n        this.grid.cellEdit = function (args) {\n            var prom = 'promise';\n            var promise = new Deferred();\n            args[\"\" + prom] = promise;\n            _this.notify(events.cellEdit, args);\n            return promise;\n        };\n        this.grid.batchAdd = function (args) {\n            _this.trigger(events.batchAdd, args);\n            _this.notify(events.batchAdd, args);\n        };\n        this.grid.beforeBatchSave = function (args) {\n            _this.trigger(events.beforeBatchSave, args);\n            _this.notify(events.beforeBatchSave, args);\n        };\n        this.grid.beforeBatchAdd = function (args) {\n            _this.trigger(events.beforeBatchAdd, args);\n            _this.notify(events.beforeBatchAdd, args);\n        };\n        this.grid.batchDelete = function (args) {\n            _this.trigger(events.batchDelete, args);\n            _this.notify(events.batchDelete, args);\n        };\n        this.grid.beforeBatchDelete = function (args) {\n            _this.trigger(events.beforeBatchDelete, args);\n            _this.notify(events.beforeBatchDelete, args);\n        };\n        this.grid.batchCancel = function (args) {\n            if (_this.editSettings.mode !== 'Cell') {\n                _this.trigger(events.batchCancel, args);\n            }\n            _this.notify(events.batchCancel, args);\n        };\n    };\n    TreeGrid.prototype.updateRowTemplate = function () {\n        var _this = this;\n        if (this.rowTemplate) {\n            if (this.isReact && this.getContentTable().rows.length === 0) {\n                setTimeout(function () {\n                    _this.treeColumnRowTemplate();\n                    if (_this.enableCollapseAll) {\n                        var currentData = _this.getCurrentViewRecords();\n                        var rows = _this.getContentTable().rows;\n                        for (var i = 0; i < rows.length; i++) {\n                            var args = { data: currentData[parseInt(i.toString(), 10)],\n                                row: rows[parseInt(i.toString(), 10)] };\n                            _this.renderModule.RowModifier(args);\n                        }\n                    }\n                }, 0);\n            }\n            else {\n                this.treeColumnRowTemplate();\n            }\n        }\n    };\n    TreeGrid.prototype.bindedDataSource = function () {\n        var dataSource = 'dataSource';\n        var isDataAvailable = 'isDataAvailable';\n        var adaptor = 'adaptor';\n        var ready = 'ready';\n        if (this.dataSource && isCountRequired(this)) {\n            var data = this.flatData;\n            var datacount = getValue('count', this.dataSource);\n            this.grid.dataSource = { result: data, count: datacount };\n        }\n        else {\n            this.grid.dataSource = !(this.dataSource instanceof DataManager) ?\n                this.flatData : new DataManager(this.dataSource.dataSource, this.dataSource.defaultQuery, this.dataSource.adaptor);\n        }\n        if (this.dataSource instanceof DataManager && (this.dataSource.dataSource.offline || this.dataSource.ready)) {\n            this.grid.dataSource[\"\" + dataSource].json = extendArray(this.dataSource[\"\" + dataSource].json);\n            this.grid.dataSource[\"\" + ready] = this.dataSource.ready;\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            var proxy_1 = this;\n            if (!isNullOrUndefined(this.grid.dataSource[\"\" + ready])) {\n                this.grid.dataSource[\"\" + ready].then(function (e) {\n                    var dm = proxy_1.grid.dataSource;\n                    dm[\"\" + dataSource].offline = true;\n                    dm[\"\" + isDataAvailable] = true;\n                    dm[\"\" + dataSource].json = e.result;\n                    dm[\"\" + adaptor] = new JsonAdaptor();\n                });\n            }\n        }\n    };\n    TreeGrid.prototype.extendedGridActionEvents = function () {\n        var _this = this;\n        this.grid.actionBegin = function (args) {\n            if (args.requestType === 'sorting' && args.target && args.target.parentElement &&\n                args.target.parentElement.classList.contains('e-hierarchycheckbox')) {\n                args.cancel = true;\n            }\n            var requestType = getObject('requestType', args);\n            if (requestType === 'reorder') {\n                _this.notify('getColumnIndex', {});\n            }\n            if (isRemoteData(_this) && _this.enableVirtualization) {\n                if (args.requestType === 'virtualscroll') {\n                    _this.query.expand('VirtualScrollingAction');\n                    _this.showSpinner();\n                }\n                else if (args.requestType === 'searching' && args.searchString === '') {\n                    _this.query.expand('ClearSearchingAction');\n                }\n                else if (args.action === 'clearFilter') {\n                    _this.query.expand('ClearFilteringAction');\n                }\n            }\n            _this.notify('actionBegin', { editAction: args });\n            if (!isRemoteData(_this) && !isNullOrUndefined(_this.filterModule) && !isCountRequired(_this)\n                && (_this.grid.filterSettings.columns.length === 0 && _this.grid.searchSettings.key.length === 0)) {\n                _this.notify('clearFilters', { flatData: _this.grid.dataSource });\n                _this.grid.setProperties({ dataSource: _this.dataResults.result }, true);\n                if (isNullOrUndefined(_this.grid['changedProperties'].dataSource)) {\n                    _this.grid.renderModule.data.dataManager = _this.grid.dataSource instanceof DataManager ?\n                        _this.grid.dataSource :\n                        (isNullOrUndefined(_this.grid.dataSource) ? new DataManager() : new DataManager(_this.grid.dataSource));\n                    _this.grid.renderModule.data.isQueryInvokedFromData = true;\n                    _this.grid.query = _this.grid.query instanceof Query ? _this.grid.query : new Query();\n                }\n            }\n            if (_this.action !== 'indenting' && _this.action !== 'outdenting') {\n                var callBackPromise_2 = new Deferred();\n                _this.trigger(events.actionBegin, args, function (actionArgs) {\n                    if (!actionArgs.cancel) {\n                        _this.notify(events.beginEdit, actionArgs);\n                    }\n                    callBackPromise_2.resolve(actionArgs);\n                });\n                return callBackPromise_2;\n            }\n        };\n        this.grid.actionComplete = function (args) {\n            _this.notify('actioncomplete', args);\n            _this.updateColumnModel();\n            _this.updateTreeGridModel();\n            if (args.requestType === 'reorder') {\n                _this.notify('setColumnIndex', {});\n            }\n            _this.notify('actionComplete', { editAction: args });\n            if (args.requestType === 'add' && (_this.editSettings.newRowPosition !== 'Top' && _this.editSettings.newRowPosition !== 'Bottom')) {\n                _this.notify(events.beginAdd, args);\n            }\n            if (args.requestType === 'batchsave') {\n                _this.notify(events.batchSave, args);\n            }\n            _this.notify('updateGridActions', args);\n            if (args.requestType === 'save' && _this.aggregates.map(function (ag) { return ag.showChildSummary === true; }).length) {\n                _this.grid.refresh();\n            }\n            if (args.action === 'filter') {\n                if (_this.filterModule['currentFilterObject'] !== '' && _this.enableVirtualization && !_this.initialRender && !(isRemoteData(_this) && _this.enableVirtualization)) {\n                    _this.expandAll();\n                }\n            }\n            if (args.requestType === 'searching') {\n                if (_this.searchSettings.key !== '' && _this.enableVirtualization && !_this.initialRender && !(isRemoteData(_this) && _this.enableVirtualization)) {\n                    _this.expandAll();\n                }\n            }\n            if (args.action === 'clearFilter' && _this.enableCollapseAll) {\n                _this.collapseAll();\n            }\n            if (_this.action === 'indenting' || _this.action === 'outdenting') {\n                _this.action = _this.action === 'indenting' ? 'indented' : 'outdented';\n                var selectedItem_1 = [_this.selectedRecords];\n                var actionArgs = {\n                    data: selectedItem_1,\n                    dropIndex: _this.dropIndex,\n                    dropPosition: _this.dropPosition,\n                    modifiedRecords: _this.modifiedRecords,\n                    requestType: _this.action,\n                    row: _this.selectedRows\n                };\n                _this.trigger(events.actionComplete, actionArgs);\n                var currentPageItem = _this.getCurrentViewRecords().filter(function (e) {\n                    return e.uniqueID === selectedItem_1[0].uniqueID;\n                });\n                if (!currentPageItem.length) {\n                    _this.refreshToolbarItems();\n                }\n                _this.action = '';\n                _this.selectedRecords = _this.selectedRows = _this.modifiedRecords = [];\n            }\n            else {\n                if (_this.grid.isFrozenGrid() && _this.enableVirtualization && args['tableName'] === 'movable') {\n                    var movableContent = _this.grid.element.querySelector('.' + literals.movableContent);\n                    var frozenContent = _this.grid.element.querySelector('.' + literals.frozenContent);\n                    movableContent.style.height = frozenContent.style.height = 'auto';\n                }\n                _this.trigger(events.actionComplete, args);\n            }\n        };\n    };\n    TreeGrid.prototype.extendedGridEvents = function () {\n        var _this = this;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        var treeGrid = this;\n        this.grid.recordDoubleClick = function (args) {\n            _this.trigger(events.recordDoubleClick, args);\n            _this.notify(events.recordDoubleClick, args);\n        };\n        this.grid.detailDataBound = function (args) {\n            _this.notify('detaildataBound', args);\n            _this.trigger(events.detailDataBound, args);\n        };\n        this.grid.rowDataBound = function (args) {\n            if (isNullOrUndefined(this.isPrinting)) {\n                setValue('isPrinting', false, args);\n            }\n            else {\n                setValue('isPrinting', this.isPrinting, args);\n            }\n            treeGrid.renderModule.RowModifier(args);\n        };\n        this.grid.queryCellInfo = function (args) {\n            if (isNullOrUndefined(this.isPrinting)) {\n                setValue('isPrinting', false, args);\n            }\n            else {\n                setValue('isPrinting', this.isPrinting, args);\n            }\n            treeGrid.renderModule.cellRender(args);\n        };\n        this.grid.contextMenuClick = function (args) {\n            _this.notify(events.contextMenuClick, args);\n            _this.trigger(events.contextMenuClick, args);\n        };\n        this.grid.contextMenuOpen = function (args) {\n            _this.notify(events.contextMenuOpen, args);\n            _this.trigger(events.contextMenuOpen, args);\n        };\n        this.grid.queryCellInfo = function (args) {\n            _this.renderModule.cellRender(args);\n        };\n    };\n    TreeGrid.prototype.bindGridDragEvents = function () {\n        var _this = this;\n        this.grid.rowDragStartHelper = function (args) {\n            _this.trigger(events.rowDragStartHelper, args);\n        };\n        this.grid.rowDragStart = function (args) {\n            _this.trigger(events.rowDragStart, args);\n        };\n        this.grid.rowDrag = function (args) {\n            if (_this.grid.isEdit) {\n                args.cancel = true;\n                return;\n            }\n            _this.notify(events.rowdraging, args);\n            _this.trigger(events.rowDrag, args);\n        };\n        this.grid.rowDrop = function (args) {\n            if (_this.grid.isEdit) {\n                args.cancel = true;\n                return;\n            }\n            _this.notify(events.rowDropped, args);\n            args.cancel = true;\n        };\n    };\n    /**\n     * Renders TreeGrid component\n     *\n     * @private\n     * @returns {void}\n     */\n    TreeGrid.prototype.loadGrid = function () {\n        this.bindGridProperties();\n        this.bindGridEvents();\n        setValue('registeredTemplate', this.registeredTemplate, this.grid);\n        var ref = 'viewContainerRef';\n        setValue('viewContainerRef', this[\"\" + ref], this.grid);\n    };\n    /**\n     * AutoGenerate TreeGrid columns from first record\n     *\n     * @hidden\n     * @returns {void}\n     */\n    TreeGrid.prototype.autoGenerateColumns = function () {\n        if (!this.columns.length && (!this.dataModule.isRemote() && Object.keys(this.dataSource).length)) {\n            this.columns = [];\n            // if (this.dataSource instanceof DataManager) {\n            //   record = (<DataManager>this.dataSource).dataSource.json[0];\n            // } else {\n            var record = this.dataSource[0];\n            // }\n            var keys = Object.keys(record);\n            for (var i = 0; i < keys.length; i++) {\n                if ([this.childMapping, this.parentIdMapping].indexOf(keys[parseInt(i.toString(), 10)]) === -1) {\n                    this.columns.push(keys[parseInt(i.toString(), 10)]);\n                }\n            }\n        }\n    };\n    TreeGrid.prototype.getGridEditSettings = function () {\n        var edit = {};\n        var guid = 'guid';\n        edit.allowAdding = this.editSettings.allowAdding;\n        edit.allowEditing = this.editSettings.allowEditing;\n        edit.allowDeleting = this.editSettings.allowDeleting;\n        edit.newRowPosition = this.editSettings.newRowPosition === 'Bottom' ? 'Bottom' : 'Top';\n        edit.allowEditOnDblClick = this.editSettings.allowEditOnDblClick;\n        edit.showConfirmDialog = this.editSettings.showConfirmDialog;\n        edit.template = this.editSettings.template;\n        edit.showDeleteConfirmDialog = this.editSettings.showDeleteConfirmDialog;\n        edit.allowNextRowEdit = this.editSettings.allowNextRowEdit;\n        edit[\"\" + guid] = this.editSettings[\"\" + guid];\n        edit.dialog = this.editSettings.dialog;\n        switch (this.editSettings.mode) {\n            case 'Dialog':\n                edit.mode = this.editSettings.mode;\n                break;\n            case 'Batch':\n                edit.mode = this.editSettings.mode;\n                break;\n            case 'Row':\n                edit.mode = 'Normal';\n                break;\n            case 'Cell':\n                edit.mode = 'Normal';\n                edit.showConfirmDialog = false;\n                break;\n        }\n        return edit;\n    };\n    /**\n     * Defines grid toolbar from treegrid toolbar model\n     *\n     * @hidden\n     * @returns {Object[]} - returns context menu items\n     */\n    TreeGrid.prototype.getContextMenu = function () {\n        if (this.contextMenuItems) {\n            var items = [];\n            for (var i = 0; i < this.contextMenuItems.length; i++) {\n                switch (this.contextMenuItems[parseInt(i.toString(), 10)]) {\n                    case 'AddRow':\n                    case ContextMenuItems.AddRow:\n                        items.push({ text: this.l10n.getConstant('AddRow'),\n                            target: '.e-content', id: this.element.id + '_gridcontrol_cmenu_AddRow',\n                            items: [{ text: this.l10n.getConstant('Above'), id: 'Above' }, { text: this.l10n.getConstant('Below'), id: 'Below' }, { text: this.l10n.getConstant('Child'), id: 'Child' }] });\n                        break;\n                    case 'Indent':\n                    case ContextMenuItems.RowIndent:\n                        items.push({ text: this.l10n.getConstant('RowIndent'),\n                            target: '.e-content', iconCss: 'e-indent e-icons', id: this.element.id + '_gridcontrol_cmenu_Indent' });\n                        break;\n                    case 'Outdent':\n                    case ContextMenuItems.RowOutdent:\n                        items.push({ text: this.l10n.getConstant('RowOutdent'),\n                            target: '.e-content', iconCss: 'e-outdent e-icons', id: this.element.id + '_gridcontrol_cmenu_Outdent' });\n                        break;\n                    default:\n                        items.push(this.contextMenuItems[parseInt(i.toString(), 10)]);\n                }\n            }\n            return items;\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * Defines grid toolbar from treegrid toolbar model\n     *\n     * @hidden\n     * @returns {Object[]} - Returns toolbar items\n     */\n    TreeGrid.prototype.getGridToolbar = function () {\n        if (this.toolbar) {\n            this.l10n = new L10n('treegrid', this.defaultLocale, this.locale);\n            var items = [];\n            var tooltipText = void 0;\n            for (var i = 0; i < this.toolbar.length; i++) {\n                switch (this.toolbar[parseInt(i.toString(), 10)]) {\n                    case 'Search':\n                    case ToolbarItem.Search:\n                        items.push('Search');\n                        break;\n                    case 'Print':\n                    case ToolbarItem.Print:\n                        items.push('Print');\n                        break;\n                    case 'ExpandAll':\n                    case ToolbarItem.ExpandAll:\n                        tooltipText = this.l10n.getConstant('ExpandAll');\n                        items.push({ text: tooltipText, tooltipText: tooltipText,\n                            prefixIcon: 'e-expand', id: this.element.id + '_gridcontrol_expandall' });\n                        break;\n                    case 'CollapseAll':\n                    case ToolbarItem.CollapseAll:\n                        tooltipText = this.l10n.getConstant('CollapseAll');\n                        items.push({ text: tooltipText,\n                            tooltipText: tooltipText, prefixIcon: 'e-collapse', id: this.element.id + '_gridcontrol_collapseall'\n                        });\n                        break;\n                    case 'Indent':\n                    case ToolbarItem.RowIndent:\n                        tooltipText = this.l10n.getConstant('RowIndent');\n                        items.push({\n                            text: tooltipText, tooltipText: tooltipText,\n                            prefixIcon: 'e-indent', id: this.element.id + '_gridcontrol_indent'\n                        });\n                        break;\n                    case 'Outdent':\n                    case ToolbarItem.RowOutdent:\n                        tooltipText = this.l10n.getConstant('RowOutdent');\n                        items.push({\n                            text: tooltipText, tooltipText: tooltipText,\n                            prefixIcon: 'e-outdent', id: this.element.id + '_gridcontrol_outdent'\n                        });\n                        break;\n                    default:\n                        items.push(this.toolbar[parseInt(i.toString(), 10)]);\n                }\n            }\n            return items;\n        }\n        else {\n            return null;\n        }\n    };\n    TreeGrid.prototype.getGridColumns = function (columns, isEmptyColumnModel, index) {\n        if (isEmptyColumnModel === void 0) { isEmptyColumnModel = true; }\n        if (index === void 0) { index = 0; }\n        var column = columns;\n        var stackedColumn = 'columns';\n        if (isEmptyColumnModel) {\n            this.columnModel = [];\n        }\n        var treeGridColumn;\n        var gridColumn;\n        if (this.columnModel.length === 0) {\n            index = index === 0 ? -1 : index;\n        }\n        var gridColumnCollection = [];\n        for (var i = 0; i < column.length; i++) {\n            index = index + 1;\n            var treeColumn = this.grid.getColumnByUid(column[parseInt(i.toString(), 10)].uid);\n            gridColumn = treeColumn ? treeColumn : {};\n            treeGridColumn = {};\n            if (typeof this.columns[parseInt(i.toString(), 10)] === 'string') {\n                gridColumn.field = treeGridColumn.field = this.columns[parseInt(i.toString(), 10)];\n            }\n            else {\n                for (var _i = 0, _a = Object.keys(column[parseInt(i.toString(), 10)]); _i < _a.length; _i++) {\n                    var prop = _a[_i];\n                    if (index === this.treeColumnIndex && prop === 'template') {\n                        treeGridColumn[\"\" + prop] = column[parseInt(i.toString(), 10)][\"\" + prop];\n                    }\n                    else if (prop === 'columns' && !isNullOrUndefined(column[parseInt(i.toString(), 10)][\"\" + prop])) {\n                        gridColumn[\"\" + prop] = this.getGridColumns(column[parseInt(i.toString(), 10)][\"\" + prop], false, this.columnModel.length - 1);\n                        treeGridColumn[\"\" + prop] = column[parseInt(i.toString(), 10)][\"\" + prop];\n                    }\n                    else if (this.initialRender && !isNullOrUndefined(treeColumn) && this.enablePersistence && prop === 'edit') {\n                        gridColumn[\"\" + prop] = treeGridColumn[\"\" + prop] = treeColumn[\"\" + prop];\n                    }\n                    else if (!(treeColumn) || prop !== 'sortComparer') {\n                        gridColumn[\"\" + prop] = treeGridColumn[\"\" + prop] = column[parseInt(i.toString(), 10)][\"\" + prop];\n                    }\n                }\n            }\n            if (!treeGridColumn[\"\" + stackedColumn]) {\n                this.columnModel.push(new Column(treeGridColumn));\n            }\n            gridColumnCollection.push(gridColumn);\n            if (!isNullOrUndefined(this.columnModel[this.treeColumnIndex]) && this.enableRtl) {\n                if (gridColumn.field === this.columnModel[this.treeColumnIndex].field) {\n                    if (isNullOrUndefined(this.treeColumnTextAlign)) {\n                        this.treeColumnTextAlign = this.columnModel[this.treeColumnIndex].textAlign;\n                        this.treeColumnField = this.columnModel[this.treeColumnIndex].field;\n                    }\n                    gridColumn.textAlign = 'Right';\n                }\n            }\n        }\n        return gridColumnCollection;\n    };\n    /**\n     * Called internally if any of the property value changed.\n     *\n     * @param {TreeGridModel} newProp - properties details which has to be modified\n     * @hidden\n     * @returns {void}\n     */\n    TreeGrid.prototype.onPropertyChanged = function (newProp) {\n        var properties = Object.keys(newProp);\n        var requireRefresh = false;\n        if (properties.indexOf('columns') > -1 && !isNullOrUndefined(newProp.columns) && this.frozenColumns === 0\n            && this.frozenRows === 0 && !this.columnModel.some(function (col) { return col.isFrozen || col.freeze; })) {\n            this.grid.columns = this.getGridColumns(newProp.columns);\n            this.grid['updateColumnObject']();\n            requireRefresh = true;\n        }\n        for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n            var prop = properties_1[_i];\n            switch (prop) {\n                case 'treeColumnIndex':\n                    this.grid.refreshColumns();\n                    break;\n                case 'allowPaging':\n                    this.grid.allowPaging = this.allowPaging;\n                    break;\n                case 'pageSettings':\n                    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n                    this.grid.pageSettings = getActualProperties(this.pageSettings);\n                    requireRefresh = true;\n                    break;\n                case 'enableVirtualization':\n                    this.grid.enableVirtualization = this.enableVirtualization;\n                    break;\n                case 'enableColumnVirtualization':\n                    this.grid.enableColumnVirtualization = this.enableColumnVirtualization;\n                    break;\n                case 'toolbar':\n                    this.grid.toolbar = this.getGridToolbar();\n                    break;\n                case 'allowSelection':\n                    this.grid.allowSelection = this.allowSelection;\n                    break;\n                case 'selectionSettings':\n                    this.grid.selectionSettings = getActualProperties(this.selectionSettings);\n                    break;\n                case 'allowSorting':\n                    this.grid.allowSorting = this.allowSorting;\n                    break;\n                case 'allowMultiSorting':\n                    this.grid.allowMultiSorting = this.allowMultiSorting;\n                    break;\n                case 'sortSettings':\n                    this.grid.sortSettings = getActualProperties(this.sortSettings);\n                    break;\n                case 'searchSettings':\n                    this.grid.searchSettings = getActualProperties(this.searchSettings);\n                    break;\n                case 'allowFiltering':\n                    this.grid.allowFiltering = this.allowFiltering;\n                    break;\n                case 'filterSettings':\n                    if (!this.initialRender) {\n                        this.grid.filterSettings = getActualProperties(this.filterSettings);\n                    }\n                    break;\n                case 'showColumnMenu':\n                    this.grid.showColumnMenu = this.showColumnMenu;\n                    break;\n                case 'allowRowDragAndDrop':\n                    this.grid.allowRowDragAndDrop = this.allowRowDragAndDrop;\n                    break;\n                case 'aggregates':\n                    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n                    this.grid.aggregates = getActualProperties(this.aggregates);\n                    break;\n                case 'enableInfiniteScrolling':\n                    this.grid.enableInfiniteScrolling = this.enableInfiniteScrolling;\n                    break;\n                case 'dataSource':\n                    this.isLocalData = (!(this.dataSource instanceof DataManager) || (!isNullOrUndefined(this.dataSource.ready))\n                        || this.dataSource.adaptor instanceof RemoteSaveAdaptor);\n                    this.convertTreeData(this.dataSource);\n                    if (this.isLocalData) {\n                        if (isCountRequired(this)) {\n                            var count = getValue('count', this.dataSource);\n                            this.grid.dataSource = { result: this.flatData, count: count };\n                        }\n                        else {\n                            var data = this.dataSource;\n                            this.grid.dataSource = !(data instanceof DataManager) ?\n                                this.flatData : new DataManager(data.dataSource, data.defaultQuery, data.adaptor);\n                        }\n                        if (this.enableVirtualization) {\n                            this.grid.contentModule.isDataSourceChanged = true;\n                        }\n                    }\n                    else {\n                        this.bindedDataSource();\n                        if (this.enableVirtualization) {\n                            this.grid.contentModule.removeEventListener();\n                            this.grid.contentModule.eventListener('on');\n                            this.grid.contentModule.renderTable();\n                        }\n                    }\n                    break;\n                case 'query':\n                    this.grid.query = this.query;\n                    break;\n                case 'enableCollapseAll':\n                    if (newProp[\"\" + prop]) {\n                        this.collapseAll();\n                    }\n                    else {\n                        this.expandAll();\n                    }\n                    break;\n                case 'expandStateMapping':\n                    this.grid.refresh();\n                    break;\n                case 'gridLines':\n                    this.grid.gridLines = this.gridLines;\n                    break;\n                case 'rowTemplate':\n                    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n                    this.grid.rowTemplate = getActualProperties(this.rowTemplate);\n                    break;\n                case 'frozenRows':\n                    this.grid.frozenRows = this.frozenRows;\n                    break;\n                case 'frozenColumns':\n                    this.grid.frozenColumns = this.frozenColumns;\n                    break;\n                case 'rowHeight':\n                    this.grid.rowHeight = this.rowHeight;\n                    break;\n                case 'height':\n                    if (!isNullOrUndefined(this.height) && typeof (this.height) === 'string' && this.height.indexOf('%') !== -1) {\n                        this.element.style.height = this.height;\n                    }\n                    this.grid.height = this.height;\n                    break;\n                case 'width':\n                    if (!isNullOrUndefined(this.width) && typeof (this.width) === 'string' && this.width.indexOf('%') !== -1) {\n                        this.element.style.width = this.width;\n                    }\n                    this.grid.width = this.width;\n                    break;\n                case 'locale':\n                    this.grid.locale = this.locale;\n                    this.TreeGridLocale();\n                    this.grid.toolbar = this.getGridToolbar();\n                    this.grid.contextMenuItems = this.getContextMenu();\n                    break;\n                case 'selectedRowIndex':\n                    this.grid.selectedRowIndex = this.selectedRowIndex;\n                    break;\n                case 'enableAltRow':\n                    this.grid.enableAltRow = this.enableAltRow;\n                    break;\n                case 'enableHover':\n                    this.grid.enableHover = this.enableHover;\n                    break;\n                case 'enableAutoFill':\n                    this.grid.enableAutoFill = this.enableAutoFill;\n                    break;\n                case 'enableAdaptiveUI':\n                    this.grid.enableAdaptiveUI = this.enableAdaptiveUI;\n                    break;\n                case 'enableImmutableMode':\n                    this.grid.enableImmutableMode = this.enableImmutableMode;\n                    break;\n                case 'allowExcelExport':\n                    this.grid.allowExcelExport = this.allowExcelExport;\n                    break;\n                case 'allowPdfExport':\n                    this.grid.allowPdfExport = this.allowPdfExport;\n                    break;\n                case 'enableRtl':\n                    if (!isNullOrUndefined(this.treeColumnField)) {\n                        this.updateTreeColumnTextAlign();\n                    }\n                    this.grid.enableRtl = this.enableRtl;\n                    break;\n                case 'allowReordering':\n                    this.grid.allowReordering = this.allowReordering;\n                    break;\n                case 'allowResizing':\n                    this.grid.allowResizing = this.allowResizing;\n                    break;\n                case 'textWrapSettings':\n                    this.grid.textWrapSettings = getActualProperties(this.textWrapSettings);\n                    break;\n                case 'allowTextWrap':\n                    this.grid.allowTextWrap = getActualProperties(this.allowTextWrap);\n                    this.grid.refresh();\n                    break;\n                case 'contextMenuItems':\n                    this.grid.contextMenuItems = this.getContextMenu();\n                    break;\n                case 'showColumnChooser':\n                    this.grid.showColumnChooser = this.showColumnChooser;\n                    break;\n                case 'detailTemplate':\n                    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n                    this.grid.detailTemplate = getActualProperties(this.detailTemplate);\n                    break;\n                case 'columnMenuItems':\n                    this.grid.columnMenuItems = getActualProperties(this.columnMenuItems);\n                    break;\n                case 'editSettings':\n                    if (this.grid.isEdit && this.grid.editSettings.mode === 'Normal' && newProp[\"\" + prop].mode &&\n                        (newProp[\"\" + prop].mode === 'Cell' || newProp[\"\" + prop].mode === 'Row')) {\n                        this.grid.closeEdit();\n                    }\n                    this.grid.editSettings = this.getGridEditSettings();\n                    break;\n            }\n            if (requireRefresh) {\n                this.grid.refresh();\n            }\n        }\n    };\n    TreeGrid.prototype.updateTreeColumnTextAlign = function () {\n        var gridColumn = this.grid.getColumnByField(this.treeColumnField);\n        gridColumn.textAlign = this.enableRtl ? 'Right' : this.treeColumnTextAlign;\n        this.grid.refreshColumns();\n    };\n    /**\n     * Destroys the component (detaches/removes all event handlers, attributes, classes, and empties the component element).\n     *\n     * @method destroy\n     * @returns {void}\n     */\n    TreeGrid.prototype.destroy = function () {\n        var treeGridElement = this.element;\n        if (!treeGridElement) {\n            return;\n        }\n        var hasTreeGridChild = treeGridElement.querySelector('.' + 'e-gridheader') &&\n            treeGridElement.querySelector('.' + 'e-gridcontent') ? true : false;\n        if (hasTreeGridChild) {\n            this.unwireEvents();\n        }\n        this.removeListener();\n        if (hasTreeGridChild) {\n            _super.prototype.destroy.call(this);\n        }\n        if (this.grid) {\n            this.grid.destroy();\n        }\n        if (this.dataModule) {\n            this.dataModule.destroy();\n        }\n        var modules = ['dataModule', 'sortModule', 'renderModule', 'filterModule', 'printModule', 'clipboardModule',\n            'excelExportModule', 'pdfExportModule', 'toolbarModule', 'summaryModule', 'reorderModule', 'resizeModule',\n            'pagerModule', 'keyboardModule', 'columnMenuModule', 'contextMenuModule', 'editModule', 'virtualScrollModule',\n            'selectionModule', 'detailRow', 'rowDragAndDropModule', 'freezeModule'];\n        for (var i = 0; i < modules.length; i++) {\n            if (this[modules[parseInt(i.toString(), 10)]]) {\n                this[modules[parseInt(i.toString(), 10)]] = null;\n            }\n        }\n        this.element.innerHTML = '';\n        this.grid = null;\n    };\n    /**\n     * Update the TreeGrid model\n     *\n     * @method dataBind\n     * @returns {void}\n     * @private\n     */\n    TreeGrid.prototype.dataBind = function () {\n        if (isNullOrUndefined(this.grid)) {\n            return;\n        }\n        if (!isNullOrUndefined(this.rowDropSettings.targetID) &&\n            isNullOrUndefined(document.getElementById(this.grid.rowDropSettings.targetID))) {\n            document.getElementById(this.rowDropSettings.targetID).id = this.grid.rowDropSettings.targetID;\n            this.rowDropSettings.targetID = this.grid.rowDropSettings.targetID;\n        }\n        _super.prototype.dataBind.call(this);\n        this.grid.dataBind();\n    };\n    /**\n     * Get the properties to be maintained in the persisted state.\n     *\n     * @returns {string} - Returns persist properties details\n     * @hidden\n     */\n    TreeGrid.prototype.getPersistData = function () {\n        var keyEntity = ['pageSettings', 'sortSettings',\n            'filterSettings', 'columns', 'searchSettings', 'selectedRowIndex', 'treeColumnIndex', 'scrollPosition'];\n        var ignoreOnPersist = {\n            pageSettings: ['template', 'pageSizes', 'pageSizeMode', 'enableQueryString', 'totalRecordsCount', 'pageCount'],\n            filterSettings: ['type', 'mode', 'showFilterBarStatus', 'immediateModeDelay', 'ignoreAccent', 'hierarchyMode'],\n            searchSettings: ['fields', 'operator', 'ignoreCase'],\n            sortSettings: [], columns: [], selectedRowIndex: [], scrollPosition: []\n        };\n        var ignoreOnColumn = ['filter', 'edit', 'filterBarTemplate', 'headerTemplate', 'template',\n            'commandTemplate', 'commands', 'dataSource'];\n        for (var i = 0; i < keyEntity.length; i++) {\n            var currentObject = this[keyEntity[parseInt(i.toString(), 10)]];\n            for (var k = 0, val = ignoreOnPersist[keyEntity[parseInt(i.toString(), 10)]]; (!isNullOrUndefined(val) && k < val.length); k++) {\n                var objVal = val[parseInt(k.toString(), 10)];\n                delete currentObject[\"\" + objVal];\n            }\n        }\n        this.ignoreInArrays(ignoreOnColumn, this.columns);\n        return this.addOnPersist(keyEntity);\n    };\n    TreeGrid.prototype.ignoreInArrays = function (ignoreOnColumn, columns) {\n        for (var i = 0; i < columns.length; i++) {\n            if (columns[parseInt(i.toString(), 10)].columns) {\n                this.ignoreInColumn(ignoreOnColumn, columns[parseInt(i.toString(), 10)]);\n                this.ignoreInArrays(ignoreOnColumn, columns[parseInt(i.toString(), 10)].columns);\n            }\n            else {\n                this.ignoreInColumn(ignoreOnColumn, columns[parseInt(i.toString(), 10)]);\n            }\n        }\n    };\n    TreeGrid.prototype.ignoreInColumn = function (ignoreOnColumn, column) {\n        if (isNullOrUndefined(column.template)) {\n            for (var i = 0; i < ignoreOnColumn.length; i++) {\n                delete column[ignoreOnColumn[parseInt(i.toString(), 10)]];\n                column.filter = {};\n            }\n        }\n    };\n    TreeGrid.prototype.mouseClickHandler = function (e) {\n        var _this = this;\n        if (!isNullOrUndefined(e.touches)) {\n            return;\n        }\n        var target = e.target;\n        if ((target.classList.contains('e-treegridexpand') ||\n            target.classList.contains('e-treegridcollapse')) && (!this.isEditCollapse && !this.grid.isEdit)) {\n            this.expandCollapseRequest(target);\n        }\n        var isEllipsisTooltip = 'isEllipsisTooltip';\n        if ((target.classList.contains('e-treegridexpand') || target.classList.contains('e-treegridcollapse')) &&\n            (this.grid[\"\" + isEllipsisTooltip]())) {\n            this.grid['toolTipObj'].close();\n        }\n        this.isEditCollapse = false;\n        this.notify('checkboxSelection', { target: target });\n        if (this.grid.isCheckBoxSelection && !this.grid.isPersistSelection) {\n            if (this.aggregates.map(function (ag) { return ag.showChildSummary === true; }).length) {\n                var checkedTarget = this.grid.getHeaderContent().querySelector('.e-checkselectall');\n                var checkedLen = this.grid.getSelectedRowIndexes().length;\n                var totalRecords = this.getCurrentViewRecords().length;\n                if (checkedLen === totalRecords) {\n                    var spanEle = checkedTarget.nextElementSibling;\n                    removeClass([spanEle], ['e-stop', 'e-uncheck']);\n                    addClass([spanEle], ['e-check']);\n                }\n            }\n        }\n        if (((target.classList.contains('e-flmenu-cancelbtn') || target.classList.contains('e-flmenu-okbtn')\n            || target.classList.contains('e-content') || target.classList.contains('e-rowcell'))\n            && !isNullOrUndefined(this.grid.filterModule) && this.isReact)) {\n            if (!isNullOrUndefined(this.grid.filterModule['column'])) {\n                if (this.grid.filterModule['column'].filterTemplate) {\n                    var elem = document.getElementById(this.grid.filterModule.filterModule['dlgObj'].element.id);\n                    this.grid.filterModule['fltrDlgDetails'].isOpen = false;\n                    if (this.grid.filterModule.filterModule['dlgObj'] && !this.grid.filterModule.filterModule['dlgObj'].isDestroyed && elem) {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        this.clearTemplate(['filterTemplate'], undefined, function () {\n                            _this.grid.filterModule.filterModule['dlgObj'].destroy();\n                        });\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Returns TreeGrid rows\n     *\n     * @returns {HTMLTableRowElement[]} - Returns row elements collection\n     */\n    TreeGrid.prototype.getRows = function () {\n        return this.grid.getRows();\n    };\n    /**\n     * Gets the pager of the TreeGrid.\n     *\n     * @returns {Element} - Returns pager element\n     */\n    TreeGrid.prototype.getPager = function () {\n        return this.grid.getPager(); //get element from pager\n    };\n    /**\n     * Adds a new record to the TreeGrid. Without passing parameters, it adds empty rows.\n     * > `editSettings.allowEditing` should be true.\n     *\n     * @param {Object} data - Defines the new add record data.\n     * @param {number} index - Defines the row index to be added.\n     * @param {RowPosition} position - Defines the new row position to be added.\n     * @returns {void}\n     */\n    TreeGrid.prototype.addRecord = function (data, index, position) {\n        if (this.editModule) {\n            var isAddedRowByMethod = 'isAddedRowByMethod';\n            this.editModule[\"\" + isAddedRowByMethod] = true;\n            this.editModule.addRecord(data, index, position);\n        }\n    };\n    /**\n     * Cancels edited state.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.closeEdit = function () {\n        if (this.grid.editModule) {\n            this.editModule['closeEdit']();\n        }\n    };\n    /**\n     * Saves the cell that is currently edited. It does not save the value to the DataSource.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.saveCell = function () {\n        if (this.grid.editModule) {\n            this.grid.editModule.saveCell();\n        }\n    };\n    /**\n     * To update the specified cell by given value without changing into edited state.\n     *\n     * @param {number} rowIndex Defines the row index.\n     * @param {string} field Defines the column field.\n     * @param {string | number | boolean | Date} value - Defines the value to be changed.\n     * @returns {void}\n     */\n    TreeGrid.prototype.updateCell = function (rowIndex, field, value) {\n        if (this.grid.editModule) {\n            this.grid.editModule.updateCell(rowIndex, field, value);\n        }\n    };\n    /**\n     * To update the specified row by given values without changing into edited state.\n     *\n     * @param {number} index Defines the row index.\n     * @param {Object} data Defines the data object to be updated.\n     * @returns {void}\n     */\n    TreeGrid.prototype.updateRow = function (index, data) {\n        if (this.grid.editModule) {\n            if (!isNullOrUndefined(index)) {\n                var griddata = this.grid.getCurrentViewRecords()[parseInt(index.toString(), 10)];\n                extend(griddata, data);\n                this.grid.editModule.updateRow(index, griddata);\n            }\n            else {\n                this.grid.editModule.updateRow(index, data);\n            }\n        }\n    };\n    /**\n     * Delete a record with Given options. If fieldName and data is not given then TreeGrid will delete the selected record.\n     * > `editSettings.allowDeleting` should be true.\n     *\n     * @param {string} fieldName - Defines the primary key field, 'Name of the column'.\n     * @param {Object} data - Defines the JSON data of the record to be deleted.\n     * @returns {void}\n     */\n    TreeGrid.prototype.deleteRecord = function (fieldName, data) {\n        if ((isNullOrUndefined(fieldName) && (isNullOrUndefined(data)) || (this.getSelectedRecords().length <= 0))) {\n            var error = 'The provided value for the fieldName and data is undefined. Please ensure the fieldName and data contains number.';\n            this.trigger(events.actionFailure, { error: error });\n        }\n        if (this.grid.editModule) {\n            this.grid.editModule.deleteRecord(fieldName, data);\n        }\n    };\n    /**\n     * To edit any particular row by TR element.\n     *\n     * @param {HTMLTableRowElement} row - Defines the table row to be edited.\n     * @returns {void}\n     */\n    TreeGrid.prototype.startEdit = function (row) {\n        if (this.grid.editModule) {\n            this.grid.editModule.startEdit(row);\n        }\n    };\n    /**\n     * To edit any particular cell using row index and cell index.\n     *\n     * @param {number} rowIndex - Defines row index to edit a particular cell.\n     * @param {string} field - Defines the field name of the column to perform cell edit.\n     * @returns {void}\n     */\n    TreeGrid.prototype.editCell = function (rowIndex, field) {\n        if (this.editModule) {\n            this.editModule.editCell(rowIndex, field);\n        }\n    };\n    /**\n     * Enables or disables ToolBar items.\n     *\n     * @param {string[]} items - Defines the collection of itemID of ToolBar items.\n     * @param {boolean} isEnable - Defines the items to be enabled or disabled.\n     * @returns {void}\n     */\n    TreeGrid.prototype.enableToolbarItems = function (items, isEnable) {\n        if (this.grid.toolbarModule) {\n            this.grid.toolbarModule.enableItems(items, isEnable);\n        }\n    };\n    /**\n     * If TreeGrid is in editable state, you can save a record by invoking endEdit.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.endEdit = function () {\n        if (this.grid.editModule) {\n            this.grid.editModule.endEdit();\n        }\n    };\n    /**\n     * Column chooser can be displayed on screen by given position(X and Y axis).\n     *\n     * @param {number} x - Defines the X axis.\n     * @param {number} y - Defines the Y axis.\n     * @returns {void}\n     */\n    TreeGrid.prototype.openColumnChooser = function (x, y) {\n        if (this.columnChooserModule) {\n            this.columnChooserModule.openColumnChooser(x, y);\n        }\n    };\n    /**\n     * Delete any visible row by TR element.\n     *\n     * @param {HTMLTableRowElement} tr - Defines the table row element.\n     * @returns {void}\n     */\n    TreeGrid.prototype.deleteRow = function (tr) {\n        if (this.grid.editModule) {\n            this.grid.editModule.deleteRow(tr);\n        }\n    };\n    /**\n     * Get the names of the primary key columns of the TreeGrid.\n     *\n     * @returns {string[]} - Returns primary key collection\n     */\n    TreeGrid.prototype.getPrimaryKeyFieldNames = function () {\n        return this.grid.getPrimaryKeyFieldNames();\n    };\n    /**\n     * Updates particular cell value based on the given primary key value.\n     * > Primary key column must be specified using `columns.isPrimaryKey` property.\n     *\n     * @param {string| number} key - Specifies the PrimaryKey value of dataSource.\n     * @param {string } field - Specifies the field name which you want to update.\n     * @param {string | number | boolean | Date} value - To update new value for the particular cell.\n     * @returns {void}\n     */\n    TreeGrid.prototype.setCellValue = function (key, field, value) {\n        this.grid.setCellValue(key, field, value);\n        var rowIndex = this.grid.getRowIndexByPrimaryKey(key);\n        var record = this.getCurrentViewRecords()[parseInt(rowIndex.toString(), 10)];\n        editAction({ value: record, action: 'edit' }, this, this.isSelfReference, record.index, this.grid.selectedRowIndex, field);\n    };\n    /**\n     * Updates and refresh the particular row values based on the given primary key value.\n     * > Primary key column must be specified using `columns.isPrimaryKey` property.\n     *\n     *  @param {string| number} key - Specifies the PrimaryKey value of dataSource.\n     *  @param {Object} rowData - To update new data for the particular row.\n     * @returns {void}\n     */\n    TreeGrid.prototype.setRowData = function (key, rowData) {\n        var currentRecords = this.getCurrentViewRecords();\n        var primaryKey = this.grid.getPrimaryKeyFieldNames()[0];\n        var level = 0;\n        var record = {};\n        currentRecords.some(function (value) {\n            if (value[\"\" + primaryKey] === key) {\n                record = value;\n                return true;\n            }\n            else {\n                return false;\n            }\n        });\n        level = record.level;\n        rowData.level = level;\n        rowData.index = record.index;\n        rowData.childRecords = record.childRecords;\n        rowData.taskData = record.taskData;\n        rowData.uniqueID = record.uniqueID;\n        rowData.parentItem = record.parentItem;\n        rowData.checkboxState = record.checkboxState;\n        rowData.hasChildRecords = record.hasChildRecords;\n        rowData.parentUniqueID = record.parentUniqueID;\n        rowData.expanded = record.expanded;\n        this.grid.setRowData(key, rowData);\n        var visibleRecords = this.getVisibleRecords();\n        if (visibleRecords.length > 0 && key === (visibleRecords[visibleRecords.length - 1])[\"\" + primaryKey]) {\n            var table = this.getContentTable();\n            var sHeight = table.scrollHeight;\n            var clientHeight = this.getContent().clientHeight;\n            this.lastRowBorder(this.getRows()[currentRecords.indexOf(record)], sHeight <= clientHeight);\n        }\n    };\n    /**\n     * Navigates to the specified target page.\n     *\n     * @param  {number} pageNo - Defines the page number to navigate.\n     * @returns {void}\n     */\n    TreeGrid.prototype.goToPage = function (pageNo) {\n        if (this.grid.pagerModule) {\n            this.grid.pagerModule.goToPage(pageNo);\n        }\n    };\n    /**\n     * Defines the text of external message.\n     *\n     * @param  {string} message - Defines the message to update.\n     * @returns {void}\n     */\n    TreeGrid.prototype.updateExternalMessage = function (message) {\n        if (this.pagerModule) {\n            this.grid.pagerModule.updateExternalMessage(message);\n        }\n    };\n    /**\n     * Gets a cell by row and column index.\n     *\n     * @param  {number} rowIndex - Specifies the row index.\n     * @param  {number} columnIndex - Specifies the column index.\n     * @returns {Element} - Returns cell element in grid content\n     */\n    TreeGrid.prototype.getCellFromIndex = function (rowIndex, columnIndex) {\n        return this.grid.getCellFromIndex(rowIndex, columnIndex);\n    };\n    /**\n     * Gets a Column by column name.\n     *\n     * @param  {string} field - Specifies the column name.\n     * @returns {Column} - Returns tree grid column\n     */\n    TreeGrid.prototype.getColumnByField = function (field) {\n        return iterateArrayOrObject(this.columnModel, function (item) {\n            if (item.field === field) {\n                return item;\n            }\n            return undefined;\n        })[0];\n    };\n    /**\n     * Gets a column by UID.\n     *\n     * @param  {string} uid - Specifies the column UID.\n     * @returns {Column} - Returns tree grid column\n     */\n    TreeGrid.prototype.getColumnByUid = function (uid) {\n        var Columns = this.initialRender ? this.grid.columns : this.columns;\n        var columnModel = 'columnModel';\n        if (this.grid.columns.length !== this.columnModel.length) {\n            Columns = this.grid[\"\" + columnModel];\n        }\n        return iterateArrayOrObject(Columns, function (item) {\n            if (item.uid === uid) {\n                return item;\n            }\n            return undefined;\n        })[0];\n    };\n    /**\n     * Gets the collection of column fields.\n     *\n     * @returns {string[]} - Returns column field name as collection\n     */\n    TreeGrid.prototype.getColumnFieldNames = function () {\n        return this.grid.getColumnFieldNames();\n    };\n    /**\n     * Gets the footer div of the TreeGrid.\n     *\n     * @returns {Element} - Returns footer content div element\n     */\n    TreeGrid.prototype.getFooterContent = function () {\n        return this.grid.getFooterContent();\n    };\n    /**\n     * Gets the footer table element of the TreeGrid.\n     *\n     * @returns {Element} - Returns footer content table element\n     */\n    TreeGrid.prototype.getFooterContentTable = function () {\n        return this.grid.getFooterContentTable();\n    };\n    /**\n     * Shows a column by its column name.\n     *\n     * @param  {string|string[]} keys - Defines a single or collection of column names.\n     * @param  {string} showBy - Defines the column key either as field name or header text.\n     * @returns {void}\n     */\n    TreeGrid.prototype.showColumns = function (keys, showBy) {\n        this.grid.showColumns(keys, showBy);\n        this.updateColumnModel();\n    };\n    /**\n     * Hides a column by column name.\n     *\n     * @param  {string|string[]} keys - Defines a single or collection of column names.\n     * @param  {string} hideBy - Defines the column key either as field name or header text.\n     * @returns {void}\n     */\n    TreeGrid.prototype.hideColumns = function (keys, hideBy) {\n        this.grid.hideColumns(keys, hideBy);\n        this.updateColumnModel();\n    };\n    /**\n     * Gets a column header by column name.\n     *\n     * @param  {string} field - Specifies the column name.\n     * @returns {Element} - Returns column header element\n     */\n    TreeGrid.prototype.getColumnHeaderByField = function (field) {\n        return this.grid.getColumnHeaderByField(field);\n    };\n    /**\n     * Gets a column header by column index.\n     *\n     * @param  {number} index - Specifies the column index.\n     * @returns {Element} - Returns column header element\n     */\n    TreeGrid.prototype.getColumnHeaderByIndex = function (index) {\n        return this.grid.getColumnHeaderByIndex(index);\n    };\n    /**\n     * Gets a column header by UID.\n     *\n     * @param {string} uid - Specifies the column uid.\n     * @returns {Element} - Returns column header element\n     */\n    TreeGrid.prototype.getColumnHeaderByUid = function (uid) {\n        return this.grid.getColumnHeaderByUid(uid);\n    };\n    /**\n     * Gets a column index by column name.\n     *\n     * @param  {string} field - Specifies the column name.\n     * @returns {number} - Returns column index\n     */\n    TreeGrid.prototype.getColumnIndexByField = function (field) {\n        return this.grid.getColumnIndexByField(field);\n    };\n    TreeGrid.prototype.getVirtualColIndexByUid = function (uid) {\n        var columnModel = 'columnModel';\n        var index = iterateArrayOrObject(this.grid[\"\" + columnModel], function (item, index) {\n            if (item.uid === uid) {\n                return index;\n            }\n            return undefined;\n        })[0];\n        return !isNullOrUndefined(index) ? index : -1;\n    };\n    /**\n     * Gets a column index by UID.\n     *\n     * @param  {string} uid - Specifies the column UID.\n     * @returns {number} - Returns column index\n     */\n    TreeGrid.prototype.getColumnIndexByUid = function (uid) {\n        return this.grid.getColumnIndexByUid(uid);\n    };\n    /**\n     * Gets the columns from the TreeGrid.\n     *\n     * @param {boolean} isRefresh - Defined whether to update DOM\n     * @returns {Column[]} - Returns treegrid columns collection\n     */\n    TreeGrid.prototype.getColumns = function (isRefresh) {\n        this.updateColumnModel(this.grid.getColumns(isRefresh));\n        return this.columnModel;\n    };\n    TreeGrid.prototype.updateColumnModel = function (column) {\n        var temp;\n        var field;\n        var gridColumns = isNullOrUndefined(column) ? this.grid.getColumns() : column;\n        if (this.treeColumnIndex !== -1 && this.columnModel[this.treeColumnIndex] &&\n            !isNullOrUndefined(this.columnModel[this.treeColumnIndex].template)) {\n            temp = this.columnModel[this.treeColumnIndex].template;\n            field = this.columnModel[this.treeColumnIndex].field;\n        }\n        var gridColumn;\n        if (!this.enableColumnVirtualization || (this.enableColumnVirtualization && this.columnModel.length === gridColumns.length)) {\n            this.columnModel = [];\n            for (var i = 0; i < gridColumns.length; i++) {\n                gridColumn = {};\n                for (var _i = 0, _a = Object.keys(gridColumns[parseInt(i.toString(), 10)]); _i < _a.length; _i++) {\n                    var prop = _a[_i];\n                    gridColumn[\"\" + prop] = gridColumns[parseInt(i.toString(), 10)][\"\" + prop];\n                }\n                this.columnModel.push(new Column(gridColumn));\n                if (field === this.columnModel[parseInt(i.toString(), 10)].field && this.columnModel[parseInt(i.toString(), 10)].type !== 'checkbox' && (!isNullOrUndefined(temp) && temp !== '')) {\n                    this.columnModel[parseInt(i.toString(), 10)].template = temp;\n                }\n            }\n        }\n        var deepMerge = 'deepMerge';\n        this[\"\" + deepMerge] = ['columns']; // Workaround for blazor updateModel\n        if (this.grid.columns.length !== this.columnModel.length) {\n            this.stackedHeader = true;\n        }\n        if (this.stackedHeader && !isNullOrUndefined(this.detailTemplate)) {\n            var error = 'Stacked header is not compatible with the detail template';\n            this.trigger(events.actionFailure, { error: error });\n        }\n        if (this.stackedHeader && this.allowResizing && !isNullOrUndefined(this.columns)) {\n            this.updateColumnsWidth(this.columns);\n        }\n        if (!this.stackedHeader && !isNullOrUndefined(this.columns)) {\n            merge(this.columns, this.columnModel);\n        }\n        this[\"\" + deepMerge] = undefined; // Workaround for blazor updateModel\n        return this.columnModel;\n    };\n    TreeGrid.prototype.updateColumnsWidth = function (columns) {\n        var _this = this;\n        columns.forEach(function (column) {\n            if (!isNullOrUndefined(column) && column.columns) {\n                _this.updateColumnsWidth(column.columns);\n            }\n            else if (!isNullOrUndefined(column) && column.field) {\n                var currentColumn = _this.grid.getColumnByField(column.field);\n                if (!isNullOrUndefined(currentColumn)) {\n                    column.width = currentColumn.width;\n                }\n            }\n        });\n    };\n    /**\n     * Gets the content div of the TreeGrid.\n     *\n     * @returns {Element} - Return tree grid content element\n     */\n    TreeGrid.prototype.getContent = function () {\n        return this.grid.getContent();\n    };\n    TreeGrid.prototype.mergePersistTreeGridData = function () {\n        var persist1 = 'mergePersistGridData';\n        this.grid[\"\" + persist1].apply(this);\n    };\n    TreeGrid.prototype.mergeColumns = function (storedColumn, columns) {\n        var persist2 = 'mergeColumns';\n        this.grid[\"\" + persist2].apply(this, [storedColumn, columns]);\n    };\n    TreeGrid.prototype.setFrozenCount = function () {\n        var persist3 = 'setFrozenCount';\n        this.grid[\"\" + persist3].apply(this.grid);\n    };\n    TreeGrid.prototype.splitFrozenCount = function (columns) {\n        var persist4 = 'splitFrozenCount';\n        this.grid[\"\" + persist4].apply(this.grid, [columns]);\n    };\n    TreeGrid.prototype.isFrozenGrid = function () {\n        return this.grid.isFrozenGrid();\n    };\n    TreeGrid.prototype.updateTreeGridModel = function () {\n        this.setProperties({ filterSettings: getObject('properties', this.grid.filterSettings) }, true);\n        this.setProperties({ pageSettings: getObject('properties', this.grid.pageSettings) }, true);\n        this.setProperties({ searchSettings: getObject('properties', this.grid.searchSettings) }, true);\n        this.setProperties({ sortSettings: getObject('properties', this.grid.sortSettings) }, true);\n    };\n    /**\n     * Gets the content table of the TreeGrid.\n     *\n     * @returns {Element} - Returns content table element\n     */\n    TreeGrid.prototype.getContentTable = function () {\n        return this.grid.getContentTable();\n    };\n    /**\n     * Gets all the TreeGrid's data rows.\n     *\n     * @returns {Element[]} - Returns row elements\n     */\n    TreeGrid.prototype.getDataRows = function () {\n        var dRows = [];\n        var rows = this.grid.getDataRows();\n        for (var i = 0, len = rows.length; i < len; i++) {\n            if (!rows[parseInt(i.toString(), 10)].classList.contains('e-summaryrow')) {\n                dRows.push(rows[parseInt(i.toString(), 10)]);\n            }\n        }\n        return dRows;\n    };\n    /**\n     * Get current visible data of TreeGrid.\n     *\n     * @returns {Object[]} - Returns current view records\n     * @isGenericType true\n     */\n    TreeGrid.prototype.getCurrentViewRecords = function () {\n        var isSummaryRow = 'isSummaryRow';\n        return this.grid.currentViewData.filter(function (e) { return isNullOrUndefined(e[\"\" + isSummaryRow]); });\n    };\n    /**\n     * Gets the added, edited,and deleted data before bulk save to the DataSource in batch mode.\n     *\n     * @returns {Object} - Returns batch changes\n     */\n    TreeGrid.prototype.getBatchChanges = function () {\n        return this.grid.editModule.getBatchChanges();\n    };\n    /**\n     * Gets the header div of the TreeGrid.\n     *\n     * @returns {Element} - Returns Header content element\n     */\n    TreeGrid.prototype.getHeaderContent = function () {\n        return this.grid.getHeaderContent();\n    };\n    /**\n     * Gets the header table element of the TreeGrid.\n     *\n     * @returns {Element} - Return header table element\n     */\n    TreeGrid.prototype.getHeaderTable = function () {\n        return this.grid.getHeaderTable();\n    };\n    /**\n     * Gets a row by index.\n     *\n     * @param  {number} index - Specifies the row index.\n     * @returns {Element} - Returns row element\n     */\n    TreeGrid.prototype.getRowByIndex = function (index) {\n        return this.grid.getRowByIndex(index);\n    };\n    /**\n     * Get a row information based on cell\n     *\n     * @param {Element | EventTarget} target - Target row element\n     * @returns {RowInfo} - Returns row information in a JSON object\n     */\n    TreeGrid.prototype.getRowInfo = function (target) {\n        return this.grid.getRowInfo(target);\n    };\n    /**\n     * Gets UID by column name.\n     *\n     * @param  {string} field - Specifies the column name.\n     * @returns {string} - Returns unique id based on column field name given\n     */\n    TreeGrid.prototype.getUidByColumnField = function (field) {\n        return this.grid.getUidByColumnField(field);\n    };\n    /**\n     * Gets the visible columns from the TreeGrid.\n     *\n     * @returns {Column[]} - Returns visible columns collection\n     */\n    TreeGrid.prototype.getVisibleColumns = function () {\n        var cols = [];\n        for (var _i = 0, _a = this.columnModel; _i < _a.length; _i++) {\n            var col = _a[_i];\n            if (col.visible) {\n                cols.push(col);\n            }\n        }\n        return cols;\n    };\n    /**\n     * By default, TreeGrid shows the spinner for all its actions. You can use this method to show spinner at your needed time.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.showSpinner = function () {\n        showSpinner(this.element);\n    };\n    /**\n     * Manually shown spinner needs to hide by `hideSpinnner`.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.hideSpinner = function () {\n        hideSpinner(this.element);\n    };\n    /**\n     * Refreshes the TreeGrid header and content.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.refresh = function () {\n        this.uniqueIDCollection = {};\n        this.convertTreeData(this.dataSource);\n        if (!isCountRequired(this)) {\n            if (!(this.dataSource instanceof DataManager)) {\n                this.grid.dataSource = this.flatData;\n            }\n            else {\n                this.grid.setProperties({\n                    dataSource: new DataManager(this.dataSource.dataSource, this.dataSource.defaultQuery, this.dataSource.adaptor)\n                }, true);\n            }\n        }\n        this.grid.refresh();\n    };\n    /**\n     * Get the records of checked rows.\n     *\n     * @returns {Object[]} - Returns records that has been checked\n     * @isGenericType true\n     */\n    TreeGrid.prototype.getCheckedRecords = function () {\n        return this.selectionModule.getCheckedrecords();\n    };\n    /**\n     * Get the visible records corresponding to rows visually displayed.\n     *\n     * @returns {Object[]} - Returns visible records based on collapse state of rows\n     * @isGenericType true\n     */\n    TreeGrid.prototype.getVisibleRecords = function () {\n        var visibleRecords = [];\n        var currentViewRecords = this.getCurrentViewRecords();\n        if (!this.allowPaging) {\n            for (var i = 0; i < currentViewRecords.length; i++) {\n                visibleRecords.push(currentViewRecords[parseInt(i.toString(), 10)]);\n                if (!currentViewRecords[parseInt(i.toString(), 10)].expanded) {\n                    i += findChildrenRecords(currentViewRecords[parseInt(i.toString(), 10)]).length;\n                }\n            }\n        }\n        else {\n            visibleRecords = currentViewRecords;\n        }\n        return visibleRecords;\n    };\n    /**\n     * Get the indexes of checked rows.\n     *\n     * @returns {number[]} - Returns checked row indexes\n     */\n    TreeGrid.prototype.getCheckedRowIndexes = function () {\n        return this.selectionModule.getCheckedRowIndexes();\n    };\n    /**\n     * Checked the checkboxes using rowIndexes.\n     *\n     * @param {number[]} indexes - row indexes\n     * @returns {void}\n     */\n    TreeGrid.prototype.selectCheckboxes = function (indexes) {\n        this.selectionModule.selectCheckboxes(indexes);\n    };\n    /**\n     * Refreshes the TreeGrid column changes.\n     *\n     * @param {boolean} refreshUI - Defined whether to refresh the DOM\n     * @returns {void}\n     */\n    TreeGrid.prototype.refreshColumns = function (refreshUI) {\n        if (isNullOrUndefined(refreshUI) || refreshUI) {\n            this.grid.columns = this.getGridColumns(this.columns);\n            this.grid.refreshColumns();\n        }\n        else {\n            this.grid.setProperties({ columns: this.getGridColumns(this.columns) }, true);\n        }\n    };\n    /**\n     * Refreshes the TreeGrid header.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.refreshHeader = function () {\n        this.grid.refreshHeader();\n    };\n    /**\n     * Expands or collapse child records\n     *\n     * @param {HTMLElement} target - Expand collapse icon cell as target element\n     * @returns {void}\n     * @hidden\n     */\n    TreeGrid.prototype.expandCollapseRequest = function (target) {\n        if (this.editSettings.mode === 'Batch') {\n            var obj = 'dialogObj';\n            var showDialog = 'showDialog';\n            if ((this.getBatchChanges()[this.changedRecords].length || this.getBatchChanges()[this.deletedRecords].length ||\n                this.getBatchChanges()[this.addedRecords].length) && this.editSettings.showConfirmDialog) {\n                var dialogObj = this.grid.editModule[\"\" + obj];\n                this.grid.editModule[\"\" + showDialog]('CancelEdit', dialogObj);\n                this.targetElement = target;\n                return;\n            }\n        }\n        if (this.rowTemplate) {\n            var rowInfo = target.closest('.e-treerowcell').parentElement;\n            var record = this.getCurrentViewRecords()[rowInfo.rowIndex];\n            if (target.classList.contains('e-treegridexpand')) {\n                this.collapseRow(rowInfo, record);\n            }\n            else {\n                this.expandRow(rowInfo, record);\n            }\n        }\n        else {\n            var rowInfo_1 = this.grid.getRowInfo(target);\n            var record = rowInfo_1.rowData;\n            if (this.grid.isFrozenGrid() && this.enableVirtualization && !Object.keys(record).length) {\n                var freezeRows = 'freezeRows';\n                record = this.grid.contentModule[\"\" + freezeRows].filter(function (e) { return e.uid === rowInfo_1.row.getAttribute('data-uid'); })[0].data;\n            }\n            if (this.enableImmutableMode) {\n                record = this.getCurrentViewRecords()[rowInfo_1.rowIndex];\n            }\n            if (target.classList.contains('e-treegridexpand')) {\n                this.collapseRow(rowInfo_1.row, record);\n            }\n            else {\n                this.expandRow(rowInfo_1.row, record);\n            }\n        }\n    };\n    /**\n     * Expands child rows\n     *\n     * @param {HTMLTableRowElement} row - Expands the given row\n     * @param {Object} record - Expands the given record\n     * @param {Object} key - Primary key value\n     * @param {number} level - Specifies the hierarchical level of the record\n     * @returns {void}\n     */\n    TreeGrid.prototype.expandRow = function (row, record, key, level) {\n        var _this = this;\n        this.isCollapseAll = false;\n        var parentRec = this.parentData;\n        if (!this.enableVirtualization) {\n            parentRec = this.flatData.filter(function (e) {\n                return e.hasChildRecords;\n            });\n        }\n        record = this.getCollapseExpandRecords(row, record);\n        if (isNullOrUndefined(row) && isNullOrUndefined(record)) {\n            return;\n        }\n        if (!isNullOrUndefined(row) && row.cells[0].classList.contains('e-lastrowcell')) {\n            this.lastRowBorder(row, false);\n        }\n        if (this.isExpandAll && !isRemoteData(this)) {\n            var args = { data: parentRec, row: row, cancel: false };\n            var pagerValuePresent = false;\n            if (this.grid.pagerModule && !isNullOrUndefined(this.grid.pagerModule.pagerObj.pagerdropdownModule)) {\n                pagerValuePresent = this.grid.pagerModule.pagerObj.pagerdropdownModule['dropDownListObject'].value ? true : false;\n            }\n            if (!this.isExpandingEventTriggered) {\n                this.trigger(events.expanding, args, function (expandingArgs) {\n                    _this.expandAllPrevent = expandingArgs.cancel;\n                    if (!expandingArgs.cancel && !isNullOrUndefined(record)) {\n                        if (expandingArgs.expandAll) {\n                            _this.expandCollapseAllChildren(record, 'expand', key, level);\n                        }\n                        _this.expandRows(row, record, parentRec);\n                    }\n                });\n            }\n            else if ((!this.allowPaging || (pagerValuePresent && this.grid.pagerModule.pagerObj.pagerdropdownModule['dropDownListObject'].value === 'All')) &&\n                !this.expandAllPrevent && this.isExpandingEventTriggered) {\n                this.expandRows(row, record, parentRec);\n            }\n            this.isExpandingEventTriggered = true;\n        }\n        else if (!this.isExpandAll || (this.isExpandAll && isRemoteData(this))) {\n            var args = { data: record, row: row, cancel: false };\n            this.trigger(events.expanding, args, function (expandingArgs) {\n                if (!expandingArgs.cancel) {\n                    if (expandingArgs.expandAll) {\n                        _this.expandCollapseAllChildren(record, 'expand', key, level);\n                    }\n                    _this.expandRows(row, record, parentRec);\n                }\n            });\n        }\n    };\n    // Internal method to handle the rows expand\n    TreeGrid.prototype.expandRows = function (row, record, parentRec) {\n        this.expandCollapse('expand', row, record);\n        var children = 'Children';\n        if (!(isRemoteData(this) && !isOffline(this)) && (!isCountRequired(this) || !isNullOrUndefined(record[\"\" + children]))) {\n            var expandArgs = { data: record, row: row };\n            if (!isNullOrUndefined(this.expandStateMapping)) {\n                this.updateExpandStateMapping(expandArgs.data, true);\n            }\n            if (this.isExpandAll && !this.isExpandedEventTriggered) {\n                this.isExpandedEventTriggered = true;\n                expandArgs = { data: parentRec, row: row };\n                this.trigger(events.expanded, expandArgs);\n            }\n            else if (!this.isExpandAll && this.enableVirtualization && this.selectionSettings.persistSelection\n                && !isNullOrUndefined(this.virtualScrollModule.prevSelectedRecord)) {\n                this.virtualScrollModule.prevSelectedRecord = [];\n            }\n            else if (!this.isExpandAll) {\n                this.trigger(events.expanded, expandArgs);\n            }\n        }\n    };\n    TreeGrid.prototype.expandCollapseAllChildren = function (record, action, key, level) {\n        if ((!isNullOrUndefined(key) && record[this.getPrimaryKeyFieldNames()[0]] !== key) ||\n            (!isNullOrUndefined(level) && level !== record.level)) {\n            return;\n        }\n        var records = findChildrenRecords(record).filter(function (e) {\n            return e.hasChildRecords;\n        });\n        records.unshift(record);\n        for (var i = 0; i < records.length; i++) {\n            this.expandCollapse(action, null, records[parseInt(i.toString(), 10)]);\n        }\n    };\n    TreeGrid.prototype.getCollapseExpandRecords = function (row, record) {\n        if (this.allowPaging && this.pageSettings.pageSizeMode === 'All' && this.isExpandAll && isNullOrUndefined(record) &&\n            !isRemoteData(this)) {\n            record = this.flatData.filter(function (e) {\n                return e.hasChildRecords;\n            });\n        }\n        else if (isNullOrUndefined(record) && !isNullOrUndefined(row)) {\n            if (this.detailTemplate) {\n                record = this.grid.getCurrentViewRecords()[row.getAttribute('data-rowindex')];\n            }\n            else {\n                if (this.enableVirtualization && (this.isCollapseAll || this.isExpandAll)) {\n                    if (row.rowIndex === -1) {\n                        record = this.grid.getCurrentViewRecords()[parseInt(row.getAttribute('data-rowindex'), 10)];\n                    }\n                    else {\n                        record = this.grid.getCurrentViewRecords()[row.rowIndex];\n                    }\n                }\n                else if (this.rowTemplate) {\n                    record = this.grid.getCurrentViewRecords()[row.rowIndex];\n                }\n                else {\n                    record = this.grid.getCurrentViewRecords()[parseInt(row.getAttribute('data-rowindex'), 10)];\n                }\n            }\n        }\n        return record;\n    };\n    /**\n     * Collapses child rows\n     *\n     * @param {HTMLTableRowElement} row - Collapse the given row\n     * @param {Object} record - Collapse the given record\n     * @param {Object} key - Primary key value\n     * @returns {void}\n     */\n    TreeGrid.prototype.collapseRow = function (row, record, key) {\n        var _this = this;\n        this.isExpandAll = false;\n        var parentRec = this.parentData;\n        if (!this.enableVirtualization) {\n            parentRec = this.flatData.filter(function (e) {\n                return e.hasChildRecords;\n            });\n        }\n        record = this.getCollapseExpandRecords(row, record);\n        if (isNullOrUndefined(row) && isNullOrUndefined(record)) {\n            return;\n        }\n        if (this.isCollapseAll && !isRemoteData(this)) {\n            var args = { data: parentRec, row: row, cancel: false };\n            if (!this.isCollapsingEventTriggered) {\n                this.trigger(events.collapsing, args, function (collapsingArgs) {\n                    _this.collapseAllPrevent = collapsingArgs.cancel;\n                    if (!collapsingArgs.cancel) {\n                        if (collapsingArgs.collapseAll) {\n                            _this.expandCollapseAllChildren(record, 'collapse', key);\n                        }\n                        _this.collapseRows(row, record, parentRec);\n                    }\n                });\n            }\n            else if (!this.allowPaging && !this.collapseAllPrevent && this.isCollapsingEventTriggered) {\n                this.collapseRows(row, record, parentRec);\n            }\n            this.isCollapsingEventTriggered = true;\n        }\n        else if (!this.isCollapseAll || (this.isCollapseAll && isRemoteData(this))) {\n            var args = { data: record, row: row, cancel: false };\n            this.trigger(events.collapsing, args, function (collapsingArgs) {\n                if (!collapsingArgs.cancel) {\n                    _this.collapseRows(row, record, parentRec);\n                }\n            });\n        }\n    };\n    // Internal method for handling the rows collapse\n    TreeGrid.prototype.collapseRows = function (row, record, parentRec) {\n        this.expandCollapse('collapse', row, record);\n        var collapseArgs = { data: record, row: row };\n        if (!isRemoteData(this)) {\n            if (!isNullOrUndefined(this.expandStateMapping)) {\n                this.updateExpandStateMapping(collapseArgs.data, false);\n            }\n            if (this.isCollapseAll && !this.isCollapsedEventTriggered) {\n                this.isCollapsedEventTriggered = true;\n                collapseArgs = { data: parentRec, row: row };\n                this.trigger(events.collapsed, collapseArgs);\n            }\n            else if (!this.isCollapseAll) {\n                this.trigger(events.collapsed, collapseArgs);\n            }\n            if (this.enableInfiniteScrolling) {\n                var scrollHeight = this.grid.getContent().firstElementChild.scrollHeight;\n                var scrollTop = this.grid.getContent().firstElementChild.scrollTop;\n                if ((scrollHeight - scrollTop) < this.grid.getRowHeight() + +this.height) {\n                    this.grid.getContent().firstElementChild.scrollBy(0, this.grid.getRowHeight());\n                }\n            }\n        }\n    };\n    TreeGrid.prototype.updateExpandStateMapping = function (record, state) {\n        var totalRecords = record;\n        if (totalRecords.length) {\n            for (var i = 0; i < totalRecords.length; i++) {\n                totalRecords[parseInt(i.toString(), 10)][this.expandStateMapping] = state;\n                editAction({ value: totalRecords[parseInt(i.toString(), 10)], action: 'edit' }, this, this.isSelfReference, totalRecords[parseInt(i.toString(), 10)].index, this.grid.selectedRowIndex, this.expandStateMapping);\n            }\n        }\n        else {\n            record[\"\" + this.expandStateMapping] = state;\n            editAction({ value: record, action: 'edit' }, this, this.isSelfReference, record.index, this.grid.selectedRowIndex, this.expandStateMapping);\n        }\n    };\n    /**\n     * Expands the records at specific hierarchical level\n     *\n     * @param {number} level - Expands the parent rows at given level\n     * @returns {void}\n     */\n    TreeGrid.prototype.expandAtLevel = function (level) {\n        if (((this.allowPaging && this.pageSettings.pageSizeMode === 'All') || this.enableVirtualization) && !isRemoteData(this)) {\n            var rec = this.grid.dataSource.filter(function (e) {\n                if (e.hasChildRecords && e.level === level) {\n                    e.expanded = true;\n                }\n                return e.hasChildRecords && e.level === level;\n            });\n            this.expandAction(rec, null, level, true);\n        }\n        else {\n            var rec = this.getRecordDetails(level);\n            var record = getObject('records', rec);\n            this.expandAction(record, null, level);\n        }\n    };\n    /**\n     * Expands the records by given primary key value\n     *\n     * @param {Object} key - Expands the parent rows with given primary key value\n     * @returns {void}\n     */\n    TreeGrid.prototype.expandByKey = function (key) {\n        this.expandCollapseActionByKey(key, 'Expand');\n    };\n    TreeGrid.prototype.expandAction = function (record, key, level, isPaging) {\n        if (isPaging === void 0) { isPaging = false; }\n        var _loop_1 = function (i) {\n            if (!isNullOrUndefined(record[parseInt(i.toString(), 10)].parentItem)) {\n                var puniqueID_1 = record[parseInt(i.toString(), 10)].parentItem.uniqueID;\n                var parentItem = this_1.flatData.filter(function (e) {\n                    return e.uniqueID === puniqueID_1;\n                });\n                if (isRemoteData(this_1)) {\n                    parentItem = this_1.getCurrentViewRecords().filter(function (e) {\n                        return e.uniqueID === puniqueID_1;\n                    });\n                }\n                if (parentItem[0].expanded === false) {\n                    record.push(parentItem[0]);\n                    parentItem[0].expanded = true;\n                }\n                else {\n                    if (!getExpandStatus(this_1, parentItem[0], this_1.parentData)) {\n                        if (parentItem[0].expanded && parentItem[0].parentItem !== undefined) {\n                            record.push(parentItem[0]);\n                        }\n                    }\n                }\n            }\n            if (!isPaging) {\n                this_1.expandRow(null, record[parseInt(i.toString(), 10)], key, level);\n            }\n        };\n        var this_1 = this;\n        for (var i = 0; i < record.length; i++) {\n            _loop_1(i);\n        }\n        if (isPaging) {\n            this.expandRow(null, record, key, level);\n        }\n    };\n    TreeGrid.prototype.getRecordDetails = function (level) {\n        var rows = this.getRows().filter(function (e) {\n            return (e.className.indexOf('level' + level) !== -1\n                && (e.querySelector('.e-treegridcollapse') || e.querySelector('.e-treegridexpand')));\n        });\n        var records = this.getCurrentViewRecords().filter(function (e) {\n            return e.level === level && e.hasChildRecords;\n        });\n        var obj = { records: records, rows: rows };\n        return obj;\n    };\n    /**\n     * Collapses the records at specific hierarchical level\n     *\n     * @param {number} level - Define the parent row level which needs to be collapsed\n     * @returns {void}\n     */\n    TreeGrid.prototype.collapseAtLevel = function (level) {\n        if (((this.allowPaging && this.pageSettings.pageSizeMode === 'All') || this.enableVirtualization) && !isRemoteData(this)) {\n            var record = this.grid.dataSource.filter(function (e) {\n                if (e.hasChildRecords && e.level === level) {\n                    e.expanded = false;\n                }\n                return e.hasChildRecords && e.level === level;\n            });\n            this.collapseAction(record, null, true);\n        }\n        else {\n            var rec = this.getRecordDetails(level);\n            var records = getObject('records', rec);\n            this.collapseAction(records);\n        }\n    };\n    /**\n     * Collapses the records by given primary key value\n     *\n     * @param {Object} key - Collapses the parent rows with given primary key value\n     * @returns {void}\n     */\n    TreeGrid.prototype.collapseByKey = function (key) {\n        this.expandCollapseActionByKey(key, 'Collapse');\n    };\n    TreeGrid.prototype.expandCollapseActionByKey = function (key, action) {\n        var primaryKeyField = this.getPrimaryKeyFieldNames()[0];\n        var dataSource = isRemoteData(this) ? this.getCurrentViewRecords() : this.grid.dataSource;\n        if (!isNullOrUndefined(primaryKeyField)) {\n            var rec = dataSource.filter(function (e) {\n                return e[\"\" + primaryKeyField].toString() === key.toString();\n            });\n            if (action === 'Expand') {\n                this.expandAction(rec, key, null);\n            }\n            else {\n                this.collapseAction(rec, key);\n            }\n        }\n    };\n    TreeGrid.prototype.collapseAction = function (record, key, isPaging) {\n        if (isPaging === void 0) { isPaging = false; }\n        if (isPaging) {\n            this.collapseRow(null, record);\n        }\n        else {\n            for (var i = 0; i < record.length; i++) {\n                this.collapseRow(null, record[parseInt(i.toString(), 10)], key);\n            }\n        }\n        if (!this.grid.contentModule.isDataSourceChanged && this.enableVirtualization && this.getRows()\n            && this.parentData.length === this.getRows().length) {\n            var endIndex = 'endIndex';\n            this.grid.contentModule.startIndex = -1;\n            this.grid.contentModule[\"\" + endIndex] = -1;\n        }\n    };\n    /**\n     * Expands All the rows\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.expandAll = function () {\n        if (this.getCurrentViewRecords().length === 0) {\n            var error = 'The provided value for the datasource is undefined. Please ensure to add the dataSource.';\n            this.trigger(events.actionFailure, { error: error });\n        }\n        this.isExpandedEventTriggered = false;\n        this.isExpandingEventTriggered = false;\n        this.expandCollapseAll('expand');\n    };\n    /**\n     * Collapses All the rows\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.collapseAll = function () {\n        if (this.getCurrentViewRecords().length === 0) {\n            var error = 'The provided value for the datasource is undefined. Please ensure to add the dataSource.';\n            this.trigger(events.actionFailure, { error: error });\n        }\n        this.isCollapsedEventTriggered = false;\n        this.isCollapsingEventTriggered = false;\n        this.expandCollapseAll('collapse');\n    };\n    TreeGrid.prototype.expandCollapseAll = function (action) {\n        var rows;\n        if (this.rowTemplate) {\n            rows = [].slice.call(this.grid.getContentTable().querySelectorAll('tr')).filter(function (e) {\n                return e.querySelector('.e-treegrid' + (action === 'expand' ? 'collapse' : 'expand'));\n            });\n        }\n        else {\n            rows = this.getRows().filter(function (e) {\n                return e.querySelector('.e-treegrid' + (action === 'expand' ? 'collapse' : 'expand'));\n            });\n        }\n        if (!rows.length && this.getRows().length) {\n            rows.push(this.getRows()[0]);\n        }\n        this.isExpandAll = true;\n        this.isCollapseAll = true;\n        if (((this.allowPaging && this.pageSettings.pageSizeMode === 'All') || this.enableVirtualization || this.enableInfiniteScrolling) && !isRemoteData(this)) {\n            this.flatData.filter(function (e) {\n                if (e.hasChildRecords) {\n                    e.expanded = action === 'collapse' ? false : true;\n                }\n            });\n            if (rows.length) {\n                for (var i = 0; i < rows.length; i++) {\n                    if (action === 'collapse') {\n                        if (!isNullOrUndefined(this.getCurrentViewRecords()[rows[parseInt(i.toString(), 10)].rowIndex])) {\n                            this.collapseRow(rows[parseInt(i.toString(), 10)]);\n                        }\n                    }\n                    else {\n                        if (!this.enableVirtualization) {\n                            this.expandRow(rows[parseInt(i.toString(), 10)]);\n                        }\n                        else if (rows[0].getAttribute('aria-expanded') !== 'true') {\n                            this.expandRow(rows[0]);\n                        }\n                    }\n                }\n            }\n            else if (this.allowPaging) {\n                var isExpandCollapseall = this.enableCollapseAll;\n                this.setProperties({ enableCollapseAll: true }, true);\n                this.grid.pagerModule.goToPage(1);\n                this.setProperties({ enableCollapseAll: isExpandCollapseall }, true);\n            }\n        }\n        else {\n            for (var i = 0; i < rows.length; i++) {\n                if (action === 'collapse') {\n                    this.collapseRow(rows[parseInt(i.toString(), 10)]);\n                }\n                else {\n                    this.expandRow(rows[parseInt(i.toString(), 10)]);\n                }\n            }\n        }\n        this.isExpandAll = false;\n        this.isCollapseAll = false;\n    };\n    TreeGrid.prototype.expandCollapse = function (action, row, record, isChild) {\n        var _this = this;\n        var expandingArgs = { row: row, data: record, childData: [], requestType: action };\n        var childRecords = this.grid.currentViewData.filter(function (e) {\n            return e.parentUniqueID === record.uniqueID;\n        });\n        var targetEle;\n        if ((!isRemoteData(this) && action === 'expand' && this.isSelfReference && isCountRequired(this) && !childRecords.length) || (action === 'collapse' || (this.isExpandAll && !this.loadChildOnDemand) && !isRemoteData(this) && this.isSelfReference && isCountRequired(this))) {\n            this.updateChildOnDemand(expandingArgs);\n        }\n        var gridRows = this.getRows();\n        if (this.rowTemplate) {\n            var rows = this.getContentTable().rows;\n            gridRows = [].slice.call(rows);\n        }\n        var rowIndex;\n        if (isNullOrUndefined(row)) {\n            rowIndex = this.grid.currentViewData.indexOf(record);\n            row = gridRows[parseInt(rowIndex.toString(), 10)];\n        }\n        else {\n            rowIndex = +row.getAttribute('data-rowindex');\n        }\n        if (!isNullOrUndefined(row)) {\n            row.setAttribute('aria-expanded', action === 'expand' ? 'true' : 'false');\n        }\n        if (((this.allowPaging && this.pageSettings.pageSizeMode === 'All') || this.enableVirtualization) && !isRemoteData(this)\n            && !isCountRequired(this)) {\n            this.notify(events.localPagedExpandCollapse, { action: action, row: row, record: record });\n        }\n        else {\n            var displayAction = void 0;\n            if (action === 'expand') {\n                displayAction = 'e-childrow-visible';\n                if (!isChild) {\n                    record.expanded = true;\n                    this.uniqueIDCollection[record.uniqueID].expanded = record.expanded;\n                }\n                if (!isNullOrUndefined(row)) {\n                    targetEle = row.getElementsByClassName('e-treegridcollapse')[0];\n                }\n                if (isChild && !isNullOrUndefined(record[this.expandStateMapping]) &&\n                    record[this.expandStateMapping] && isNullOrUndefined(targetEle)) {\n                    targetEle = row.getElementsByClassName('e-treegridexpand')[0];\n                }\n                if (isNullOrUndefined(targetEle)) {\n                    return;\n                }\n                if (!targetEle.classList.contains('e-treegridexpand')) {\n                    addClass([targetEle], 'e-treegridexpand');\n                }\n                removeClass([targetEle], 'e-treegridcollapse');\n            }\n            else {\n                displayAction = 'e-childrow-hidden';\n                if (!isChild || isCountRequired(this)) {\n                    record.expanded = false;\n                    this.uniqueIDCollection[record.uniqueID].expanded = record.expanded;\n                }\n                if (!isNullOrUndefined(row)) {\n                    targetEle = row.getElementsByClassName('e-treegridexpand')[0];\n                }\n                if (isChild && !isNullOrUndefined(record[this.expandStateMapping]) &&\n                    !record[this.expandStateMapping] && isNullOrUndefined(targetEle)) {\n                    targetEle = row.getElementsByClassName('e-treegridcollapse')[0];\n                }\n                if (isNullOrUndefined(targetEle)) {\n                    return;\n                }\n                if (!targetEle.classList.contains('e-treegridcollapse')) {\n                    addClass([targetEle], 'e-treegridcollapse');\n                }\n                removeClass([targetEle], 'e-treegridexpand');\n            }\n            row.querySelectorAll('.e-treerowcell')[0].setAttribute('aria-expanded', action === 'expand' ? 'true' : 'false');\n            var detailrows = gridRows.filter(function (r) {\n                return r.classList.contains('e-griddetailrowindex' + record.index + 'level' + (record.level + 1));\n            });\n            if (isRemoteData(this) && !isOffline(this)) {\n                this.remoteExpand(action, row, record);\n            }\n            else {\n                if ((!isCountRequired(this) || childRecords.length) || action === 'collapse') {\n                    this.localExpand(action, row, record);\n                }\n                var lastrowIdx = this.getVisibleRecords()[this.getVisibleRecords().length - 1]['index'];\n                var lastRow = this.getRowByIndex(lastrowIdx);\n                if (this.grid.getContentTable().clientHeight <= this.grid.getContent().clientHeight && !isNullOrUndefined(lastRow) && !lastRow.cells[0].classList.contains('e-lastrowcell')) {\n                    this.lastRowBorder(lastRow, true);\n                }\n            }\n            if (isCountRequired(this) && action === 'expand') {\n                var currentData = this.getCurrentViewRecords();\n                var visibleRecords = currentData.filter(function (e) {\n                    return getExpandStatus(_this, e, _this.parentData);\n                });\n                this.dataResults.result = visibleRecords;\n            }\n            if (!isNullOrUndefined(targetEle) && targetEle.closest('.e-treerowcell').classList.contains('e-cellselectionbackground')) {\n                targetEle.closest('.e-treerowcell').classList.remove('e-cellselectionbackground');\n                targetEle.closest('.e-treerowcell').removeAttribute('aria-selected');\n            }\n            if (this.isPixelHeight() && !row.cells[0].classList.contains('e-lastrowcell')) {\n                var totalRows = this.getRows();\n                var rows = this.getContentTable().rows;\n                totalRows = [].slice.call(rows);\n                for (var i = totalRows.length - 1; i >= 0; i--) {\n                    if (!isHidden(totalRows[parseInt(i.toString(), 10)])) {\n                        var table = this.getContentTable();\n                        var sHeight = table.scrollHeight;\n                        var clientHeight = this.getContent().clientHeight;\n                        this.lastRowBorder(totalRows[parseInt(i.toString(), 10)], sHeight <= clientHeight);\n                        break;\n                    }\n                }\n            }\n            this.notify('rowExpandCollapse', { detailrows: detailrows, action: displayAction, record: record, row: row });\n            this.updateAltRow(gridRows);\n        }\n    };\n    TreeGrid.prototype.updateChildOnDemand = function (expandingArgs) {\n        var _this = this;\n        if (expandingArgs.requestType === 'collapse' && isCountRequired(this)) {\n            var flatDataRecords = this.flatData.slice();\n            for (var i = 0; i < flatDataRecords.length; i++) {\n                if (flatDataRecords[parseInt(i.toString(), 10)]['parentUniqueID'] === expandingArgs.data['uniqueID']) {\n                    flatDataRecords.splice(i, 1);\n                    i = i - 1;\n                }\n            }\n            this.dataResults.result = flatDataRecords;\n            return;\n        }\n        var deff = new Deferred();\n        var childDataBind = 'childDataBind';\n        expandingArgs[\"\" + childDataBind] = deff.resolve;\n        var record = expandingArgs.data;\n        this.trigger(events.dataStateChange, expandingArgs);\n        deff.promise.then(function () {\n            if (expandingArgs.childData.length) {\n                if (isCountRequired(_this)) {\n                    _this.flatData = _this.dataResults.result;\n                }\n                if (_this.enableInfiniteScrolling && isCountRequired(_this)) {\n                    _this.flatData = _this.infiniteScrollData;\n                }\n                var currentData = (_this.flatData);\n                var index = 0;\n                for (var i = 0; i < currentData.length; i++) {\n                    if (currentData[parseInt(i.toString(), 10)].taskData === record.taskData) {\n                        index = i;\n                        break;\n                    }\n                }\n                var data_1 = getValue('result', _this.dataSource);\n                var childData = extendArray(expandingArgs.childData);\n                var length_1 = record[_this.childMapping] ? record[_this.childMapping].length > childData.length ?\n                    record[_this.childMapping].length : childData.length : childData.length;\n                for (var i = 0; i < length_1; i++) {\n                    if (record[_this.childMapping]) {\n                        data_1.filter(function (e, i) {\n                            if (e[_this.parentIdMapping] === record[_this.idMapping]) {\n                                data_1.splice(i, 1);\n                            }\n                        });\n                    }\n                    if (childData[parseInt(i.toString(), 10)]) {\n                        childData[parseInt(i.toString(), 10)].level = record.level + 1;\n                        childData[parseInt(i.toString(), 10)].index = Math.ceil(Math.random() * 1000);\n                        childData[parseInt(i.toString(), 10)].parentItem = extend({}, record);\n                        childData[parseInt(i.toString(), 10)].taskData = extend({}, childData[parseInt(i.toString(), 10)]);\n                        delete childData[parseInt(i.toString(), 10)].parentItem.childRecords;\n                        delete childData[parseInt(i.toString(), 10)].taskData.parentItem;\n                        childData[parseInt(i.toString(), 10)].parentUniqueID = record.uniqueID;\n                        childData[parseInt(i.toString(), 10)].uniqueID = getUid(_this.element.id + '_data_');\n                        setValue('uniqueIDCollection.' + childData[parseInt(i.toString(), 10)].uniqueID, childData[parseInt(i.toString(), 10)], _this);\n                        if (!isNullOrUndefined(childData[parseInt(i.toString(), 10)][_this.childMapping]) ||\n                            (childData[parseInt(i.toString(), 10)][_this.hasChildMapping] && isCountRequired(_this))) {\n                            childData[parseInt(i.toString(), 10)].hasChildRecords = true;\n                        }\n                        if (isCountRequired(_this) && record[_this.childMapping] && record[_this.childMapping][parseInt(i.toString(), 10)]) {\n                            currentData.splice(index + 1 + i, 0, childData[parseInt(i.toString(), 10)]);\n                        }\n                        else {\n                            currentData.splice(index + 1 + i, record[_this.childMapping] &&\n                                record[_this.childMapping][parseInt(i.toString(), 10)] ? 1 : 0, childData[parseInt(i.toString(), 10)]);\n                        }\n                    }\n                    else {\n                        currentData.splice(index + 1 + i, 1);\n                    }\n                }\n                currentData[parseInt(index.toString(), 10)][\"\" + _this.childMapping] = childData;\n                currentData[parseInt(index.toString(), 10)].childRecords = childData;\n                currentData[parseInt(index.toString(), 10)].expanded = true;\n                setValue('uniqueIDCollection.' + currentData[parseInt(index.toString(), 10)].uniqueID, currentData[parseInt(index.toString(), 10)], _this);\n                for (var j = 0; j < expandingArgs.childData.length; j++) {\n                    data_1.push(expandingArgs.childData[parseInt(j.toString(), 10)]);\n                }\n            }\n            if (isCountRequired(_this) && !_this.loadChildOnDemand && expandingArgs.requestType === 'expand') {\n                _this.dataResults['expandRecord'] = {};\n                _this.dataResults['expandRecord'] = expandingArgs.data;\n            }\n            _this.isExpandRefresh = true;\n            var scrollHeightBeforeRefresh = _this.getContentTable().parentElement.scrollTop;\n            _this.grid.refresh();\n            if (_this.enableInfiniteScrolling) {\n                _this.getContentTable().parentElement.scrollTop = scrollHeightBeforeRefresh;\n            }\n            _this.trigger(events.expanded, expandingArgs);\n        });\n    };\n    TreeGrid.prototype.remoteExpand = function (action, row, record) {\n        var gridRows = this.getRows();\n        var fetchRemoteChildData = 'fetchRemoteChildData';\n        if (this.rowTemplate) {\n            var rows_1 = this.getContentTable().rows;\n            gridRows = [].slice.call(rows_1);\n        }\n        var args = { data: record, row: row };\n        var rows = [];\n        rows = gridRows.filter(function (r) {\n            return ((r.querySelector('.e-gridrowindex' + record.index + 'level' + (record.level + 1))) || (r.querySelector('.e-gridrowindex' + record.index + 'level0' + '.e-summarycell')));\n        });\n        if (action === 'expand') {\n            this.notify(events.remoteExpand, { record: record, rows: rows, parentRow: row });\n            var args_1 = { row: row, data: record };\n            if (rows.length > 0) {\n                this.trigger(events.expanded, args_1);\n            }\n        }\n        else if (action === 'collapse' && this.enableVirtualization) {\n            this.dataModule[\"\" + fetchRemoteChildData]({ action: action, record: args.data, rows: null, parentRow: args.row });\n        }\n        else {\n            this.collapseRemoteChild({ record: record, rows: rows });\n            this.trigger(events.collapsed, args);\n        }\n    };\n    TreeGrid.prototype.localExpand = function (action, row, record) {\n        var rows;\n        var childRecords = this.grid.currentViewData.filter(function (e) {\n            return e.parentUniqueID === record.uniqueID;\n        });\n        if (this.isPixelHeight() && row.cells[0].classList.contains('e-lastrowcell')) {\n            this.lastRowBorder(row, false);\n        }\n        var movableRows;\n        var freezeRightRows;\n        var gridRows = this.getRows();\n        if (this.rowTemplate) {\n            var rows_2 = this.getContentTable().rows;\n            gridRows = [].slice.call(rows_2);\n        }\n        var displayAction = (action === 'expand') ? 'e-childrow-visible' : 'e-childrow-hidden';\n        var primaryKeyField = this.getPrimaryKeyFieldNames()[0];\n        if (this.enableImmutableMode && !this.allowPaging) {\n            rows = [];\n            for (var i = 0; i < childRecords.length; i++) {\n                var rowIndex = this.grid.getRowIndexByPrimaryKey(childRecords[parseInt(i.toString(), 10)][\"\" + primaryKeyField]);\n                rows.push(this.getRows()[parseInt(rowIndex.toString(), 10)]);\n            }\n        }\n        else {\n            rows = gridRows.filter(function (r) {\n                return r.querySelector('.e-gridrowindex' + record.index + 'level' + (record.level + 1));\n            });\n        }\n        var freeze = (this.grid.getFrozenLeftColumnsCount() > 0 || this.grid.getFrozenRightColumnsCount() > 0) ? true : false;\n        if (this.frozenRows || this.frozenColumns || this.getFrozenColumns() || freeze) {\n            movableRows = this.getRows().filter(function (r) {\n                return r.querySelector('.e-gridrowindex' + record.index + 'level' + (record.level + 1));\n            });\n        }\n        if (freeze) {\n            freezeRightRows = this.getRows().filter(function (r) {\n                return r.querySelector('.e-gridrowindex' + record.index + 'level' + (record.level + 1));\n            });\n        }\n        var gridRowsObject = this.grid.getRowsObject();\n        var currentViewData = this.grid.currentViewData;\n        var currentRecord = currentViewData.filter(function (e) {\n            return e.uniqueID === record.uniqueID;\n        });\n        var currentIndex = currentViewData.indexOf(currentRecord[0]);\n        if (!isNullOrUndefined(gridRowsObject[parseInt(currentIndex.toString(), 10)].visible) &&\n            gridRowsObject[parseInt(currentIndex.toString(), 10)].visible !== false) {\n            gridRowsObject[parseInt(currentIndex.toString(), 10)].visible = true;\n        }\n        var detailrows = gridRows.filter(function (r) {\n            return r.classList.contains('e-griddetailrowindex' + record.index + 'level' + (record.level + 1));\n        });\n        for (var i = 0; i < rows.length; i++) {\n            if (!isNullOrUndefined(rows[parseInt(i.toString(), 10)])) {\n                this.toggleRowVisibility(rows[parseInt(i.toString(), 10)], displayAction);\n            }\n            if (!isNullOrUndefined(rows[parseInt(i.toString(), 10)]) && !this.allowPaging && !(this.enableVirtualization\n                || this.enableInfiniteScrolling || isRemoteData(this) || isCountRequired(this))) {\n                gridRowsObject[rows[parseInt(i.toString(), 10)].rowIndex].visible = displayAction !== 'e-childrow-hidden' ? true : false;\n                var parentRecord = currentViewData.filter(function (e) {\n                    return e.uniqueID === currentRecord[0].parentUniqueID;\n                });\n                if (!isNullOrUndefined(parentRecord[0]) && gridRows[currentViewData.indexOf(parentRecord[0])].getElementsByClassName('e-treegridcollapse').length) {\n                    gridRowsObject[parseInt(currentIndex.toString(), 10)].visible = false;\n                }\n            }\n            if (!isNullOrUndefined(movableRows)) {\n                this.toggleRowVisibility(movableRows[parseInt(i.toString(), 10)], displayAction);\n            }\n            if (!isNullOrUndefined(freezeRightRows)) {\n                this.toggleRowVisibility(freezeRightRows[parseInt(i.toString(), 10)], displayAction);\n            }\n            this.notify('childRowExpand', { row: rows[parseInt(i.toString(), 10)] });\n            if ((!isNullOrUndefined(childRecords[parseInt(i.toString(), 10)].childRecords) && childRecords[parseInt(i.toString(), 10)].childRecords.length > 0) && (action !== 'expand' ||\n                isNullOrUndefined(childRecords[parseInt(i.toString(), 10)].expanded) || childRecords[parseInt(i.toString(), 10)].expanded)) {\n                this.expandCollapse(action, rows[parseInt(i.toString(), 10)], childRecords[parseInt(i.toString(), 10)], true);\n                if (this.frozenColumns <= this.treeColumnIndex && !isNullOrUndefined(movableRows)) {\n                    this.expandCollapse(action, movableRows[parseInt(i.toString(), 10)], childRecords[parseInt(i.toString(), 10)], true);\n                }\n            }\n        }\n        for (var i = 0; i < detailrows.length; i++) {\n            if (!isNullOrUndefined(detailrows[parseInt(i.toString(), 10)]) && !this.allowPaging && !(this.enableVirtualization ||\n                this.enableInfiniteScrolling || isRemoteData(this) || isCountRequired(this))) {\n                gridRowsObject[detailrows[parseInt(i.toString(), 10)].rowIndex].visible = displayAction !== 'e-childrow-hidden' ? true : false;\n                this.toggleRowVisibility(detailrows[parseInt(i.toString(), 10)], displayAction);\n            }\n        }\n        if (!this.allowPaging && !(this.enableVirtualization || this.enableInfiniteScrolling || isRemoteData(this)\n            || isCountRequired(this))) {\n            this.grid.notify('refresh-Expand-and-Collapse', { rows: this.grid.getRowsObject() });\n        }\n    };\n    TreeGrid.prototype.toggleRowVisibility = function (row, displayAction) {\n        if (row) {\n            row.classList.remove('e-childrow-hidden', 'e-childrow-visible');\n            row.classList.add(displayAction);\n        }\n    };\n    TreeGrid.prototype.updateAltRow = function (rows) {\n        if (this.enableAltRow && !this.rowTemplate) {\n            var visibleRowCount = 0;\n            for (var i = 0; rows && i < rows.length; i++) {\n                var gridRow = rows[parseInt(i.toString(), 10)];\n                if (!gridRow.classList.contains('e-childrow-hidden')) {\n                    if (gridRow.classList.contains('e-altrow')) {\n                        removeClass([gridRow], 'e-altrow');\n                    }\n                    if (visibleRowCount % 2 !== 0 && !gridRow.classList.contains('e-summaryrow') && !gridRow.classList.contains('e-detailrow')) {\n                        addClass([gridRow], 'e-altrow');\n                    }\n                    if (!gridRow.classList.contains('e-summaryrow') && !gridRow.classList.contains('e-detailrow')) {\n                        visibleRowCount++;\n                    }\n                }\n            }\n        }\n    };\n    TreeGrid.prototype.treeColumnRowTemplate = function () {\n        var rows = this.getContentTable().rows;\n        rows = [].slice.call(rows);\n        var rowsObject = this.grid.getRowsObject();\n        for (var i = 0; i < rows.length; i++) {\n            var rcell = this.grid.getContentTable().rows[parseInt(i.toString(), 10)]\n                .cells[this.treeColumnIndex];\n            var row = rows[parseInt(i.toString(), 10)];\n            var rowData = rowsObject.length !== 0 ? rowsObject[parseInt(i.toString(), 10)].data : new Object();\n            var arg = { data: rowData, row: row, cell: rcell, column: this.getColumns()[this.treeColumnIndex] };\n            this.renderModule.cellRender(arg);\n        }\n    };\n    TreeGrid.prototype.collapseRemoteChild = function (rowDetails, isChild) {\n        if (!isNullOrUndefined(isChild) && !isChild && this.loadChildOnDemand) {\n            rowDetails.record.expanded = false;\n        }\n        var rows = rowDetails.rows;\n        var row;\n        var childRecord;\n        var movablerows = [];\n        var rightrows = [];\n        var freeze = (this.getFrozenLeftColumnsCount() > 0 || this.getFrozenRightColumnsCount() > 0) ? true : false;\n        if (freeze) {\n            movablerows = this.getRows().filter(function (r) {\n                return r.querySelector('.e-gridrowindex' + rowDetails.record.index + 'level' + (rowDetails.record.level + 1));\n            });\n            rightrows = this.getRows().filter(function (r) {\n                return r.querySelector('.e-gridrowindex' + rowDetails.record.index + 'level' + (rowDetails.record.level + 1));\n            });\n        }\n        for (var i = 0; i < rows.length; i++) {\n            this.toggleRowVisibility(rows[parseInt(i.toString(), 10)], 'e-childrow-hidden');\n            row = rows[parseInt(i.toString(), 10)];\n            var collapsingTd = rows[parseInt(i.toString(), 10)].querySelector('.e-detailrowexpand');\n            if (!isNullOrUndefined(collapsingTd)) {\n                this.grid.detailRowModule.collapse(collapsingTd);\n            }\n            if (freeze) {\n                this.toggleRowVisibility(movablerows[parseInt(i.toString(), 10)], 'e-childrow-hidden');\n                this.toggleRowVisibility(rightrows[parseInt(i.toString(), 10)], 'e-childrow-hidden');\n                if (!rows[parseInt(i.toString(), 10)].querySelector('.e-treecolumn-container .e-treegridexpand')) {\n                    if (movablerows[parseInt(i.toString(), 10)].querySelector('.e-treecolumn-container .e-treegridexpand')) {\n                        row = movablerows[parseInt(i.toString(), 10)];\n                    }\n                    else if (rightrows[parseInt(i.toString(), 10)].querySelector('.e-treecolumn-container .e-treegridexpand')) {\n                        row = rightrows[parseInt(i.toString(), 10)];\n                    }\n                }\n            }\n            if (row.querySelector('.e-treecolumn-container .e-treegridexpand')) {\n                var expandElement = row.querySelector('.e-treecolumn-container .e-treegridexpand');\n                childRecord = this.rowTemplate ? this.grid.getCurrentViewRecords()[rows[parseInt(i.toString(), 10)].rowIndex] :\n                    this.grid.getRowObjectFromUID(rows[parseInt(i.toString(), 10)].getAttribute('data-Uid')).data;\n                if (!isNullOrUndefined(expandElement) && childRecord.expanded) {\n                    removeClass([expandElement], 'e-treegridexpand');\n                    addClass([expandElement], 'e-treegridcollapse');\n                }\n                var cRow = [];\n                var eRows = this.getRows();\n                for (var i_1 = 0; i_1 < eRows.length; i_1++) {\n                    if (eRows[parseInt(i_1.toString(), 10)].querySelector('.e-gridrowindex' + childRecord.index + 'level' + (childRecord.level + 1))) {\n                        cRow.push(eRows[parseInt(i_1.toString(), 10)]);\n                    }\n                }\n                if (cRow.length && childRecord.expanded) {\n                    this.collapseRemoteChild({ record: childRecord, rows: cRow }, false);\n                }\n            }\n        }\n    };\n    /**\n     * Method to sanitize html element\n     *\n     * @param {any} value - Specifies the html value to sanitize\n     * @returns {any} Returns the sanitized html value\n     * @hidden\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    TreeGrid.prototype.sanitize = function (value) {\n        if (this.enableHtmlSanitizer && typeof (value) === 'string') {\n            return SanitizeHtmlHelper.sanitize(value);\n        }\n        return value;\n    };\n    /**\n     * Updates the rows and cells\n     *\n     * @param {Object[]} records - Updates the given records\n     * @param {HTMLTableRowElement[]} rows - Updates the given rows\n     * @param {number} index -  Updates the given cell index\n     * @returns {void}\n     */\n    TreeGrid.prototype.updateRowAndCellElements = function (records, rows, index) {\n        for (var i = 0; i < records.length; i++) {\n            this.renderModule.cellRender({\n                data: records[parseInt(i.toString(), 10)], cell: rows[parseInt(i.toString(), 10)].cells[parseInt(index.toString(), 10)],\n                column: this.grid.getColumns()[this.treeColumnIndex],\n                requestType: 'rowDragAndDrop'\n            });\n            if (this['action'] === 'indenting' || this['action'] === 'outdenting') {\n                this.renderModule.RowModifier({\n                    data: records[parseInt(i.toString(), 10)], row: rows[parseInt(i.toString(), 10)]\n                });\n            }\n        }\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    TreeGrid.prototype.addListener = function () {\n        this.on('updateResults', this.updateResultModel, this);\n        this.grid.on('initial-end', this.afterGridRender, this);\n    };\n    TreeGrid.prototype.updateResultModel = function (returnResult) {\n        this.dataResults = returnResult;\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    TreeGrid.prototype.removeListener = function () {\n        if (this.isDestroyed) {\n            return;\n        }\n        this.off('updateResults', this.updateResultModel);\n        this.grid.off('initial-end', this.afterGridRender);\n    };\n    /**\n     * Filters TreeGrid row by column name with the given options.\n     *\n     * @param  {string} fieldName - Defines the field name of the column.\n     * @param  {string} filterOperator - Defines the operator to filter records.\n     * @param  {string | number | Date | boolean} filterValue - Defines the value used to filter records.\n     * @param  {string} predicate - Defines the relationship between one filter query and another by using AND or OR predicate.\n     * @param  {boolean} matchCase - If match case is set to true, the TreeGrid filters the records with exact match. if false, it filters\n     * case insensitive records (uppercase and lowercase letters are treated the same).\n     * @param  {boolean} ignoreAccent - If ignoreAccent is set to true,\n     * then filter ignores diacritic characters or accents while filtering.\n     * @param  {string} actualFilterValue - Defines the actual filter value for filter column.\n     * @param  {string} actualOperator - Defines the actual filter operator for filter column.\n     * @returns {void}\n     */\n    TreeGrid.prototype.filterByColumn = function (fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator) {\n        this.grid.filterByColumn(fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator);\n    };\n    /**\n     * Clears all the filtered rows of the TreeGrid.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.clearFiltering = function () {\n        this.grid.clearFiltering();\n    };\n    /**\n     * Removes filtered column by field name.\n     *\n     * @param  {string} field - Defines column field name to remove filter.\n     * @param  {boolean} isClearFilterBar -  Specifies whether the filter bar value needs to be cleared.\n     * @returns {void}\n     * @hidden\n     */\n    TreeGrid.prototype.removeFilteredColsByField = function (field, isClearFilterBar) {\n        this.grid.removeFilteredColsByField(field, isClearFilterBar);\n    };\n    /**\n     * Selects a row by given index.\n     *\n     * @param  {number} index - Defines the row index.\n     * @param  {boolean} isToggle - If set to true, then it toggles the selection.\n     * @returns {void}\n     */\n    TreeGrid.prototype.selectRow = function (index, isToggle) {\n        this.grid.selectRow(index, isToggle);\n    };\n    /**\n     * Selects a collection of rows by indexes.\n     *\n     * @param  {number[]} rowIndexes - Specifies the row indexes.\n     * @returns {void}\n     */\n    TreeGrid.prototype.selectRows = function (rowIndexes) {\n        this.grid.selectRows(rowIndexes);\n    };\n    /**\n     * Deselects the current selected rows and cells.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.clearSelection = function () {\n        if (!isNullOrUndefined(this.grid.selectionModule)) {\n            this.grid.selectionModule['actualTarget'] = null;\n        }\n        this.grid.clearSelection();\n    };\n    /**\n     * Copy the selected rows or cells data into clipboard.\n     *\n     * @param {boolean} withHeader - Specifies whether the column header text needs to be copied along with rows or cells.\n     * @returns {void}\n     */\n    TreeGrid.prototype.copy = function (withHeader) {\n        this.clipboardModule.copy(withHeader);\n    };\n    /**\n     * Paste data from clipboard to selected cells.\n     *\n     * @param {boolean} data - Specifies the date for paste.\n     * @param {boolean} rowIndex - Specifies the row index.\n     * @param {boolean} colIndex - Specifies the column index.\n     * @returns {void}\n     */\n    TreeGrid.prototype.paste = function (data, rowIndex, colIndex) {\n        this.clipboardModule.paste(data, rowIndex, colIndex);\n    };\n    /**\n     * Selects a cell by the given index.\n     *\n     * @param  {IIndex} cellIndex - Defines the row and column indexes.\n     * @param  {boolean} isToggle - If set to true, then it toggles the selection.\n     * @returns {void}\n     */\n    TreeGrid.prototype.selectCell = function (cellIndex, isToggle) {\n        this.grid.selectCell(cellIndex, isToggle);\n    };\n    /**\n     * Gets the collection of selected rows.\n     *\n     * @returns {Element[]} - Returns selected row elements collection\n     */\n    TreeGrid.prototype.getSelectedRows = function () {\n        return this.grid.getSelectedRows();\n    };\n    /**\n     * Gets a movable table cell by row and column index.\n     *\n     * @param  {number} rowIndex - Specifies the row index.\n     * @param  {number} columnIndex - Specifies the column index.\n     * @returns {Element} - Returns movable cell element from the indexes passed\n     *\n\n     */\n    TreeGrid.prototype.getMovableCellFromIndex = function (rowIndex, columnIndex) {\n        return this.grid.getCellFromIndex(rowIndex, columnIndex);\n    };\n    /**\n     * Gets all the TreeGrid's movable table data rows.\n     *\n     * @returns {Element[]} - Returns element collection of movable rows\n     *\n\n     */\n    TreeGrid.prototype.getMovableDataRows = function () {\n        return this.grid.getDataRows();\n    };\n    /**\n     * Gets a movable tables row by index.\n     *\n     * @param  {number} index - Specifies the row index.\n     * @returns {Element} - Returns movable row based on index passed\n     *\n\n     */\n    TreeGrid.prototype.getMovableRowByIndex = function (index) {\n        return this.grid.getRowByIndex(index);\n    };\n    /**\n     * Gets the TreeGrid's movable content rows from frozen treegrid.\n     *\n     * @returns {Element[]}: Returns movable row element\n\n     */\n    TreeGrid.prototype.getMovableRows = function () {\n        return this.grid.getRows();\n    };\n    /**\n     * Gets a frozen right tables row element by index.\n     *\n     * @param  {number} index - Specifies the row index.\n     * @returns {Element} returns the element\n     *\n\n     */\n    TreeGrid.prototype.getFrozenRightRowByIndex = function (index) {\n        return this.grid.getRowByIndex(index);\n    };\n    /**\n     * Gets the Tree Grid's frozen right content rows from frozen Tree Grid.\n     *\n     * @returns {Element[]} returns the element\n     *\n\n     */\n    TreeGrid.prototype.getFrozenRightRows = function () {\n        return this.grid.getRows();\n    };\n    /**\n     * Gets all the Tree Grid's frozen right table data rows.\n     *\n     * @returns {Element[]} Returns the Element\n     *\n\n     */\n    TreeGrid.prototype.getFrozenRightDataRows = function () {\n        return this.grid.getDataRows();\n    };\n    /**\n     * Gets a frozen right table cell by row and column index.\n     *\n     * @param  {number} rowIndex - Specifies the row index.\n     * @param  {number} columnIndex - Specifies the column index.\n     * @returns {Element} Returns the Element\n     *\n\n     */\n    TreeGrid.prototype.getFrozenRightCellFromIndex = function (rowIndex, columnIndex) {\n        return this.grid.getCellFromIndex(rowIndex, columnIndex);\n    };\n    /**\n     * Gets a frozen left column header by column index.\n     *\n     * @param  {number} index - Specifies the column index.\n     * @returns {Element} Returns the Element\n     *\n\n     */\n    TreeGrid.prototype.getFrozenLeftColumnHeaderByIndex = function (index) {\n        return this.grid.getColumnHeaderByIndex(index);\n    };\n    /**\n     * Gets a frozen right column header by column index.\n     *\n     * @param  {number} index - Specifies the column index.\n     * @returns {Element} Returns the Element\n     *\n\n     */\n    TreeGrid.prototype.getFrozenRightColumnHeaderByIndex = function (index) {\n        return this.grid.getColumnHeaderByIndex(index);\n    };\n    /**\n     * Gets a movable column header by column index.\n     *\n     * @param  {number} index - Specifies the column index.\n     * @returns {Element} Returns the Element\n     *\n\n     */\n    TreeGrid.prototype.getMovableColumnHeaderByIndex = function (index) {\n        return this.grid.getColumnHeaderByIndex(index);\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns the movable column count\n     */\n    TreeGrid.prototype.getMovableColumnsCount = function () {\n        return this.grid.getMovableColumnsCount();\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns the Frozen Left column\n     */\n    TreeGrid.prototype.getFrozenLeftColumnsCount = function () {\n        return this.grid.getFrozenLeftColumnsCount();\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns the Frozen Right column count\n     */\n    TreeGrid.prototype.getFrozenRightColumnsCount = function () {\n        return this.grid.getFrozenRightColumnsCount();\n    };\n    /**\n     * @hidden\n     * @returns {Column[]} Returns the column\n     */\n    TreeGrid.prototype.getFrozenLeftColumns = function () {\n        this.updateColumnModel(this.grid.getFrozenLeftColumns());\n        return this.columnModel;\n    };\n    /**\n     * @hidden\n     * @returns {Column[]} Returns the column\n     */\n    TreeGrid.prototype.getFrozenRightColumns = function () {\n        this.updateColumnModel(this.grid.getFrozenRightColumns());\n        return this.columnModel;\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns the visible movable count\n     */\n    TreeGrid.prototype.getVisibleMovableCount = function () {\n        return this.grid.getVisibleMovableCount();\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns the visible Frozen Right count\n     */\n    TreeGrid.prototype.getVisibleFrozenRightCount = function () {\n        return this.grid.getVisibleFrozenRightCount();\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns the visible Frozen left count\n     */\n    TreeGrid.prototype.getVisibleFrozenLeftCount = function () {\n        return this.grid.getVisibleFrozenLeftCount();\n    };\n    /**\n     * @hidden\n     * @returns {Column[]} Returns the column\n     */\n    TreeGrid.prototype.getMovableColumns = function () {\n        this.updateColumnModel(this.grid.getMovableColumns());\n        return this.columnModel;\n    };\n    /**\n     * Gets the number of frozen column in tree grid\n     *\n     * @hidden\n     * @returns {number} - Returns frozen column count\n     */\n    TreeGrid.prototype.getFrozenColumns = function () {\n        return this.getFrozenCount(!isNullOrUndefined(this.columns) && this.columns, 0) + this.frozenColumns;\n    };\n    TreeGrid.prototype.getFrozenCount = function (cols, cnt) {\n        for (var j = 0, len = cols.length; j < len; j++) {\n            if (cols[parseInt(j.toString(), 10)].columns) {\n                cnt = this.getFrozenCount(cols[parseInt(j.toString(), 10)].columns, cnt);\n            }\n            else {\n                if (cols[parseInt(j.toString(), 10)].isFrozen) {\n                    cnt++;\n                }\n            }\n        }\n        return cnt;\n    };\n    /**\n     * Gets the collection of selected row indexes.\n     *\n     * @returns {number[]} - Returns selected rows index collection\n     */\n    TreeGrid.prototype.getSelectedRowIndexes = function () {\n        return this.grid.getSelectedRowIndexes();\n    };\n    /**\n     * Gets the collection of selected row and cell indexes.\n     *\n     * @returns {ISelectedCell[]} - Returns selected cell's index details\n     */\n    TreeGrid.prototype.getSelectedRowCellIndexes = function () {\n        return this.grid.getSelectedRowCellIndexes();\n    };\n    /**\n     * Gets the collection of selected records.\n     *\n     * @isGenericType true\n     * @returns {Object[]} - Returns selected records collection\n     */\n    TreeGrid.prototype.getSelectedRecords = function () {\n        return this.grid.getSelectedRecords();\n    };\n    /**\n     * Gets the data module.\n     *\n     * @returns {{baseModule: Data, treeModule: DataManipulation}}: Returns grid and treegrid data module\n     */\n    TreeGrid.prototype.getDataModule = function () {\n        return { baseModule: this.grid.getDataModule(), treeModule: this.dataModule };\n    };\n    /**\n     * Reorder the rows based on given indexes and position\n     *\n     * @param {number[]} fromIndexes - Source indexes of rows\n     * @param {number} toIndex - Destination index of row\n     * @param {string} position - Defines drop position as above or below or child\n     * @returns {void}\n     */\n    TreeGrid.prototype.reorderRows = function (fromIndexes, toIndex, position) {\n        this.rowDragAndDropModule.reorderRows(fromIndexes, toIndex, position);\n    };\n    /**\n     * Indents the record to one level of hierarchy. Moves the selected row as the last child of its previous row.\n     *\n     * @param {Object} record – specifies the record to do indented\n     * @returns {void}\n     */\n    TreeGrid.prototype.indent = function (record) {\n        if (!isNullOrUndefined(this.rowDragAndDropModule)) {\n            record = record;\n            this.rowDragAndDropModule[this.indentOutdentAction](record, 'indent');\n        }\n    };\n    /**\n     * Outdent the record to one level of hierarchy. Moves the selected row as sibling to its parent row.\n     *\n     * @param {Object} record – specifies the record to do outdented\n     * @returns {void}\n     */\n    TreeGrid.prototype.outdent = function (record) {\n        if (!isNullOrUndefined(this.rowDragAndDropModule)) {\n            record = record;\n            this.rowDragAndDropModule[this.indentOutdentAction](record, 'outdent');\n        }\n    };\n    var TreeGrid_1;\n    __decorate([\n        Property(0)\n    ], TreeGrid.prototype, \"frozenRows\", void 0);\n    __decorate([\n        Property(0)\n    ], TreeGrid.prototype, \"frozenColumns\", void 0);\n    __decorate([\n        Property('Ellipsis')\n    ], TreeGrid.prototype, \"clipMode\", void 0);\n    __decorate([\n        Property([])\n    ], TreeGrid.prototype, \"columns\", void 0);\n    __decorate([\n        Property(null)\n    ], TreeGrid.prototype, \"childMapping\", void 0);\n    __decorate([\n        Property(null)\n    ], TreeGrid.prototype, \"hasChildMapping\", void 0);\n    __decorate([\n        Property(0)\n    ], TreeGrid.prototype, \"treeColumnIndex\", void 0);\n    __decorate([\n        Property(null)\n    ], TreeGrid.prototype, \"idMapping\", void 0);\n    __decorate([\n        Property(null)\n    ], TreeGrid.prototype, \"parentIdMapping\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"enableCollapseAll\", void 0);\n    __decorate([\n        Property(null)\n    ], TreeGrid.prototype, \"expandStateMapping\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowRowDragAndDrop\", void 0);\n    __decorate([\n        Property([])\n    ], TreeGrid.prototype, \"dataSource\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"query\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"cloneQuery\", void 0);\n    __decorate([\n        Property('AllPages')\n    ], TreeGrid.prototype, \"printMode\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowPaging\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeGrid.prototype, \"loadChildOnDemand\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowTextWrap\", void 0);\n    __decorate([\n        Complex({}, TextWrapSettings)\n    ], TreeGrid.prototype, \"textWrapSettings\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowReordering\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowResizing\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"autoCheckHierarchy\", void 0);\n    __decorate([\n        Complex({}, PageSettings)\n    ], TreeGrid.prototype, \"pageSettings\", void 0);\n    __decorate([\n        Complex({}, RowDropSettings)\n    ], TreeGrid.prototype, \"rowDropSettings\", void 0);\n    __decorate([\n        Property('USD')\n    ], TreeGrid.prototype, \"currencyCode\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"pagerTemplate\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"showColumnMenu\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"showColumnChooser\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowSorting\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeGrid.prototype, \"allowMultiSorting\", void 0);\n    __decorate([\n        Complex({}, SortSettings)\n    ], TreeGrid.prototype, \"sortSettings\", void 0);\n    __decorate([\n        Collection([], AggregateRow)\n    ], TreeGrid.prototype, \"aggregates\", void 0);\n    __decorate([\n        Complex({}, EditSettings)\n    ], TreeGrid.prototype, \"editSettings\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowFiltering\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"detailTemplate\", void 0);\n    __decorate([\n        Complex({}, FilterSettings)\n    ], TreeGrid.prototype, \"filterSettings\", void 0);\n    __decorate([\n        Complex({}, SearchSettings)\n    ], TreeGrid.prototype, \"searchSettings\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"toolbar\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"toolbarTemplate\", void 0);\n    __decorate([\n        Property('Default')\n    ], TreeGrid.prototype, \"gridLines\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"contextMenuItems\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"columnMenuItems\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"rowTemplate\", void 0);\n    __decorate([\n        Property('Parent')\n    ], TreeGrid.prototype, \"copyHierarchyMode\", void 0);\n    __decorate([\n        Property(null)\n    ], TreeGrid.prototype, \"rowHeight\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeGrid.prototype, \"enableAltRow\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeGrid.prototype, \"allowKeyboard\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"enableHover\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"enableAutoFill\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"enableAdaptiveUI\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"enableImmutableMode\", void 0);\n    __decorate([\n        Property('auto')\n    ], TreeGrid.prototype, \"height\", void 0);\n    __decorate([\n        Property('auto')\n    ], TreeGrid.prototype, \"width\", void 0);\n    __decorate([\n        Complex({}, LoadingIndicator)\n    ], TreeGrid.prototype, \"loadingIndicator\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeGrid.prototype, \"enableVirtualMaskRow\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"enableVirtualization\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"enableColumnVirtualization\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"enableHtmlSanitizer\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"enableInfiniteScrolling\", void 0);\n    __decorate([\n        Complex({}, InfiniteScrollSettings)\n    ], TreeGrid.prototype, \"infiniteScrollSettings\", void 0);\n    __decorate([\n        Property('All')\n    ], TreeGrid.prototype, \"columnQueryMode\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"created\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"load\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"expanding\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"expanded\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"collapsing\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"collapsed\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"cellSave\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"cellSaved\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"actionBegin\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"actionComplete\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beginEdit\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"batchAdd\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"batchDelete\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"batchCancel\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforeBatchAdd\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforeBatchDelete\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforeBatchSave\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"cellEdit\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"actionFailure\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"dataBound\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"dataSourceChanged\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"dataStateChange\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"recordDoubleClick\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowDataBound\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"detailDataBound\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"queryCellInfo\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeGrid.prototype, \"allowSelection\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowSelecting\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowSelected\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowDeselecting\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowDeselected\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"headerCellInfo\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"cellSelecting\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"columnMenuOpen\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"columnMenuClick\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"cellSelected\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"cellDeselecting\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"cellDeselected\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"resizeStart\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"resizing\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"resizeStop\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"columnDragStart\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"columnDrag\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"columnDrop\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"checkboxChange\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"printComplete\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforePrint\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"toolbarClick\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforeDataBound\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"contextMenuOpen\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"contextMenuClick\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforeCopy\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforePaste\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowDrag\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowDragStart\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowDragStartHelper\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowDrop\", void 0);\n    __decorate([\n        Property(-1)\n    ], TreeGrid.prototype, \"selectedRowIndex\", void 0);\n    __decorate([\n        Complex({}, SelectionSettings)\n    ], TreeGrid.prototype, \"selectionSettings\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowExcelExport\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowPdfExport\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"pdfQueryCellInfo\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"pdfHeaderQueryCellInfo\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"excelQueryCellInfo\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"excelHeaderQueryCellInfo\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforeExcelExport\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"excelExportComplete\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforePdfExport\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"pdfExportComplete\", void 0);\n    TreeGrid = TreeGrid_1 = __decorate([\n        NotifyPropertyChanges\n    ], TreeGrid);\n    return TreeGrid;\n}(Component));\nexport { TreeGrid };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}