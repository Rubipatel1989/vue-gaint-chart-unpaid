{"ast":null,"code":"export default {\n  name: 'ChartText',\n  inject: ['root'],\n  props: ['task'],\n  data() {\n    return {};\n  },\n  computed: {\n    /**\n     * Get width\n     *\n     * @returns {number}\n     */\n    getWidth() {\n      const textStyle = this.root.style['chart-row-text'];\n      this.root.state.ctx.font = `${textStyle['font-weight']} ${textStyle['font-size']} ${textStyle['font-family']}`;\n      const textWidth = this.root.state.ctx.measureText(this.task.label).width;\n      return textWidth + this.root.state.options.chart.text.xPadding * 2;\n    },\n    /**\n     * Get height\n     *\n     * @returns {number}\n     */\n    getHeight() {\n      return this.task.height + this.root.state.options.chart.grid.horizontal.gap * 2;\n    },\n    /**\n     * Get content style\n     *\n     * @returns {object}\n     */\n    contentStyle() {\n      return {\n        height: '100%',\n        'line-height': this.getHeight + 'px'\n      };\n    },\n    /**\n     * Should we render text as html?\n     *\n     * @returns {boolean}\n     */\n    html() {\n      const cols = this.root.state.options.taskList.columns;\n      for (let i = 0, len = cols.length; i < len; i++) {\n        const col = cols[i];\n        if (col.value === 'label' && typeof col.html !== 'undefined' && col.html) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n};","map":{"version":3,"names":["name","inject","props","data","computed","getWidth","textStyle","root","style","state","ctx","font","textWidth","measureText","task","label","width","options","chart","text","xPadding","getHeight","height","grid","horizontal","gap","contentStyle","html","cols","taskList","columns","i","len","length","col","value"],"sources":["/var/www/vue/vue-gantt-chart/node_modules/gantt-elastic/src/components/Chart/Text.vue"],"sourcesContent":["<!--\n/**\n * @fileoverview Text component\n * @license MIT\n * @author Rafal Pospiech <neuronet.io@gmail.com>\n * @package GanttElastic\n */\n-->\n<template>\n  <svg\n    class=\"gantt-elastic__chart-row-text-wrapper\"\n    :style=\"{ ...root.style['chart-row-text-wrapper'] }\"\n    :x=\"task.x + task.width + root.state.options.chart.text.offset\"\n    :y=\"task.y - root.state.options.chart.grid.horizontal.gap\"\n    :width=\"getWidth\"\n    :height=\"getHeight\"\n  >\n    <foreignObject x=\"0\" y=\"0\" width=\"100%\" :height=\"getHeight\">\n      <div\n        xmlns=\"http://www.w3.org/1999/xhtml\"\n        class=\"gantt-elastic__chart-row-text\"\n        :style=\"{ ...root.style['chart-row-text'] }\"\n      >\n        <div\n          class=\"gantt-elastic__chart-row-text-content gantt-elastic__chart-row-text-content--text\"\n          :style=\"{\n            ...root.style['chart-row-text-content'],\n            ...root.style['chart-row-text-content--text'],\n            ...contentStyle\n          }\"\n          v-if=\"!html\"\n        >\n          <div>{{ task.label }}</div>\n        </div>\n        <div\n          class=\"gantt-elastic__chart-row-text-content gantt-elastic__chart-row-text-content--html\"\n          :style=\"{\n            ...root.style['chart-row-text-content'],\n            ...root.style['chart-row-text-content--html'],\n            ...contentStyle\n          }\"\n          v-if=\"html\"\n          v-html=\"task.label\"\n        ></div>\n      </div>\n    </foreignObject>\n  </svg>\n</template>\n\n<script>\nexport default {\n  name: 'ChartText',\n  inject: ['root'],\n  props: ['task'],\n  data() {\n    return {};\n  },\n  computed: {\n    /**\n     * Get width\n     *\n     * @returns {number}\n     */\n    getWidth() {\n      const textStyle = this.root.style['chart-row-text'];\n      this.root.state.ctx.font = `${textStyle['font-weight']} ${textStyle['font-size']} ${textStyle['font-family']}`;\n      const textWidth = this.root.state.ctx.measureText(this.task.label).width;\n      return textWidth + this.root.state.options.chart.text.xPadding * 2;\n    },\n\n    /**\n     * Get height\n     *\n     * @returns {number}\n     */\n    getHeight() {\n      return this.task.height + this.root.state.options.chart.grid.horizontal.gap * 2;\n    },\n\n    /**\n     * Get content style\n     *\n     * @returns {object}\n     */\n    contentStyle() {\n      return { height: '100%', 'line-height': this.getHeight + 'px' };\n    },\n\n    /**\n     * Should we render text as html?\n     *\n     * @returns {boolean}\n     */\n    html() {\n      const cols = this.root.state.options.taskList.columns;\n      for (let i = 0, len = cols.length; i < len; i++) {\n        const col = cols[i];\n        if (col.value === 'label' && typeof col.html !== 'undefined' && col.html) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n};\n</script>\n"],"mappings":"AAkDA,eAAe;EACbA,IAAI,EAAE,WAAW;EACjBC,MAAM,EAAE,CAAC,MAAM,CAAC;EAChBC,KAAK,EAAE,CAAC,MAAM,CAAC;EACfC,IAAIA,CAAA,EAAG;IACL,OAAO,CAAC,CAAC;EACX,CAAC;EACDC,QAAQ,EAAE;IACR;;;;;IAKAC,QAAQA,CAAA,EAAG;MACT,MAAMC,SAAQ,GAAI,IAAI,CAACC,IAAI,CAACC,KAAK,CAAC,gBAAgB,CAAC;MACnD,IAAI,CAACD,IAAI,CAACE,KAAK,CAACC,GAAG,CAACC,IAAG,GAAI,GAAGL,SAAS,CAAC,aAAa,CAAC,IAAIA,SAAS,CAAC,WAAW,CAAC,IAAIA,SAAS,CAAC,aAAa,CAAC,EAAE;MAC9G,MAAMM,SAAQ,GAAI,IAAI,CAACL,IAAI,CAACE,KAAK,CAACC,GAAG,CAACG,WAAW,CAAC,IAAI,CAACC,IAAI,CAACC,KAAK,CAAC,CAACC,KAAK;MACxE,OAAOJ,SAAQ,GAAI,IAAI,CAACL,IAAI,CAACE,KAAK,CAACQ,OAAO,CAACC,KAAK,CAACC,IAAI,CAACC,QAAO,GAAI,CAAC;IACpE,CAAC;IAED;;;;;IAKAC,SAASA,CAAA,EAAG;MACV,OAAO,IAAI,CAACP,IAAI,CAACQ,MAAK,GAAI,IAAI,CAACf,IAAI,CAACE,KAAK,CAACQ,OAAO,CAACC,KAAK,CAACK,IAAI,CAACC,UAAU,CAACC,GAAE,GAAI,CAAC;IACjF,CAAC;IAED;;;;;IAKAC,YAAYA,CAAA,EAAG;MACb,OAAO;QAAEJ,MAAM,EAAE,MAAM;QAAE,aAAa,EAAE,IAAI,CAACD,SAAQ,GAAI;MAAK,CAAC;IACjE,CAAC;IAED;;;;;IAKAM,IAAIA,CAAA,EAAG;MACL,MAAMC,IAAG,GAAI,IAAI,CAACrB,IAAI,CAACE,KAAK,CAACQ,OAAO,CAACY,QAAQ,CAACC,OAAO;MACrD,KAAK,IAAIC,CAAA,GAAI,CAAC,EAAEC,GAAE,GAAIJ,IAAI,CAACK,MAAM,EAAEF,CAAA,GAAIC,GAAG,EAAED,CAAC,EAAE,EAAE;QAC/C,MAAMG,GAAE,GAAIN,IAAI,CAACG,CAAC,CAAC;QACnB,IAAIG,GAAG,CAACC,KAAI,KAAM,OAAM,IAAK,OAAOD,GAAG,CAACP,IAAG,KAAM,WAAU,IAAKO,GAAG,CAACP,IAAI,EAAE;UACxE,OAAO,IAAI;QACb;MACF;MACA,OAAO,KAAK;IACd;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}