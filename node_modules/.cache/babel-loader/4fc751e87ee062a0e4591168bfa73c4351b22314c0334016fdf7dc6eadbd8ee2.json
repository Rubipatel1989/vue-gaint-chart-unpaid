{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { PdfTreeGridColumnCollection, PdfTreeGridHeaderCollection, PdfTreeGridRowCollection } from './pdf-base/index';\nimport { PdfTreeGridStyle, PdfBorders, PdfTreeGridLayouter } from './pdf-base/index';\nimport { PdfLayoutElement, RectangleF, PdfLayoutFormat, PointF, SizeF } from '@syncfusion/ej2-pdf-export';\n/**\n * PdfTreeGrid Class for EJ2-PDF\n */\nvar PdfTreeGrid = /** @class */function (_super) {\n  __extends(PdfTreeGrid, _super);\n  function PdfTreeGrid() {\n    var _this = _super.call(this) || this;\n    _this.treeGridSize = new SizeF(0, 0);\n    _this.treeColumnIndex = 0;\n    _this.allowRowBreakAcrossPages = true;\n    _this.enableHeader = true;\n    _this.isFitToWidth = false;\n    _this.columns = new PdfTreeGridColumnCollection(_this);\n    _this.rows = new PdfTreeGridRowCollection(_this);\n    _this.headers = new PdfTreeGridHeaderCollection(_this);\n    _this.style = new PdfTreeGridStyle();\n    _this.rowHeight = 0;\n    return _this;\n  }\n  Object.defineProperty(PdfTreeGrid.prototype, \"size\", {\n    //Properties\n    /**\n     * Gets a value indicating whether the `start cell layout event` should be raised.\n     *\n     * @returns {boolean} .\n     * @private\n     */\n    // public get raiseBeginCellDraw(): boolean {\n    //     // eslint-disable-next-line\n    //     return (typeof this.beginCellDraw !== 'undefined' && typeof this.beginCellDraw !== null);\n    // }\n    /**\n     * Gets a value indicating whether the `end cell layout event` should be raised.\n     *\n     * @returns {boolean} .\n     * @private\n     */\n    // public get raiseEndCellDraw(): boolean {\n    //     // eslint-disable-next-line\n    //     return (typeof this.endCellDraw !== 'undefined' && typeof this.endCellDraw !== null);\n    // }\n    get: function () {\n      if (this.treeGridSize.width === 0 && this.treeGridSize.height === 0) {\n        this.treeGridSize = this.calculateTreeGridSize();\n      }\n      return this.treeGridSize;\n    },\n    set: function (value) {\n      this.treeGridSize = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * `Draws` the element on the page with the specified page, 'RectangleF' class and layout format\n   *\n   * @private\n   */\n  /* eslint-disable-next-line */\n  PdfTreeGrid.prototype.draw = function (arg1, arg2, arg3, arg4) {\n    if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && typeof arg3 === 'undefined') {\n      return this.drawHelper(arg1, arg2.x, arg2.y);\n    } else if (typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'undefined') {\n      return this.drawHelper(arg1, arg2, arg3, null);\n    } else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'undefined') {\n      return this.drawHelper(arg1, arg2, null);\n    } else if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && arg3 instanceof PdfLayoutFormat) {\n      return this.drawHelper(arg1, arg2.x, arg2.y, arg3);\n    } else if (typeof arg2 === 'number' && typeof arg3 === 'number' && (arg4 instanceof PdfLayoutFormat || arg4 === null)) {\n      var width = arg1.graphics.clientSize.width - arg2;\n      var layoutRectangle = new RectangleF(arg2, arg3, width, 0);\n      return this.drawHelper(arg1, layoutRectangle, arg4);\n    } else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'boolean') {\n      return this.drawHelper(arg1, arg2, null);\n    } else {\n      return this.drawHelper(arg1, arg2, arg3);\n    }\n  };\n  PdfTreeGrid.prototype.measureColumnsWidth = function (bounds) {\n    if (typeof bounds !== 'undefined') {\n      var widths = this.columns.getDefaultWidths(bounds.width - bounds.x);\n      for (var i = 0; i < this.columns.count; i++) {\n        if (this.columns.getColumn(i).width < 0) {\n          this.columns.getColumn(i).width = widths[i];\n        }\n      }\n    } else {\n      var widths = [];\n      var cellWidth = 0;\n      var totalWidth = 0;\n      var rowLevel = 0;\n      // if(this.headers.count > 0){\n      //     let colCount: number = this.headers.getHeader(0).cells.count;\n      //     for(let i: number = 0; i < colCount; i++){\n      //         let rowCount: number = this.headers.count;\n      //         for(let j: number = 0; j < rowCount; j++){\n      //             let tempWidth: number = this.headers.getHeader(j).cells.getCell(i).width;\n      //             let rowWidth: number = this.initialWidth > 0 ? Math.min(this.initialWidth, tempWidth) :\n      //                 tempWidth;\n      //             cellWidth = Math.max(cellWidth, rowWidth);\n      //         }\n      //         widths.push(cellWidth);\n      //     }\n      // }\n      var colCount = this.columns.count;\n      for (var i = 0; i < colCount; i++) {\n        var rowCount = this.rows.count;\n        for (var j = 0; j < rowCount; j++) {\n          var tempWidth = this.rows.getRow(j).cells.getCell(i).width;\n          var rowWidth = this.initialWidth > 0 ? Math.min(this.initialWidth, tempWidth) : tempWidth;\n          cellWidth = Math.max(cellWidth, rowWidth);\n          cellWidth = Math.max(this.columns.getColumn(i).width, cellWidth);\n          if (this.columns.getColumn(i).isTreeColumn) {\n            rowLevel = Math.max(rowLevel, this.rows.getRow(j).level);\n          }\n        }\n        if (this.columns.getColumn(i).isTreeColumn) {\n          widths.push(cellWidth + rowLevel * 10);\n        } else {\n          widths.push(cellWidth);\n        }\n        // eslint-disable-next-line\n        totalWidth += cellWidth;\n        cellWidth = 0;\n      }\n      for (var i = 0; i < this.columns.count; i++) {\n        if (this.columns.getColumn(i).width < 0) {\n          this.columns.getColumn(i).width = widths[i];\n        }\n      }\n    }\n  };\n  PdfTreeGrid.prototype.calculateTreeGridSize = function () {\n    var height = 0;\n    var width = this.columns.width;\n    for (var i = 0; i < this.headers.count; i++) {\n      var row = this.headers.getHeader(i);\n      height += row.height;\n    }\n    for (var i = 0; i < this.rows.count; i++) {\n      var row = this.rows.getRow(i);\n      height += row.height;\n    }\n    return new SizeF(width, height);\n  };\n  PdfTreeGrid.prototype.drawGrid = function (page, x, y, format) {\n    this.initialWidth = page.graphics.clientSize.width;\n    var layout = new RectangleF(0, 0, page.getClientSize().height, 0);\n    return this.draw(page, layout, format);\n  };\n  PdfTreeGrid.prototype.layout = function (param) {\n    if (this.rows.count !== 0) {\n      var style = this.rows.getRow(0).cells.getCell(0).style;\n      if (style.borders.left.width !== 1) {\n        var x = style.borders.left.width / 2;\n        var y = style.borders.top.width / 2;\n        if (param.bounds.x === PdfBorders.default.right.width / 2 && param.bounds.y === PdfBorders.default.right.width / 2) {\n          var newBound = new RectangleF(new PointF(x, y), new SizeF(this.size.width, this.size.height));\n          param.bounds = newBound;\n        }\n      }\n    }\n    //  this.setSpan();\n    this.layouter = new PdfTreeGridLayouter(this);\n    var result = this.layouter.layoutInternal(param);\n    return result;\n  };\n  return PdfTreeGrid;\n}(PdfLayoutElement);\nexport { PdfTreeGrid };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","PdfTreeGridColumnCollection","PdfTreeGridHeaderCollection","PdfTreeGridRowCollection","PdfTreeGridStyle","PdfBorders","PdfTreeGridLayouter","PdfLayoutElement","RectangleF","PdfLayoutFormat","PointF","SizeF","PdfTreeGrid","_super","_this","call","treeGridSize","treeColumnIndex","allowRowBreakAcrossPages","enableHeader","isFitToWidth","columns","rows","headers","style","rowHeight","defineProperty","get","width","height","calculateTreeGridSize","set","value","enumerable","configurable","draw","arg1","arg2","arg3","arg4","drawHelper","x","y","graphics","clientSize","layoutRectangle","measureColumnsWidth","bounds","widths","getDefaultWidths","i","count","getColumn","cellWidth","totalWidth","rowLevel","colCount","rowCount","j","tempWidth","getRow","cells","getCell","rowWidth","initialWidth","Math","min","max","isTreeColumn","level","push","row","getHeader","drawGrid","page","format","layout","getClientSize","param","borders","left","top","default","right","newBound","size","layouter","result","layoutInternal"],"sources":["/var/www/vue/vue-gantt-chart/node_modules/@syncfusion/ej2-gantt/src/gantt/export/pdf-treegrid.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { PdfTreeGridColumnCollection, PdfTreeGridHeaderCollection, PdfTreeGridRowCollection } from './pdf-base/index';\nimport { PdfTreeGridStyle, PdfBorders, PdfTreeGridLayouter } from './pdf-base/index';\nimport { PdfLayoutElement, RectangleF, PdfLayoutFormat, PointF, SizeF } from '@syncfusion/ej2-pdf-export';\n/**\n * PdfTreeGrid Class for EJ2-PDF\n */\nvar PdfTreeGrid = /** @class */ (function (_super) {\n    __extends(PdfTreeGrid, _super);\n    function PdfTreeGrid() {\n        var _this = _super.call(this) || this;\n        _this.treeGridSize = new SizeF(0, 0);\n        _this.treeColumnIndex = 0;\n        _this.allowRowBreakAcrossPages = true;\n        _this.enableHeader = true;\n        _this.isFitToWidth = false;\n        _this.columns = new PdfTreeGridColumnCollection(_this);\n        _this.rows = new PdfTreeGridRowCollection(_this);\n        _this.headers = new PdfTreeGridHeaderCollection(_this);\n        _this.style = new PdfTreeGridStyle();\n        _this.rowHeight = 0;\n        return _this;\n    }\n    Object.defineProperty(PdfTreeGrid.prototype, \"size\", {\n        //Properties\n        /**\n         * Gets a value indicating whether the `start cell layout event` should be raised.\n         *\n         * @returns {boolean} .\n         * @private\n         */\n        // public get raiseBeginCellDraw(): boolean {\n        //     // eslint-disable-next-line\n        //     return (typeof this.beginCellDraw !== 'undefined' && typeof this.beginCellDraw !== null);\n        // }\n        /**\n         * Gets a value indicating whether the `end cell layout event` should be raised.\n         *\n         * @returns {boolean} .\n         * @private\n         */\n        // public get raiseEndCellDraw(): boolean {\n        //     // eslint-disable-next-line\n        //     return (typeof this.endCellDraw !== 'undefined' && typeof this.endCellDraw !== null);\n        // }\n        get: function () {\n            if ((this.treeGridSize.width === 0 && this.treeGridSize.height === 0)) {\n                this.treeGridSize = this.calculateTreeGridSize();\n            }\n            return this.treeGridSize;\n        },\n        set: function (value) {\n            this.treeGridSize = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * `Draws` the element on the page with the specified page, 'RectangleF' class and layout format\n     *\n     * @private\n     */\n    /* eslint-disable-next-line */\n    PdfTreeGrid.prototype.draw = function (arg1, arg2, arg3, arg4) {\n        if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && typeof arg3 === 'undefined') {\n            return this.drawHelper(arg1, arg2.x, arg2.y);\n        }\n        else if (typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'undefined') {\n            return this.drawHelper(arg1, arg2, arg3, null);\n        }\n        else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'undefined') {\n            return this.drawHelper(arg1, arg2, null);\n        }\n        else if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && arg3 instanceof PdfLayoutFormat) {\n            return this.drawHelper(arg1, arg2.x, arg2.y, arg3);\n        }\n        else if (typeof arg2 === 'number' && typeof arg3 === 'number' && (arg4 instanceof PdfLayoutFormat || arg4 === null)) {\n            var width = (arg1.graphics.clientSize.width - arg2);\n            var layoutRectangle = new RectangleF(arg2, arg3, width, 0);\n            return this.drawHelper(arg1, layoutRectangle, arg4);\n        }\n        else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'boolean') {\n            return this.drawHelper(arg1, arg2, null);\n        }\n        else {\n            return this.drawHelper(arg1, arg2, arg3);\n        }\n    };\n    PdfTreeGrid.prototype.measureColumnsWidth = function (bounds) {\n        if (typeof bounds !== 'undefined') {\n            var widths = this.columns.getDefaultWidths(bounds.width - bounds.x);\n            for (var i = 0; i < this.columns.count; i++) {\n                if (this.columns.getColumn(i).width < 0) {\n                    this.columns.getColumn(i).width = widths[i];\n                }\n            }\n        }\n        else {\n            var widths = [];\n            var cellWidth = 0;\n            var totalWidth = 0;\n            var rowLevel = 0;\n            // if(this.headers.count > 0){\n            //     let colCount: number = this.headers.getHeader(0).cells.count;\n            //     for(let i: number = 0; i < colCount; i++){\n            //         let rowCount: number = this.headers.count;\n            //         for(let j: number = 0; j < rowCount; j++){\n            //             let tempWidth: number = this.headers.getHeader(j).cells.getCell(i).width;\n            //             let rowWidth: number = this.initialWidth > 0 ? Math.min(this.initialWidth, tempWidth) :\n            //                 tempWidth;\n            //             cellWidth = Math.max(cellWidth, rowWidth);\n            //         }\n            //         widths.push(cellWidth);\n            //     }\n            // }\n            var colCount = this.columns.count;\n            for (var i = 0; i < colCount; i++) {\n                var rowCount = this.rows.count;\n                for (var j = 0; j < rowCount; j++) {\n                    var tempWidth = this.rows.getRow(j).cells.getCell(i).width;\n                    var rowWidth = this.initialWidth > 0 ? Math.min(this.initialWidth, tempWidth) : tempWidth;\n                    cellWidth = Math.max(cellWidth, rowWidth);\n                    cellWidth = Math.max(this.columns.getColumn(i).width, cellWidth);\n                    if (this.columns.getColumn(i).isTreeColumn) {\n                        rowLevel = Math.max(rowLevel, this.rows.getRow(j).level);\n                    }\n                }\n                if (this.columns.getColumn(i).isTreeColumn) {\n                    widths.push(cellWidth + (rowLevel * 10));\n                }\n                else {\n                    widths.push(cellWidth);\n                }\n                // eslint-disable-next-line\n                totalWidth += cellWidth;\n                cellWidth = 0;\n            }\n            for (var i = 0; i < this.columns.count; i++) {\n                if (this.columns.getColumn(i).width < 0) {\n                    this.columns.getColumn(i).width = widths[i];\n                }\n            }\n        }\n    };\n    PdfTreeGrid.prototype.calculateTreeGridSize = function () {\n        var height = 0;\n        var width = this.columns.width;\n        for (var i = 0; i < this.headers.count; i++) {\n            var row = this.headers.getHeader(i);\n            height += row.height;\n        }\n        for (var i = 0; i < this.rows.count; i++) {\n            var row = this.rows.getRow(i);\n            height += row.height;\n        }\n        return new SizeF(width, height);\n    };\n    PdfTreeGrid.prototype.drawGrid = function (page, x, y, format) {\n        this.initialWidth = page.graphics.clientSize.width;\n        var layout = new RectangleF(0, 0, page.getClientSize().height, 0);\n        return this.draw(page, layout, format);\n    };\n    PdfTreeGrid.prototype.layout = function (param) {\n        if (this.rows.count !== 0) {\n            var style = this.rows.getRow(0).cells.getCell(0).style;\n            if (style.borders.left.width !== 1) {\n                var x = style.borders.left.width / 2;\n                var y = style.borders.top.width / 2;\n                if (param.bounds.x === PdfBorders.default.right.width / 2 &&\n                    param.bounds.y === PdfBorders.default.right.width / 2) {\n                    var newBound = new RectangleF(new PointF(x, y), new SizeF(this.size.width, this.size.height));\n                    param.bounds = newBound;\n                }\n            }\n        }\n        //  this.setSpan();\n        this.layouter = new PdfTreeGridLayouter(this);\n        var result = this.layouter.layoutInternal(param);\n        return result;\n    };\n    return PdfTreeGrid;\n}(PdfLayoutElement));\nexport { PdfTreeGrid };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}