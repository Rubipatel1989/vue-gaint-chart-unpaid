{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport { parentsUntil, getActualProperties } from '@syncfusion/ej2-grids';\nimport { setCssInGridPopUp } from '@syncfusion/ej2-grids';\nimport { isNullOrUndefined, removeClass, getValue, addClass, closest, setValue, extend } from '@syncfusion/ej2-base';\nimport { Deferred } from '@syncfusion/ej2-data';\n/**\n * The Selection module is used to handle cell and row selection.\n */\nvar Selection = /** @class */function () {\n  function Selection(gantt) {\n    this.isSelectionFromChart = false;\n    this.isFromChart = false;\n    this.multipleIndexes = [];\n    this.selectedRowIndexes = [];\n    this.enableSelectMultiTouch = false;\n    this.openPopup = false;\n    this.parent = gantt;\n    this.bindEvents();\n    this.parent.treeGrid.selectedRowIndex = this.parent.selectedRowIndex;\n    this.parent.treeGrid.allowSelection = this.parent.allowSelection;\n    this.parent.treeGrid.grid.selectionSettings.enableToggle = this.parent.selectionSettings.enableToggle;\n    this.parent.treeGrid.selectionSettings = getActualProperties(this.parent.selectionSettings);\n    this.wireEvents();\n  }\n  /**\n   * Get module\n   *\n   * @returns {string} .\n   */\n  Selection.prototype.getModuleName = function () {\n    return 'selection';\n  };\n  Selection.prototype.wireEvents = function () {\n    this.parent.on('selectRowByIndex', this.selectRowByIndex, this);\n    if (this.parent.isAdaptive) {\n      this.parent.on('chartMouseClick', this.mouseUpHandler, this);\n      this.parent.on('treeGridClick', this.popUpClickHandler, this);\n    } else {\n      this.parent.on('chartMouseUp', this.mouseUpHandler, this);\n    }\n  };\n  /**\n   * To update selected index.\n   *\n   * @returns {void} .\n   * @private\n   */\n  Selection.prototype.selectRowByIndex = function () {\n    if (this.parent.selectedRowIndex !== -1 || this.parent.staticSelectedRowIndex !== -1) {\n      this.selectRow(this.parent.staticSelectedRowIndex !== -1 ? this.parent.staticSelectedRowIndex : this.parent.selectedRowIndex);\n      this.parent.staticSelectedRowIndex = -1;\n    }\n  };\n  /**\n   * To bind selection events.\n   *\n   * @returns {void} .\n   * @private\n   */\n  Selection.prototype.bindEvents = function () {\n    this.parent.treeGrid.rowSelecting = this.rowSelecting.bind(this);\n    this.parent.treeGrid.rowSelected = this.rowSelected.bind(this);\n    this.parent.treeGrid.rowDeselecting = this.rowDeselecting.bind(this);\n    this.parent.treeGrid.rowDeselected = this.rowDeselected.bind(this);\n    this.parent.treeGrid.cellSelecting = this.cellSelecting.bind(this);\n    this.parent.treeGrid.cellSelected = this.cellSelected.bind(this);\n    this.parent.treeGrid.cellDeselecting = this.cellDeselecting.bind(this);\n    this.parent.treeGrid.cellDeselected = this.cellDeselected.bind(this);\n  };\n  Selection.prototype.rowSelecting = function (args) {\n    if (!this.parent.isGanttChartRendered) {\n      args.cancel = true;\n      return;\n    }\n    args.isCtrlPressed = this.isMultiCtrlRequest || args.isCtrlPressed;\n    args.isShiftPressed = this.isMultiShiftRequest || args.isShiftPressed;\n    args.target = this.actualTarget;\n    if (!isNullOrUndefined(args.foreignKeyData) && Object.keys(args.foreignKeyData).length === 0) {\n      delete args.foreignKeyData;\n    }\n    if (this.parent.selectionSettings && this.parent.selectionSettings.persistSelection) {\n      this.parent.treeGrid.grid.selectionModule['checkSelectAllClicked'] = true;\n    }\n    this.parent.trigger('rowSelecting', args);\n    if (this.isMultiShiftRequest || this.isMultiCtrlRequest) {\n      this.isMultiShiftRequest = this.isMultiCtrlRequest = false;\n    }\n  };\n  Selection.prototype.rowSelected = function (args) {\n    var rowIndexes = 'rowIndexes';\n    var index = this.parent.selectionSettings.type === 'Multiple' && !isNullOrUndefined(args[rowIndexes]) ? args[rowIndexes] : [args.rowIndex];\n    this.addRemoveClass(index, args['name']);\n    this.selectedRowIndexes = extend([], this.getSelectedRowIndexes(), [], true);\n    this.parent.setProperties({\n      selectedRowIndex: this.parent.treeGrid.grid.selectedRowIndex\n    }, true);\n    if (this.isMultiShiftRequest) {\n      this.selectedRowIndexes = index;\n    }\n    if (this.parent.autoFocusTasks) {\n      if (this.parent.enableTimelineVirtualization) {\n        this.parent['isRowSelected'] = true;\n      }\n      if (args.data && !isNullOrUndefined(args.data['length'])) {\n        for (var i = 0; i < args.data['length']; i++) {\n          this.parent.ganttChartModule.updateScrollLeft(args.data[i].ganttProperties.left);\n        }\n      } else {\n        this.parent.ganttChartModule.updateScrollLeft(getValue('data.ganttProperties.left', args));\n      }\n    }\n    args.target = this.actualTarget;\n    if (!isNullOrUndefined(args.foreignKeyData) && Object.keys(args.foreignKeyData).length === 0) {\n      delete args.foreignKeyData;\n    }\n    this.prevRowIndex = args.rowIndex;\n    if (!isNullOrUndefined(this.parent.toolbarModule)) {\n      this.parent.toolbarModule.refreshToolbarItems(args);\n    }\n    this.parent.trigger('rowSelected', args);\n  };\n  Selection.prototype.rowDeselecting = function (args) {\n    args.target = this.actualTarget;\n    args.isInteracted = this.isInteracted;\n    this.parent.trigger('rowDeselecting', args);\n  };\n  Selection.prototype.rowDeselected = function (args) {\n    var index;\n    var isContains;\n    if (this.multipleIndexes.length !== 0) {\n      index = this.multipleIndexes;\n    } else {\n      if (!isNullOrUndefined(args.rowIndexes)) {\n        for (var i = 0; i < args.rowIndexes.length; i++) {\n          if (args.rowIndexes[i] === args.rowIndex) {\n            isContains = true;\n          }\n        }\n        if (isContains) {\n          index = args.rowIndexes;\n        } else {\n          index = [args.rowIndex];\n        }\n      } else {\n        index = [args.rowIndex];\n      }\n    }\n    this.addRemoveClass(index);\n    this.selectedRowIndexes = extend([], this.getSelectedRowIndexes(), [], true);\n    this.parent.setProperties({\n      selectedRowIndex: -1\n    }, true);\n    if (this.selectedRowIndexes.length === 1) {\n      this.parent.setProperties({\n        selectedRowIndex: this.selectedRowIndexes[0]\n      }, true);\n    }\n    if (!isNullOrUndefined(this.parent.toolbarModule)) {\n      this.parent.toolbarModule.refreshToolbarItems();\n    }\n    if (this.parent.selectionSettings.type === 'Multiple' && this.parent.isAdaptive && this.selectedRowIndexes.length === 0) {\n      this.hidePopUp();\n    }\n    args.target = this.actualTarget;\n    args.isInteracted = this.isInteracted;\n    this.parent.trigger('rowDeselected', args);\n    this.isInteracted = false;\n    this.multipleIndexes = [];\n  };\n  Selection.prototype.cellSelecting = function (args) {\n    var callBackPromise = new Deferred();\n    this.parent.trigger('cellSelecting', args, function (cellselectingArgs) {\n      callBackPromise.resolve(cellselectingArgs);\n    });\n    return callBackPromise;\n  };\n  Selection.prototype.cellSelected = function (args) {\n    this.parent.trigger('cellSelected', args);\n    if (!isNullOrUndefined(this.parent.toolbarModule)) {\n      this.parent.toolbarModule.refreshToolbarItems();\n    }\n  };\n  Selection.prototype.cellDeselecting = function (args) {\n    this.parent.trigger('cellDeselecting', args);\n  };\n  Selection.prototype.cellDeselected = function (args) {\n    this.parent.trigger('cellDeselected', args);\n    if (!isNullOrUndefined(this.parent.toolbarModule)) {\n      this.parent.toolbarModule.refreshToolbarItems();\n    }\n  };\n  /**\n   * Selects a cell by given index.\n   *\n   * @param  {IIndex} cellIndex - Defines the row and column indexes.\n   * @param  {boolean} isToggle - If set to true, then it toggles the selection.\n   * @returns {void} .\n   */\n  Selection.prototype.selectCell = function (cellIndex, isToggle) {\n    this.parent.treeGrid.selectCell(cellIndex, isToggle);\n  };\n  /**\n   * Selects a collection of cells by row and column indexes.\n   *\n   * @param  {ISelectedCell[]} rowCellIndexes - Specifies the row and column indexes.\n   * @returns {void} .\n   */\n  Selection.prototype.selectCells = function (rowCellIndexes) {\n    this.parent.treeGrid.grid.selectCells(rowCellIndexes);\n  };\n  /**\n   * Selects a row by given index.\n   *\n   * @param  {number} index - Defines the row index.\n   * @param  {boolean} isToggle - If set to true, then it toggles the selection.\n   * @param {boolean} isPreventFocus .\n   * @returns {void} .\n   */\n  Selection.prototype.selectRow = function (index, isToggle, isPreventFocus) {\n    var ganttRow = [].slice.call(this.parent.ganttChartModule.chartBodyContent.querySelector('tbody').children);\n    if (this.parent.enableVirtualization && (this.parent.treeGridModule.addedRecord || this.parent.editModule && this.parent.editModule.isAdded)) {\n      index = this.parent.getExpandedRecords(this.parent.flatData).indexOf(this.parent.flatData[index]);\n      this.parent.treeGridModule.addedRecord = false;\n      if (this.parent.editModule) {\n        this.parent.editModule.isAdded = false;\n      }\n    }\n    var selectedRow = ganttRow.filter(function (e) {\n      return parseInt(e.getAttribute('data-rowindex'), 10) === index;\n    })[0];\n    var condition;\n    if (index === -1 || isNullOrUndefined(selectedRow) && !this.parent.enableVirtualization || this.parent.selectionSettings.mode === 'Cell') {\n      return;\n    }\n    if (this.parent.showActiveElement && !isNullOrUndefined(isPreventFocus) && !isPreventFocus || this.isFromChart) {\n      if (this.isFromChart) {\n        this.isFromChart = false;\n      }\n      this.parent.treeGrid.grid.selectionModule.preventFocus = true;\n    } else {\n      this.parent.treeGrid.grid.selectionModule.preventFocus = false;\n    }\n    if (!isNullOrUndefined(this.selectedClass) && this.selectedClass === selectedRow && !isToggle) {\n      condition = true;\n    }\n    if (condition !== true) {\n      this.parent.treeGrid.selectRow(index, isToggle);\n    }\n    this.parent.treeGrid.grid.selectionModule.preventFocus = this.parent.treeGrid.grid.selectionModule.preventFocus === true ? false : this.parent.treeGrid.grid.selectionModule.preventFocus;\n    this.prevRowIndex = index;\n    this.selectedClass = selectedRow;\n  };\n  /**\n   * Selects a collection of rows by indexes.\n   *\n   * @param  {number[]} records - Defines the collection of row indexes.\n   * @returns {void} .\n   */\n  Selection.prototype.selectRows = function (records) {\n    if (!isNullOrUndefined(records) && records.length > 0) {\n      this.parent.treeGrid.selectRows(records);\n    }\n  };\n  /**\n   * Gets the collection of selected row indexes.\n   *\n   * @returns {number[]} .\n   */\n  Selection.prototype.getSelectedRowIndexes = function () {\n    return this.parent.treeGrid.getSelectedRowIndexes();\n  };\n  /**\n   * Gets the collection of selected row and cell indexes.\n   *\n   * @returns {number[]} .\n   */\n  Selection.prototype.getSelectedRowCellIndexes = function () {\n    return this.parent.treeGrid.getSelectedRowCellIndexes();\n  };\n  /**\n   * Gets the collection of selected records.\n   *\n   * @returns {Object[]} .\n   */\n  Selection.prototype.getSelectedRecords = function () {\n    if (this.parent.loadChildOnDemand && this.parent.taskFields.hasChildMapping) {\n      var selectedRows = [];\n      var selectedIndexes_1 = this.parent.selectionModule.getSelectedRowIndexes();\n      var _loop_1 = function (i) {\n        var rec = this_1.parent.currentViewData.filter(function (data) {\n          return data.index === selectedIndexes_1[i];\n        })[0];\n        selectedRows.push(rec);\n      };\n      var this_1 = this;\n      for (var i = 0; i < selectedIndexes_1.length; i++) {\n        _loop_1(i);\n      }\n      return selectedRows;\n    } else {\n      return this.parent.treeGrid.getSelectedRecords();\n    }\n  };\n  /**\n   * Get the selected records for cell selection.\n   *\n   * @returns {IGanttData[]} .\n   */\n  Selection.prototype.getCellSelectedRecords = function () {\n    var cellDetails = this.parent.selectionModule.getSelectedRowCellIndexes();\n    var cellSelectedRecords = [];\n    for (var i = 0; i < cellDetails.length; i++) {\n      cellSelectedRecords.push(this.parent.currentViewData[cellDetails[i].rowIndex]);\n    }\n    return cellSelectedRecords;\n  };\n  /**\n   * Gets the collection of selected rows.\n   *\n   * @returns {Element[]} .\n   */\n  Selection.prototype.getSelectedRows = function () {\n    return this.parent.treeGrid.getSelectedRows();\n  };\n  /**\n   * Deselects the current selected rows and cells.\n   *\n   * @returns {void} .\n   */\n  Selection.prototype.clearSelection = function () {\n    this.addRemoveClass(this.selectedRowIndexes);\n    this.parent.treeGrid.clearSelection();\n    this.parent.selectedRowIndex = -1;\n    this.selectedRowIndexes = [];\n    this.selectedClass = null;\n    if (!isNullOrUndefined(this.parent.toolbarModule)) {\n      this.parent.toolbarModule.refreshToolbarItems();\n    }\n    this.isInteracted = false;\n  };\n  Selection.prototype.highlightSelectedRows = function (e, fromChart) {\n    this.isMultiCtrlRequest = e.ctrlKey || this.enableSelectMultiTouch;\n    this.isMultiShiftRequest = e.shiftKey;\n    this.actualTarget = e.target;\n    this.isInteracted = true;\n    this.isSelectionFromChart = fromChart;\n    if (fromChart) {\n      var selectedRow = closest(e.target, 'tr.e-chart-row');\n      var rIndex = parseInt(selectedRow.getAttribute('data-rowindex'), 10);\n      var isToggle = this.parent.selectionSettings.enableToggle;\n      if (this.parent.selectionSettings.type === 'Single' || !this.isMultiCtrlRequest && !this.isMultiShiftRequest) {\n        if (this.parent.selectionSettings.persistSelection) {\n          this.addRemoveClass(this.selectedRowIndexes, e['name']);\n        }\n        if (!this.parent.allowTaskbarDragAndDrop || this.parent.allowTaskbarDragAndDrop && this.parent.rowDragAndDropModule && !this.parent.rowDragAndDropModule['draggedRecord']) {\n          this.isFromChart = true;\n          this.selectRow(rIndex, isToggle);\n        }\n      } else {\n        if (this.isMultiShiftRequest) {\n          this.selectRowsByRange(isNullOrUndefined(this.prevRowIndex) ? rIndex : this.prevRowIndex, rIndex);\n        } else {\n          setValue('isMultiCtrlRequest', true, this.parent.treeGrid.grid.selectionModule);\n          this.parent.treeGrid.grid.selectionModule.addRowsToSelection([rIndex]);\n          var isUnSelected = this.selectedRowIndexes.indexOf(rIndex) > -1;\n          if (isUnSelected) {\n            this.addRemoveClass([rIndex], e['name']);\n          }\n        }\n      }\n    }\n  };\n  Selection.prototype.getselectedrowsIndex = function (startIndex, endIndex) {\n    var indexes = [];\n    // eslint-disable-next-line\n    var _a = startIndex < endIndex ? {\n        i: startIndex,\n        max: endIndex\n      } : {\n        i: endIndex,\n        max: startIndex\n      },\n      i = _a.i,\n      max = _a.max;\n    for (; i <= max; i++) {\n      indexes.push(i);\n    }\n    if (startIndex > endIndex) {\n      indexes.reverse();\n    }\n    this.selectedRowIndexes = indexes;\n  };\n  /**\n   * Selects a range of rows from start and end row indexes.\n   *\n   * @param  {number} startIndex - Defines the start row index.\n   * @param  {number} endIndex - Defines the end row index.\n   * @returns {void} .\n   */\n  Selection.prototype.selectRowsByRange = function (startIndex, endIndex) {\n    this.isSelectionFromChart = true;\n    this.getselectedrowsIndex(startIndex, endIndex);\n    this.selectRows(this.selectedRowIndexes);\n  };\n  Selection.prototype.addRemoveClass = function (records, request) {\n    if (typeof records == 'number') {\n      records = [records];\n    }\n    var ganttRow = [].slice.call(this.parent.ganttChartModule.chartBodyContent.querySelector('tbody').children);\n    var _loop_2 = function (i) {\n      var selectedRow = ganttRow.filter(function (e) {\n        return parseInt(e.getAttribute('data-rowindex'), 10) === records[parseInt(i.toString(), 10)];\n      })[0];\n      if (!isNullOrUndefined(selectedRow)) {\n        var persist = false;\n        var index = this_2.getSelectedRowIndexes().indexOf(records[parseInt(i.toString(), 10)]);\n        var selectedRecordLen = this_2.getSelectedRecords().length;\n        if (this_2.parent.selectionSettings.persistSelection && this_2.parent.selectionSettings.enableToggle && !isNullOrUndefined(request) && this_2.parent.selectionSettings.type !== 'Multiple' && selectedRecordLen > 0) {\n          persist = true;\n        }\n        if (this_2.parent.selectionSettings.enableToggle && this_2.parent.selectionSettings.persistSelection && index > -1 && this_2.parent.selectionSettings.type === 'Single' && persist || index > -1 && !isNullOrUndefined(request) && this_2.parent.selectionSettings.type === 'Multiple') {\n          this_2.addClass(selectedRow);\n        } else if (isNullOrUndefined(request)) {\n          this_2.removeClass(selectedRow);\n        } else if (index > -1) {\n          this_2.addClass(selectedRow);\n        }\n        if ((this_2.parent.selectionSettings.type === 'Single' || !this_2.isMultiCtrlRequest && !this_2.isMultiShiftRequest) && index > -1 && this_2.parent.selectionSettings.persistSelection && request === 'chartMouseUp' && this_2.isSelectionFromChart) {\n          this_2.removeClass(selectedRow);\n        }\n      }\n    };\n    var this_2 = this;\n    for (var i = 0; i < records.length; i++) {\n      _loop_2(i);\n    }\n  };\n  Selection.prototype.addClass = function (selectedRow) {\n    addClass([selectedRow], 'e-active');\n    selectedRow.setAttribute('aria-selected', 'true');\n  };\n  Selection.prototype.removeClass = function (selectedRow) {\n    removeClass([selectedRow], 'e-active');\n    selectedRow.removeAttribute('aria-selected');\n  };\n  Selection.prototype.showPopup = function (e) {\n    if (this.isSelectionFromChart) {\n      setCssInGridPopUp(this.parent.element.querySelector('.e-ganttpopup'), e, 'e-rowselect e-icons e-icon-rowselect' + (this.enableSelectMultiTouch && (this.getSelectedRecords().length > 1 || this.getSelectedRowCellIndexes().length > 1) ? ' e-spanclicked' : ''));\n      document.getElementsByClassName('e-gridpopup')[0].style.display = 'none';\n      this.openPopup = true;\n    } else if (this.selectedRowIndexes.length === 0) {\n      this.hidePopUp();\n    }\n  };\n  /**\n   * @returns {void} .\n   * @private\n   */\n  Selection.prototype.hidePopUp = function () {\n    if (this.openPopup) {\n      document.getElementsByClassName('e-ganttpopup')[0].style.display = 'none';\n      this.openPopup = false;\n    } else {\n      document.getElementsByClassName('e-gridpopup')[0].style.display = 'none';\n    }\n  };\n  Selection.prototype.popUpClickHandler = function (e) {\n    var target = e.target;\n    var grid = this.parent.treeGrid.grid;\n    var $popUpElemet = closest(target, '.e-ganttpopup') ? closest(target, '.e-ganttpopup') : closest(target, '.e-gridpopup');\n    if ($popUpElemet) {\n      var spanElement = $popUpElemet.querySelector('.' + 'e-rowselect');\n      if (closest(target, '.e-ganttpopup') && !spanElement.classList.contains('e-spanclicked')) {\n        this.enableSelectMultiTouch = true;\n        spanElement.classList.add('e-spanclicked');\n      } else if (closest(target, '.e-gridpopup') && spanElement.classList.contains('e-spanclicked')) {\n        this.openPopup = true;\n        this.enableSelectMultiTouch = true;\n      } else {\n        this.hidePopUp();\n        this.enableSelectMultiTouch = false;\n        if (closest(target, '.e-ganttpopup')) {\n          spanElement.classList.remove('e-spanclicked');\n        }\n      }\n    } else if (this.parent.selectionSettings.type === 'Multiple' && this.parent.isAdaptive) {\n      var $tr = closest(target, '.e-rowcell');\n      if ($tr && this.selectedRowIndexes.length === 0) {\n        this.hidePopUp();\n      }\n    }\n    if (grid) {\n      setValue('enableSelectMultiTouch', this.enableSelectMultiTouch, grid.selectionModule);\n    }\n  };\n  /**\n   * @param {PointerEvent} e .\n   * @returns {void} .\n   * @private\n   */\n  Selection.prototype.mouseUpHandler = function (e) {\n    var isTaskbarEdited = false;\n    var elements = document.querySelectorAll('.e-drag-item');\n    var targetElement = null;\n    if (e.target.closest('.e-rowcell')) {\n      targetElement = e.target;\n    } else if (e.target.closest('.e-chart-row')) {\n      targetElement = e.target.closest('.e-left-label-container') || e.target.closest('.e-taskbar-main-container') || e.target.closest('.e-right-label-container');\n    }\n    if (this.parent.focusModule) {\n      this.parent.focusModule.setActiveElement(targetElement);\n    }\n    if (this.parent.editModule && this.parent.editSettings.allowTaskbarEditing && this.parent.editModule.taskbarEditModule) {\n      var taskbarEdit = this.parent.editModule.taskbarEditModule;\n      if (taskbarEdit.isMouseDragged || taskbarEdit.tapPointOnFocus) {\n        isTaskbarEdited = true;\n      }\n    }\n    if (!isTaskbarEdited && this.parent.element.contains(e.target) && !(elements.length === 1)) {\n      var parent_1 = parentsUntil(e.target, 'e-chart-row');\n      var isSelected = e.target.classList.contains('e-rowcell') || e.target.classList.contains('e-row') || e.target.classList.contains('e-treegridexpand') || e.target.classList.contains('e-treegridcollapse') || !isNullOrUndefined(parent_1);\n      this.popUpClickHandler(e);\n      if (this.parent.selectionSettings.mode !== 'Cell' && isSelected) {\n        if (closest(e.target, 'tr.e-chart-row')) {\n          if (this.parent.enableVirtualization) {\n            this.parent.treeGrid.grid.selectionModule.isInteracted = true;\n          }\n          this.parent.treeGrid['isFromChartSide'] = true;\n          this.highlightSelectedRows(e, true);\n        } else {\n          this.parent.treeGrid['isFromChartSide'] = false;\n          this.highlightSelectedRows(e, false);\n        }\n        if (this.parent.selectionSettings.type === 'Multiple' && this.parent.isAdaptive) {\n          if (this.selectedRowIndexes.length > 0) {\n            this.showPopup(e);\n          } else {\n            this.hidePopUp();\n          }\n        }\n      } else {\n        this.isSelectionFromChart = false;\n      }\n    }\n  };\n  /**\n   * To add class for selected records in virtualization mode.\n   *\n   * @param {number} i .\n   * @returns {void} .\n   * @hidden\n   */\n  Selection.prototype.maintainSelectedRecords = function (i) {\n    var index = this.parent.selectionModule.getSelectedRowIndexes().indexOf(i);\n    if (index > -1) {\n      this.addRemoveClass([i]);\n    }\n  };\n  /**\n   * To destroy the selection module.\n   *\n   * @returns {void} .\n   * @private\n   */\n  Selection.prototype.destroy = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n    this.parent.off('selectRowByIndex', this.selectRowByIndex);\n    if (this.parent.isAdaptive) {\n      this.parent.off('chartMouseClick', this.mouseUpHandler);\n      this.parent.off('treeGridClick', this.popUpClickHandler);\n    } else {\n      this.parent.off('chartMouseUp', this.mouseUpHandler);\n    }\n  };\n  return Selection;\n}();\nexport { Selection };","map":{"version":3,"names":["parentsUntil","getActualProperties","setCssInGridPopUp","isNullOrUndefined","removeClass","getValue","addClass","closest","setValue","extend","Deferred","Selection","gantt","isSelectionFromChart","isFromChart","multipleIndexes","selectedRowIndexes","enableSelectMultiTouch","openPopup","parent","bindEvents","treeGrid","selectedRowIndex","allowSelection","grid","selectionSettings","enableToggle","wireEvents","prototype","getModuleName","on","selectRowByIndex","isAdaptive","mouseUpHandler","popUpClickHandler","staticSelectedRowIndex","selectRow","rowSelecting","bind","rowSelected","rowDeselecting","rowDeselected","cellSelecting","cellSelected","cellDeselecting","cellDeselected","args","isGanttChartRendered","cancel","isCtrlPressed","isMultiCtrlRequest","isShiftPressed","isMultiShiftRequest","target","actualTarget","foreignKeyData","Object","keys","length","persistSelection","selectionModule","trigger","rowIndexes","index","type","rowIndex","addRemoveClass","getSelectedRowIndexes","setProperties","autoFocusTasks","enableTimelineVirtualization","data","i","ganttChartModule","updateScrollLeft","ganttProperties","left","prevRowIndex","toolbarModule","refreshToolbarItems","isInteracted","isContains","hidePopUp","callBackPromise","cellselectingArgs","resolve","selectCell","cellIndex","isToggle","selectCells","rowCellIndexes","isPreventFocus","ganttRow","slice","call","chartBodyContent","querySelector","children","enableVirtualization","treeGridModule","addedRecord","editModule","isAdded","getExpandedRecords","flatData","indexOf","selectedRow","filter","e","parseInt","getAttribute","condition","mode","showActiveElement","preventFocus","selectedClass","selectRows","records","getSelectedRowCellIndexes","getSelectedRecords","loadChildOnDemand","taskFields","hasChildMapping","selectedRows","selectedIndexes_1","_loop_1","rec","this_1","currentViewData","push","getCellSelectedRecords","cellDetails","cellSelectedRecords","getSelectedRows","clearSelection","highlightSelectedRows","fromChart","ctrlKey","shiftKey","rIndex","allowTaskbarDragAndDrop","rowDragAndDropModule","selectRowsByRange","addRowsToSelection","isUnSelected","getselectedrowsIndex","startIndex","endIndex","indexes","_a","max","reverse","request","_loop_2","toString","persist","this_2","selectedRecordLen","setAttribute","removeAttribute","showPopup","element","document","getElementsByClassName","style","display","$popUpElemet","spanElement","classList","contains","add","remove","$tr","isTaskbarEdited","elements","querySelectorAll","targetElement","focusModule","setActiveElement","editSettings","allowTaskbarEditing","taskbarEditModule","taskbarEdit","isMouseDragged","tapPointOnFocus","parent_1","isSelected","maintainSelectedRecords","destroy","isDestroyed","off"],"sources":["/var/www/vue/vue-gantt-chart/node_modules/@syncfusion/ej2-gantt/src/gantt/actions/selection.js"],"sourcesContent":["import { parentsUntil, getActualProperties } from '@syncfusion/ej2-grids';\nimport { setCssInGridPopUp } from '@syncfusion/ej2-grids';\nimport { isNullOrUndefined, removeClass, getValue, addClass, closest, setValue, extend } from '@syncfusion/ej2-base';\nimport { Deferred } from '@syncfusion/ej2-data';\n/**\n * The Selection module is used to handle cell and row selection.\n */\nvar Selection = /** @class */ (function () {\n    function Selection(gantt) {\n        this.isSelectionFromChart = false;\n        this.isFromChart = false;\n        this.multipleIndexes = [];\n        this.selectedRowIndexes = [];\n        this.enableSelectMultiTouch = false;\n        this.openPopup = false;\n        this.parent = gantt;\n        this.bindEvents();\n        this.parent.treeGrid.selectedRowIndex = this.parent.selectedRowIndex;\n        this.parent.treeGrid.allowSelection = this.parent.allowSelection;\n        this.parent.treeGrid.grid.selectionSettings.enableToggle = this.parent.selectionSettings.enableToggle;\n        this.parent.treeGrid.selectionSettings = getActualProperties(this.parent.selectionSettings);\n        this.wireEvents();\n    }\n    /**\n     * Get module\n     *\n     * @returns {string} .\n     */\n    Selection.prototype.getModuleName = function () {\n        return 'selection';\n    };\n    Selection.prototype.wireEvents = function () {\n        this.parent.on('selectRowByIndex', this.selectRowByIndex, this);\n        if (this.parent.isAdaptive) {\n            this.parent.on('chartMouseClick', this.mouseUpHandler, this);\n            this.parent.on('treeGridClick', this.popUpClickHandler, this);\n        }\n        else {\n            this.parent.on('chartMouseUp', this.mouseUpHandler, this);\n        }\n    };\n    /**\n     * To update selected index.\n     *\n     * @returns {void} .\n     * @private\n     */\n    Selection.prototype.selectRowByIndex = function () {\n        if ((this.parent.selectedRowIndex !== -1 || this.parent.staticSelectedRowIndex !== -1)) {\n            this.selectRow(this.parent.staticSelectedRowIndex !== -1 ? this.parent.staticSelectedRowIndex : this.parent.selectedRowIndex);\n            this.parent.staticSelectedRowIndex = -1;\n        }\n    };\n    /**\n     * To bind selection events.\n     *\n     * @returns {void} .\n     * @private\n     */\n    Selection.prototype.bindEvents = function () {\n        this.parent.treeGrid.rowSelecting = this.rowSelecting.bind(this);\n        this.parent.treeGrid.rowSelected = this.rowSelected.bind(this);\n        this.parent.treeGrid.rowDeselecting = this.rowDeselecting.bind(this);\n        this.parent.treeGrid.rowDeselected = this.rowDeselected.bind(this);\n        this.parent.treeGrid.cellSelecting = this.cellSelecting.bind(this);\n        this.parent.treeGrid.cellSelected = this.cellSelected.bind(this);\n        this.parent.treeGrid.cellDeselecting = this.cellDeselecting.bind(this);\n        this.parent.treeGrid.cellDeselected = this.cellDeselected.bind(this);\n    };\n    Selection.prototype.rowSelecting = function (args) {\n        if (!this.parent.isGanttChartRendered) {\n            args.cancel = true;\n            return;\n        }\n        args.isCtrlPressed = this.isMultiCtrlRequest || args.isCtrlPressed;\n        args.isShiftPressed = this.isMultiShiftRequest || args.isShiftPressed;\n        args.target = this.actualTarget;\n        if (!isNullOrUndefined(args.foreignKeyData) && Object.keys(args.foreignKeyData).length === 0) {\n            delete args.foreignKeyData;\n        }\n        if (this.parent.selectionSettings && this.parent.selectionSettings.persistSelection) {\n            this.parent.treeGrid.grid.selectionModule['checkSelectAllClicked'] = true;\n        }\n        this.parent.trigger('rowSelecting', args);\n        if (this.isMultiShiftRequest || this.isMultiCtrlRequest) {\n            this.isMultiShiftRequest = this.isMultiCtrlRequest = false;\n        }\n    };\n    Selection.prototype.rowSelected = function (args) {\n        var rowIndexes = 'rowIndexes';\n        var index = (this.parent.selectionSettings.type === 'Multiple' && !isNullOrUndefined(args[rowIndexes])) ?\n            args[rowIndexes] : [args.rowIndex];\n        this.addRemoveClass(index, args['name']);\n        this.selectedRowIndexes = extend([], this.getSelectedRowIndexes(), [], true);\n        this.parent.setProperties({ selectedRowIndex: this.parent.treeGrid.grid.selectedRowIndex }, true);\n        if (this.isMultiShiftRequest) {\n            this.selectedRowIndexes = index;\n        }\n        if (this.parent.autoFocusTasks) {\n            if (this.parent.enableTimelineVirtualization) {\n                this.parent['isRowSelected'] = true;\n            }\n            if (args.data && !isNullOrUndefined(args.data['length'])) {\n                for (var i = 0; i < args.data['length']; i++) {\n                    this.parent.ganttChartModule.updateScrollLeft(args.data[i].ganttProperties.left);\n                }\n            }\n            else {\n                this.parent.ganttChartModule.updateScrollLeft(getValue('data.ganttProperties.left', args));\n            }\n        }\n        args.target = this.actualTarget;\n        if (!isNullOrUndefined(args.foreignKeyData) && Object.keys(args.foreignKeyData).length === 0) {\n            delete args.foreignKeyData;\n        }\n        this.prevRowIndex = args.rowIndex;\n        if (!isNullOrUndefined(this.parent.toolbarModule)) {\n            this.parent.toolbarModule.refreshToolbarItems(args);\n        }\n        this.parent.trigger('rowSelected', args);\n    };\n    Selection.prototype.rowDeselecting = function (args) {\n        args.target = this.actualTarget;\n        args.isInteracted = this.isInteracted;\n        this.parent.trigger('rowDeselecting', args);\n    };\n    Selection.prototype.rowDeselected = function (args) {\n        var index;\n        var isContains;\n        if (this.multipleIndexes.length !== 0) {\n            index = this.multipleIndexes;\n        }\n        else {\n            if (!isNullOrUndefined(args.rowIndexes)) {\n                for (var i = 0; i < args.rowIndexes.length; i++) {\n                    if (args.rowIndexes[i] === args.rowIndex) {\n                        isContains = true;\n                    }\n                }\n                if (isContains) {\n                    index = args.rowIndexes;\n                }\n                else {\n                    index = [args.rowIndex];\n                }\n            }\n            else {\n                index = [args.rowIndex];\n            }\n        }\n        this.addRemoveClass(index);\n        this.selectedRowIndexes = extend([], this.getSelectedRowIndexes(), [], true);\n        this.parent.setProperties({ selectedRowIndex: -1 }, true);\n        if (this.selectedRowIndexes.length === 1) {\n            this.parent.setProperties({ selectedRowIndex: this.selectedRowIndexes[0] }, true);\n        }\n        if (!isNullOrUndefined(this.parent.toolbarModule)) {\n            this.parent.toolbarModule.refreshToolbarItems();\n        }\n        if (this.parent.selectionSettings.type === 'Multiple' && this.parent.isAdaptive\n            && this.selectedRowIndexes.length === 0) {\n            this.hidePopUp();\n        }\n        args.target = this.actualTarget;\n        args.isInteracted = this.isInteracted;\n        this.parent.trigger('rowDeselected', args);\n        this.isInteracted = false;\n        this.multipleIndexes = [];\n    };\n    Selection.prototype.cellSelecting = function (args) {\n        var callBackPromise = new Deferred();\n        this.parent.trigger('cellSelecting', args, function (cellselectingArgs) {\n            callBackPromise.resolve(cellselectingArgs);\n        });\n        return callBackPromise;\n    };\n    Selection.prototype.cellSelected = function (args) {\n        this.parent.trigger('cellSelected', args);\n        if (!isNullOrUndefined(this.parent.toolbarModule)) {\n            this.parent.toolbarModule.refreshToolbarItems();\n        }\n    };\n    Selection.prototype.cellDeselecting = function (args) {\n        this.parent.trigger('cellDeselecting', args);\n    };\n    Selection.prototype.cellDeselected = function (args) {\n        this.parent.trigger('cellDeselected', args);\n        if (!isNullOrUndefined(this.parent.toolbarModule)) {\n            this.parent.toolbarModule.refreshToolbarItems();\n        }\n    };\n    /**\n     * Selects a cell by given index.\n     *\n     * @param  {IIndex} cellIndex - Defines the row and column indexes.\n     * @param  {boolean} isToggle - If set to true, then it toggles the selection.\n     * @returns {void} .\n     */\n    Selection.prototype.selectCell = function (cellIndex, isToggle) {\n        this.parent.treeGrid.selectCell(cellIndex, isToggle);\n    };\n    /**\n     * Selects a collection of cells by row and column indexes.\n     *\n     * @param  {ISelectedCell[]} rowCellIndexes - Specifies the row and column indexes.\n     * @returns {void} .\n     */\n    Selection.prototype.selectCells = function (rowCellIndexes) {\n        this.parent.treeGrid.grid.selectCells(rowCellIndexes);\n    };\n    /**\n     * Selects a row by given index.\n     *\n     * @param  {number} index - Defines the row index.\n     * @param  {boolean} isToggle - If set to true, then it toggles the selection.\n     * @param {boolean} isPreventFocus .\n     * @returns {void} .\n     */\n    Selection.prototype.selectRow = function (index, isToggle, isPreventFocus) {\n        var ganttRow = [].slice.call(this.parent.ganttChartModule.chartBodyContent.querySelector('tbody').children);\n        if (this.parent.enableVirtualization && (this.parent.treeGridModule.addedRecord ||\n            (this.parent.editModule && this.parent.editModule.isAdded))) {\n            index = this.parent.getExpandedRecords(this.parent.flatData).indexOf(this.parent.flatData[index]);\n            this.parent.treeGridModule.addedRecord = false;\n            if (this.parent.editModule) {\n                this.parent.editModule.isAdded = false;\n            }\n        }\n        var selectedRow = ganttRow.filter(function (e) { return parseInt(e.getAttribute('data-rowindex'), 10) === index; })[0];\n        var condition;\n        if (index === -1 || (isNullOrUndefined(selectedRow) && !this.parent.enableVirtualization) || this.parent.selectionSettings.mode === 'Cell') {\n            return;\n        }\n        if (this.parent.showActiveElement && !isNullOrUndefined(isPreventFocus) && !isPreventFocus || this.isFromChart) {\n            if (this.isFromChart) {\n                this.isFromChart = false;\n            }\n            this.parent.treeGrid.grid.selectionModule.preventFocus = true;\n        }\n        else {\n            this.parent.treeGrid.grid.selectionModule.preventFocus = false;\n        }\n        if ((!isNullOrUndefined(this.selectedClass) && (this.selectedClass === selectedRow) && (!isToggle))) {\n            condition = true;\n        }\n        if (condition !== true) {\n            this.parent.treeGrid.selectRow(index, isToggle);\n        }\n        this.parent.treeGrid.grid.selectionModule.preventFocus = this.parent.treeGrid.grid.selectionModule.preventFocus === true ?\n            false : this.parent.treeGrid.grid.selectionModule.preventFocus;\n        this.prevRowIndex = index;\n        this.selectedClass = selectedRow;\n    };\n    /**\n     * Selects a collection of rows by indexes.\n     *\n     * @param  {number[]} records - Defines the collection of row indexes.\n     * @returns {void} .\n     */\n    Selection.prototype.selectRows = function (records) {\n        if (!isNullOrUndefined(records) && records.length > 0) {\n            this.parent.treeGrid.selectRows(records);\n        }\n    };\n    /**\n     * Gets the collection of selected row indexes.\n     *\n     * @returns {number[]} .\n     */\n    Selection.prototype.getSelectedRowIndexes = function () {\n        return this.parent.treeGrid.getSelectedRowIndexes();\n    };\n    /**\n     * Gets the collection of selected row and cell indexes.\n     *\n     * @returns {number[]} .\n     */\n    Selection.prototype.getSelectedRowCellIndexes = function () {\n        return this.parent.treeGrid.getSelectedRowCellIndexes();\n    };\n    /**\n     * Gets the collection of selected records.\n     *\n     * @returns {Object[]} .\n     */\n    Selection.prototype.getSelectedRecords = function () {\n        if (this.parent.loadChildOnDemand && this.parent.taskFields.hasChildMapping) {\n            var selectedRows = [];\n            var selectedIndexes_1 = this.parent.selectionModule.getSelectedRowIndexes();\n            var _loop_1 = function (i) {\n                var rec = this_1.parent.currentViewData.filter(function (data) {\n                    return data.index === selectedIndexes_1[i];\n                })[0];\n                selectedRows.push(rec);\n            };\n            var this_1 = this;\n            for (var i = 0; i < selectedIndexes_1.length; i++) {\n                _loop_1(i);\n            }\n            return selectedRows;\n        }\n        else {\n            return this.parent.treeGrid.getSelectedRecords();\n        }\n    };\n    /**\n     * Get the selected records for cell selection.\n     *\n     * @returns {IGanttData[]} .\n     */\n    Selection.prototype.getCellSelectedRecords = function () {\n        var cellDetails = this.parent.selectionModule.getSelectedRowCellIndexes();\n        var cellSelectedRecords = [];\n        for (var i = 0; i < cellDetails.length; i++) {\n            cellSelectedRecords.push(this.parent.currentViewData[cellDetails[i].rowIndex]);\n        }\n        return cellSelectedRecords;\n    };\n    /**\n     * Gets the collection of selected rows.\n     *\n     * @returns {Element[]} .\n     */\n    Selection.prototype.getSelectedRows = function () {\n        return this.parent.treeGrid.getSelectedRows();\n    };\n    /**\n     * Deselects the current selected rows and cells.\n     *\n     * @returns {void} .\n     */\n    Selection.prototype.clearSelection = function () {\n        this.addRemoveClass(this.selectedRowIndexes);\n        this.parent.treeGrid.clearSelection();\n        this.parent.selectedRowIndex = -1;\n        this.selectedRowIndexes = [];\n        this.selectedClass = null;\n        if (!isNullOrUndefined(this.parent.toolbarModule)) {\n            this.parent.toolbarModule.refreshToolbarItems();\n        }\n        this.isInteracted = false;\n    };\n    Selection.prototype.highlightSelectedRows = function (e, fromChart) {\n        this.isMultiCtrlRequest = e.ctrlKey || this.enableSelectMultiTouch;\n        this.isMultiShiftRequest = e.shiftKey;\n        this.actualTarget = e.target;\n        this.isInteracted = true;\n        this.isSelectionFromChart = fromChart;\n        if (fromChart) {\n            var selectedRow = closest(e.target, 'tr.e-chart-row');\n            var rIndex = parseInt(selectedRow.getAttribute('data-rowindex'), 10);\n            var isToggle = this.parent.selectionSettings.enableToggle;\n            if (this.parent.selectionSettings.type === 'Single' || (!this.isMultiCtrlRequest && !this.isMultiShiftRequest)) {\n                if (this.parent.selectionSettings.persistSelection) {\n                    this.addRemoveClass(this.selectedRowIndexes, e['name']);\n                }\n                if (!this.parent.allowTaskbarDragAndDrop || (this.parent.allowTaskbarDragAndDrop && (this.parent.rowDragAndDropModule &&\n                    !this.parent.rowDragAndDropModule['draggedRecord']))) {\n                    this.isFromChart = true;\n                    this.selectRow(rIndex, isToggle);\n                }\n            }\n            else {\n                if (this.isMultiShiftRequest) {\n                    this.selectRowsByRange(isNullOrUndefined(this.prevRowIndex) ? rIndex : this.prevRowIndex, rIndex);\n                }\n                else {\n                    setValue('isMultiCtrlRequest', true, this.parent.treeGrid.grid.selectionModule);\n                    this.parent.treeGrid.grid.selectionModule.addRowsToSelection([rIndex]);\n                    var isUnSelected = this.selectedRowIndexes.indexOf(rIndex) > -1;\n                    if (isUnSelected) {\n                        this.addRemoveClass([rIndex], e['name']);\n                    }\n                }\n            }\n        }\n    };\n    Selection.prototype.getselectedrowsIndex = function (startIndex, endIndex) {\n        var indexes = [];\n        // eslint-disable-next-line\n        var _a = (startIndex < endIndex) ?\n            { i: startIndex, max: endIndex } : { i: endIndex, max: startIndex }, i = _a.i, max = _a.max;\n        for (; i <= max; i++) {\n            indexes.push(i);\n        }\n        if (startIndex > endIndex) {\n            indexes.reverse();\n        }\n        this.selectedRowIndexes = indexes;\n    };\n    /**\n     * Selects a range of rows from start and end row indexes.\n     *\n     * @param  {number} startIndex - Defines the start row index.\n     * @param  {number} endIndex - Defines the end row index.\n     * @returns {void} .\n     */\n    Selection.prototype.selectRowsByRange = function (startIndex, endIndex) {\n        this.isSelectionFromChart = true;\n        this.getselectedrowsIndex(startIndex, endIndex);\n        this.selectRows(this.selectedRowIndexes);\n    };\n    Selection.prototype.addRemoveClass = function (records, request) {\n        if (typeof (records) == 'number') {\n            records = [records];\n        }\n        var ganttRow = [].slice.call(this.parent.ganttChartModule.chartBodyContent.querySelector('tbody').children);\n        var _loop_2 = function (i) {\n            var selectedRow = ganttRow.filter(function (e) {\n                return parseInt(e.getAttribute('data-rowindex'), 10) === records[parseInt(i.toString(), 10)];\n            })[0];\n            if (!isNullOrUndefined(selectedRow)) {\n                var persist = false;\n                var index = this_2.getSelectedRowIndexes().indexOf(records[parseInt(i.toString(), 10)]);\n                var selectedRecordLen = this_2.getSelectedRecords().length;\n                if (this_2.parent.selectionSettings.persistSelection && this_2.parent.selectionSettings.enableToggle &&\n                    !isNullOrUndefined(request) && this_2.parent.selectionSettings.type !== 'Multiple' &&\n                    selectedRecordLen > 0) {\n                    persist = true;\n                }\n                if (this_2.parent.selectionSettings.enableToggle && this_2.parent.selectionSettings.persistSelection &&\n                    (index > -1 && this_2.parent.selectionSettings.type === 'Single' && persist) ||\n                    (index > -1 && ((!isNullOrUndefined(request) && this_2.parent.selectionSettings.type === 'Multiple')))) {\n                    this_2.addClass(selectedRow);\n                }\n                else if (isNullOrUndefined(request)) {\n                    this_2.removeClass(selectedRow);\n                }\n                else if (index > -1) {\n                    this_2.addClass(selectedRow);\n                }\n                if ((this_2.parent.selectionSettings.type === 'Single' || (!this_2.isMultiCtrlRequest && !this_2.isMultiShiftRequest)) && index > -1 && this_2.parent.selectionSettings.persistSelection &&\n                    request === 'chartMouseUp' && this_2.isSelectionFromChart) {\n                    this_2.removeClass(selectedRow);\n                }\n            }\n        };\n        var this_2 = this;\n        for (var i = 0; i < records.length; i++) {\n            _loop_2(i);\n        }\n    };\n    Selection.prototype.addClass = function (selectedRow) {\n        addClass([selectedRow], 'e-active');\n        selectedRow.setAttribute('aria-selected', 'true');\n    };\n    Selection.prototype.removeClass = function (selectedRow) {\n        removeClass([selectedRow], 'e-active');\n        selectedRow.removeAttribute('aria-selected');\n    };\n    Selection.prototype.showPopup = function (e) {\n        if (this.isSelectionFromChart) {\n            setCssInGridPopUp(this.parent.element.querySelector('.e-ganttpopup'), e, 'e-rowselect e-icons e-icon-rowselect' +\n                ((this.enableSelectMultiTouch &&\n                    (this.getSelectedRecords().length > 1 || this.getSelectedRowCellIndexes().length > 1)) ? ' e-spanclicked' : ''));\n            document.getElementsByClassName('e-gridpopup')[0].style.display = 'none';\n            this.openPopup = true;\n        }\n        else if (this.selectedRowIndexes.length === 0) {\n            this.hidePopUp();\n        }\n    };\n    /**\n     * @returns {void} .\n     * @private\n     */\n    Selection.prototype.hidePopUp = function () {\n        if (this.openPopup) {\n            document.getElementsByClassName('e-ganttpopup')[0].style.display = 'none';\n            this.openPopup = false;\n        }\n        else {\n            document.getElementsByClassName('e-gridpopup')[0].style.display = 'none';\n        }\n    };\n    Selection.prototype.popUpClickHandler = function (e) {\n        var target = e.target;\n        var grid = this.parent.treeGrid.grid;\n        var $popUpElemet = closest(target, '.e-ganttpopup') ?\n            closest(target, '.e-ganttpopup') : closest(target, '.e-gridpopup');\n        if ($popUpElemet) {\n            var spanElement = $popUpElemet.querySelector('.' + 'e-rowselect');\n            if (closest(target, '.e-ganttpopup') &&\n                !spanElement.classList.contains('e-spanclicked')) {\n                this.enableSelectMultiTouch = true;\n                spanElement.classList.add('e-spanclicked');\n            }\n            else if (closest(target, '.e-gridpopup') &&\n                spanElement.classList.contains('e-spanclicked')) {\n                this.openPopup = true;\n                this.enableSelectMultiTouch = true;\n            }\n            else {\n                this.hidePopUp();\n                this.enableSelectMultiTouch = false;\n                if (closest(target, '.e-ganttpopup')) {\n                    spanElement.classList.remove('e-spanclicked');\n                }\n            }\n        }\n        else if (this.parent.selectionSettings.type === 'Multiple' && this.parent.isAdaptive) {\n            var $tr = closest(target, '.e-rowcell');\n            if ($tr && this.selectedRowIndexes.length === 0) {\n                this.hidePopUp();\n            }\n        }\n        if (grid) {\n            setValue('enableSelectMultiTouch', this.enableSelectMultiTouch, grid.selectionModule);\n        }\n    };\n    /**\n     * @param {PointerEvent} e .\n     * @returns {void} .\n     * @private\n     */\n    Selection.prototype.mouseUpHandler = function (e) {\n        var isTaskbarEdited = false;\n        var elements = document.querySelectorAll('.e-drag-item');\n        var targetElement = null;\n        if (e.target.closest('.e-rowcell')) {\n            targetElement = e.target;\n        }\n        else if (e.target.closest('.e-chart-row')) {\n            targetElement = e.target.closest('.e-left-label-container') ||\n                e.target.closest('.e-taskbar-main-container') || e.target.closest('.e-right-label-container');\n        }\n        if (this.parent.focusModule) {\n            this.parent.focusModule.setActiveElement(targetElement);\n        }\n        if (this.parent.editModule && this.parent.editSettings.allowTaskbarEditing && this.parent.editModule.taskbarEditModule) {\n            var taskbarEdit = this.parent.editModule.taskbarEditModule;\n            if (taskbarEdit.isMouseDragged || taskbarEdit.tapPointOnFocus) {\n                isTaskbarEdited = true;\n            }\n        }\n        if (!isTaskbarEdited && this.parent.element.contains(e.target) && !(elements.length === 1)) {\n            var parent_1 = parentsUntil(e.target, 'e-chart-row');\n            var isSelected = e.target.classList.contains('e-rowcell') ||\n                e.target.classList.contains('e-row') ||\n                e.target.classList.contains('e-treegridexpand') ||\n                e.target.classList.contains('e-treegridcollapse') || !isNullOrUndefined(parent_1);\n            this.popUpClickHandler(e);\n            if (this.parent.selectionSettings.mode !== 'Cell' && isSelected) {\n                if (closest(e.target, 'tr.e-chart-row')) {\n                    if (this.parent.enableVirtualization) {\n                        this.parent.treeGrid.grid.selectionModule.isInteracted = true;\n                    }\n                    this.parent.treeGrid['isFromChartSide'] = true;\n                    this.highlightSelectedRows(e, true);\n                }\n                else {\n                    this.parent.treeGrid['isFromChartSide'] = false;\n                    this.highlightSelectedRows(e, false);\n                }\n                if (this.parent.selectionSettings.type === 'Multiple' && this.parent.isAdaptive) {\n                    if (this.selectedRowIndexes.length > 0) {\n                        this.showPopup(e);\n                    }\n                    else {\n                        this.hidePopUp();\n                    }\n                }\n            }\n            else {\n                this.isSelectionFromChart = false;\n            }\n        }\n    };\n    /**\n     * To add class for selected records in virtualization mode.\n     *\n     * @param {number} i .\n     * @returns {void} .\n     * @hidden\n     */\n    Selection.prototype.maintainSelectedRecords = function (i) {\n        var index = this.parent.selectionModule.getSelectedRowIndexes().indexOf(i);\n        if (index > -1) {\n            this.addRemoveClass([i]);\n        }\n    };\n    /**\n     * To destroy the selection module.\n     *\n     * @returns {void} .\n     * @private\n     */\n    Selection.prototype.destroy = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('selectRowByIndex', this.selectRowByIndex);\n        if (this.parent.isAdaptive) {\n            this.parent.off('chartMouseClick', this.mouseUpHandler);\n            this.parent.off('treeGridClick', this.popUpClickHandler);\n        }\n        else {\n            this.parent.off('chartMouseUp', this.mouseUpHandler);\n        }\n    };\n    return Selection;\n}());\nexport { Selection };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}