{"ast":null,"code":"export default {\n  name: 'ProgressBar',\n  inject: ['root'],\n  props: ['task'],\n  data() {\n    return {};\n  },\n  computed: {\n    /**\n     * Get progress width\n     *\n     * @returns {string}\n     */\n    getProgressWidth() {\n      return this.task.progress + '%';\n    },\n    /**\n     * Get line points\n     *\n     * @returns {string}\n     */\n    getLinePoints() {\n      const start = this.task.width / 100 * this.task.progress;\n      return `M ${start} 0 L ${start} ${this.task.height}`;\n    },\n    /**\n     * Get solid style\n     *\n     * @returns {object}\n     */\n    getSolidStyle() {\n      return Object.assign({}, this.root.state.options.chart.progress.styles.bar.solid, this.task.progressBarStyle.bar);\n    },\n    /**\n     * Get line style\n     *\n     * @returns {object}\n     */\n    getLineStyle() {\n      return Object.assign({}, {\n        stroke: this.root.state.options.row.styles.bar.stroke + 'a0',\n        'stroke-width': this.root.state.options.row.styles.bar['stroke-width'] / 2\n      }, this.task.style);\n    }\n  }\n};","map":{"version":3,"names":["name","inject","props","data","computed","getProgressWidth","task","progress","getLinePoints","start","width","height","getSolidStyle","Object","assign","root","state","options","chart","styles","bar","solid","progressBarStyle","getLineStyle","stroke","row","style"],"sources":["/var/www/vue/vue-gantt-chart/node_modules/gantt-elastic/src/components/Chart/ProgressBar.vue"],"sourcesContent":["<!--\n/**\n * @fileoverview ProgressBar component\n * @license MIT\n * @author Rafal Pospiech <neuronet.io@gmail.com>\n * @package GanttElastic\n */\n-->\n<template>\n  <g\n    class=\"gantt-elastic__chart-row-progress-bar-wrapper\"\n    :style=\"{ ...root.style['chart-row-progress-bar-wrapper'], ...task.style['chart-row-progress-bar-wrapper'] }\"\n  >\n    <defs>\n      <pattern\n        id=\"diagonalHatch\"\n        :width=\"root.state.options.chart.progress.width\"\n        :height=\"root.state.options.chart.progress.width\"\n        patternTransform=\"rotate(45 0 0)\"\n        patternUnits=\"userSpaceOnUse\"\n      >\n        <line\n          class=\"chart-row-progress-bar-line\"\n          :style=\"{ ...root.style['chart-row-progress-bar-line'], ...task.style['chart-row-progress-bar-line'] }\"\n          x1=\"0\"\n          y1=\"0\"\n          x2=\"0\"\n          :y2=\"root.state.options.chart.progress.width\"\n        />\n      </pattern>\n    </defs>\n    <rect\n      v-if=\"root.state.options.chart.progress.bar\"\n      class=\"gantt-elastic__chart-row-progress-bar-solid\"\n      :style=\"{ ...root.style['chart-row-progress-bar-solid'], ...task.style['chart-row-progress-bar-solid'] }\"\n      x=\"0\"\n      y=\"0\"\n      :width=\"getProgressWidth\"\n    ></rect>\n    <g v-if=\"root.state.options.chart.progress.pattern\">\n      <rect\n        class=\"gantt-elastic__chart-row-progress-bar-pattern\"\n        :style=\"{ ...root.style['chart-row-progress-bar-pattern'], ...task.style['chart-row-progress-bar-pattern'] }\"\n        :x=\"getProgressWidth\"\n        y=\"0\"\n        :width=\"100 - task.progress + '%'\"\n        height=\"100%\"\n      ></rect>\n      <path\n        class=\"gantt-elastic__chart-row-progress-bar-outline\"\n        :style=\"{\n          ...root.style['chart-row-progress-bar-outline'],\n          ...task.style['base'],\n          ...task.style['chart-row-progress-bar-outline']\n        }\"\n        :d=\"getLinePoints\"\n      ></path>\n    </g>\n  </g>\n</template>\n\n<script>\nexport default {\n  name: 'ProgressBar',\n  inject: ['root'],\n  props: ['task'],\n  data() {\n    return {};\n  },\n\n  computed: {\n    /**\n     * Get progress width\n     *\n     * @returns {string}\n     */\n    getProgressWidth() {\n      return this.task.progress + '%';\n    },\n\n    /**\n     * Get line points\n     *\n     * @returns {string}\n     */\n    getLinePoints() {\n      const start = (this.task.width / 100) * this.task.progress;\n      return `M ${start} 0 L ${start} ${this.task.height}`;\n    },\n\n    /**\n     * Get solid style\n     *\n     * @returns {object}\n     */\n    getSolidStyle() {\n      return Object.assign({}, this.root.state.options.chart.progress.styles.bar.solid, this.task.progressBarStyle.bar);\n    },\n\n    /**\n     * Get line style\n     *\n     * @returns {object}\n     */\n    getLineStyle() {\n      return Object.assign(\n        {},\n        {\n          stroke: this.root.state.options.row.styles.bar.stroke + 'a0',\n          'stroke-width': this.root.state.options.row.styles.bar['stroke-width'] / 2\n        },\n        this.task.style\n      );\n    }\n  }\n};\n</script>\n"],"mappings":"AA8DA,eAAe;EACbA,IAAI,EAAE,aAAa;EACnBC,MAAM,EAAE,CAAC,MAAM,CAAC;EAChBC,KAAK,EAAE,CAAC,MAAM,CAAC;EACfC,IAAIA,CAAA,EAAG;IACL,OAAO,CAAC,CAAC;EACX,CAAC;EAEDC,QAAQ,EAAE;IACR;;;;;IAKAC,gBAAgBA,CAAA,EAAG;MACjB,OAAO,IAAI,CAACC,IAAI,CAACC,QAAO,GAAI,GAAG;IACjC,CAAC;IAED;;;;;IAKAC,aAAaA,CAAA,EAAG;MACd,MAAMC,KAAI,GAAK,IAAI,CAACH,IAAI,CAACI,KAAI,GAAI,GAAG,GAAI,IAAI,CAACJ,IAAI,CAACC,QAAQ;MAC1D,OAAO,KAAKE,KAAK,QAAQA,KAAK,IAAI,IAAI,CAACH,IAAI,CAACK,MAAM,EAAE;IACtD,CAAC;IAED;;;;;IAKAC,aAAaA,CAAA,EAAG;MACd,OAAOC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAACC,IAAI,CAACC,KAAK,CAACC,OAAO,CAACC,KAAK,CAACX,QAAQ,CAACY,MAAM,CAACC,GAAG,CAACC,KAAK,EAAE,IAAI,CAACf,IAAI,CAACgB,gBAAgB,CAACF,GAAG,CAAC;IACnH,CAAC;IAED;;;;;IAKAG,YAAYA,CAAA,EAAG;MACb,OAAOV,MAAM,CAACC,MAAM,CAClB,CAAC,CAAC,EACF;QACEU,MAAM,EAAE,IAAI,CAACT,IAAI,CAACC,KAAK,CAACC,OAAO,CAACQ,GAAG,CAACN,MAAM,CAACC,GAAG,CAACI,MAAK,GAAI,IAAI;QAC5D,cAAc,EAAE,IAAI,CAACT,IAAI,CAACC,KAAK,CAACC,OAAO,CAACQ,GAAG,CAACN,MAAM,CAACC,GAAG,CAAC,cAAc,IAAI;MAC3E,CAAC,EACD,IAAI,CAACd,IAAI,CAACoB,KACZ,CAAC;IACH;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}