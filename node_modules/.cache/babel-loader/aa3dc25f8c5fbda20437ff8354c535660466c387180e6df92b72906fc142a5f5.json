{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nexport default {\n  name: 'Grid',\n  inject: ['root'],\n  data() {\n    return {};\n  },\n  /**\n   * Created\n   */\n  created() {\n    this.root.$on('recenterPosition', this.recenterPosition);\n  },\n  /**\n   * Mounted\n   */\n  mounted() {\n    this.$nextTick(() => {\n      this.$nextTick(() => {\n        // because of stupid slider :/\n        this.root.scrollToTime(this.timeLinePosition.time);\n      });\n    });\n  },\n  methods: {\n    /**\n     * Recenter position - go to current time line\n     */\n    recenterPosition() {\n      this.root.scrollToTime(this.timeLinePosition.time);\n    }\n  },\n  computed: {\n    /**\n     * Generate vertical lines of the grid\n     *\n     * @returns {array}\n     */\n    verticalLines() {\n      let lines = [];\n      const state = this.root.state;\n      state.options.times.steps.forEach(step => {\n        if (this.root.isInsideViewPort(step.offset.px, 1)) {\n          lines.push({\n            key: step.time,\n            x1: step.offset.px,\n            y1: 0,\n            x2: step.offset.px,\n            y2: state.tasks.length * (state.options.row.height + state.options.chart.grid.horizontal.gap * 2) + this.root.style['grid-line-vertical']['stroke-width']\n          });\n        }\n      });\n      return lines;\n    },\n    /**\n     * Generate horizontal lines of the grid\n     *\n     * @returns {array}\n     */\n    horizontalLines() {\n      let lines = [];\n      const state = this.root.state.options;\n      let tasks = this.root.visibleTasks;\n      for (let index = 0, len = tasks.length; index <= len; index++) {\n        const y = index * (state.row.height + state.chart.grid.horizontal.gap * 2) + this.root.style['grid-line-vertical']['stroke-width'] / 2;\n        lines.push({\n          key: 'hl' + index,\n          x1: 0,\n          y1: y,\n          x2: '100%',\n          y2: y\n        });\n      }\n      return lines;\n    },\n    /**\n     * Check if specified line is inside viewport (visible)\n     *\n     * @returns {function}\n     */\n    inViewPort() {\n      return line => {\n        const state = this.root.state.options;\n        return line.x1 >= state.scroll.chart.left && line.x1 <= state.scroll.chart.right;\n      };\n    },\n    /**\n     * Get current time line position\n     *\n     * @returns {object}\n     */\n    timeLinePosition() {\n      const d = new Date();\n      const current = d.getTime();\n      const currentOffset = this.root.timeToPixelOffsetX(current);\n      const timeLine = {\n        x: 0,\n        y1: 0,\n        y2: '100%',\n        dateTime: '',\n        time: current\n      };\n      timeLine.x = currentOffset;\n      timeLine.dateTime = d.toLocaleDateString();\n      return timeLine;\n    }\n  }\n};","map":{"version":3,"names":["name","inject","data","created","root","$on","recenterPosition","mounted","$nextTick","scrollToTime","timeLinePosition","time","methods","computed","verticalLines","lines","state","options","times","steps","forEach","step","isInsideViewPort","offset","px","push","key","x1","y1","x2","y2","tasks","length","row","height","chart","grid","horizontal","gap","style","horizontalLines","visibleTasks","index","len","y","inViewPort","line","scroll","left","right","d","Date","current","getTime","currentOffset","timeToPixelOffsetX","timeLine","x","dateTime","toLocaleDateString"],"sources":["/var/www/vue/vue-gantt-chart/node_modules/gantt-elastic/src/components/Chart/Grid.vue"],"sourcesContent":["<!--\n/**\n * @fileoverview Grid component\n * @license MIT\n * @author Rafal Pospiech <neuronet.io@gmail.com>\n * @package GanttElastic\n */\n-->\n<template>\n  <svg\n    class=\"gantt-elastic__grid-lines-wrapper\"\n    :style=\"{ ...root.style['grid-lines-wrapper'] }\"\n    ref=\"chart\"\n    x=\"0\"\n    y=\"0\"\n    :width=\"root.state.options.width\"\n    :height=\"root.state.options.allVisibleTasksHeight\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g class=\"gantt-elastic__grid-lines\" :style=\"{ ...root.style['grid-lines'] }\">\n      <line\n        class=\"gantt-elastic__grid-line-horizontal\"\n        :style=\"{ ...root.style['grid-line-horizontal'] }\"\n        v-for=\"line in horizontalLines\"\n        :key=\"line.key\"\n        :x1=\"line.x1\"\n        :y1=\"line.y1\"\n        :x2=\"line.x2\"\n        :y2=\"line.y2\"\n      ></line>\n      <line\n        class=\"gantt-elastic__grid-line-vertical\"\n        :style=\"{ ...root.style['grid-line-vertical'] }\"\n        v-for=\"line in verticalLines\"\n        :key=\"line.key\"\n        :x1=\"line.x1\"\n        :y1=\"line.y1\"\n        :x2=\"line.x2\"\n        :y2=\"line.y2\"\n      ></line>\n      <line\n        class=\"gantt-elastic__grid-line-time\"\n        :style=\"{ ...root.style['grid-line-time'] }\"\n        :x1=\"timeLinePosition.x\"\n        :y1=\"timeLinePosition.y1\"\n        :x2=\"timeLinePosition.x\"\n        :y2=\"timeLinePosition.y2\"\n      ></line>\n    </g>\n  </svg>\n</template>\n\n<script>\nexport default {\n  name: 'Grid',\n  inject: ['root'],\n  data() {\n    return {};\n  },\n  /**\n   * Created\n   */\n  created() {\n    this.root.$on('recenterPosition', this.recenterPosition);\n  },\n\n  /**\n   * Mounted\n   */\n  mounted() {\n    this.$nextTick(() => {\n      this.$nextTick(() => {\n        // because of stupid slider :/\n        this.root.scrollToTime(this.timeLinePosition.time);\n      });\n    });\n  },\n\n  methods: {\n    /**\n     * Recenter position - go to current time line\n     */\n    recenterPosition() {\n      this.root.scrollToTime(this.timeLinePosition.time);\n    }\n  },\n\n  computed: {\n    /**\n     * Generate vertical lines of the grid\n     *\n     * @returns {array}\n     */\n    verticalLines() {\n      let lines = [];\n      const state = this.root.state;\n      state.options.times.steps.forEach(step => {\n        if (this.root.isInsideViewPort(step.offset.px, 1)) {\n          lines.push({\n            key: step.time,\n            x1: step.offset.px,\n            y1: 0,\n            x2: step.offset.px,\n            y2:\n              state.tasks.length * (state.options.row.height + state.options.chart.grid.horizontal.gap * 2) +\n              this.root.style['grid-line-vertical']['stroke-width']\n          });\n        }\n      });\n      return lines;\n    },\n\n    /**\n     * Generate horizontal lines of the grid\n     *\n     * @returns {array}\n     */\n    horizontalLines() {\n      let lines = [];\n      const state = this.root.state.options;\n      let tasks = this.root.visibleTasks;\n      for (let index = 0, len = tasks.length; index <= len; index++) {\n        const y =\n          index * (state.row.height + state.chart.grid.horizontal.gap * 2) +\n          this.root.style['grid-line-vertical']['stroke-width'] / 2;\n        lines.push({\n          key: 'hl' + index,\n          x1: 0,\n          y1: y,\n          x2: '100%',\n          y2: y\n        });\n      }\n      return lines;\n    },\n\n    /**\n     * Check if specified line is inside viewport (visible)\n     *\n     * @returns {function}\n     */\n    inViewPort() {\n      return line => {\n        const state = this.root.state.options;\n        return line.x1 >= state.scroll.chart.left && line.x1 <= state.scroll.chart.right;\n      };\n    },\n\n    /**\n     * Get current time line position\n     *\n     * @returns {object}\n     */\n    timeLinePosition() {\n      const d = new Date();\n      const current = d.getTime();\n      const currentOffset = this.root.timeToPixelOffsetX(current);\n      const timeLine = {\n        x: 0,\n        y1: 0,\n        y2: '100%',\n        dateTime: '',\n        time: current\n      };\n      timeLine.x = currentOffset;\n      timeLine.dateTime = d.toLocaleDateString();\n      return timeLine;\n    }\n  }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}