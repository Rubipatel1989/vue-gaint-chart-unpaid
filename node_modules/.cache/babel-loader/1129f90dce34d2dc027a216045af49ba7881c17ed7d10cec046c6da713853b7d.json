{"ast":null,"code":"import { getValue, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Tooltip } from '@syncfusion/ej2-popups';\nimport * as cls from '../base/css-constants';\n/**\n * File for handling taskbar editing tooltip in Gantt.\n */\nvar EditTooltip = /** @class */function () {\n  function EditTooltip(gantt, taskbarEdit) {\n    this.parent = gantt;\n    this.taskbarEdit = taskbarEdit;\n  }\n  /**\n   * To create tooltip.\n   *\n   * @param {string} opensOn .\n   * @param {boolean} mouseTrail .\n   * @param {string} target .\n   * @returns {void}\n   * @private\n   */\n  EditTooltip.prototype.createTooltip = function (opensOn, mouseTrail, target) {\n    var _this = this;\n    this.toolTipObj = new Tooltip({\n      opensOn: opensOn,\n      position: 'TopRight',\n      enableRtl: this.parent.enableRtl,\n      mouseTrail: mouseTrail,\n      cssClass: cls.ganttTooltip,\n      target: target ? target : null,\n      animation: {\n        open: {\n          effect: 'None'\n        },\n        close: {\n          effect: 'None'\n        }\n      }\n    });\n    this.toolTipObj.beforeRender = function (args) {\n      var argsData = {\n        data: _this.taskbarEdit.taskBarEditRecord,\n        args: args,\n        content: _this.toolTipObj.content\n      };\n      _this.parent.trigger('beforeTooltipRender', argsData);\n    };\n    this.toolTipObj.afterOpen = function (args) {\n      _this.updateTooltipPosition(args);\n    };\n    this.toolTipObj.isStringTemplate = true;\n    this.toolTipObj.appendTo(this.parent.chartPane);\n  };\n  /**\n   * Method to update tooltip position\n   *\n   * @param {TooltipEventArgs} args .\n   * @returns {void} .\n   */\n  EditTooltip.prototype.updateTooltipPosition = function (args) {\n    args.element.style.visibility = 'visible';\n    var parentWithZoomStyle = this.parent.element.closest('[style*=\"zoom\"]');\n    if (isNullOrUndefined(parentWithZoomStyle)) {\n      var containerPosition = this.parent.getOffsetRect(this.parent.chartPane);\n      var leftEnd = containerPosition.left + this.parent.chartPane.offsetWidth;\n      var tooltipPositionX = args.element.offsetLeft;\n      if (leftEnd < tooltipPositionX + args.element.offsetWidth) {\n        tooltipPositionX += leftEnd - (tooltipPositionX + args.element.offsetWidth);\n      }\n      args.element.style.left = tooltipPositionX + 'px';\n      args.element.style.visibility = 'visible';\n    }\n  };\n  /**\n   * To show/hide taskbar edit tooltip.\n   *\n   * @param {boolean} bool .\n   * @param {number} segmentIndex .\n   * @returns {void}\n   * @private\n   */\n  EditTooltip.prototype.showHideTaskbarEditTooltip = function (bool, segmentIndex) {\n    if (bool && this.parent.tooltipSettings.showTooltip) {\n      this.createTooltip('Custom', false);\n      this.parent.tooltipModule.toolTipObj.close();\n      this.updateTooltip(segmentIndex);\n      if (this.taskbarEdit.connectorSecondAction === 'ConnectorPointLeftDrag') {\n        this.toolTipObj.open(this.taskbarEdit.connectorSecondElement.querySelector('.' + cls.connectorPointLeft));\n      } else if (this.taskbarEdit.connectorSecondAction === 'ConnectorPointRightDrag') {\n        this.toolTipObj.open(this.taskbarEdit.connectorSecondElement.querySelector('.' + cls.connectorPointRight));\n      } else {\n        this.toolTipObj.open(this.taskbarEdit.taskBarEditElement);\n      }\n    } else if (!isNullOrUndefined(this.toolTipObj)) {\n      this.toolTipObj.destroy();\n      this.toolTipObj = null;\n    }\n  };\n  /**\n   * To update tooltip content and position.\n   *\n   * @param {number} segmentIndex .\n   * @returns {void} .\n   * @private\n   */\n  EditTooltip.prototype.updateTooltip = function (segmentIndex) {\n    var ganttProp = this.taskbarEdit.taskBarEditRecord.ganttProperties;\n    var taskWidth = isNullOrUndefined(segmentIndex) || segmentIndex === -1 ? ganttProp.width : ganttProp.segments[segmentIndex].width;\n    var progressWidth = isNullOrUndefined(segmentIndex) || segmentIndex === -1 ? ganttProp.progressWidth : ganttProp.segments[segmentIndex].progressWidth;\n    var left = isNullOrUndefined(segmentIndex) || segmentIndex === -1 ? ganttProp.left : ganttProp.left + ganttProp.segments[segmentIndex].left;\n    if (!isNullOrUndefined(this.toolTipObj)) {\n      if (this.taskbarEdit.taskBarEditAction === 'ConnectorPointLeftDrag' || this.taskbarEdit.taskBarEditAction === 'ConnectorPointRightDrag') {\n        this.toolTipObj.content = this.getTooltipText(segmentIndex);\n        this.toolTipObj.offsetY = -3;\n      } else {\n        this.toolTipObj.content = this.getTooltipText(segmentIndex);\n        if (ganttProp.segments && ganttProp.segments.length > 0 && this.taskbarEdit['mainElement'] && this.taskbarEdit.taskBarEditAction === 'ProgressResizing') {\n          var segments = this.taskbarEdit['mainElement'].querySelectorAll('.e-segmented-taskbar');\n          this.toolTipObj.refresh(segments[segmentIndex]);\n        } else {\n          this.toolTipObj.refresh(this.taskbarEdit.taskBarEditElement);\n        }\n        if (this.taskbarEdit.taskBarEditAction === 'LeftResizing') {\n          if (this.parent.enableRtl) {\n            this.toolTipObj.offsetX = 0;\n          } else {\n            this.toolTipObj.offsetX = -taskWidth;\n          }\n        } else if (this.taskbarEdit.taskBarEditAction === 'RightResizing' || this.taskbarEdit.taskBarEditAction === 'ParentResizing') {\n          if (this.parent.enableRtl) {\n            this.toolTipObj.offsetX = -taskWidth;\n          } else {\n            this.toolTipObj.offsetX = 0;\n          }\n        } else if (this.taskbarEdit.taskBarEditAction === 'ProgressResizing') {\n          if (this.parent.enableRtl) {\n            this.toolTipObj.offsetX = -progressWidth;\n          } else {\n            this.toolTipObj.offsetX = -(taskWidth - progressWidth);\n          }\n        } else if (this.taskbarEdit.taskBarEditAction === 'MilestoneDrag') {\n          this.toolTipObj.offsetX = -(this.parent.chartRowsModule.milestoneHeight / 2);\n        } else if (taskWidth > 5) {\n          this.toolTipObj.offsetX = -(taskWidth + left - this.taskbarEdit.tooltipPositionX);\n        }\n      }\n    }\n  };\n  /**\n   * To get updated tooltip text.\n   *\n   * @param {number} segmentIndex .\n   * @returns {void} .\n   * @private\n   */\n  EditTooltip.prototype.getTooltipText = function (segmentIndex) {\n    var tooltipString = '';\n    var instance = this.parent.globalize;\n    var editRecord = this.taskbarEdit.taskBarEditRecord.ganttProperties;\n    if (!isNullOrUndefined(editRecord.segments) && editRecord.segments.length > 0 && segmentIndex !== -1 && this.taskbarEdit.taskBarEditAction !== 'ProgressResizing') {\n      editRecord = editRecord.segments[segmentIndex];\n    }\n    if (this.parent.tooltipSettings.editing) {\n      var templateNode = this.parent.tooltipModule.templateCompiler(this.parent.tooltipSettings.editing, this.parent, this.taskbarEdit.taskBarEditRecord, 'TooltipEditingTemplate');\n      if (getValue('tooltipEle', this.toolTipObj)) {\n        this.parent.renderTemplates();\n      }\n      tooltipString = templateNode[0];\n    } else {\n      var startDate = void 0;\n      var endDate = void 0;\n      var duration = void 0;\n      if (!isNullOrUndefined(editRecord.startDate)) {\n        startDate = '<tr><td class = \"e-gantt-tooltip-label\">' + this.parent.localeObj.getConstant('startDate') + '</td><td style=\"padding: 2px;\">:</td><td class = \"e-gantt-tooltip-value\">' + instance.formatDate(editRecord.startDate, {\n          format: this.parent.getDateFormat()\n        }) + '</td></tr>';\n      }\n      if (!isNullOrUndefined(editRecord.endDate)) {\n        endDate = '<tr><td class = \"e-gantt-tooltip-label\">' + this.parent.localeObj.getConstant('endDate') + '</td><td style=\"padding: 2px;\">:</td><td class = \"e-gantt-tooltip-value\">' + instance.formatDate(editRecord.endDate, {\n          format: this.parent.getDateFormat()\n        }) + '</td></tr>';\n      }\n      if (!isNullOrUndefined(editRecord.duration)) {\n        duration = '<tr><td class = \"e-gantt-tooltip-label\">' + this.parent.localeObj.getConstant('duration') + '</td><td style=\"padding: 2px;\">:</td><td class = \"e-gantt-tooltip-value\">' + this.parent.getDurationString(editRecord.duration, editRecord.durationUnit) + '</td></tr>';\n      }\n      switch (this.taskbarEdit.taskBarEditAction) {\n        case 'ProgressResizing':\n          {\n            var progress = '<tr><td class = \"e-gantt-tooltip-label\">' + this.parent.localeObj.getConstant('progress') + '</td><td style=\"padding: 2px;\">:</td><td class = \"e-gantt-tooltip-value\">' + editRecord.progress + '</td></tr>';\n            tooltipString = '<table class = \"e-gantt-tooltiptable\"><tbody>' + progress + '</tbody></table>';\n            break;\n          }\n        case 'LeftResizing':\n          {\n            tooltipString = '<table class = \"e-gantt-tooltiptable\"><tbody>' + startDate + duration + '</tbody></table>';\n            break;\n          }\n        case 'RightResizing':\n        case 'ParentResizing':\n          {\n            tooltipString = '<table class = \"e-gantt-tooltiptable\"><tbody>' + endDate + duration + '</tbody></table>';\n            break;\n          }\n        case 'ChildDrag':\n        case 'ParentDrag':\n        case 'MilestoneDrag':\n        case 'ManualParentDrag':\n          {\n            var sDate = '';\n            var eDate = '';\n            if (!isNullOrUndefined(this.taskbarEdit.taskBarEditRecord.ganttProperties.startDate)) {\n              sDate = startDate;\n            }\n            if (!isNullOrUndefined(this.taskbarEdit.taskBarEditRecord.ganttProperties.endDate)) {\n              eDate = endDate;\n            }\n            tooltipString = '<table class = \"e-gantt-tooltiptable\"><tbody>' + sDate + eDate + '</tbody></table>';\n            break;\n          }\n        case 'ConnectorPointLeftDrag':\n        case 'ConnectorPointRightDrag':\n          {\n            tooltipString = this.parent.connectorLineModule.tooltipTable;\n            if (isNullOrUndefined(this.toolTipObj)) {\n              this.parent.connectorLineModule.tooltipTable.innerHTML = this.parent.connectorLineModule.getConnectorLineTooltipInnerTd(this.parent.editModule.taskbarEditModule.taskBarEditRecord.ganttProperties.taskName, this.parent.editModule.taskbarEditModule.fromPredecessorText, '', '');\n            }\n            break;\n          }\n      }\n    }\n    return tooltipString;\n  };\n  return EditTooltip;\n}();\nexport { EditTooltip };","map":{"version":3,"names":["getValue","isNullOrUndefined","Tooltip","cls","EditTooltip","gantt","taskbarEdit","parent","prototype","createTooltip","opensOn","mouseTrail","target","_this","toolTipObj","position","enableRtl","cssClass","ganttTooltip","animation","open","effect","close","beforeRender","args","argsData","data","taskBarEditRecord","content","trigger","afterOpen","updateTooltipPosition","isStringTemplate","appendTo","chartPane","element","style","visibility","parentWithZoomStyle","closest","containerPosition","getOffsetRect","leftEnd","left","offsetWidth","tooltipPositionX","offsetLeft","showHideTaskbarEditTooltip","bool","segmentIndex","tooltipSettings","showTooltip","tooltipModule","updateTooltip","connectorSecondAction","connectorSecondElement","querySelector","connectorPointLeft","connectorPointRight","taskBarEditElement","destroy","ganttProp","ganttProperties","taskWidth","width","segments","progressWidth","taskBarEditAction","getTooltipText","offsetY","length","querySelectorAll","refresh","offsetX","chartRowsModule","milestoneHeight","tooltipString","instance","globalize","editRecord","editing","templateNode","templateCompiler","renderTemplates","startDate","endDate","duration","localeObj","getConstant","formatDate","format","getDateFormat","getDurationString","durationUnit","progress","sDate","eDate","connectorLineModule","tooltipTable","innerHTML","getConnectorLineTooltipInnerTd","editModule","taskbarEditModule","taskName","fromPredecessorText"],"sources":["/var/www/vue/vue-gantt-chart/node_modules/@syncfusion/ej2-gantt/src/gantt/renderer/edit-tooltip.js"],"sourcesContent":["import { getValue, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Tooltip } from '@syncfusion/ej2-popups';\nimport * as cls from '../base/css-constants';\n/**\n * File for handling taskbar editing tooltip in Gantt.\n */\nvar EditTooltip = /** @class */ (function () {\n    function EditTooltip(gantt, taskbarEdit) {\n        this.parent = gantt;\n        this.taskbarEdit = taskbarEdit;\n    }\n    /**\n     * To create tooltip.\n     *\n     * @param {string} opensOn .\n     * @param {boolean} mouseTrail .\n     * @param {string} target .\n     * @returns {void}\n     * @private\n     */\n    EditTooltip.prototype.createTooltip = function (opensOn, mouseTrail, target) {\n        var _this = this;\n        this.toolTipObj = new Tooltip({\n            opensOn: opensOn,\n            position: 'TopRight',\n            enableRtl: this.parent.enableRtl,\n            mouseTrail: mouseTrail,\n            cssClass: cls.ganttTooltip,\n            target: target ? target : null,\n            animation: { open: { effect: 'None' }, close: { effect: 'None' } }\n        });\n        this.toolTipObj.beforeRender = function (args) {\n            var argsData = {\n                data: _this.taskbarEdit.taskBarEditRecord,\n                args: args,\n                content: _this.toolTipObj.content\n            };\n            _this.parent.trigger('beforeTooltipRender', argsData);\n        };\n        this.toolTipObj.afterOpen = function (args) {\n            _this.updateTooltipPosition(args);\n        };\n        this.toolTipObj.isStringTemplate = true;\n        this.toolTipObj.appendTo(this.parent.chartPane);\n    };\n    /**\n     * Method to update tooltip position\n     *\n     * @param {TooltipEventArgs} args .\n     * @returns {void} .\n     */\n    EditTooltip.prototype.updateTooltipPosition = function (args) {\n        args.element.style.visibility = 'visible';\n        var parentWithZoomStyle = this.parent.element.closest('[style*=\"zoom\"]');\n        if (isNullOrUndefined(parentWithZoomStyle)) {\n            var containerPosition = this.parent.getOffsetRect(this.parent.chartPane);\n            var leftEnd = containerPosition.left + this.parent.chartPane.offsetWidth;\n            var tooltipPositionX = args.element.offsetLeft;\n            if (leftEnd < (tooltipPositionX + args.element.offsetWidth)) {\n                tooltipPositionX += leftEnd - (tooltipPositionX + args.element.offsetWidth);\n            }\n            args.element.style.left = tooltipPositionX + 'px';\n            args.element.style.visibility = 'visible';\n        }\n    };\n    /**\n     * To show/hide taskbar edit tooltip.\n     *\n     * @param {boolean} bool .\n     * @param {number} segmentIndex .\n     * @returns {void}\n     * @private\n     */\n    EditTooltip.prototype.showHideTaskbarEditTooltip = function (bool, segmentIndex) {\n        if (bool && this.parent.tooltipSettings.showTooltip) {\n            this.createTooltip('Custom', false);\n            this.parent.tooltipModule.toolTipObj.close();\n            this.updateTooltip(segmentIndex);\n            if (this.taskbarEdit.connectorSecondAction === 'ConnectorPointLeftDrag') {\n                this.toolTipObj.open(this.taskbarEdit.connectorSecondElement.querySelector('.' + cls.connectorPointLeft));\n            }\n            else if (this.taskbarEdit.connectorSecondAction === 'ConnectorPointRightDrag') {\n                this.toolTipObj.open(this.taskbarEdit.connectorSecondElement.querySelector('.' + cls.connectorPointRight));\n            }\n            else {\n                this.toolTipObj.open(this.taskbarEdit.taskBarEditElement);\n            }\n        }\n        else if (!isNullOrUndefined(this.toolTipObj)) {\n            this.toolTipObj.destroy();\n            this.toolTipObj = null;\n        }\n    };\n    /**\n     * To update tooltip content and position.\n     *\n     * @param {number} segmentIndex .\n     * @returns {void} .\n     * @private\n     */\n    EditTooltip.prototype.updateTooltip = function (segmentIndex) {\n        var ganttProp = this.taskbarEdit.taskBarEditRecord.ganttProperties;\n        var taskWidth = (isNullOrUndefined(segmentIndex) || segmentIndex === -1) ? ganttProp.width :\n            ganttProp.segments[segmentIndex].width;\n        var progressWidth = (isNullOrUndefined(segmentIndex) || segmentIndex === -1) ? ganttProp.progressWidth :\n            ganttProp.segments[segmentIndex].progressWidth;\n        var left = (isNullOrUndefined(segmentIndex) || segmentIndex === -1) ? ganttProp.left : ganttProp.left +\n            ganttProp.segments[segmentIndex].left;\n        if (!isNullOrUndefined(this.toolTipObj)) {\n            if (this.taskbarEdit.taskBarEditAction === 'ConnectorPointLeftDrag' ||\n                this.taskbarEdit.taskBarEditAction === 'ConnectorPointRightDrag') {\n                this.toolTipObj.content = this.getTooltipText(segmentIndex);\n                this.toolTipObj.offsetY = -3;\n            }\n            else {\n                this.toolTipObj.content = this.getTooltipText(segmentIndex);\n                if (ganttProp.segments && ganttProp.segments.length > 0 && this.taskbarEdit['mainElement'] && this.taskbarEdit.taskBarEditAction === 'ProgressResizing') {\n                    var segments = this.taskbarEdit['mainElement'].querySelectorAll('.e-segmented-taskbar');\n                    this.toolTipObj.refresh(segments[segmentIndex]);\n                }\n                else {\n                    this.toolTipObj.refresh(this.taskbarEdit.taskBarEditElement);\n                }\n                if (this.taskbarEdit.taskBarEditAction === 'LeftResizing') {\n                    if (this.parent.enableRtl) {\n                        this.toolTipObj.offsetX = 0;\n                    }\n                    else {\n                        this.toolTipObj.offsetX = -taskWidth;\n                    }\n                }\n                else if (this.taskbarEdit.taskBarEditAction === 'RightResizing' ||\n                    this.taskbarEdit.taskBarEditAction === 'ParentResizing') {\n                    if (this.parent.enableRtl) {\n                        this.toolTipObj.offsetX = -taskWidth;\n                    }\n                    else {\n                        this.toolTipObj.offsetX = 0;\n                    }\n                }\n                else if (this.taskbarEdit.taskBarEditAction === 'ProgressResizing') {\n                    if (this.parent.enableRtl) {\n                        this.toolTipObj.offsetX = -(progressWidth);\n                    }\n                    else {\n                        this.toolTipObj.offsetX = -(taskWidth - progressWidth);\n                    }\n                }\n                else if (this.taskbarEdit.taskBarEditAction === 'MilestoneDrag') {\n                    this.toolTipObj.offsetX = -(this.parent.chartRowsModule.milestoneHeight / 2);\n                }\n                else if (taskWidth > 5) {\n                    this.toolTipObj.offsetX = -(taskWidth + left - this.taskbarEdit.tooltipPositionX);\n                }\n            }\n        }\n    };\n    /**\n     * To get updated tooltip text.\n     *\n     * @param {number} segmentIndex .\n     * @returns {void} .\n     * @private\n     */\n    EditTooltip.prototype.getTooltipText = function (segmentIndex) {\n        var tooltipString = '';\n        var instance = this.parent.globalize;\n        var editRecord = this.taskbarEdit.taskBarEditRecord.ganttProperties;\n        if (!isNullOrUndefined(editRecord.segments) && editRecord.segments.length > 0 && segmentIndex !== -1\n            && this.taskbarEdit.taskBarEditAction !== 'ProgressResizing') {\n            editRecord = editRecord.segments[segmentIndex];\n        }\n        if (this.parent.tooltipSettings.editing) {\n            var templateNode = this.parent.tooltipModule.templateCompiler(this.parent.tooltipSettings.editing, this.parent, this.taskbarEdit.taskBarEditRecord, 'TooltipEditingTemplate');\n            if (getValue('tooltipEle', this.toolTipObj)) {\n                this.parent.renderTemplates();\n            }\n            tooltipString = templateNode[0];\n        }\n        else {\n            var startDate = void 0;\n            var endDate = void 0;\n            var duration = void 0;\n            if (!isNullOrUndefined(editRecord.startDate)) {\n                startDate = '<tr><td class = \"e-gantt-tooltip-label\">' + this.parent.localeObj.getConstant('startDate') +\n                    '</td><td style=\"padding: 2px;\">:</td><td class = \"e-gantt-tooltip-value\">' +\n                    instance.formatDate(editRecord.startDate, { format: this.parent.getDateFormat() }) + '</td></tr>';\n            }\n            if (!isNullOrUndefined(editRecord.endDate)) {\n                endDate = '<tr><td class = \"e-gantt-tooltip-label\">' + this.parent.localeObj.getConstant('endDate') +\n                    '</td><td style=\"padding: 2px;\">:</td><td class = \"e-gantt-tooltip-value\">' +\n                    instance.formatDate(editRecord.endDate, { format: this.parent.getDateFormat() }) + '</td></tr>';\n            }\n            if (!isNullOrUndefined(editRecord.duration)) {\n                duration = '<tr><td class = \"e-gantt-tooltip-label\">' + this.parent.localeObj.getConstant('duration') +\n                    '</td><td style=\"padding: 2px;\">:</td><td class = \"e-gantt-tooltip-value\">' +\n                    this.parent.getDurationString(editRecord.duration, editRecord.durationUnit) + '</td></tr>';\n            }\n            switch (this.taskbarEdit.taskBarEditAction) {\n                case 'ProgressResizing':\n                    {\n                        var progress = '<tr><td class = \"e-gantt-tooltip-label\">' + this.parent.localeObj.getConstant('progress') +\n                            '</td><td style=\"padding: 2px;\">:</td><td class = \"e-gantt-tooltip-value\">' + editRecord.progress + '</td></tr>';\n                        tooltipString = '<table class = \"e-gantt-tooltiptable\"><tbody>' +\n                            progress + '</tbody></table>';\n                        break;\n                    }\n                case 'LeftResizing':\n                    {\n                        tooltipString = '<table class = \"e-gantt-tooltiptable\"><tbody>' +\n                            startDate + duration + '</tbody></table>';\n                        break;\n                    }\n                case 'RightResizing':\n                case 'ParentResizing':\n                    {\n                        tooltipString = '<table class = \"e-gantt-tooltiptable\"><tbody>' +\n                            endDate + duration + '</tbody></table>';\n                        break;\n                    }\n                case 'ChildDrag':\n                case 'ParentDrag':\n                case 'MilestoneDrag':\n                case 'ManualParentDrag':\n                    {\n                        var sDate = '';\n                        var eDate = '';\n                        if (!isNullOrUndefined(this.taskbarEdit.taskBarEditRecord.ganttProperties.startDate)) {\n                            sDate = startDate;\n                        }\n                        if (!isNullOrUndefined(this.taskbarEdit.taskBarEditRecord.ganttProperties.endDate)) {\n                            eDate = endDate;\n                        }\n                        tooltipString = '<table class = \"e-gantt-tooltiptable\"><tbody>' + sDate + eDate + '</tbody></table>';\n                        break;\n                    }\n                case 'ConnectorPointLeftDrag':\n                case 'ConnectorPointRightDrag':\n                    {\n                        tooltipString = this.parent.connectorLineModule.tooltipTable;\n                        if (isNullOrUndefined(this.toolTipObj)) {\n                            this.parent.connectorLineModule.tooltipTable.innerHTML =\n                                this.parent.connectorLineModule.getConnectorLineTooltipInnerTd(this.parent.editModule.taskbarEditModule.taskBarEditRecord.ganttProperties.taskName, this.parent.editModule.taskbarEditModule.fromPredecessorText, '', '');\n                        }\n                        break;\n                    }\n            }\n        }\n        return tooltipString;\n    };\n    return EditTooltip;\n}());\nexport { EditTooltip };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}