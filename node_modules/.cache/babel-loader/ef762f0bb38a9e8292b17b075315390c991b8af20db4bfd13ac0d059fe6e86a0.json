{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { PdfBorders, TemporaryDictionary } from './index';\nimport { PdfHorizontalOverflowType } from '../../base/interface';\nimport { ElementLayouter, PdfLayoutResult, PdfLayoutFormat, SizeF, PointF, RectangleF, RowLayoutResult, PdfLayoutType, PdfLayoutBreakType } from '@syncfusion/ej2-pdf-export';\nimport { PdfStringFormat } from '@syncfusion/ej2-pdf-export';\nimport { pointToPixel } from '../../base/utils';\n/**\n *\n */\nvar PdfTreeGridLayouter = /** @class */function (_super) {\n  __extends(PdfTreeGridLayouter, _super);\n  function PdfTreeGridLayouter(baseFormat) {\n    var _this = _super.call(this, baseFormat) || this;\n    _this.columnRanges = [];\n    _this.repeatRowIndex = -1;\n    _this.currentBounds = new RectangleF(0, 0, 0, 0);\n    return _this;\n  }\n  Object.defineProperty(PdfTreeGridLayouter.prototype, \"treegrid\", {\n    get: function () {\n      return this.elements;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  PdfTreeGridLayouter.prototype.layoutInternal = function (param) {\n    if (isNullOrUndefined(param)) {\n      throw Error('Argument Null Expection');\n    }\n    this.currentPage = param.page;\n    var format = param.format;\n    if (this.currentPage !== null) {\n      this.currentPageBounds = this.currentPage.getClientSize();\n    }\n    this.currentGraphics = this.currentPage.graphics;\n    if (format !== null && format.break === PdfLayoutBreakType.FitColumnsToPage) {\n      /* eslint-disable-next-line */\n      this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), new SizeF(this.treegrid.columns.width, this.currentGraphics.clientSize.height));\n    } else {\n      this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);\n    }\n    if (this.treegrid.rows.count !== 0) {\n      this.currentBounds.width = param.bounds.width > 0 ? param.bounds.width : this.currentBounds.width - this.treegrid.rows.getRow(0).cells.getCell(0).style.borders.left.width / 2;\n    } else {\n      throw Error('Please add row or header into grid');\n    }\n    this.startLocation = new PointF(param.bounds.x, param.bounds.y);\n    if (param.bounds.height > 0) {\n      this.currentBounds.height = param.bounds.height;\n    }\n    if (!this.treegrid.style.allowHorizontalOverflow && !this.treegrid.isFitToWidth) {\n      this.treegrid.measureColumnsWidth();\n      this.determineColumnDrawRanges();\n    } else {\n      this.treegrid.measureColumnsWidth(this.currentBounds);\n      this.columnRanges.push([0, this.treegrid.columns.count - 1]);\n    }\n    return this.layoutOnPage(param);\n  };\n  /**\n   * `Determines the column draw ranges`.\n   *\n   * @returns {void} .\n   * @private\n   */\n  PdfTreeGridLayouter.prototype.determineColumnDrawRanges = function () {\n    var startColumn = 0;\n    var endColumn = 0;\n    var cellWidths = 0;\n    var availableWidth = this.treegrid['taskbar'].isAutoFit() ? pointToPixel(this.currentGraphics.clientSize.width) - this.currentBounds.x : this.currentGraphics.clientSize.width - this.currentBounds.x;\n    for (var i = 0; i < this.treegrid.columns.count; i++) {\n      cellWidths += this.treegrid.columns.getColumn(i).width;\n      if (cellWidths >= availableWidth) {\n        var subWidths = 0;\n        for (var j = startColumn; j <= i; j++) {\n          subWidths += this.treegrid.columns.getColumn(j).width;\n          if (subWidths > availableWidth) {\n            break;\n          }\n          endColumn = j;\n        }\n        this.columnRanges.push([startColumn, endColumn]);\n        startColumn = endColumn + 1;\n        //endColumn = startColumn;\n        cellWidths = endColumn <= i ? this.treegrid.columns.getColumn(i).width : 0;\n      }\n    }\n    this.columnRanges.push([startColumn, this.treegrid.columns.count - 1]);\n  };\n  PdfTreeGridLayouter.prototype.getFormat = function (format) {\n    var f = format;\n    return f;\n  };\n  PdfTreeGridLayouter.prototype.layoutOnPage = function (param) {\n    var format = this.getFormat(param.format);\n    var result = null;\n    var layoutedPages = new TemporaryDictionary();\n    var startPage = param.page;\n    for (var index = 0; index < this.columnRanges.length; index++) {\n      var range = this.columnRanges[index];\n      this.cellStartIndex = range[0];\n      this.cellEndIndex = range[1];\n      var rowsCount = this.treegrid.rows.count;\n      var i = 0;\n      var repeatRow = false;\n      //Draw row by row with the specified cell range.\n      for (var j = 0; j < rowsCount; j++) {\n        var row = this.treegrid.rows.getRow(j);\n        i++;\n        var originalHeight = this.currentBounds.y;\n        if (this.currentPage !== null && !layoutedPages.containsKey(this.currentPage)) {\n          layoutedPages.add(this.currentPage, range);\n        }\n        var rowResult = this.drawRow(row);\n        //if height remains same, it is understood that row is not draw in the page.\n        if (originalHeight === this.currentBounds.y) {\n          repeatRow = true;\n          this.repeatRowIndex = this.treegrid.rows.rowCollection.indexOf(row);\n        } else {\n          repeatRow = false;\n          this.repeatRowIndex = -1;\n        }\n        while (!rowResult.isFinish && startPage !== null) {\n          if (this.treegrid.allowRowBreakAcrossPages) {\n            //If there is no space in the current page, add new page and then draw the remaining row.\n            this.currentPage = this.getNextPageFormat(format);\n            if (this.treegrid.enableHeader) {\n              this.drawHeader();\n            }\n            this.checkBounds(format);\n            rowResult = this.drawRow(row);\n          } else if (!this.treegrid.allowRowBreakAcrossPages && i < length) {\n            this.currentPage = this.getNextPageFormat(format);\n            if (this.treegrid.enableHeader) {\n              this.drawHeader();\n            }\n            break;\n          } else if (i >= length) {\n            break;\n          }\n        }\n        if (!rowResult.isFinish && startPage !== null && format.layout !== PdfLayoutType.OnePage && repeatRow) {\n          this.startLocation.x = this.currentBounds.x;\n          this.currentPage = this.getNextPageFormat(format);\n          if (this.treegrid.enableHeader) {\n            this.drawHeader();\n          }\n          this.startLocation.y = this.currentBounds.y;\n          if (format.paginateBounds === new RectangleF(0, 0, 0, 0)) {\n            this.currentBounds.x += this.startLocation.x;\n          }\n          if (this.currentBounds.x === PdfBorders.default.left.width / 2) {\n            this.currentBounds.y += this.startLocation.x;\n          }\n          this.drawRow(row);\n          if (this.currentPage !== null && !layoutedPages.containsKey(this.currentPage)) {\n            layoutedPages.add(this.currentPage, range);\n          }\n        }\n      }\n      if (this.columnRanges.indexOf(range) < this.columnRanges.length - 1 && startPage !== null && format.layout !== PdfLayoutType.OnePage) {\n        this.currentPage = this.getNextPageFormat(format);\n        this.checkBounds(format);\n      }\n    }\n    result = this.getLayoutResult();\n    if (this.treegrid.style.allowHorizontalOverflow && this.treegrid.style.horizontalOverflowType === PdfHorizontalOverflowType.NextPage) {\n      this.reArrangePages(layoutedPages);\n    }\n    return result;\n  };\n  PdfTreeGridLayouter.prototype.checkBounds = function (format) {\n    var location = new PointF(PdfBorders.default.right.width / 2, PdfBorders.default.top.width / 2);\n    if (format.paginateBounds === new RectangleF(0, 0, 0, 0) && this.startLocation === location) {\n      this.currentBounds.x += this.startLocation.x;\n      this.currentBounds.y += this.startLocation.y;\n    }\n  };\n  PdfTreeGridLayouter.prototype.drawHeader = function () {\n    this.drawRow(this.treegrid.rows.getRow(0));\n  };\n  PdfTreeGridLayouter.prototype.reArrangePages = function (layoutPages) {\n    var document = this.currentPage.document;\n    var pages = [];\n    var keys = layoutPages.keys();\n    for (var i = 0; i < keys.length; i++) {\n      var page = keys[i];\n      page.section = null;\n      pages.push(page);\n      document.pages.remove(page);\n    }\n    for (var i = 0; i < layoutPages.size(); i++) {\n      var count = layoutPages.size() / this.columnRanges.length;\n      for (var j = i; j < layoutPages.size(); j += count) {\n        var page = pages[j];\n        if (document.pages.indexOf(page) === -1) {\n          document.pages.add(page);\n        }\n      }\n    }\n  };\n  // eslint-disable-next-line\n  PdfTreeGridLayouter.prototype.getNextPageFormat = function (format) {\n    var section = this.currentPage.section;\n    var nextPage = null;\n    var index = section.indexOf(this.currentPage);\n    if (index === section.count - 1) {\n      nextPage = section.add();\n    } else {\n      nextPage = section.getPages()[index + 1];\n    }\n    this.currentGraphics = nextPage.graphics;\n    this.currentBounds = new RectangleF(new PointF(0, 0), nextPage.getClientSize());\n    return nextPage;\n  };\n  PdfTreeGridLayouter.prototype.getLayoutResult = function () {\n    var bounds = new RectangleF(this.startLocation, new SizeF(this.currentBounds.width, this.currentBounds.y - this.startLocation.y));\n    return new PdfTreeGridLayoutResult(this.currentPage, bounds);\n  };\n  PdfTreeGridLayouter.prototype.checkIfDefaultFormat = function (format) {\n    var defaultFormat = new PdfStringFormat();\n    return format.alignment === defaultFormat.alignment && format.characterSpacing === defaultFormat.characterSpacing && format.clipPath === defaultFormat.clipPath && format.firstLineIndent === defaultFormat.firstLineIndent && format.horizontalScalingFactor === defaultFormat.horizontalScalingFactor && format.lineAlignment === defaultFormat.lineAlignment && format.lineLimit === defaultFormat.lineLimit && format.lineSpacing === defaultFormat.lineSpacing && format.measureTrailingSpaces === defaultFormat.measureTrailingSpaces && format.noClip === defaultFormat.noClip && format.paragraphIndent === defaultFormat.paragraphIndent && format.rightToLeft === defaultFormat.rightToLeft && format.subSuperScript === defaultFormat.subSuperScript && format.wordSpacing === defaultFormat.wordSpacing && format.wordWrap === defaultFormat.wordWrap;\n  };\n  PdfTreeGridLayouter.prototype.drawRow = function (row, layoutResult, height) {\n    //.. Check if required space available.\n    //.....If the row conains spans which  falls through more than one page, then draw the row to next page.\n    if (isNullOrUndefined(layoutResult)) {\n      var result = new RowLayoutResult();\n      height = row.rowBreakHeight > 0 ? row.rowBreakHeight : row.height;\n      if (height > this.currentPageBounds.height) {\n        if (this.treegrid.allowRowBreakAcrossPages) {\n          result.isFinish = true;\n          this.drawRowWithBreak(result, row, height);\n        } else {\n          // If AllowRowBreakAcrossPages is not true, draw the row till it fits the page.\n          result.isFinish = false;\n          this.drawRow(row, result, height);\n        }\n      } else if (this.currentBounds.y + height > this.currentPageBounds.height || this.currentBounds.y + height > this.currentBounds.height) {\n        if (this.repeatRowIndex > -1 && this.repeatRowIndex === row.rowIndex) {\n          if (this.treegrid.allowRowBreakAcrossPages) {\n            result.isFinish = true;\n            this.drawRowWithBreak(result, row, height);\n          } else {\n            result.isFinish = false;\n            this.drawRow(row, result, height);\n          }\n        } else {\n          result.isFinish = false;\n        }\n      } else {\n        result.isFinish = true;\n        this.drawRow(row, result, height);\n      }\n      return result;\n    } else {\n      var location_1 = new PointF(this.currentBounds.x, this.currentBounds.y);\n      layoutResult.bounds = new RectangleF(location_1, new SizeF(0, 0));\n      var leftAdjustment = 0;\n      height = this.reCalculateHeight(row, height);\n      for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n        var cell = row.cells.getCell(i);\n        var column = this.treegrid.columns.getColumn(i);\n        if (column.isTreeColumn) {\n          leftAdjustment = row.level * 10;\n        }\n        var cancelSpans = cell.columnSpan > 1 && i > this.cellEndIndex + 1;\n        if (!cancelSpans) {\n          for (var j = 1; j < cell.columnSpan; j++) {\n            row.cells.getCell(i + j).isCellMergeContinue = true;\n          }\n        }\n        var size = new SizeF(column.width, height);\n        if (cell.columnSpan > 1) {\n          size = new SizeF(cell.width, height);\n          i += cell.columnSpan;\n        }\n        if (!this.checkIfDefaultFormat(column.format) && this.checkIfDefaultFormat(cell.style.format)) {\n          cell.style.format = column.format;\n        }\n        cell.draw(this.currentGraphics, new RectangleF(location_1, size), cancelSpans, leftAdjustment);\n        /* eslint-disable-next-line */\n        if (row.treegrid.style.allowHorizontalOverflow && (cell.columnSpan > this.cellEndIndex || i + cell.columnSpan > this.cellEndIndex + 1) && this.cellEndIndex < row.cells.count - 1) {\n          row.rowOverflowIndex = this.cellEndIndex;\n        }\n        location_1.x += column.width;\n        leftAdjustment = 0;\n      }\n      this.currentBounds.y += height;\n      /* eslint-disable-next-line */\n      layoutResult.bounds = new RectangleF(new PointF(layoutResult.bounds.x, layoutResult.bounds.y), new SizeF(location_1.x, location_1.y));\n      return null;\n    }\n  };\n  /**\n   * @param {RowLayoutResult} result .\n   * @param {PdfTreeGridRow} row .\n   * @param {number} height .\n   * @returns {void} .\n   */\n  PdfTreeGridLayouter.prototype.drawRowWithBreak = function (result, row, height) {\n    var location = new PointF(this.currentBounds.x, this.currentBounds.y);\n    result.bounds = new RectangleF(location, new SizeF(0, 0));\n    var leftAdjustment = 0;\n    this.treegridHeight = this.currentBounds.height;\n    // Calculate the remaining height.\n    row.rowBreakHeight = this.currentBounds.y + height - this.currentBounds.height;\n    // No need to explicit break if the row height is equal to treegrid height.\n    for (var c = 0; c < row.cells.count; c++) {\n      var cell = row.cells.getCell(c);\n      var cellHeight = cell.measureHeight();\n      if (cellHeight === height && cell.value === null) {\n        row.rowBreakHeight = this.currentBounds.y + height - this.currentBounds.height;\n      }\n    }\n    for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n      var column = this.treegrid.columns.getColumn(i);\n      if (column.isTreeColumn) {\n        leftAdjustment = row.level * 10;\n      }\n      var cell = row.cells.getCell(i);\n      var cancelSpans = cell.columnSpan + i > this.cellEndIndex + 1 && cell.columnSpan > 1;\n      if (!cancelSpans) {\n        for (var j = 1; j < cell.columnSpan; j++) {\n          row.cells.getCell(i + j).isCellMergeContinue = true;\n        }\n      }\n      var tHeight = this.treegridHeight > 0 ? this.treegridHeight : this.currentBounds.height;\n      var size = new SizeF(column.width, tHeight);\n      if (!this.checkIfDefaultFormat(column.format) && this.checkIfDefaultFormat(cell.style.format)) {\n        cell.style.format = column.format;\n      }\n      cell.draw(this.currentGraphics, new RectangleF(location, size), cancelSpans, leftAdjustment);\n      result.isFinish = !result.isFinish ? result.isFinish : cell.finishedDrawingCell;\n      location.x += column.width;\n      leftAdjustment = 0;\n      this.currentBounds.y += this.treegridHeight > 0 ? this.treegridHeight : height;\n      result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location.x, location.y));\n    }\n  };\n  /**\n   * `Recalculate row height` for the split cell to be drawn.\n   *\n   * @param {PdfTreeGridRow} row .\n   * @param {number} height .\n   * @returns {void} .\n   * @private\n   */\n  PdfTreeGridLayouter.prototype.reCalculateHeight = function (row, height) {\n    var newHeight = 0;\n    for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n      if (!isNullOrUndefined(row.cells.getCell(i).remainingString) || row.cells.getCell(i).remainingString === '') {\n        newHeight = Math.max(newHeight, row.cells.getCell(i).measureHeight());\n      }\n    }\n    return Math.max(height, newHeight);\n  };\n  return PdfTreeGridLayouter;\n}(ElementLayouter);\nexport { PdfTreeGridLayouter };\nvar PdfTreeGridLayoutResult = /** @class */function (_super) {\n  __extends(PdfTreeGridLayoutResult, _super);\n  /**\n   * Constructor\n   *\n   * @param {PdfPage} page .\n   * @param {RectangleF} bounds .\n   * @private\n   */\n  function PdfTreeGridLayoutResult(page, bounds) {\n    return _super.call(this, page, bounds) || this;\n  }\n  return PdfTreeGridLayoutResult;\n}(PdfLayoutResult);\nexport { PdfTreeGridLayoutResult };\n/**\n * `PdfGridLayoutFormat` class represents a flexible grid that consists of columns and rows.\n */\nvar PdfTreeGridLayoutFormat = /** @class */function (_super) {\n  __extends(PdfTreeGridLayoutFormat, _super);\n  /**\n   * Initializes a new instance of the `PdfGridLayoutFormat` class.\n   *\n   * @param {PdfLayoutFormat} baseFormat .\n   * @private\n   */\n  function PdfTreeGridLayoutFormat(baseFormat) {\n    var _this = this;\n    if (typeof baseFormat === 'undefined') {\n      _this = _super.call(this) || this;\n    } else {\n      _this = _super.call(this, baseFormat) || this;\n    }\n    return _this;\n  }\n  return PdfTreeGridLayoutFormat;\n}(PdfLayoutFormat);\nexport { PdfTreeGridLayoutFormat };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","isNullOrUndefined","PdfBorders","TemporaryDictionary","PdfHorizontalOverflowType","ElementLayouter","PdfLayoutResult","PdfLayoutFormat","SizeF","PointF","RectangleF","RowLayoutResult","PdfLayoutType","PdfLayoutBreakType","PdfStringFormat","pointToPixel","PdfTreeGridLayouter","_super","baseFormat","_this","call","columnRanges","repeatRowIndex","currentBounds","defineProperty","get","elements","enumerable","configurable","layoutInternal","param","Error","currentPage","page","format","currentPageBounds","getClientSize","currentGraphics","graphics","break","FitColumnsToPage","bounds","x","y","treegrid","columns","width","clientSize","height","rows","count","getRow","cells","getCell","style","borders","left","startLocation","allowHorizontalOverflow","isFitToWidth","measureColumnsWidth","determineColumnDrawRanges","push","layoutOnPage","startColumn","endColumn","cellWidths","availableWidth","isAutoFit","i","getColumn","subWidths","j","getFormat","f","result","layoutedPages","startPage","index","length","range","cellStartIndex","cellEndIndex","rowsCount","repeatRow","row","originalHeight","containsKey","add","rowResult","drawRow","rowCollection","indexOf","isFinish","allowRowBreakAcrossPages","getNextPageFormat","enableHeader","drawHeader","checkBounds","layout","OnePage","paginateBounds","default","getLayoutResult","horizontalOverflowType","NextPage","reArrangePages","location","right","top","layoutPages","document","pages","keys","section","remove","size","nextPage","getPages","PdfTreeGridLayoutResult","checkIfDefaultFormat","defaultFormat","alignment","characterSpacing","clipPath","firstLineIndent","horizontalScalingFactor","lineAlignment","lineLimit","lineSpacing","measureTrailingSpaces","noClip","paragraphIndent","rightToLeft","subSuperScript","wordSpacing","wordWrap","layoutResult","rowBreakHeight","drawRowWithBreak","rowIndex","location_1","leftAdjustment","reCalculateHeight","cell","column","isTreeColumn","level","cancelSpans","columnSpan","isCellMergeContinue","draw","rowOverflowIndex","treegridHeight","c","cellHeight","measureHeight","value","tHeight","finishedDrawingCell","newHeight","remainingString","Math","max","PdfTreeGridLayoutFormat"],"sources":["/var/www/vue/vue-gantt-chart/node_modules/@syncfusion/ej2-gantt/src/gantt/export/pdf-base/treegrid-layouter.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { PdfBorders, TemporaryDictionary } from './index';\nimport { PdfHorizontalOverflowType } from '../../base/interface';\nimport { ElementLayouter, PdfLayoutResult, PdfLayoutFormat, SizeF, PointF, RectangleF, RowLayoutResult, PdfLayoutType, PdfLayoutBreakType } from '@syncfusion/ej2-pdf-export';\nimport { PdfStringFormat } from '@syncfusion/ej2-pdf-export';\nimport { pointToPixel } from '../../base/utils';\n/**\n *\n */\nvar PdfTreeGridLayouter = /** @class */ (function (_super) {\n    __extends(PdfTreeGridLayouter, _super);\n    function PdfTreeGridLayouter(baseFormat) {\n        var _this = _super.call(this, baseFormat) || this;\n        _this.columnRanges = [];\n        _this.repeatRowIndex = -1;\n        _this.currentBounds = new RectangleF(0, 0, 0, 0);\n        return _this;\n    }\n    Object.defineProperty(PdfTreeGridLayouter.prototype, \"treegrid\", {\n        get: function () {\n            return this.elements;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfTreeGridLayouter.prototype.layoutInternal = function (param) {\n        if (isNullOrUndefined(param)) {\n            throw Error('Argument Null Expection');\n        }\n        this.currentPage = param.page;\n        var format = param.format;\n        if (this.currentPage !== null) {\n            this.currentPageBounds = this.currentPage.getClientSize();\n        }\n        this.currentGraphics = this.currentPage.graphics;\n        if (format !== null && format.break === PdfLayoutBreakType.FitColumnsToPage) {\n            /* eslint-disable-next-line */\n            this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), new SizeF(this.treegrid.columns.width, this.currentGraphics.clientSize.height));\n        }\n        else {\n            this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);\n        }\n        if (this.treegrid.rows.count !== 0) {\n            this.currentBounds.width = (param.bounds.width > 0) ? param.bounds.width :\n                (this.currentBounds.width - this.treegrid.rows.getRow(0).cells.getCell(0).style.borders.left.width / 2);\n        }\n        else {\n            throw Error('Please add row or header into grid');\n        }\n        this.startLocation = new PointF(param.bounds.x, param.bounds.y);\n        if (param.bounds.height > 0) {\n            this.currentBounds.height = param.bounds.height;\n        }\n        if (!this.treegrid.style.allowHorizontalOverflow && !this.treegrid.isFitToWidth) {\n            this.treegrid.measureColumnsWidth();\n            this.determineColumnDrawRanges();\n        }\n        else {\n            this.treegrid.measureColumnsWidth(this.currentBounds);\n            this.columnRanges.push([0, this.treegrid.columns.count - 1]);\n        }\n        return this.layoutOnPage(param);\n    };\n    /**\n     * `Determines the column draw ranges`.\n     *\n     * @returns {void} .\n     * @private\n     */\n    PdfTreeGridLayouter.prototype.determineColumnDrawRanges = function () {\n        var startColumn = 0;\n        var endColumn = 0;\n        var cellWidths = 0;\n        var availableWidth = (this.treegrid['taskbar'].isAutoFit()) ? pointToPixel(this.currentGraphics.clientSize.width) - this.currentBounds.x : this.currentGraphics.clientSize.width - this.currentBounds.x;\n        for (var i = 0; i < this.treegrid.columns.count; i++) {\n            cellWidths += this.treegrid.columns.getColumn(i).width;\n            if (cellWidths >= availableWidth) {\n                var subWidths = 0;\n                for (var j = startColumn; j <= i; j++) {\n                    subWidths += this.treegrid.columns.getColumn(j).width;\n                    if (subWidths > availableWidth) {\n                        break;\n                    }\n                    endColumn = j;\n                }\n                this.columnRanges.push([startColumn, endColumn]);\n                startColumn = endColumn + 1;\n                //endColumn = startColumn;\n                cellWidths = (endColumn <= i) ? this.treegrid.columns.getColumn(i).width : 0;\n            }\n        }\n        this.columnRanges.push([startColumn, this.treegrid.columns.count - 1]);\n    };\n    PdfTreeGridLayouter.prototype.getFormat = function (format) {\n        var f = format;\n        return f;\n    };\n    PdfTreeGridLayouter.prototype.layoutOnPage = function (param) {\n        var format = this.getFormat(param.format);\n        var result = null;\n        var layoutedPages = new TemporaryDictionary();\n        var startPage = param.page;\n        for (var index = 0; index < this.columnRanges.length; index++) {\n            var range = this.columnRanges[index];\n            this.cellStartIndex = range[0];\n            this.cellEndIndex = range[1];\n            var rowsCount = this.treegrid.rows.count;\n            var i = 0;\n            var repeatRow = false;\n            //Draw row by row with the specified cell range.\n            for (var j = 0; j < rowsCount; j++) {\n                var row = this.treegrid.rows.getRow(j);\n                i++;\n                var originalHeight = this.currentBounds.y;\n                if (this.currentPage !== null && !layoutedPages.containsKey(this.currentPage)) {\n                    layoutedPages.add(this.currentPage, range);\n                }\n                var rowResult = this.drawRow(row);\n                //if height remains same, it is understood that row is not draw in the page.\n                if (originalHeight === this.currentBounds.y) {\n                    repeatRow = true;\n                    this.repeatRowIndex = this.treegrid.rows.rowCollection.indexOf(row);\n                }\n                else {\n                    repeatRow = false;\n                    this.repeatRowIndex = -1;\n                }\n                while (!rowResult.isFinish && startPage !== null) {\n                    if (this.treegrid.allowRowBreakAcrossPages) {\n                        //If there is no space in the current page, add new page and then draw the remaining row.\n                        this.currentPage = this.getNextPageFormat(format);\n                        if (this.treegrid.enableHeader) {\n                            this.drawHeader();\n                        }\n                        this.checkBounds(format);\n                        rowResult = this.drawRow(row);\n                    }\n                    else if (!this.treegrid.allowRowBreakAcrossPages && i < length) {\n                        this.currentPage = this.getNextPageFormat(format);\n                        if (this.treegrid.enableHeader) {\n                            this.drawHeader();\n                        }\n                        break;\n                    }\n                    else if (i >= length) {\n                        break;\n                    }\n                }\n                if (!rowResult.isFinish && startPage !== null && format.layout !== PdfLayoutType.OnePage && repeatRow) {\n                    this.startLocation.x = this.currentBounds.x;\n                    this.currentPage = this.getNextPageFormat(format);\n                    if (this.treegrid.enableHeader) {\n                        this.drawHeader();\n                    }\n                    this.startLocation.y = this.currentBounds.y;\n                    if (format.paginateBounds === new RectangleF(0, 0, 0, 0)) {\n                        this.currentBounds.x += this.startLocation.x;\n                    }\n                    if (this.currentBounds.x === PdfBorders.default.left.width / 2) {\n                        this.currentBounds.y += this.startLocation.x;\n                    }\n                    this.drawRow(row);\n                    if (this.currentPage !== null && !layoutedPages.containsKey(this.currentPage)) {\n                        layoutedPages.add(this.currentPage, range);\n                    }\n                }\n            }\n            if (this.columnRanges.indexOf(range) < this.columnRanges.length - 1 &&\n                startPage !== null && format.layout !== PdfLayoutType.OnePage) {\n                this.currentPage = this.getNextPageFormat(format);\n                this.checkBounds(format);\n            }\n        }\n        result = this.getLayoutResult();\n        if (this.treegrid.style.allowHorizontalOverflow\n            && this.treegrid.style.horizontalOverflowType === PdfHorizontalOverflowType.NextPage) {\n            this.reArrangePages(layoutedPages);\n        }\n        return result;\n    };\n    PdfTreeGridLayouter.prototype.checkBounds = function (format) {\n        var location = new PointF(PdfBorders.default.right.width / 2, PdfBorders.default.top.width / 2);\n        if (format.paginateBounds === new RectangleF(0, 0, 0, 0) && this.startLocation === location) {\n            this.currentBounds.x += this.startLocation.x;\n            this.currentBounds.y += this.startLocation.y;\n        }\n    };\n    PdfTreeGridLayouter.prototype.drawHeader = function () {\n        this.drawRow(this.treegrid.rows.getRow(0));\n    };\n    PdfTreeGridLayouter.prototype.reArrangePages = function (layoutPages) {\n        var document = this.currentPage.document;\n        var pages = [];\n        var keys = layoutPages.keys();\n        for (var i = 0; i < keys.length; i++) {\n            var page = keys[i];\n            page.section = null;\n            pages.push(page);\n            document.pages.remove(page);\n        }\n        for (var i = 0; i < layoutPages.size(); i++) {\n            var count = (layoutPages.size() / this.columnRanges.length);\n            for (var j = i; j < layoutPages.size(); j += count) {\n                var page = pages[j];\n                if (document.pages.indexOf(page) === -1) {\n                    document.pages.add(page);\n                }\n            }\n        }\n    };\n    // eslint-disable-next-line\n    PdfTreeGridLayouter.prototype.getNextPageFormat = function (format) {\n        var section = this.currentPage.section;\n        var nextPage = null;\n        var index = section.indexOf(this.currentPage);\n        if (index === section.count - 1) {\n            nextPage = section.add();\n        }\n        else {\n            nextPage = section.getPages()[index + 1];\n        }\n        this.currentGraphics = nextPage.graphics;\n        this.currentBounds = new RectangleF(new PointF(0, 0), nextPage.getClientSize());\n        return nextPage;\n    };\n    PdfTreeGridLayouter.prototype.getLayoutResult = function () {\n        var bounds = new RectangleF(this.startLocation, new SizeF(this.currentBounds.width, this.currentBounds.y -\n            this.startLocation.y));\n        return new PdfTreeGridLayoutResult(this.currentPage, bounds);\n    };\n    PdfTreeGridLayouter.prototype.checkIfDefaultFormat = function (format) {\n        var defaultFormat = new PdfStringFormat();\n        return (format.alignment === defaultFormat.alignment && format.characterSpacing === defaultFormat.characterSpacing &&\n            format.clipPath === defaultFormat.clipPath && format.firstLineIndent === defaultFormat.firstLineIndent &&\n            format.horizontalScalingFactor === defaultFormat.horizontalScalingFactor &&\n            format.lineAlignment === defaultFormat.lineAlignment\n            && format.lineLimit === defaultFormat.lineLimit && format.lineSpacing === defaultFormat.lineSpacing &&\n            format.measureTrailingSpaces === defaultFormat.measureTrailingSpaces && format.noClip === defaultFormat.noClip &&\n            format.paragraphIndent === defaultFormat.paragraphIndent && format.rightToLeft === defaultFormat.rightToLeft &&\n            format.subSuperScript === defaultFormat.subSuperScript && format.wordSpacing === defaultFormat.wordSpacing &&\n            format.wordWrap === defaultFormat.wordWrap);\n    };\n    PdfTreeGridLayouter.prototype.drawRow = function (row, layoutResult, height) {\n        //.. Check if required space available.\n        //.....If the row conains spans which  falls through more than one page, then draw the row to next page.\n        if (isNullOrUndefined(layoutResult)) {\n            var result = new RowLayoutResult();\n            height = row.rowBreakHeight > 0 ? row.rowBreakHeight : row.height;\n            if (height > this.currentPageBounds.height) {\n                if (this.treegrid.allowRowBreakAcrossPages) {\n                    result.isFinish = true;\n                    this.drawRowWithBreak(result, row, height);\n                }\n                else {\n                    // If AllowRowBreakAcrossPages is not true, draw the row till it fits the page.\n                    result.isFinish = false;\n                    this.drawRow(row, result, height);\n                }\n            }\n            else if (this.currentBounds.y + height > this.currentPageBounds.height ||\n                this.currentBounds.y + height > this.currentBounds.height) {\n                if (this.repeatRowIndex > -1 && this.repeatRowIndex === row.rowIndex) {\n                    if (this.treegrid.allowRowBreakAcrossPages) {\n                        result.isFinish = true;\n                        this.drawRowWithBreak(result, row, height);\n                    }\n                    else {\n                        result.isFinish = false;\n                        this.drawRow(row, result, height);\n                    }\n                }\n                else {\n                    result.isFinish = false;\n                }\n            }\n            else {\n                result.isFinish = true;\n                this.drawRow(row, result, height);\n            }\n            return result;\n        }\n        else {\n            var location_1 = new PointF(this.currentBounds.x, this.currentBounds.y);\n            layoutResult.bounds = new RectangleF(location_1, new SizeF(0, 0));\n            var leftAdjustment = 0;\n            height = this.reCalculateHeight(row, height);\n            for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n                var cell = row.cells.getCell(i);\n                var column = this.treegrid.columns.getColumn(i);\n                if (column.isTreeColumn) {\n                    leftAdjustment = (row.level) * 10;\n                }\n                var cancelSpans = ((cell.columnSpan > 1) && (i > this.cellEndIndex + 1));\n                if (!cancelSpans) {\n                    for (var j = 1; j < cell.columnSpan; j++) {\n                        row.cells.getCell(i + j).isCellMergeContinue = true;\n                    }\n                }\n                var size = new SizeF(column.width, height);\n                if (cell.columnSpan > 1) {\n                    size = new SizeF(cell.width, height);\n                    i += cell.columnSpan;\n                }\n                if (!this.checkIfDefaultFormat(column.format) && this.checkIfDefaultFormat(cell.style.format)) {\n                    cell.style.format = column.format;\n                }\n                cell.draw(this.currentGraphics, new RectangleF(location_1, size), cancelSpans, leftAdjustment);\n                /* eslint-disable-next-line */\n                if (row.treegrid.style.allowHorizontalOverflow && (cell.columnSpan > this.cellEndIndex || i + cell.columnSpan > this.cellEndIndex + 1) && this.cellEndIndex < row.cells.count - 1) {\n                    row.rowOverflowIndex = this.cellEndIndex;\n                }\n                location_1.x += column.width;\n                leftAdjustment = 0;\n            }\n            this.currentBounds.y += height;\n            /* eslint-disable-next-line */\n            layoutResult.bounds = new RectangleF(new PointF(layoutResult.bounds.x, layoutResult.bounds.y), new SizeF(location_1.x, location_1.y));\n            return null;\n        }\n    };\n    /**\n     * @param {RowLayoutResult} result .\n     * @param {PdfTreeGridRow} row .\n     * @param {number} height .\n     * @returns {void} .\n     */\n    PdfTreeGridLayouter.prototype.drawRowWithBreak = function (result, row, height) {\n        var location = new PointF(this.currentBounds.x, this.currentBounds.y);\n        result.bounds = new RectangleF(location, new SizeF(0, 0));\n        var leftAdjustment = 0;\n        this.treegridHeight = this.currentBounds.height;\n        // Calculate the remaining height.\n        row.rowBreakHeight = this.currentBounds.y + height - this.currentBounds.height;\n        // No need to explicit break if the row height is equal to treegrid height.\n        for (var c = 0; c < row.cells.count; c++) {\n            var cell = row.cells.getCell(c);\n            var cellHeight = cell.measureHeight();\n            if (cellHeight === height && cell.value === null) {\n                row.rowBreakHeight = this.currentBounds.y + height - this.currentBounds.height;\n            }\n        }\n        for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n            var column = this.treegrid.columns.getColumn(i);\n            if (column.isTreeColumn) {\n                leftAdjustment = row.level * 10;\n            }\n            var cell = row.cells.getCell(i);\n            var cancelSpans = ((cell.columnSpan + i > this.cellEndIndex + 1) && (cell.columnSpan > 1));\n            if (!cancelSpans) {\n                for (var j = 1; j < cell.columnSpan; j++) {\n                    row.cells.getCell(i + j).isCellMergeContinue = true;\n                }\n            }\n            var tHeight = this.treegridHeight > 0 ? this.treegridHeight : this.currentBounds.height;\n            var size = new SizeF(column.width, tHeight);\n            if (!this.checkIfDefaultFormat(column.format) && this.checkIfDefaultFormat(cell.style.format)) {\n                cell.style.format = column.format;\n            }\n            cell.draw(this.currentGraphics, new RectangleF(location, size), cancelSpans, leftAdjustment);\n            result.isFinish = (!result.isFinish) ? result.isFinish : cell.finishedDrawingCell;\n            location.x += column.width;\n            leftAdjustment = 0;\n            this.currentBounds.y += this.treegridHeight > 0 ? this.treegridHeight : height;\n            result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location.x, location.y));\n        }\n    };\n    /**\n     * `Recalculate row height` for the split cell to be drawn.\n     *\n     * @param {PdfTreeGridRow} row .\n     * @param {number} height .\n     * @returns {void} .\n     * @private\n     */\n    PdfTreeGridLayouter.prototype.reCalculateHeight = function (row, height) {\n        var newHeight = 0;\n        for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n            if (!isNullOrUndefined(row.cells.getCell(i).remainingString) ||\n                row.cells.getCell(i).remainingString === '') {\n                newHeight = Math.max(newHeight, row.cells.getCell(i).measureHeight());\n            }\n        }\n        return Math.max(height, newHeight);\n    };\n    return PdfTreeGridLayouter;\n}(ElementLayouter));\nexport { PdfTreeGridLayouter };\nvar PdfTreeGridLayoutResult = /** @class */ (function (_super) {\n    __extends(PdfTreeGridLayoutResult, _super);\n    /**\n     * Constructor\n     *\n     * @param {PdfPage} page .\n     * @param {RectangleF} bounds .\n     * @private\n     */\n    function PdfTreeGridLayoutResult(page, bounds) {\n        return _super.call(this, page, bounds) || this;\n    }\n    return PdfTreeGridLayoutResult;\n}(PdfLayoutResult));\nexport { PdfTreeGridLayoutResult };\n/**\n * `PdfGridLayoutFormat` class represents a flexible grid that consists of columns and rows.\n */\nvar PdfTreeGridLayoutFormat = /** @class */ (function (_super) {\n    __extends(PdfTreeGridLayoutFormat, _super);\n    /**\n     * Initializes a new instance of the `PdfGridLayoutFormat` class.\n     *\n     * @param {PdfLayoutFormat} baseFormat .\n     * @private\n     */\n    function PdfTreeGridLayoutFormat(baseFormat) {\n        var _this = this;\n        if (typeof baseFormat === 'undefined') {\n            _this = _super.call(this) || this;\n        }\n        else {\n            _this = _super.call(this, baseFormat) || this;\n        }\n        return _this;\n    }\n    return PdfTreeGridLayoutFormat;\n}(PdfLayoutFormat));\nexport { PdfTreeGridLayoutFormat };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}