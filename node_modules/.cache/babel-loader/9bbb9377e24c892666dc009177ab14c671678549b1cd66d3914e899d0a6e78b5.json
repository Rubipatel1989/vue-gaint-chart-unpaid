{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"gantt-chart\",\n  style: {\n    \"width\": \"100%\",\n    \"height\": \"400px\",\n    \"overflow-x\": \"scroll\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","style","_createElementBlock","_hoisted_1"],"sources":["/var/www/vue/vue-gantt-chart/src/components/GanttChart.vue"],"sourcesContent":["<template>\n  <div id=\"gantt-chart\" style=\"width: 100%; height: 400px; overflow-x: scroll;\"></div>\n</template>\n\n<script>\nimport * as d3 from \"d3\";\n\nexport default {\n  name: \"GanttChart\",\n  props: [\"products\"],\n  watch: {\n    products: {\n      handler(newProducts) {\n        console.log(\"Products received in GanttChart:\", newProducts); // Debugging\n        if (newProducts && newProducts.length > 0) {\n          this.renderGanttChart(newProducts);\n        }\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    renderGanttChart(data) {\n  console.log(\"Rendering Gantt chart with data:\", data); // Debugging\n\n  // Clear existing chart elements\n  d3.select(\"#gantt-chart\").selectAll(\"*\").remove();\n\n  const chartData = data.map(product => ({\n    name: product.Name,\n    startDate: new Date(product.SellingDate),\n    endDate: new Date(product.SellingDate), // Same date for testing\n  }));\n\n  const containerWidth = 800;\n  const containerHeight = chartData.length * 50;\n\n  const svg = d3\n    .select(\"#gantt-chart\")\n    .append(\"svg\")\n    .attr(\"width\", containerWidth)\n    .attr(\"height\", containerHeight)\n    .style(\"border\", \"1px solid blue\"); // Debug SVG area\n\n  const xScale = d3\n    .scaleTime()\n    .domain([\n      d3.min(chartData, d => d.startDate),\n      d3.max(chartData, d => d.endDate),\n    ])\n    .range([0, containerWidth]);\n\n  const yScale = d3\n    .scaleBand()\n    .domain(chartData.map(d => d.name))\n    .range([0, containerHeight])\n    .padding(0.1);\n\n  console.log(\"xScale domain:\", xScale.domain());\n  console.log(\"xScale range:\", xScale.range());\n  console.log(\"yScale domain:\", yScale.domain());\n  console.log(\"yScale range:\", yScale.range());\n\n  svg\n    .selectAll(\"rect\")\n    .data(chartData)\n    .enter()\n    .append(\"rect\")\n    .attr(\"x\", d => {\n      const x = xScale(d.startDate);\n      console.log(`Bar for ${d.name} - x:`, x); // Debugging x\n      return x;\n    })\n    .attr(\"y\", d => {\n      const y = yScale(d.name);\n      console.log(`Bar for ${d.name} - y:`, y); // Debugging y\n      return y;\n    })\n    .attr(\"width\", d => {\n      const width = Math.max(xScale(d.endDate) - xScale(d.startDate), 1); // Minimum width\n      console.log(`Bar for ${d.name} - width:`, width); // Debugging width\n      return width;\n    })\n    .attr(\"height\", yScale.bandwidth())\n    .attr(\"fill\", \"teal\");\n}\n\n  },\n};\n</script>\n\n<style scoped>\n#gantt-chart {\n  border: 2px solid red; /* For debugging */\n}\n</style>\n"],"mappings":";;EACOA,EAAE,EAAC,aAAa;EAACC,KAAuD,EAAvD;IAAA;IAAA;IAAA;EAAA;;;uBAAtBC,mBAAA,CAAoF,OAApFC,UAAoF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}