{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport * as events from '../base/constant';\nimport { isNullOrUndefined, Browser } from '@syncfusion/ej2-base';\nimport { Clipboard as GridClipboard } from '@syncfusion/ej2-grids';\n/**\n * The `Clipboard` module is used to handle clipboard copy action.\n *\n * @hidden\n */\nvar TreeClipboard = /** @class */function (_super) {\n  __extends(TreeClipboard, _super);\n  function TreeClipboard(parent, serviceLocator) {\n    var _this = _super.call(this, parent.grid, serviceLocator) || this;\n    _this.treeCopyContent = '';\n    _this.copiedUniqueIdCollection = [];\n    _this.treeGridParent = parent;\n    _this.serviceLocator = serviceLocator;\n    return _this;\n  }\n  TreeClipboard.prototype.setCopyData = function (withHeader) {\n    var copyContent = 'copyContent';\n    var getCopyData = 'getCopyData';\n    var isSelect = 'isSelect';\n    var uniqueID = 'uniqueID';\n    var currentRecords = this.treeGridParent.getCurrentViewRecords();\n    if (window.getSelection().toString() === '') {\n      this.clipBoardTextArea.value = this[\"\" + copyContent] = '';\n      var rows = this.treeGridParent.grid.getRows();\n      if (this.treeGridParent.selectionSettings.mode !== 'Cell') {\n        var selectedIndexes = this.treeGridParent.getSelectedRowIndexes().sort(function (a, b) {\n          return a - b;\n        });\n        for (var i = 0; i < selectedIndexes.length; i++) {\n          if (i > 0) {\n            this.treeCopyContent += '\\n';\n          }\n          if (!rows[selectedIndexes[parseInt(i.toString(), 10)]].classList.contains('e-summaryrow')) {\n            var cells = [].slice.call(rows[selectedIndexes[parseInt(i.toString(), 10)]].querySelectorAll('.e-rowcell'));\n            var uniqueid = this.treeGridParent.getSelectedRecords()[parseInt(i.toString(), 10)][\"\" + uniqueID];\n            if (this.copiedUniqueIdCollection.indexOf(uniqueid) === -1) {\n              if (this.treeGridParent.copyHierarchyMode === 'Parent' || this.treeGridParent.copyHierarchyMode === 'Both') {\n                this.parentContentData(currentRecords, selectedIndexes[parseInt(i.toString(), 10)], rows, withHeader, i);\n              }\n              this[\"\" + getCopyData](cells, false, '\\t', withHeader);\n              this.treeCopyContent += this[\"\" + copyContent];\n              this.copiedUniqueIdCollection.push(uniqueid);\n              this[\"\" + copyContent] = '';\n              if (this.treeGridParent.copyHierarchyMode === 'Child' || this.treeGridParent.copyHierarchyMode === 'Both') {\n                this.childContentData(currentRecords, selectedIndexes[parseInt(i.toString(), 10)], rows, withHeader);\n              }\n            }\n          }\n        }\n        if (withHeader) {\n          var headerTextArray = [];\n          for (var i = 0; i < this.treeGridParent.getVisibleColumns().length; i++) {\n            headerTextArray[parseInt(i.toString(), 10)] = this.treeGridParent.getVisibleColumns()[parseInt(i.toString(), 10)].headerText;\n          }\n          this[\"\" + getCopyData](headerTextArray, false, '\\t', withHeader);\n          this.treeCopyContent = this[\"\" + copyContent] + '\\n' + this.treeCopyContent;\n        }\n        var args = {\n          data: this.treeCopyContent,\n          cancel: false\n        };\n        this.treeGridParent.trigger(events.beforeCopy, args);\n        if (args.cancel) {\n          return;\n        }\n        this.clipBoardTextArea.value = this[\"\" + copyContent] = args.data;\n        if (!Browser.userAgent.match(/ipad|ipod|iphone/i)) {\n          this.clipBoardTextArea.select();\n        } else {\n          this.clipBoardTextArea.setSelectionRange(0, this.clipBoardTextArea.value.length);\n        }\n        this[\"\" + isSelect] = true;\n        this.copiedUniqueIdCollection = [];\n        this.treeCopyContent = '';\n      } else {\n        _super.prototype.setCopyData.call(this, withHeader);\n      }\n    }\n  };\n  TreeClipboard.prototype.parentContentData = function (currentRecords, selectedIndex, rows, withHeader, index) {\n    var getCopyData = 'getCopyData';\n    var copyContent = 'copyContent';\n    var parentItem = 'parentItem';\n    var uniqueID = 'uniqueID';\n    var level = 'level';\n    if (!isNullOrUndefined(currentRecords[parseInt(selectedIndex.toString(), 10)][\"\" + parentItem])) {\n      var treeLevel = currentRecords[parseInt(selectedIndex.toString(), 10)][\"\" + parentItem][\"\" + level];\n      for (var i = 0; i < treeLevel + 1; i++) {\n        for (var j = 0; j < currentRecords.length; j++) {\n          if (!isNullOrUndefined(currentRecords[parseInt(selectedIndex.toString(), 10)][\"\" + parentItem]) && currentRecords[parseInt(j.toString(), 10)][\"\" + uniqueID] === currentRecords[parseInt(selectedIndex.toString(), 10)][\"\" + parentItem][\"\" + uniqueID]) {\n            selectedIndex = j;\n            var cells = [].slice.call(rows[parseInt(selectedIndex.toString(), 10)].querySelectorAll('.e-rowcell'));\n            var uniqueid = currentRecords[parseInt(j.toString(), 10)][\"\" + uniqueID];\n            if (this.copiedUniqueIdCollection.indexOf(uniqueid) === -1) {\n              this[\"\" + getCopyData](cells, false, '\\t', withHeader);\n              if (index > 0) {\n                this.treeCopyContent = this.treeCopyContent + this[\"\" + copyContent] + '\\n';\n              } else {\n                this.treeCopyContent = this[\"\" + copyContent] + '\\n' + this.treeCopyContent;\n              }\n              this.copiedUniqueIdCollection.push(uniqueid);\n              this[\"\" + copyContent] = '';\n              break;\n            }\n          }\n        }\n      }\n    }\n  };\n  TreeClipboard.prototype.copy = function (withHeader) {\n    _super.prototype.copy.call(this, withHeader);\n  };\n  TreeClipboard.prototype.paste = function (data, rowIndex, colIndex) {\n    _super.prototype.paste.call(this, data, rowIndex, colIndex);\n  };\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @private\n   * @returns {string} Returns clipboard module name\n   */\n  TreeClipboard.prototype.getModuleName = function () {\n    return 'clipboard';\n  };\n  /**\n   * To destroy the clipboard\n   *\n   * @returns {void}\n   * @hidden\n   */\n  TreeClipboard.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n  };\n  TreeClipboard.prototype.childContentData = function (currentRecords, selectedIndex, rows, withHeader) {\n    var getCopyData = 'getCopyData';\n    var copyContent = 'copyContent';\n    var childRecords = 'childRecords';\n    var hasChildRecords = 'hasChildRecords';\n    var uniqueID = 'uniqueID';\n    if (currentRecords[parseInt(selectedIndex.toString(), 10)][\"\" + hasChildRecords]) {\n      var childData = currentRecords[parseInt(selectedIndex.toString(), 10)][\"\" + childRecords];\n      for (var i = 0; i < childData.length; i++) {\n        for (var j = 0; j < currentRecords.length; j++) {\n          if (!isNullOrUndefined(childData[parseInt(i.toString(), 10)][\"\" + uniqueID]) && currentRecords[parseInt(j.toString(), 10)][\"\" + uniqueID] === childData[parseInt(i.toString(), 10)][\"\" + uniqueID]) {\n            if (!isNullOrUndefined(rows[parseInt(j.toString(), 10)]) && !rows[parseInt(j.toString(), 10)].classList.contains('e-summaryrow')) {\n              var cells = [].slice.call(rows[parseInt(j.toString(), 10)].querySelectorAll('.e-rowcell'));\n              var uniqueid = currentRecords[parseInt(j.toString(), 10)][\"\" + uniqueID];\n              if (this.copiedUniqueIdCollection.indexOf(uniqueid) === -1) {\n                this[\"\" + getCopyData](cells, false, '\\t', withHeader);\n                this.treeCopyContent += '\\n' + this[\"\" + copyContent];\n                this[\"\" + copyContent] = '';\n                this.copiedUniqueIdCollection.push(uniqueid);\n                this.childContentData(currentRecords, j, rows, withHeader);\n              }\n            }\n            break;\n          }\n        }\n      }\n    }\n  };\n  return TreeClipboard;\n}(GridClipboard);\nexport { TreeClipboard };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","events","isNullOrUndefined","Browser","Clipboard","GridClipboard","TreeClipboard","_super","parent","serviceLocator","_this","call","grid","treeCopyContent","copiedUniqueIdCollection","treeGridParent","setCopyData","withHeader","copyContent","getCopyData","isSelect","uniqueID","currentRecords","getCurrentViewRecords","window","getSelection","toString","clipBoardTextArea","value","rows","getRows","selectionSettings","mode","selectedIndexes","getSelectedRowIndexes","sort","a","i","length","parseInt","classList","contains","cells","slice","querySelectorAll","uniqueid","getSelectedRecords","indexOf","copyHierarchyMode","parentContentData","push","childContentData","headerTextArray","getVisibleColumns","headerText","args","data","cancel","trigger","beforeCopy","userAgent","match","select","setSelectionRange","selectedIndex","index","parentItem","level","treeLevel","j","copy","paste","rowIndex","colIndex","getModuleName","destroy","childRecords","hasChildRecords","childData"],"sources":["/var/www/vue/vue-gantt-chart/node_modules/@syncfusion/ej2-treegrid/src/treegrid/actions/clipboard.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport * as events from '../base/constant';\nimport { isNullOrUndefined, Browser } from '@syncfusion/ej2-base';\nimport { Clipboard as GridClipboard } from '@syncfusion/ej2-grids';\n/**\n * The `Clipboard` module is used to handle clipboard copy action.\n *\n * @hidden\n */\nvar TreeClipboard = /** @class */ (function (_super) {\n    __extends(TreeClipboard, _super);\n    function TreeClipboard(parent, serviceLocator) {\n        var _this = _super.call(this, parent.grid, serviceLocator) || this;\n        _this.treeCopyContent = '';\n        _this.copiedUniqueIdCollection = [];\n        _this.treeGridParent = parent;\n        _this.serviceLocator = serviceLocator;\n        return _this;\n    }\n    TreeClipboard.prototype.setCopyData = function (withHeader) {\n        var copyContent = 'copyContent';\n        var getCopyData = 'getCopyData';\n        var isSelect = 'isSelect';\n        var uniqueID = 'uniqueID';\n        var currentRecords = this.treeGridParent.getCurrentViewRecords();\n        if (window.getSelection().toString() === '') {\n            this.clipBoardTextArea.value = this[\"\" + copyContent] = '';\n            var rows = this.treeGridParent.grid.getRows();\n            if (this.treeGridParent.selectionSettings.mode !== 'Cell') {\n                var selectedIndexes = this.treeGridParent.getSelectedRowIndexes().sort(function (a, b) {\n                    return a - b;\n                });\n                for (var i = 0; i < selectedIndexes.length; i++) {\n                    if (i > 0) {\n                        this.treeCopyContent += '\\n';\n                    }\n                    if (!rows[selectedIndexes[parseInt(i.toString(), 10)]].classList.contains('e-summaryrow')) {\n                        var cells = [].slice.call(rows[selectedIndexes[parseInt(i.toString(), 10)]].querySelectorAll('.e-rowcell'));\n                        var uniqueid = this.treeGridParent.getSelectedRecords()[parseInt(i.toString(), 10)][\"\" + uniqueID];\n                        if (this.copiedUniqueIdCollection.indexOf(uniqueid) === -1) {\n                            if (this.treeGridParent.copyHierarchyMode === 'Parent' || this.treeGridParent.copyHierarchyMode === 'Both') {\n                                this.parentContentData(currentRecords, selectedIndexes[parseInt(i.toString(), 10)], rows, withHeader, i);\n                            }\n                            this[\"\" + getCopyData](cells, false, '\\t', withHeader);\n                            this.treeCopyContent += this[\"\" + copyContent];\n                            this.copiedUniqueIdCollection.push(uniqueid);\n                            this[\"\" + copyContent] = '';\n                            if (this.treeGridParent.copyHierarchyMode === 'Child' || this.treeGridParent.copyHierarchyMode === 'Both') {\n                                this.childContentData(currentRecords, selectedIndexes[parseInt(i.toString(), 10)], rows, withHeader);\n                            }\n                        }\n                    }\n                }\n                if (withHeader) {\n                    var headerTextArray = [];\n                    for (var i = 0; i < this.treeGridParent.getVisibleColumns().length; i++) {\n                        headerTextArray[parseInt(i.toString(), 10)] =\n                            this.treeGridParent.getVisibleColumns()[parseInt(i.toString(), 10)].headerText;\n                    }\n                    this[\"\" + getCopyData](headerTextArray, false, '\\t', withHeader);\n                    this.treeCopyContent = this[\"\" + copyContent] + '\\n' + this.treeCopyContent;\n                }\n                var args = {\n                    data: this.treeCopyContent,\n                    cancel: false\n                };\n                this.treeGridParent.trigger(events.beforeCopy, args);\n                if (args.cancel) {\n                    return;\n                }\n                this.clipBoardTextArea.value = this[\"\" + copyContent] = args.data;\n                if (!Browser.userAgent.match(/ipad|ipod|iphone/i)) {\n                    this.clipBoardTextArea.select();\n                }\n                else {\n                    this.clipBoardTextArea.setSelectionRange(0, this.clipBoardTextArea.value.length);\n                }\n                this[\"\" + isSelect] = true;\n                this.copiedUniqueIdCollection = [];\n                this.treeCopyContent = '';\n            }\n            else {\n                _super.prototype.setCopyData.call(this, withHeader);\n            }\n        }\n    };\n    TreeClipboard.prototype.parentContentData = function (currentRecords, selectedIndex, rows, withHeader, index) {\n        var getCopyData = 'getCopyData';\n        var copyContent = 'copyContent';\n        var parentItem = 'parentItem';\n        var uniqueID = 'uniqueID';\n        var level = 'level';\n        if (!isNullOrUndefined(currentRecords[parseInt(selectedIndex.toString(), 10)][\"\" + parentItem])) {\n            var treeLevel = currentRecords[parseInt(selectedIndex.toString(), 10)][\"\" + parentItem][\"\" + level];\n            for (var i = 0; i < treeLevel + 1; i++) {\n                for (var j = 0; j < currentRecords.length; j++) {\n                    if (!isNullOrUndefined(currentRecords[parseInt(selectedIndex.toString(), 10)][\"\" + parentItem]) &&\n                        currentRecords[parseInt(j.toString(), 10)][\"\" + uniqueID] === currentRecords[parseInt(selectedIndex.toString(), 10)][\"\" + parentItem][\"\" + uniqueID]) {\n                        selectedIndex = j;\n                        var cells = [].slice.call(rows[parseInt(selectedIndex.toString(), 10)].querySelectorAll('.e-rowcell'));\n                        var uniqueid = currentRecords[parseInt(j.toString(), 10)][\"\" + uniqueID];\n                        if (this.copiedUniqueIdCollection.indexOf(uniqueid) === -1) {\n                            this[\"\" + getCopyData](cells, false, '\\t', withHeader);\n                            if (index > 0) {\n                                this.treeCopyContent = this.treeCopyContent + this[\"\" + copyContent] + '\\n';\n                            }\n                            else {\n                                this.treeCopyContent = this[\"\" + copyContent] + '\\n' + this.treeCopyContent;\n                            }\n                            this.copiedUniqueIdCollection.push(uniqueid);\n                            this[\"\" + copyContent] = '';\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    TreeClipboard.prototype.copy = function (withHeader) {\n        _super.prototype.copy.call(this, withHeader);\n    };\n    TreeClipboard.prototype.paste = function (data, rowIndex, colIndex) {\n        _super.prototype.paste.call(this, data, rowIndex, colIndex);\n    };\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns clipboard module name\n     */\n    TreeClipboard.prototype.getModuleName = function () {\n        return 'clipboard';\n    };\n    /**\n     * To destroy the clipboard\n     *\n     * @returns {void}\n     * @hidden\n     */\n    TreeClipboard.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n    };\n    TreeClipboard.prototype.childContentData = function (currentRecords, selectedIndex, rows, withHeader) {\n        var getCopyData = 'getCopyData';\n        var copyContent = 'copyContent';\n        var childRecords = 'childRecords';\n        var hasChildRecords = 'hasChildRecords';\n        var uniqueID = 'uniqueID';\n        if (currentRecords[parseInt(selectedIndex.toString(), 10)][\"\" + hasChildRecords]) {\n            var childData = currentRecords[parseInt(selectedIndex.toString(), 10)][\"\" + childRecords];\n            for (var i = 0; i < childData.length; i++) {\n                for (var j = 0; j < currentRecords.length; j++) {\n                    if (!isNullOrUndefined(childData[parseInt(i.toString(), 10)][\"\" + uniqueID]) && currentRecords[parseInt(j.toString(), 10)][\"\" + uniqueID] === childData[parseInt(i.toString(), 10)][\"\" + uniqueID]) {\n                        if ((!isNullOrUndefined(rows[parseInt(j.toString(), 10)])) && !rows[parseInt(j.toString(), 10)].classList.contains('e-summaryrow')) {\n                            var cells = [].slice.call(rows[parseInt(j.toString(), 10)].querySelectorAll('.e-rowcell'));\n                            var uniqueid = currentRecords[parseInt(j.toString(), 10)][\"\" + uniqueID];\n                            if (this.copiedUniqueIdCollection.indexOf(uniqueid) === -1) {\n                                this[\"\" + getCopyData](cells, false, '\\t', withHeader);\n                                this.treeCopyContent += ('\\n' + this[\"\" + copyContent]);\n                                this[\"\" + copyContent] = '';\n                                this.copiedUniqueIdCollection.push(uniqueid);\n                                this.childContentData(currentRecords, j, rows, withHeader);\n                            }\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n    };\n    return TreeClipboard;\n}(GridClipboard));\nexport { TreeClipboard };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}