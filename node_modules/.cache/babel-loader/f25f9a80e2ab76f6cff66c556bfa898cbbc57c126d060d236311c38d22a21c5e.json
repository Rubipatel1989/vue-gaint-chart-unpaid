{"ast":null,"code":"import { MarkdownSelection } from '../../markdown-parser/plugin/markdown-selection';\nimport * as events from '../base/constant';\nimport { getDefaultMDTbStatus } from '../../common/util';\n/**\n * MarkdownToolbarStatus module for refresh the toolbar status\n */\nvar MarkdownToolbarStatus = /** @class */function () {\n  function MarkdownToolbarStatus(parent) {\n    this.toolbarStatus = this.prevToolbarStatus = getDefaultMDTbStatus();\n    this.selection = new MarkdownSelection();\n    this.parent = parent;\n    this.element = this.parent.contentModule.getEditPanel();\n    this.addEventListener();\n  }\n  MarkdownToolbarStatus.prototype.addEventListener = function () {\n    this.parent.on(events.toolbarRefresh, this.onRefreshHandler, this);\n    this.parent.on(events.destroy, this.removeEventListener, this);\n  };\n  MarkdownToolbarStatus.prototype.removeEventListener = function () {\n    this.parent.off(events.toolbarRefresh, this.onRefreshHandler);\n    this.parent.off(events.destroy, this.removeEventListener);\n  };\n  MarkdownToolbarStatus.prototype.onRefreshHandler = function (args) {\n    var parentsLines = this.selection.getSelectedParentPoints(this.element);\n    this.toolbarStatus = {\n      orderedlist: args.documentNode ? false : this.isListsApplied(parentsLines, 'OL'),\n      unorderedlist: args.documentNode ? false : this.isListsApplied(parentsLines, 'UL'),\n      formats: this.currentFormat(parentsLines, args.documentNode),\n      bold: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('Bold'),\n      italic: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('Italic'),\n      inlinecode: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('InlineCode'),\n      strikethrough: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('StrikeThrough'),\n      subscript: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('SubScript'),\n      superscript: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('SuperScript'),\n      uppercase: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('UpperCase')\n    };\n    if (this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('InlineCode')) {\n      this.toolbarStatus.formats = 'pre';\n    }\n    var tbStatusString = JSON.stringify(this.toolbarStatus);\n    this.parent.notify(events.toolbarUpdated, this.toolbarStatus);\n    if (JSON.stringify(this.prevToolbarStatus) !== tbStatusString) {\n      this.parent.notify(events.updateTbItemsStatus, {\n        html: null,\n        markdown: JSON.parse(tbStatusString)\n      });\n      this.prevToolbarStatus = JSON.parse(tbStatusString);\n    }\n  };\n  MarkdownToolbarStatus.prototype.isListsApplied = function (lines, type) {\n    var isApply = true;\n    if (type === 'OL') {\n      for (var i = 0; i < lines.length; i++) {\n        var lineSplit = lines[i].text.trim().split(' ', 2)[0] + ' ';\n        if (!/^[\\d.]+[ ]+$/.test(lineSplit)) {\n          isApply = false;\n          break;\n        }\n      }\n    } else {\n      for (var i = 0; i < lines.length; i++) {\n        if (!this.selection.isStartWith(lines[i].text, this.parent.formatter.listTags[\"\" + type])) {\n          isApply = false;\n          break;\n        }\n      }\n    }\n    return isApply;\n  };\n  MarkdownToolbarStatus.prototype.currentFormat = function (lines, documentNode) {\n    var format = 'p';\n    var keys = Object.keys(this.parent.formatter.formatTags);\n    var direction = this.element.selectionDirection;\n    var checkLine = direction === 'backward' ? lines[0].text : lines[lines.length - 1].text;\n    for (var i = 0; !documentNode && i < keys.length; i++) {\n      if (keys[i] !== 'pre' && this.selection.isStartWith(checkLine, this.parent.formatter.formatTags[keys[i]])) {\n        format = keys[i];\n        break;\n      } else if (keys[i] === 'pre') {\n        if (this.codeFormat()) {\n          format = keys[i];\n          break;\n        }\n      }\n    }\n    return format;\n  };\n  MarkdownToolbarStatus.prototype.codeFormat = function () {\n    var isFormat = false;\n    var textArea = this.parent.inputElement;\n    var start = textArea.selectionStart;\n    var splitAt = function (index) {\n      return function (x) {\n        return [x.slice(0, index), x.slice(index)];\n      };\n    };\n    var splitText = splitAt(start)(textArea.value);\n    var cmdPre = this.parent.formatter.formatTags.pre;\n    var selectedText = this.getSelectedText(textArea);\n    if (selectedText !== '' && selectedText === selectedText.toLocaleUpperCase()) {\n      return true;\n    } else if (selectedText === '') {\n      var beforeText = textArea.value.substr(splitText[0].length - 1, 1);\n      var afterText = splitText[1].substr(0, 1);\n      if (beforeText !== '' && afterText !== '' && beforeText.match(/[a-z]/i) && beforeText === beforeText.toLocaleUpperCase() && afterText === afterText.toLocaleUpperCase()) {\n        return true;\n      }\n    }\n    if (this.isCode(splitText[0], cmdPre) && this.isCode(splitText[1], cmdPre) && splitText[0].match(this.multiCharRegx(cmdPre)).length % 2 === 1 && splitText[1].match(this.multiCharRegx(cmdPre)).length % 2 === 1) {\n      isFormat = true;\n    }\n    return isFormat;\n  };\n  MarkdownToolbarStatus.prototype.getSelectedText = function (textarea) {\n    return textarea.value.substring(textarea.selectionStart, textarea.selectionEnd);\n  };\n  MarkdownToolbarStatus.prototype.isCode = function (text, cmd) {\n    return text.search('\\\\' + cmd + '') !== -1;\n  };\n  MarkdownToolbarStatus.prototype.multiCharRegx = function (cmd) {\n    var regExp = RegExp;\n    return new regExp('(\\\\' + cmd + ')', 'g');\n  };\n  return MarkdownToolbarStatus;\n}();\nexport { MarkdownToolbarStatus };","map":{"version":3,"names":["MarkdownSelection","events","getDefaultMDTbStatus","MarkdownToolbarStatus","parent","toolbarStatus","prevToolbarStatus","selection","element","contentModule","getEditPanel","addEventListener","prototype","on","toolbarRefresh","onRefreshHandler","destroy","removeEventListener","off","args","parentsLines","getSelectedParentPoints","orderedlist","documentNode","isListsApplied","unorderedlist","formats","currentFormat","bold","formatter","editorManager","mdSelectionFormats","isAppliedCommand","italic","inlinecode","strikethrough","subscript","superscript","uppercase","tbStatusString","JSON","stringify","notify","toolbarUpdated","updateTbItemsStatus","html","markdown","parse","lines","type","isApply","i","length","lineSplit","text","trim","split","test","isStartWith","listTags","format","keys","Object","formatTags","direction","selectionDirection","checkLine","codeFormat","isFormat","textArea","inputElement","start","selectionStart","splitAt","index","x","slice","splitText","value","cmdPre","pre","selectedText","getSelectedText","toLocaleUpperCase","beforeText","substr","afterText","match","isCode","multiCharRegx","textarea","substring","selectionEnd","cmd","search","regExp","RegExp"],"sources":["/var/www/vue/vue-gantt-chart/node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/actions/markdown-toolbar-status.js"],"sourcesContent":["import { MarkdownSelection } from '../../markdown-parser/plugin/markdown-selection';\nimport * as events from '../base/constant';\nimport { getDefaultMDTbStatus } from '../../common/util';\n/**\n * MarkdownToolbarStatus module for refresh the toolbar status\n */\nvar MarkdownToolbarStatus = /** @class */ (function () {\n    function MarkdownToolbarStatus(parent) {\n        this.toolbarStatus = this.prevToolbarStatus = getDefaultMDTbStatus();\n        this.selection = new MarkdownSelection();\n        this.parent = parent;\n        this.element = this.parent.contentModule.getEditPanel();\n        this.addEventListener();\n    }\n    MarkdownToolbarStatus.prototype.addEventListener = function () {\n        this.parent.on(events.toolbarRefresh, this.onRefreshHandler, this);\n        this.parent.on(events.destroy, this.removeEventListener, this);\n    };\n    MarkdownToolbarStatus.prototype.removeEventListener = function () {\n        this.parent.off(events.toolbarRefresh, this.onRefreshHandler);\n        this.parent.off(events.destroy, this.removeEventListener);\n    };\n    MarkdownToolbarStatus.prototype.onRefreshHandler = function (args) {\n        var parentsLines = this.selection.getSelectedParentPoints(this.element);\n        this.toolbarStatus = {\n            orderedlist: args.documentNode ? false : this.isListsApplied(parentsLines, 'OL'),\n            unorderedlist: args.documentNode ? false : this.isListsApplied(parentsLines, 'UL'),\n            formats: this.currentFormat(parentsLines, args.documentNode),\n            bold: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('Bold'),\n            italic: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('Italic'),\n            inlinecode: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('InlineCode'),\n            strikethrough: args.documentNode ? false :\n                this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('StrikeThrough'),\n            subscript: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('SubScript'),\n            superscript: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('SuperScript'),\n            uppercase: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('UpperCase')\n        };\n        if (this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('InlineCode')) {\n            this.toolbarStatus.formats = 'pre';\n        }\n        var tbStatusString = JSON.stringify(this.toolbarStatus);\n        this.parent.notify(events.toolbarUpdated, this.toolbarStatus);\n        if (JSON.stringify(this.prevToolbarStatus) !== tbStatusString) {\n            this.parent.notify(events.updateTbItemsStatus, { html: null, markdown: JSON.parse(tbStatusString) });\n            this.prevToolbarStatus = JSON.parse(tbStatusString);\n        }\n    };\n    MarkdownToolbarStatus.prototype.isListsApplied = function (lines, type) {\n        var isApply = true;\n        if (type === 'OL') {\n            for (var i = 0; i < lines.length; i++) {\n                var lineSplit = lines[i].text.trim().split(' ', 2)[0] + ' ';\n                if (!/^[\\d.]+[ ]+$/.test(lineSplit)) {\n                    isApply = false;\n                    break;\n                }\n            }\n        }\n        else {\n            for (var i = 0; i < lines.length; i++) {\n                if (!this.selection.isStartWith(lines[i].text, this.parent.formatter.listTags[\"\" + type])) {\n                    isApply = false;\n                    break;\n                }\n            }\n        }\n        return isApply;\n    };\n    MarkdownToolbarStatus.prototype.currentFormat = function (lines, documentNode) {\n        var format = 'p';\n        var keys = Object.keys(this.parent.formatter.formatTags);\n        var direction = this.element.selectionDirection;\n        var checkLine = direction === 'backward' ? lines[0].text : lines[lines.length - 1].text;\n        for (var i = 0; !documentNode && i < keys.length; i++) {\n            if (keys[i] !== 'pre' && this.selection.isStartWith(checkLine, this.parent.formatter.formatTags[keys[i]])) {\n                format = keys[i];\n                break;\n            }\n            else if (keys[i] === 'pre') {\n                if (this.codeFormat()) {\n                    format = keys[i];\n                    break;\n                }\n            }\n        }\n        return format;\n    };\n    MarkdownToolbarStatus.prototype.codeFormat = function () {\n        var isFormat = false;\n        var textArea = this.parent.inputElement;\n        var start = textArea.selectionStart;\n        var splitAt = function (index) { return function (x) { return [x.slice(0, index), x.slice(index)]; }; };\n        var splitText = splitAt(start)(textArea.value);\n        var cmdPre = this.parent.formatter.formatTags.pre;\n        var selectedText = this.getSelectedText(textArea);\n        if (selectedText !== '' && selectedText === selectedText.toLocaleUpperCase()) {\n            return true;\n        }\n        else if (selectedText === '') {\n            var beforeText = textArea.value.substr(splitText[0].length - 1, 1);\n            var afterText = splitText[1].substr(0, 1);\n            if ((beforeText !== '' && afterText !== '' && beforeText.match(/[a-z]/i)) &&\n                beforeText === beforeText.toLocaleUpperCase() && afterText === afterText.toLocaleUpperCase()) {\n                return true;\n            }\n        }\n        if ((this.isCode(splitText[0], cmdPre) && this.isCode(splitText[1], cmdPre)) &&\n            (splitText[0].match(this.multiCharRegx(cmdPre)).length % 2 === 1 &&\n                splitText[1].match(this.multiCharRegx(cmdPre)).length % 2 === 1)) {\n            isFormat = true;\n        }\n        return isFormat;\n    };\n    MarkdownToolbarStatus.prototype.getSelectedText = function (textarea) {\n        return textarea.value.substring(textarea.selectionStart, textarea.selectionEnd);\n    };\n    MarkdownToolbarStatus.prototype.isCode = function (text, cmd) {\n        return text.search('\\\\' + cmd + '') !== -1;\n    };\n    MarkdownToolbarStatus.prototype.multiCharRegx = function (cmd) {\n        var regExp = RegExp;\n        return new regExp('(\\\\' + cmd + ')', 'g');\n    };\n    return MarkdownToolbarStatus;\n}());\nexport { MarkdownToolbarStatus };\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,iDAAiD;AACnF,OAAO,KAAKC,MAAM,MAAM,kBAAkB;AAC1C,SAASC,oBAAoB,QAAQ,mBAAmB;AACxD;AACA;AACA;AACA,IAAIC,qBAAqB,GAAG,aAAe,YAAY;EACnD,SAASA,qBAAqBA,CAACC,MAAM,EAAE;IACnC,IAAI,CAACC,aAAa,GAAG,IAAI,CAACC,iBAAiB,GAAGJ,oBAAoB,CAAC,CAAC;IACpE,IAAI,CAACK,SAAS,GAAG,IAAIP,iBAAiB,CAAC,CAAC;IACxC,IAAI,CAACI,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACI,OAAO,GAAG,IAAI,CAACJ,MAAM,CAACK,aAAa,CAACC,YAAY,CAAC,CAAC;IACvD,IAAI,CAACC,gBAAgB,CAAC,CAAC;EAC3B;EACAR,qBAAqB,CAACS,SAAS,CAACD,gBAAgB,GAAG,YAAY;IAC3D,IAAI,CAACP,MAAM,CAACS,EAAE,CAACZ,MAAM,CAACa,cAAc,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;IAClE,IAAI,CAACX,MAAM,CAACS,EAAE,CAACZ,MAAM,CAACe,OAAO,EAAE,IAAI,CAACC,mBAAmB,EAAE,IAAI,CAAC;EAClE,CAAC;EACDd,qBAAqB,CAACS,SAAS,CAACK,mBAAmB,GAAG,YAAY;IAC9D,IAAI,CAACb,MAAM,CAACc,GAAG,CAACjB,MAAM,CAACa,cAAc,EAAE,IAAI,CAACC,gBAAgB,CAAC;IAC7D,IAAI,CAACX,MAAM,CAACc,GAAG,CAACjB,MAAM,CAACe,OAAO,EAAE,IAAI,CAACC,mBAAmB,CAAC;EAC7D,CAAC;EACDd,qBAAqB,CAACS,SAAS,CAACG,gBAAgB,GAAG,UAAUI,IAAI,EAAE;IAC/D,IAAIC,YAAY,GAAG,IAAI,CAACb,SAAS,CAACc,uBAAuB,CAAC,IAAI,CAACb,OAAO,CAAC;IACvE,IAAI,CAACH,aAAa,GAAG;MACjBiB,WAAW,EAAEH,IAAI,CAACI,YAAY,GAAG,KAAK,GAAG,IAAI,CAACC,cAAc,CAACJ,YAAY,EAAE,IAAI,CAAC;MAChFK,aAAa,EAAEN,IAAI,CAACI,YAAY,GAAG,KAAK,GAAG,IAAI,CAACC,cAAc,CAACJ,YAAY,EAAE,IAAI,CAAC;MAClFM,OAAO,EAAE,IAAI,CAACC,aAAa,CAACP,YAAY,EAAED,IAAI,CAACI,YAAY,CAAC;MAC5DK,IAAI,EAAET,IAAI,CAACI,YAAY,GAAG,KAAK,GAAG,IAAI,CAACnB,MAAM,CAACyB,SAAS,CAACC,aAAa,CAACC,kBAAkB,CAACC,gBAAgB,CAAC,MAAM,CAAC;MACjHC,MAAM,EAAEd,IAAI,CAACI,YAAY,GAAG,KAAK,GAAG,IAAI,CAACnB,MAAM,CAACyB,SAAS,CAACC,aAAa,CAACC,kBAAkB,CAACC,gBAAgB,CAAC,QAAQ,CAAC;MACrHE,UAAU,EAAEf,IAAI,CAACI,YAAY,GAAG,KAAK,GAAG,IAAI,CAACnB,MAAM,CAACyB,SAAS,CAACC,aAAa,CAACC,kBAAkB,CAACC,gBAAgB,CAAC,YAAY,CAAC;MAC7HG,aAAa,EAAEhB,IAAI,CAACI,YAAY,GAAG,KAAK,GACpC,IAAI,CAACnB,MAAM,CAACyB,SAAS,CAACC,aAAa,CAACC,kBAAkB,CAACC,gBAAgB,CAAC,eAAe,CAAC;MAC5FI,SAAS,EAAEjB,IAAI,CAACI,YAAY,GAAG,KAAK,GAAG,IAAI,CAACnB,MAAM,CAACyB,SAAS,CAACC,aAAa,CAACC,kBAAkB,CAACC,gBAAgB,CAAC,WAAW,CAAC;MAC3HK,WAAW,EAAElB,IAAI,CAACI,YAAY,GAAG,KAAK,GAAG,IAAI,CAACnB,MAAM,CAACyB,SAAS,CAACC,aAAa,CAACC,kBAAkB,CAACC,gBAAgB,CAAC,aAAa,CAAC;MAC/HM,SAAS,EAAEnB,IAAI,CAACI,YAAY,GAAG,KAAK,GAAG,IAAI,CAACnB,MAAM,CAACyB,SAAS,CAACC,aAAa,CAACC,kBAAkB,CAACC,gBAAgB,CAAC,WAAW;IAC9H,CAAC;IACD,IAAI,IAAI,CAAC5B,MAAM,CAACyB,SAAS,CAACC,aAAa,CAACC,kBAAkB,CAACC,gBAAgB,CAAC,YAAY,CAAC,EAAE;MACvF,IAAI,CAAC3B,aAAa,CAACqB,OAAO,GAAG,KAAK;IACtC;IACA,IAAIa,cAAc,GAAGC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACpC,aAAa,CAAC;IACvD,IAAI,CAACD,MAAM,CAACsC,MAAM,CAACzC,MAAM,CAAC0C,cAAc,EAAE,IAAI,CAACtC,aAAa,CAAC;IAC7D,IAAImC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACnC,iBAAiB,CAAC,KAAKiC,cAAc,EAAE;MAC3D,IAAI,CAACnC,MAAM,CAACsC,MAAM,CAACzC,MAAM,CAAC2C,mBAAmB,EAAE;QAAEC,IAAI,EAAE,IAAI;QAAEC,QAAQ,EAAEN,IAAI,CAACO,KAAK,CAACR,cAAc;MAAE,CAAC,CAAC;MACpG,IAAI,CAACjC,iBAAiB,GAAGkC,IAAI,CAACO,KAAK,CAACR,cAAc,CAAC;IACvD;EACJ,CAAC;EACDpC,qBAAqB,CAACS,SAAS,CAACY,cAAc,GAAG,UAAUwB,KAAK,EAAEC,IAAI,EAAE;IACpE,IAAIC,OAAO,GAAG,IAAI;IAClB,IAAID,IAAI,KAAK,IAAI,EAAE;MACf,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;QACnC,IAAIE,SAAS,GAAGL,KAAK,CAACG,CAAC,CAAC,CAACG,IAAI,CAACC,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG;QAC3D,IAAI,CAAC,cAAc,CAACC,IAAI,CAACJ,SAAS,CAAC,EAAE;UACjCH,OAAO,GAAG,KAAK;UACf;QACJ;MACJ;IACJ,CAAC,MACI;MACD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;QACnC,IAAI,CAAC,IAAI,CAAC5C,SAAS,CAACmD,WAAW,CAACV,KAAK,CAACG,CAAC,CAAC,CAACG,IAAI,EAAE,IAAI,CAAClD,MAAM,CAACyB,SAAS,CAAC8B,QAAQ,CAAC,EAAE,GAAGV,IAAI,CAAC,CAAC,EAAE;UACvFC,OAAO,GAAG,KAAK;UACf;QACJ;MACJ;IACJ;IACA,OAAOA,OAAO;EAClB,CAAC;EACD/C,qBAAqB,CAACS,SAAS,CAACe,aAAa,GAAG,UAAUqB,KAAK,EAAEzB,YAAY,EAAE;IAC3E,IAAIqC,MAAM,GAAG,GAAG;IAChB,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAAC,IAAI,CAACzD,MAAM,CAACyB,SAAS,CAACkC,UAAU,CAAC;IACxD,IAAIC,SAAS,GAAG,IAAI,CAACxD,OAAO,CAACyD,kBAAkB;IAC/C,IAAIC,SAAS,GAAGF,SAAS,KAAK,UAAU,GAAGhB,KAAK,CAAC,CAAC,CAAC,CAACM,IAAI,GAAGN,KAAK,CAACA,KAAK,CAACI,MAAM,GAAG,CAAC,CAAC,CAACE,IAAI;IACvF,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAE,CAAC5B,YAAY,IAAI4B,CAAC,GAAGU,IAAI,CAACT,MAAM,EAAED,CAAC,EAAE,EAAE;MACnD,IAAIU,IAAI,CAACV,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI,CAAC5C,SAAS,CAACmD,WAAW,CAACQ,SAAS,EAAE,IAAI,CAAC9D,MAAM,CAACyB,SAAS,CAACkC,UAAU,CAACF,IAAI,CAACV,CAAC,CAAC,CAAC,CAAC,EAAE;QACvGS,MAAM,GAAGC,IAAI,CAACV,CAAC,CAAC;QAChB;MACJ,CAAC,MACI,IAAIU,IAAI,CAACV,CAAC,CAAC,KAAK,KAAK,EAAE;QACxB,IAAI,IAAI,CAACgB,UAAU,CAAC,CAAC,EAAE;UACnBP,MAAM,GAAGC,IAAI,CAACV,CAAC,CAAC;UAChB;QACJ;MACJ;IACJ;IACA,OAAOS,MAAM;EACjB,CAAC;EACDzD,qBAAqB,CAACS,SAAS,CAACuD,UAAU,GAAG,YAAY;IACrD,IAAIC,QAAQ,GAAG,KAAK;IACpB,IAAIC,QAAQ,GAAG,IAAI,CAACjE,MAAM,CAACkE,YAAY;IACvC,IAAIC,KAAK,GAAGF,QAAQ,CAACG,cAAc;IACnC,IAAIC,OAAO,GAAG,SAAAA,CAAUC,KAAK,EAAE;MAAE,OAAO,UAAUC,CAAC,EAAE;QAAE,OAAO,CAACA,CAAC,CAACC,KAAK,CAAC,CAAC,EAAEF,KAAK,CAAC,EAAEC,CAAC,CAACC,KAAK,CAACF,KAAK,CAAC,CAAC;MAAE,CAAC;IAAE,CAAC;IACvG,IAAIG,SAAS,GAAGJ,OAAO,CAACF,KAAK,CAAC,CAACF,QAAQ,CAACS,KAAK,CAAC;IAC9C,IAAIC,MAAM,GAAG,IAAI,CAAC3E,MAAM,CAACyB,SAAS,CAACkC,UAAU,CAACiB,GAAG;IACjD,IAAIC,YAAY,GAAG,IAAI,CAACC,eAAe,CAACb,QAAQ,CAAC;IACjD,IAAIY,YAAY,KAAK,EAAE,IAAIA,YAAY,KAAKA,YAAY,CAACE,iBAAiB,CAAC,CAAC,EAAE;MAC1E,OAAO,IAAI;IACf,CAAC,MACI,IAAIF,YAAY,KAAK,EAAE,EAAE;MAC1B,IAAIG,UAAU,GAAGf,QAAQ,CAACS,KAAK,CAACO,MAAM,CAACR,SAAS,CAAC,CAAC,CAAC,CAACzB,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC;MAClE,IAAIkC,SAAS,GAAGT,SAAS,CAAC,CAAC,CAAC,CAACQ,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;MACzC,IAAKD,UAAU,KAAK,EAAE,IAAIE,SAAS,KAAK,EAAE,IAAIF,UAAU,CAACG,KAAK,CAAC,QAAQ,CAAC,IACpEH,UAAU,KAAKA,UAAU,CAACD,iBAAiB,CAAC,CAAC,IAAIG,SAAS,KAAKA,SAAS,CAACH,iBAAiB,CAAC,CAAC,EAAE;QAC9F,OAAO,IAAI;MACf;IACJ;IACA,IAAK,IAAI,CAACK,MAAM,CAACX,SAAS,CAAC,CAAC,CAAC,EAAEE,MAAM,CAAC,IAAI,IAAI,CAACS,MAAM,CAACX,SAAS,CAAC,CAAC,CAAC,EAAEE,MAAM,CAAC,IACtEF,SAAS,CAAC,CAAC,CAAC,CAACU,KAAK,CAAC,IAAI,CAACE,aAAa,CAACV,MAAM,CAAC,CAAC,CAAC3B,MAAM,GAAG,CAAC,KAAK,CAAC,IAC5DyB,SAAS,CAAC,CAAC,CAAC,CAACU,KAAK,CAAC,IAAI,CAACE,aAAa,CAACV,MAAM,CAAC,CAAC,CAAC3B,MAAM,GAAG,CAAC,KAAK,CAAE,EAAE;MACtEgB,QAAQ,GAAG,IAAI;IACnB;IACA,OAAOA,QAAQ;EACnB,CAAC;EACDjE,qBAAqB,CAACS,SAAS,CAACsE,eAAe,GAAG,UAAUQ,QAAQ,EAAE;IAClE,OAAOA,QAAQ,CAACZ,KAAK,CAACa,SAAS,CAACD,QAAQ,CAAClB,cAAc,EAAEkB,QAAQ,CAACE,YAAY,CAAC;EACnF,CAAC;EACDzF,qBAAqB,CAACS,SAAS,CAAC4E,MAAM,GAAG,UAAUlC,IAAI,EAAEuC,GAAG,EAAE;IAC1D,OAAOvC,IAAI,CAACwC,MAAM,CAAC,IAAI,GAAGD,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC;EAC9C,CAAC;EACD1F,qBAAqB,CAACS,SAAS,CAAC6E,aAAa,GAAG,UAAUI,GAAG,EAAE;IAC3D,IAAIE,MAAM,GAAGC,MAAM;IACnB,OAAO,IAAID,MAAM,CAAC,KAAK,GAAGF,GAAG,GAAG,GAAG,EAAE,GAAG,CAAC;EAC7C,CAAC;EACD,OAAO1F,qBAAqB;AAChC,CAAC,CAAC,CAAE;AACJ,SAASA,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}