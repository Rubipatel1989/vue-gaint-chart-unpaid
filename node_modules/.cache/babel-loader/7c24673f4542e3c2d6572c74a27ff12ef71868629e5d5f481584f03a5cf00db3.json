{"ast":null,"code":"import { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport { Sort as GridSort, Grid, getActualProperties } from '@syncfusion/ej2-grids';\nimport { getParentData } from '../utils';\n/**\n * Internal dataoperations for TreeGrid\n *\n * @hidden\n */\nvar Sort = /** @class */function () {\n  function Sort(grid) {\n    Grid.Inject(GridSort);\n    this.parent = grid;\n    this.taskIds = [];\n    this.flatSortedData = [];\n    this.storedIndex = -1;\n    this.isSelfReference = !isNullOrUndefined(this.parent.parentIdMapping);\n    this.addEventListener();\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @private\n   * @returns {string} Returns Sort module name\n   */\n  Sort.prototype.getModuleName = function () {\n    return 'sort';\n  };\n  /**\n   * @hidden\n   */\n  Sort.prototype.addEventListener = function () {\n    this.parent.on('updateModel', this.updateModel, this);\n    this.parent.on('createSort', this.createdSortedRecords, this);\n  };\n  /**\n   * @hidden\n   * @returns {void}\n   */\n  Sort.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n    this.parent.off('updateModel', this.updateModel);\n    this.parent.off('createSort', this.createdSortedRecords);\n  };\n  Sort.prototype.createdSortedRecords = function (sortParams) {\n    var data = sortParams.modifiedData;\n    var srtQry = sortParams.srtQry;\n    this.iterateSort(data, srtQry);\n    this.storedIndex = -1;\n    sortParams.modifiedData = this.flatSortedData;\n    this.flatSortedData = [];\n  };\n  Sort.prototype.iterateSort = function (data, srtQry) {\n    for (var d = 0; d < data.length; d++) {\n      if (this.parent.grid.filterSettings.columns.length > 0 || this.parent.grid.searchSettings.key !== '') {\n        if (!isNullOrUndefined(getParentData(this.parent, data[parseInt(d.toString(), 10)].uniqueID, true))) {\n          this.storedIndex++;\n          this.flatSortedData[this.storedIndex] = data[parseInt(d.toString(), 10)];\n        }\n      } else {\n        this.storedIndex++;\n        this.flatSortedData[this.storedIndex] = data[parseInt(d.toString(), 10)];\n      }\n      if (data[parseInt(d.toString(), 10)].hasChildRecords) {\n        var childSort = new DataManager(data[parseInt(d.toString(), 10)].childRecords).executeLocal(srtQry);\n        if (this.parent.allowRowDragAndDrop && data[parseInt(d.toString(), 10)].childRecords.indexOf(this.parent.rowDragAndDropModule['draggedRecord']) !== -1 && this.parent.rowDragAndDropModule['dropPosition'] !== 'middleSegment') {\n          var dragdIndex = childSort.indexOf(this.parent.rowDragAndDropModule['draggedRecord']);\n          childSort.splice(dragdIndex, 1);\n          var dropdIndex = childSort.indexOf(this.parent.rowDragAndDropModule['droppedRecord']);\n          if (this.parent.rowDragAndDropModule['dropPosition'] === 'topSegment') {\n            childSort.splice(dropdIndex, 0, this.parent.rowDragAndDropModule['draggedRecord']);\n          } else if (this.parent.rowDragAndDropModule['dropPosition'] === 'bottomSegment') {\n            childSort.splice(dropdIndex + 1, 0, this.parent.rowDragAndDropModule['draggedRecord']);\n          }\n        }\n        this.iterateSort(childSort, srtQry);\n      }\n    }\n  };\n  /**\n   * Sorts a column with the given options.\n   *\n   * @param {string} columnName - Defines the column name to be sorted.\n   * @param {SortDirection} direction - Defines the direction of sorting field.\n   * @param {boolean} isMultiSort - Specifies whether the previous sorted columns are to be maintained.\n   * @returns {void}\n   */\n  Sort.prototype.sortColumn = function (columnName, direction, isMultiSort) {\n    this.parent.grid.sortColumn(columnName, direction, isMultiSort);\n  };\n  Sort.prototype.removeSortColumn = function (field) {\n    this.parent.grid.removeSortColumn(field);\n  };\n  /**\n   * The function used to update sortSettings of TreeGrid.\n   *\n   * @returns {void}\n   * @hidden\n   */\n  Sort.prototype.updateModel = function () {\n    this.parent.setProperties({\n      sortSettings: getActualProperties(this.parent.grid.sortSettings)\n    }, true);\n  };\n  /**\n   * Clears all the sorted columns of the TreeGrid.\n   *\n   * @returns {void}\n   */\n  Sort.prototype.clearSorting = function () {\n    this.parent.grid.clearSorting();\n    this.updateModel();\n  };\n  /**\n   * Destroys the Sorting of TreeGrid.\n   *\n   * @function destroy\n   * @returns {void}\n   */\n  Sort.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n  return Sort;\n}();\nexport { Sort };","map":{"version":3,"names":["isNullOrUndefined","DataManager","Sort","GridSort","Grid","getActualProperties","getParentData","grid","Inject","parent","taskIds","flatSortedData","storedIndex","isSelfReference","parentIdMapping","addEventListener","prototype","getModuleName","on","updateModel","createdSortedRecords","removeEventListener","isDestroyed","off","sortParams","data","modifiedData","srtQry","iterateSort","d","length","filterSettings","columns","searchSettings","key","parseInt","toString","uniqueID","hasChildRecords","childSort","childRecords","executeLocal","allowRowDragAndDrop","indexOf","rowDragAndDropModule","dragdIndex","splice","dropdIndex","sortColumn","columnName","direction","isMultiSort","removeSortColumn","field","setProperties","sortSettings","clearSorting","destroy"],"sources":["/var/www/vue/vue-gantt-chart/node_modules/@syncfusion/ej2-treegrid/src/treegrid/actions/sort.js"],"sourcesContent":["import { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport { Sort as GridSort, Grid, getActualProperties } from '@syncfusion/ej2-grids';\nimport { getParentData } from '../utils';\n/**\n * Internal dataoperations for TreeGrid\n *\n * @hidden\n */\nvar Sort = /** @class */ (function () {\n    function Sort(grid) {\n        Grid.Inject(GridSort);\n        this.parent = grid;\n        this.taskIds = [];\n        this.flatSortedData = [];\n        this.storedIndex = -1;\n        this.isSelfReference = !isNullOrUndefined(this.parent.parentIdMapping);\n        this.addEventListener();\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns Sort module name\n     */\n    Sort.prototype.getModuleName = function () {\n        return 'sort';\n    };\n    /**\n     * @hidden\n     */\n    Sort.prototype.addEventListener = function () {\n        this.parent.on('updateModel', this.updateModel, this);\n        this.parent.on('createSort', this.createdSortedRecords, this);\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Sort.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('updateModel', this.updateModel);\n        this.parent.off('createSort', this.createdSortedRecords);\n    };\n    Sort.prototype.createdSortedRecords = function (sortParams) {\n        var data = sortParams.modifiedData;\n        var srtQry = sortParams.srtQry;\n        this.iterateSort(data, srtQry);\n        this.storedIndex = -1;\n        sortParams.modifiedData = this.flatSortedData;\n        this.flatSortedData = [];\n    };\n    Sort.prototype.iterateSort = function (data, srtQry) {\n        for (var d = 0; d < data.length; d++) {\n            if (this.parent.grid.filterSettings.columns.length > 0 || this.parent.grid.searchSettings.key !== '') {\n                if (!isNullOrUndefined(getParentData(this.parent, data[parseInt(d.toString(), 10)].uniqueID, true))) {\n                    this.storedIndex++;\n                    this.flatSortedData[this.storedIndex] = data[parseInt(d.toString(), 10)];\n                }\n            }\n            else {\n                this.storedIndex++;\n                this.flatSortedData[this.storedIndex] = data[parseInt(d.toString(), 10)];\n            }\n            if (data[parseInt(d.toString(), 10)].hasChildRecords) {\n                var childSort = (new DataManager(data[parseInt(d.toString(), 10)].childRecords)\n                    .executeLocal(srtQry));\n                if (this.parent.allowRowDragAndDrop && data[parseInt(d.toString(), 10)].childRecords.indexOf(this.parent.rowDragAndDropModule['draggedRecord']) !== -1 && this.parent.rowDragAndDropModule['dropPosition'] !== 'middleSegment') {\n                    var dragdIndex = childSort.indexOf(this.parent.rowDragAndDropModule['draggedRecord']);\n                    childSort.splice(dragdIndex, 1);\n                    var dropdIndex = childSort.indexOf(this.parent.rowDragAndDropModule['droppedRecord']);\n                    if (this.parent.rowDragAndDropModule['dropPosition'] === 'topSegment') {\n                        childSort.splice(dropdIndex, 0, this.parent.rowDragAndDropModule['draggedRecord']);\n                    }\n                    else if (this.parent.rowDragAndDropModule['dropPosition'] === 'bottomSegment') {\n                        childSort.splice(dropdIndex + 1, 0, this.parent.rowDragAndDropModule['draggedRecord']);\n                    }\n                }\n                this.iterateSort(childSort, srtQry);\n            }\n        }\n    };\n    /**\n     * Sorts a column with the given options.\n     *\n     * @param {string} columnName - Defines the column name to be sorted.\n     * @param {SortDirection} direction - Defines the direction of sorting field.\n     * @param {boolean} isMultiSort - Specifies whether the previous sorted columns are to be maintained.\n     * @returns {void}\n     */\n    Sort.prototype.sortColumn = function (columnName, direction, isMultiSort) {\n        this.parent.grid.sortColumn(columnName, direction, isMultiSort);\n    };\n    Sort.prototype.removeSortColumn = function (field) {\n        this.parent.grid.removeSortColumn(field);\n    };\n    /**\n     * The function used to update sortSettings of TreeGrid.\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Sort.prototype.updateModel = function () {\n        this.parent.setProperties({ sortSettings: getActualProperties(this.parent.grid.sortSettings) }, true);\n    };\n    /**\n     * Clears all the sorted columns of the TreeGrid.\n     *\n     * @returns {void}\n     */\n    Sort.prototype.clearSorting = function () {\n        this.parent.grid.clearSorting();\n        this.updateModel();\n    };\n    /**\n     * Destroys the Sorting of TreeGrid.\n     *\n     * @function destroy\n     * @returns {void}\n     */\n    Sort.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    return Sort;\n}());\nexport { Sort };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}