{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { isNullOrUndefined as isNOU, getValue, extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { TreeGrid, Edit } from '@syncfusion/ej2-treegrid';\nimport { Deferred } from '@syncfusion/ej2-data';\n/**\n * To handle cell edit action on default columns and custom columns\n */\nvar CellEdit = /** @class */function () {\n  function CellEdit(ganttObj) {\n    /**\n     * @private\n     */\n    this.isCellEdit = false;\n    this.isResourceCellEdited = false;\n    this.parent = ganttObj;\n    this.bindTreeGridProperties();\n  }\n  /**\n   * Bind all editing related properties from Gantt to TreeGrid\n   *\n   * @returns {void} .\n   */\n  CellEdit.prototype.bindTreeGridProperties = function () {\n    this.parent.treeGrid.editSettings.allowEditing = this.parent.editSettings.allowEditing;\n    this.parent.treeGrid.editSettings.allowNextRowEdit = this.parent.editSettings.allowNextRowEdit;\n    this.parent.treeGrid.editSettings.mode = 'Cell';\n    this.parent.treeGrid.cellEdit = this.ensureEditCell.bind(this);\n    if (this.parent.editSettings.allowEditing) {\n      TreeGrid.Inject(Edit);\n    }\n  };\n  /**\n   * Ensure current cell was editable or not\n   *\n   * @param {CellEditArgs} args .\n   * @returns {void | Deferred} .\n   */\n  CellEdit.prototype.ensureEditCell = function (args) {\n    var _this = this;\n    var data = args.rowData;\n    var field = args.columnName;\n    this.editedColumn = this.parent.getColumnByField(field, this.parent.ganttColumns);\n    var taskSettings = this.parent.taskFields;\n    if (this.parent.readOnly) {\n      args.cancel = true;\n      return;\n    }\n    if (this.parent.editSettings.mode === 'Dialog') {\n      args.cancel = true;\n      return;\n    }\n    if (data.hasChildRecords && !this.parent.allowParentDependency && (field === taskSettings.endDate && (!isNullOrUndefined(data['isManual']) && data['isManual'] === false || this.parent.taskMode === 'Auto') || field === taskSettings.duration || field === taskSettings.dependency || field === taskSettings.progress || field === taskSettings.work || field === taskSettings.type || field === 'taskType')) {\n      if (field === taskSettings.dependency && !this.parent.allowParentDependency || field !== taskSettings.dependency) {\n        args.cancel = true;\n      }\n    } else {\n      var callBackPromise_1 = new Deferred();\n      var parentReference_1 = this.parent;\n      this.currentEditedRowData = args.rowData;\n      this.parent.trigger('cellEdit', args, function (arg) {\n        if (arg.columnName === parentReference_1.taskFields.progress && arg.rowData.hasChildRecords) {\n          arg.cancel = true;\n        }\n        if (data.level === 0 && _this.parent.viewType === 'ResourceView') {\n          arg.cancel = true;\n        }\n        callBackPromise_1.resolve(arg);\n        if (!arg.cancel) {\n          if (arg.columnName === _this.parent.taskFields.notes) {\n            _this.openNotesEditor(arg);\n          } else {\n            _this.isCellEdit = true;\n            if (!isNOU(_this.parent.toolbarModule)) {\n              _this.parent.toolbarModule.refreshToolbarItems();\n            }\n          }\n        }\n      });\n      return callBackPromise_1;\n    }\n  };\n  /**\n   * To render edit dialog and to focus on notes tab\n   *\n   * @param {CellEditArgs} args .\n   * @returns {void} .\n   */\n  CellEdit.prototype.openNotesEditor = function (args) {\n    var taskSettings = this.parent.taskFields;\n    var data = args.rowData;\n    var field = args.columnName;\n    if (field === taskSettings.notes && !this.parent.showInlineNotes) {\n      args.cancel = true;\n      var columnTypes = this.parent.editModule.dialogModule.updatedEditFields.map(function (x) {\n        return x.type;\n      });\n      var index = columnTypes.indexOf('Notes');\n      if (index !== -1) {\n        this.parent.editModule.dialogModule.openEditDialog(data.ganttProperties.rowUniqueID);\n        var tabObj = document.getElementById(this.parent.element.id + '_Tab').ej2_instances[0];\n        tabObj.selectedItem = index;\n      }\n    }\n    if (field === taskSettings.notes && this.parent.showInlineNotes === true) {\n      this.isCellEdit = true;\n    }\n  };\n  // private isValueChange(args: Record<string, unknown>, field: string): boolean {\n  //     const data: IGanttData = getValue('data', args);\n  //     const editedValue: Record<string, unknown> = data[`${field}`];\n  //     const previousValue: Record<string, unknown> = getValue('previousData', args);\n  //     if ((isNOU(editedValue) && !isNOU(previousValue)) || (!isNOU(editedValue) && isNOU(previousValue))) {\n  //         return true;\n  //     } else if (!isNOU(editedValue) && !isNOU(previousValue)) {\n  //         if (editedValue instanceof Date) {\n  //             return editedValue.getTime() !== data.taskData[field as string].getTime() ? true : false;\n  //         } else if (field === this.parent.taskFields.resourceInfo) {\n  //             return editedValue !== previousValue ? true : false;\n  //         } else if (editedValue !== data.taskData[field as string]) {\n  //             return true;\n  //         }\n  //     }\n  //     return false;\n  // }\n  /**\n   * Initiate cell save action on Gantt with arguments from TreeGrid\n   *\n   * @param {object} args .\n   * @param {object} editedObj .\n   * @returns {void} .\n   * @private\n   */\n  CellEdit.prototype.initiateCellEdit = function (args, editedObj) {\n    var isValid = true;\n    if (args['name'] === 'actionComplete' && args['previousData'] === args['data'][args['column'].field]) {\n      isValid = false;\n    }\n    if (this.parent.undoRedoModule && this.parent['isUndoRedoItemPresent']('Edit')) {\n      if (isValid) {\n        if (this.parent.undoRedoModule['redoEnabled']) {\n          this.parent.undoRedoModule['disableRedo']();\n        }\n        this.parent.undoRedoModule['createUndoCollection']();\n        var action = {};\n        action['action'] = 'CellEditing';\n        action['editedColumn'] = args['column'].field;\n        action['modifiedRecords'] = [];\n        this.parent.undoRedoModule['getUndoCollection'][this.parent.undoRedoModule['getUndoCollection'].length - 1] = action;\n      }\n    }\n    var column = getValue('column', args);\n    var data = getValue('data', args);\n    var editedArgs = {};\n    editedArgs.action = 'CellEditing';\n    editedArgs.data = this.parent.getTaskByUniqueID(data.uniqueID);\n    var previousValue = getValue('previousData', args);\n    var editedValue = this.parent.allowUnscheduledTasks ? data[column.field] : (isNullOrUndefined(data[column.field]) || data[column.field] === '') && (this.parent.taskFields.duration === column.field || this.parent.taskFields.startDate === column.field || this.parent.taskFields.endDate === column.field) ? previousValue : data[column.field];\n    if (!isNOU(data)) {\n      data[column.field] = previousValue;\n      editedArgs.data[column.field] = previousValue;\n      this.parent.initiateEditAction(true);\n      if (this.parent.weekWorkingTime.length > 0 && editedValue && (column.field === this.parent.taskFields.startDate || column.field === this.parent.taskFields.baselineStartDate)) {\n        var sDate = column.field === this.parent.taskFields.startDate ? data.ganttProperties.startDate : data.ganttProperties.baselineStartDate;\n        var prevDay = this.parent['getStartTime'](sDate);\n        if (prevDay / 3600 === sDate.getHours()) {\n          var dayStartTime = this.parent['getStartTime'](editedValue);\n          this.parent.dataOperation.setTime(dayStartTime, editedValue);\n          this.parent.setRecordValue(column.field, editedValue, editedArgs.data);\n        } else {\n          this.parent.setRecordValue(column.field, editedValue, editedArgs.data);\n        }\n      } else {\n        this.parent.setRecordValue(column.field, editedValue, editedArgs.data);\n      }\n      if (column.field === this.parent.taskFields.name) {\n        this.taskNameEdited(editedArgs);\n      } else if (column.field === this.parent.taskFields.startDate) {\n        this.startDateEdited(editedArgs);\n      } else if (column.field === this.parent.taskFields.endDate) {\n        this.endDateEdited(editedArgs);\n      } else if (column.field === this.parent.taskFields.duration) {\n        this.durationEdited(editedArgs);\n      } else if (column.field === this.parent.taskFields.resourceInfo) {\n        this.resourceEdited(editedArgs, editedObj, data);\n      } else if (column.field === this.parent.taskFields.progress) {\n        this.progressEdited(editedArgs);\n      } else if (column.field === this.parent.taskFields.baselineStartDate || column.field === this.parent.taskFields.baselineEndDate) {\n        this.baselineEdited(editedArgs);\n      } else if (column.field === this.parent.taskFields.dependency) {\n        this.dependencyEdited(editedArgs, previousValue);\n      } else if (column.field === this.parent.taskFields.notes) {\n        this.notedEdited(editedArgs);\n      } else if (column.field === this.parent.taskFields.work) {\n        this.workEdited(editedArgs);\n      } else if ((column.field === this.parent.taskFields.type || column.field === 'taskType') && !isNOU(this.parent.taskFields.work)) {\n        this.typeEdited(editedArgs, editedObj);\n      } else if (column.field === this.parent.taskFields.manual) {\n        this.taskmodeEdited(editedArgs);\n      } else {\n        this.parent.setRecordValue('taskData.' + column.field, editedArgs.data[column.field], editedArgs.data);\n        this.parent.editModule.initiateSaveAction(editedArgs);\n      }\n    } else {\n      this.parent.editModule.endEditAction(args);\n    }\n    this.isCellEdit = false;\n    if (!isNullOrUndefined(this.parent.editModule.cellEditModule.editedColumn)) {\n      this.parent.editModule.cellEditModule.editedColumn = null;\n    }\n    if (!isNOU(this.parent.toolbarModule)) {\n      this.parent.toolbarModule.refreshToolbarItems();\n    }\n  };\n  /**\n   * To update task name cell with new value\n   *\n   * @param {ITaskbarEditedEventArgs} args .\n   * @returns {void} .\n   */\n  CellEdit.prototype.taskNameEdited = function (args) {\n    this.parent.setRecordValue('taskData.' + this.parent.taskFields.name, args.data[this.parent.taskFields.name], args.data);\n    this.parent.setRecordValue('taskName', args.data[this.parent.taskFields.name], args.data.ganttProperties, true);\n    this.updateEditedRecord(args);\n  };\n  /**\n   * To update task notes cell with new value\n   *\n   * @param {ITaskbarEditedEventArgs} args .\n   * @returns {void} .\n   */\n  CellEdit.prototype.notedEdited = function (args) {\n    this.parent.setRecordValue('taskData.' + this.parent.taskFields.notes, args.data[this.parent.taskFields.notes], args.data);\n    this.parent.setRecordValue('notes', args.data[this.parent.taskFields.notes], args.data.ganttProperties, true);\n    this.updateEditedRecord(args);\n  };\n  /**\n   * To update task schedule mode cell with new value\n   *\n   * @param {ITaskbarEditedEventArgs} args .\n   * @returns {void} .\n   */\n  CellEdit.prototype.taskmodeEdited = function (args) {\n    this.parent.setRecordValue('isAutoSchedule', !args.data[this.parent.taskFields.manual], args.data.ganttProperties, true);\n    this.parent.editModule.updateTaskScheduleModes(args.data);\n    this.updateEditedRecord(args);\n  };\n  /**\n   * To update task start date cell with new value\n   *\n   * @param {ITaskbarEditedEventArgs} args .\n   * @returns {void} .\n   */\n  CellEdit.prototype.startDateEdited = function (args) {\n    var ganttData = args.data;\n    var ganttProb = args.data.ganttProperties;\n    var currentValue = args.data[this.parent.taskFields.startDate];\n    currentValue = currentValue ? new Date(currentValue.getTime()) : null;\n    currentValue = this.parent.dateValidationModule.checkStartDate(currentValue, ganttData.ganttProperties, ganttData.ganttProperties.isMilestone);\n    if (isNOU(currentValue)) {\n      if (!ganttData.hasChildRecords) {\n        this.parent.setRecordValue('startDate', null, ganttProb, true);\n        if (!(ganttProb.startDate === null && ganttProb.endDate === null && ganttProb.duration !== null)) {\n          this.parent.setRecordValue('duration', null, ganttProb, true);\n        }\n        this.parent.setRecordValue('isMilestone', false, ganttProb, true);\n        // if (this.parent.allowUnscheduledTasks && isNOU(this.parent.taskFields.endDate)) {\n        //     this.parent.setRecordValue('endDate', null, ganttProb, true);\n        // }\n      }\n    } else if (ganttProb.endDate || !isNOU(ganttProb.duration)) {\n      this.parent.setRecordValue('startDate', new Date(currentValue.getTime()), ganttProb, true);\n      this.parent.dateValidationModule.calculateEndDate(ganttData);\n    } else if (isNOU(ganttProb.endDate) && isNOU(ganttProb.duration)) {\n      this.parent.setRecordValue('startDate', new Date(currentValue.getTime()), ganttProb, true);\n    }\n    this.parent.setRecordValue('isMilestone', ganttProb.duration === 0 ? true : false, ganttProb, true);\n    this.parent.dataOperation.updateWidthLeft(args.data);\n    this.parent.dataOperation.updateMappingData(ganttData, 'startDate');\n    this.parent.dataOperation.updateMappingData(ganttData, 'endDate');\n    this.parent.dataOperation.updateMappingData(ganttData, 'duration');\n    this.updateEditedRecord(args);\n  };\n  CellEdit.prototype.validateEndDateWithSegments = function (ganttProp) {\n    var ganttSegments = [];\n    var segments = ganttProp.segments;\n    for (var i = 0; i < segments.length; i++) {\n      var segment = segments[parseInt(i.toString(), 10)];\n      var endDate = segment.endDate;\n      endDate = !isNullOrUndefined(ganttProp.endDate) && endDate.getTime() < ganttProp.endDate.getTime() && i !== segments.length - 1 ? endDate : ganttProp.endDate;\n      segment.duration = this.parent.dataOperation.getDuration(segment.startDate, endDate, ganttProp.durationUnit, ganttProp.isAutoSchedule, ganttProp.isMilestone);\n      if (segments.length > 0 && endDate.getTime() < segment.startDate.getTime() && endDate.getTime() <= ganttProp.endDate.getTime()) {\n        segments[i - 1].duration = this.parent.dataOperation.getDuration(segments[i - 1].startDate, ganttProp.endDate, ganttProp.durationUnit, ganttProp.isAutoSchedule, ganttProp.isMilestone);\n        continue;\n      }\n      ganttSegments.push(segment);\n    }\n    return ganttSegments;\n  };\n  /**\n   * To update task end date cell with new value\n   *\n   * @param {ITaskbarEditedEventArgs} args .\n   * @returns {void} .\n   */\n  CellEdit.prototype.endDateEdited = function (args) {\n    var ganttProb = args.data.ganttProperties;\n    var currentValue = args.data[this.parent.taskFields.endDate];\n    currentValue = currentValue ? new Date(currentValue.getTime()) : null;\n    if (isNOU(currentValue)) {\n      this.parent.setRecordValue('endDate', currentValue, ganttProb, true);\n      if (!(ganttProb.startDate === null && ganttProb.endDate === null && ganttProb.duration !== null)) {\n        this.parent.setRecordValue('duration', null, ganttProb, true);\n      }\n      this.parent.setRecordValue('isMilestone', false, ganttProb, true);\n    } else {\n      var dayEndTime = this.parent['getCurrentDayEndTime'](currentValue);\n      if (currentValue.getHours() === 0 && dayEndTime !== 86400) {\n        this.parent.dateValidationModule.setTime(dayEndTime, currentValue);\n      }\n      currentValue = this.parent.dateValidationModule.checkEndDate(currentValue, ganttProb, ganttProb.isMilestone);\n      this.parent.setRecordValue('endDate', currentValue, ganttProb, true);\n      if (!isNOU(ganttProb.startDate) && isNOU(ganttProb.duration)) {\n        if (this.parent.dateValidationModule.compareDates(ganttProb.endDate, ganttProb.startDate) === -1) {\n          this.parent.setRecordValue('endDate', new Date(ganttProb.startDate.getTime()), ganttProb, true);\n          dayEndTime = this.parent['getCurrentDayEndTime'](ganttProb.endDate);\n          this.parent.dateValidationModule.setTime(dayEndTime, ganttProb.endDate);\n        }\n      } else if (!isNOU(ganttProb.duration) && isNOU(ganttProb.startDate)) {\n        this.parent.setRecordValue('startDate', this.parent.dateValidationModule.getStartDate(ganttProb.endDate, ganttProb.duration, ganttProb.durationUnit, ganttProb), ganttProb, true);\n      }\n      if (!isNullOrUndefined(ganttProb.segments)) {\n        ganttProb.segments = this.validateEndDateWithSegments(ganttProb);\n      }\n      if (this.compareDatesFromRecord(ganttProb) <= 0) {\n        this.parent.dateValidationModule.calculateDuration(args.data);\n      } else {\n        this.parent.editModule.revertCellEdit(args);\n      }\n      this.updateDates(args);\n      this.parent.setRecordValue('isMilestone', ganttProb.duration === 0 ? true : false, ganttProb, true);\n      if (ganttProb.isMilestone) {\n        this.parent.setRecordValue('startDate', this.parent.dateValidationModule.checkStartDate(ganttProb.startDate, ganttProb), ganttProb, true);\n      }\n    }\n    if (!isNullOrUndefined(args.data.ganttProperties.segments) && args.data.ganttProperties.segments.length > 0) {\n      this.parent.setRecordValue('segments', this.parent.dataOperation.setSegmentsInfo(args.data, false), args.data.ganttProperties, true);\n      this.parent.dataOperation.updateMappingData(args.data, 'segments');\n    }\n    this.parent.dataOperation.updateWidthLeft(args.data);\n    this.parent.dataOperation.updateMappingData(args.data, 'startDate');\n    this.parent.dataOperation.updateMappingData(args.data, 'endDate');\n    this.parent.dataOperation.updateMappingData(args.data, 'duration');\n    this.parent.editModule.updateResourceRelatedFields(args.data, 'endDate');\n    this.updateEditedRecord(args);\n  };\n  /**\n   * To update duration cell with new value\n   *\n   * @param {ITaskbarEditedEventArgs} args .\n   * @returns {void} .\n   */\n  CellEdit.prototype.durationEdited = function (args) {\n    var regex = /^[^\\d.-]+$/;\n    if (regex.test(args.data[this.parent.taskFields.duration])) {\n      var err = \"The provided value for the \" + this.parent.taskFields.duration + \" field is invalid. Please ensure the \" + this.parent.taskFields.duration + \" field contains only valid numeric values.\";\n      this.parent.trigger('actionFailure', {\n        error: err\n      });\n    }\n    if (parseInt(args.data[this.parent.taskFields.duration], 10) < 0) {\n      args.data[this.parent.taskFields.duration] = 0;\n    }\n    var ganttProb = args.data.ganttProperties;\n    var durationString = args.data[this.parent.taskFields.duration];\n    this.parent.dataOperation.updateDurationValue(durationString, ganttProb);\n    this.updateDates(args);\n    this.parent.editModule.updateResourceRelatedFields(args.data, 'duration');\n    this.updateEditedRecord(args);\n  };\n  /**\n   * To update start date, end date based on duration\n   *\n   * @param {ITaskbarEditedEventArgs} args .\n   * @returns {void} .\n   */\n  CellEdit.prototype.updateDates = function (args) {\n    var ganttProb = args.data.ganttProperties;\n    var endDate = this.parent.dateValidationModule.getDateFromFormat(ganttProb.endDate);\n    var startDate = this.parent.dateValidationModule.getDateFromFormat(ganttProb.startDate);\n    var currentDuration = ganttProb.duration;\n    if (isNOU(currentDuration)) {\n      this.parent.setRecordValue('isMilestone', false, ganttProb, true);\n      if (args.data[this.parent.taskFields.duration] !== null) {\n        this.parent.setRecordValue('endDate', null, ganttProb, true);\n      }\n    } else {\n      if (isNOU(startDate) && !isNOU(endDate)) {\n        this.parent.setRecordValue('startDate', this.parent.dateValidationModule.getStartDate(endDate, currentDuration, ganttProb.durationUnit, ganttProb), ganttProb, true);\n      }\n      if (currentDuration !== 0 && ganttProb.isMilestone) {\n        this.parent.setRecordValue('isMilestone', false, ganttProb, true);\n        if (!isNullOrUndefined(this.parent.taskFields.milestone)) {\n          this.parent.setRecordValue(this.parent.taskFields.milestone, false, args.data, true);\n        }\n        this.parent.setRecordValue('startDate', this.parent.dateValidationModule.checkStartDate(ganttProb.startDate, ganttProb), ganttProb, true);\n      }\n      if (!isNullOrUndefined(ganttProb.segments) && ganttProb.segments.length > 0) {\n        this.parent.setRecordValue('segments', this.parent.dataOperation.setSegmentsInfo(args.data, false), ganttProb, true);\n        this.parent.dataOperation.updateMappingData(args.data, 'segments');\n      }\n      this.parent.setRecordValue('isMilestone', ganttProb.duration === 0 ? true : false, ganttProb, true);\n      this.parent.dateValidationModule.calculateEndDate(args.data);\n    }\n    this.parent.dataOperation.updateWidthLeft(args.data);\n    this.parent.dataOperation.updateMappingData(args.data, 'endDate');\n    this.parent.dataOperation.updateMappingData(args.data, 'startDate');\n    this.parent.dataOperation.updateMappingData(args.data, 'duration');\n  };\n  /**\n   * To update progress cell with new value\n   *\n   * @param {ITaskbarEditedEventArgs} args .\n   * @returns {void} .\n   */\n  CellEdit.prototype.progressEdited = function (args) {\n    var ganttRecord = args.data;\n    this.parent.setRecordValue('progress', ganttRecord[this.parent.taskFields.progress] > 100 ? 100 : ganttRecord[this.parent.taskFields.progress], ganttRecord.ganttProperties, true);\n    this.parent.setRecordValue('taskData.' + this.parent.taskFields.progress, ganttRecord[this.parent.taskFields.progress] > 100 ? 100 : ganttRecord[this.parent.taskFields.progress], args.data);\n    if (!ganttRecord.ganttProperties.isAutoSchedule) {\n      this.parent.setRecordValue('autoWidth', this.parent.dataOperation.calculateWidth(ganttRecord, false), ganttRecord.ganttProperties, true);\n    }\n    if (!isNullOrUndefined(args.data.ganttProperties.segments) && args.data.ganttProperties.segments.length > 0 && !isNullOrUndefined(this.parent.editModule.taskbarEditModule)) {\n      this.parent.editModule.taskbarEditModule.updateSegmentProgress(args.data.ganttProperties);\n    }\n    if (!args.data.hasChildRecords) {\n      var width = ganttRecord.ganttProperties.isAutoSchedule ? ganttRecord.ganttProperties.width : ganttRecord.ganttProperties.autoWidth;\n      this.parent.setRecordValue('progressWidth', this.parent.dataOperation.getProgressWidth(width, ganttRecord.ganttProperties.progress), ganttRecord.ganttProperties, true);\n    }\n    this.updateEditedRecord(args);\n  };\n  /**\n   * To update baselines with new baseline start date and baseline end date\n   *\n   * @param {ITaskbarEditedEventArgs} args .\n   * @returns {void} .\n   */\n  CellEdit.prototype.baselineEdited = function (args) {\n    var ganttRecord = args.data.ganttProperties;\n    var baseLineStartDate = args.data[this.parent.taskFields.baselineStartDate];\n    var baseLineEndDate = args.data[this.parent.taskFields.baselineEndDate];\n    var dayEndTime = this.parent['getCurrentDayEndTime'](baseLineEndDate);\n    if (baseLineEndDate && baseLineEndDate.getHours() === 0 && dayEndTime !== 86400) {\n      this.parent.dateValidationModule.setTime(dayEndTime, baseLineEndDate);\n    }\n    this.parent.setRecordValue('baselineStartDate', this.parent.dateValidationModule.checkBaselineStartDate(baseLineStartDate, ganttRecord), ganttRecord, true);\n    this.parent.setRecordValue('baselineEndDate', this.parent.dateValidationModule.checkBaselineEndDate(baseLineEndDate), ganttRecord, true);\n    if (ganttRecord.baselineStartDate && ganttRecord.baselineEndDate) {\n      this.parent.setRecordValue('baselineLeft', this.parent.dataOperation.calculateBaselineLeft(ganttRecord), ganttRecord, true);\n      this.parent.setRecordValue('baselineWidth', this.parent.dataOperation.calculateBaselineWidth(ganttRecord), ganttRecord, true);\n    }\n    this.updateEditedRecord(args);\n  };\n  /**\n   * To update task's resource cell with new value\n   *\n   * @param {ITaskbarEditedEventArgs} args .\n   * @param {object} editedObj .\n   * @param {IGanttData} previousData .\n   * @returns {void} .\n   */\n  CellEdit.prototype.resourceEdited = function (args, editedObj, previousData) {\n    var resourceSettings = this.parent.resourceFields;\n    var editedResourceId = editedObj[this.parent.taskFields.resourceInfo];\n    if (editedResourceId) {\n      this.isResourceCellEdited = true;\n      var tempResourceInfo = this.parent.dataOperation.setResourceInfo(editedObj);\n      var editedResouceLength = tempResourceInfo.length;\n      var previousResource = previousData.ganttProperties.resourceInfo;\n      var index = void 0;\n      var editedResources = [];\n      var resourceData = this.parent.resources;\n      var newIndex = void 0;\n      var _loop_1 = function (count) {\n        if (previousResource) {\n          var previousResourceLength = previousResource.length;\n          for (newIndex = 0; newIndex < previousResourceLength; newIndex++) {\n            if (previousResource[newIndex][resourceSettings.id] === editedResourceId[count]) {\n              index = newIndex;\n              break;\n            } else {\n              index = -1;\n            }\n          }\n        }\n        if (!isNOU(index) && index !== -1) {\n          editedResources.push(previousResource[parseInt(index.toString(), 10)]);\n        } else {\n          var resource = resourceData.filter(function (resourceInfo) {\n            return editedResourceId[count] === resourceInfo[resourceSettings.id];\n          });\n          var ganttDataResource = extend({}, resource[0]);\n          ganttDataResource[resourceSettings.unit] = 100;\n          editedResources.push(ganttDataResource);\n        }\n      };\n      for (var count = 0; count < editedResouceLength; count++) {\n        _loop_1(count);\n      }\n      args.data.ganttProperties.resourceInfo = editedResources;\n      this.parent.dataOperation.updateMappingData(args.data, 'resourceInfo');\n      this.parent.editModule.updateResourceRelatedFields(args.data, 'resource');\n      if (this.parent.viewType === 'ResourceView') {\n        this.parent.editModule.dialogModule.isResourceUpdate = true;\n        this.parent.editModule.dialogModule.previousResource = previousResource;\n      }\n      this.updateDates(args);\n      this.updateEditedRecord(args);\n    }\n  };\n  /**\n   * To update task's predecessor cell with new value\n   *\n   * @param {ITaskbarEditedEventArgs} editedArgs .\n   * @param {object} cellEditArgs .\n   * @returns {void} .\n   */\n  CellEdit.prototype.dependencyEdited = function (editedArgs, cellEditArgs) {\n    var specialCharacterPattern = /[!@#$%^&*()_=[\\]{};:<>|./?-]/;\n    if (specialCharacterPattern.test(editedArgs.data[this.parent.taskFields.dependency])) {\n      var err = \"The provided value for the \" + this.parent.taskFields.dependency + \" field is invalid. Please ensure that the \" + this.parent.taskFields.dependency + \" field does not contain any special characters.\";\n      this.parent.trigger('actionFailure', {\n        error: err\n      });\n    }\n    this.parent.predecessorModule.updateUnscheduledDependency(editedArgs.data);\n    var FF = this.parent.localeObj.getConstant('FF');\n    var FS = this.parent.localeObj.getConstant('FS');\n    var SS = this.parent.localeObj.getConstant('SS');\n    var SF = this.parent.localeObj.getConstant('SF');\n    var value = '';\n    if (!isNullOrUndefined(editedArgs.data[this.parent.taskFields.dependency])) {\n      var splitString_1 = editedArgs.data[this.parent.taskFields.dependency].split(',');\n      splitString_1.map(function (splitvalue, index) {\n        if (splitvalue.includes(FF)) {\n          value += splitvalue.replace(FF, 'FF');\n          value += splitString_1.length !== index + 1 ? ',' : '';\n        } else if (splitvalue.includes(FS)) {\n          value += splitvalue.replace(FS, 'FS');\n          value += splitString_1.length !== index + 1 ? ',' : '';\n        } else if (splitvalue.includes(SS)) {\n          value += splitvalue.replace(SS, 'SS');\n          value += splitString_1.length !== index + 1 ? ',' : '';\n        } else if (splitvalue.includes(SF)) {\n          value += splitvalue.replace(SF, 'SF');\n          value += splitString_1.length !== index + 1 ? ',' : '';\n        } else {\n          value += splitvalue;\n          value += splitString_1.length !== index + 1 ? ',' : '';\n        }\n      });\n    }\n    if (!this.parent.connectorLineEditModule.updatePredecessor(editedArgs.data, value, editedArgs)) {\n      this.parent.editModule.revertCellEdit(cellEditArgs);\n    }\n  };\n  /**\n   * To update task's work cell with new value\n   *\n   * @param {ITaskbarEditedEventArgs} editedArgs .\n   * @returns {void} .\n   */\n  CellEdit.prototype.workEdited = function (editedArgs) {\n    var ganttProb = editedArgs.data.ganttProperties;\n    if (editedArgs.data[this.parent.taskFields.work] < 0) {\n      editedArgs.data[this.parent.taskFields.work] = 0;\n    }\n    var workValue = editedArgs.data[this.parent.taskFields.work];\n    this.parent.setRecordValue('work', workValue, ganttProb, true);\n    this.parent.editModule.updateResourceRelatedFields(editedArgs.data, 'work');\n    this.updateDates(editedArgs);\n    this.updateEditedRecord(editedArgs);\n  };\n  /**\n   * To update task type cell with new value\n   *\n   * @param {ITaskbarEditedEventArgs} args .\n   * @param {object} editedObj .\n   * @returns {void} .\n   */\n  CellEdit.prototype.typeEdited = function (args, editedObj) {\n    var key = this.parent.taskFields.type || 'taskType';\n    var ganttProb = args.data.ganttProperties;\n    var taskType = editedObj[\"\" + key];\n    this.parent.setRecordValue('taskType', taskType, ganttProb, true);\n    // To validate the work column as well, if duartion column value is 0, when FixedDuration type\n    if (ganttProb.taskType === 'FixedDuration' && ganttProb.duration === 0) {\n      this.parent.editModule.updateResourceRelatedFields(args.data, 'work');\n    }\n    //this.parent.dataOperation.updateMappingData(args.data, 'taskType');\n    this.updateEditedRecord(args);\n  };\n  /**\n   * To compare start date and end date from Gantt record\n   *\n   * @param {ITaskData} ganttRecord .\n   * @returns {number} .\n   */\n  CellEdit.prototype.compareDatesFromRecord = function (ganttRecord) {\n    var sDate = this.parent.dateValidationModule.getValidStartDate(ganttRecord);\n    var eDate = this.parent.dateValidationModule.getValidEndDate(ganttRecord);\n    return this.parent.dateValidationModule.compareDates(sDate, eDate);\n  };\n  /**\n   * To start method save action with edited cell value\n   *\n   * @param {ITaskbarEditedEventArgs} args .\n   * @returns {void} .\n   */\n  CellEdit.prototype.updateEditedRecord = function (args) {\n    this.parent.editModule.initiateUpdateAction(args);\n  };\n  /**\n   * To remove all public private properties\n   *\n   * @returns {void} .\n   * @private\n   */\n  CellEdit.prototype.destroy = function () {\n    // Destroy Method\n    this.parent.editModule.cellEditModule = undefined;\n  };\n  return CellEdit;\n}();\nexport { CellEdit };","map":{"version":3,"names":["isNullOrUndefined","isNOU","getValue","extend","TreeGrid","Edit","Deferred","CellEdit","ganttObj","isCellEdit","isResourceCellEdited","parent","bindTreeGridProperties","prototype","treeGrid","editSettings","allowEditing","allowNextRowEdit","mode","cellEdit","ensureEditCell","bind","Inject","args","_this","data","rowData","field","columnName","editedColumn","getColumnByField","ganttColumns","taskSettings","taskFields","readOnly","cancel","hasChildRecords","allowParentDependency","endDate","taskMode","duration","dependency","progress","work","type","callBackPromise_1","parentReference_1","currentEditedRowData","trigger","arg","level","viewType","resolve","notes","openNotesEditor","toolbarModule","refreshToolbarItems","showInlineNotes","columnTypes","editModule","dialogModule","updatedEditFields","map","x","index","indexOf","openEditDialog","ganttProperties","rowUniqueID","tabObj","document","getElementById","element","id","ej2_instances","selectedItem","initiateCellEdit","editedObj","isValid","undoRedoModule","action","length","column","editedArgs","getTaskByUniqueID","uniqueID","previousValue","editedValue","allowUnscheduledTasks","startDate","initiateEditAction","weekWorkingTime","baselineStartDate","sDate","prevDay","getHours","dayStartTime","dataOperation","setTime","setRecordValue","name","taskNameEdited","startDateEdited","endDateEdited","durationEdited","resourceInfo","resourceEdited","progressEdited","baselineEndDate","baselineEdited","dependencyEdited","notedEdited","workEdited","typeEdited","manual","taskmodeEdited","initiateSaveAction","endEditAction","cellEditModule","updateEditedRecord","updateTaskScheduleModes","ganttData","ganttProb","currentValue","Date","getTime","dateValidationModule","checkStartDate","isMilestone","calculateEndDate","updateWidthLeft","updateMappingData","validateEndDateWithSegments","ganttProp","ganttSegments","segments","i","segment","parseInt","toString","getDuration","durationUnit","isAutoSchedule","push","dayEndTime","checkEndDate","compareDates","getStartDate","compareDatesFromRecord","calculateDuration","revertCellEdit","updateDates","setSegmentsInfo","updateResourceRelatedFields","regex","test","err","error","durationString","updateDurationValue","getDateFromFormat","currentDuration","milestone","ganttRecord","calculateWidth","taskbarEditModule","updateSegmentProgress","width","autoWidth","getProgressWidth","baseLineStartDate","baseLineEndDate","checkBaselineStartDate","checkBaselineEndDate","calculateBaselineLeft","calculateBaselineWidth","previousData","resourceSettings","resourceFields","editedResourceId","tempResourceInfo","setResourceInfo","editedResouceLength","previousResource","editedResources","resourceData","resources","newIndex","_loop_1","count","previousResourceLength","resource","filter","ganttDataResource","unit","isResourceUpdate","cellEditArgs","specialCharacterPattern","predecessorModule","updateUnscheduledDependency","FF","localeObj","getConstant","FS","SS","SF","value","splitString_1","split","splitvalue","includes","replace","connectorLineEditModule","updatePredecessor","workValue","key","taskType","getValidStartDate","eDate","getValidEndDate","initiateUpdateAction","destroy","undefined"],"sources":["/var/www/vue/vue-gantt-chart/node_modules/@syncfusion/ej2-gantt/src/gantt/actions/cell-edit.js"],"sourcesContent":["import { isNullOrUndefined as isNOU, getValue, extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { TreeGrid, Edit } from '@syncfusion/ej2-treegrid';\nimport { Deferred } from '@syncfusion/ej2-data';\n/**\n * To handle cell edit action on default columns and custom columns\n */\nvar CellEdit = /** @class */ (function () {\n    function CellEdit(ganttObj) {\n        /**\n         * @private\n         */\n        this.isCellEdit = false;\n        this.isResourceCellEdited = false;\n        this.parent = ganttObj;\n        this.bindTreeGridProperties();\n    }\n    /**\n     * Bind all editing related properties from Gantt to TreeGrid\n     *\n     * @returns {void} .\n     */\n    CellEdit.prototype.bindTreeGridProperties = function () {\n        this.parent.treeGrid.editSettings.allowEditing = this.parent.editSettings.allowEditing;\n        this.parent.treeGrid.editSettings.allowNextRowEdit = this.parent.editSettings.allowNextRowEdit;\n        this.parent.treeGrid.editSettings.mode = 'Cell';\n        this.parent.treeGrid.cellEdit = this.ensureEditCell.bind(this);\n        if (this.parent.editSettings.allowEditing) {\n            TreeGrid.Inject(Edit);\n        }\n    };\n    /**\n     * Ensure current cell was editable or not\n     *\n     * @param {CellEditArgs} args .\n     * @returns {void | Deferred} .\n     */\n    CellEdit.prototype.ensureEditCell = function (args) {\n        var _this = this;\n        var data = args.rowData;\n        var field = args.columnName;\n        this.editedColumn = this.parent.getColumnByField(field, this.parent.ganttColumns);\n        var taskSettings = this.parent.taskFields;\n        if (this.parent.readOnly) {\n            args.cancel = true;\n            return;\n        }\n        if (this.parent.editSettings.mode === 'Dialog') {\n            args.cancel = true;\n            return;\n        }\n        if (data.hasChildRecords && !this.parent.allowParentDependency && ((field === taskSettings.endDate && ((!isNullOrUndefined(data['isManual']) &&\n            data['isManual'] === false) || this.parent.taskMode === 'Auto')) || field === taskSettings.duration\n            || field === taskSettings.dependency || field === taskSettings.progress || field === taskSettings.work ||\n            field === taskSettings.type || field === 'taskType')) {\n            if ((field === taskSettings.dependency && !this.parent.allowParentDependency) || field !== taskSettings.dependency) {\n                args.cancel = true;\n            }\n        }\n        else {\n            var callBackPromise_1 = new Deferred();\n            var parentReference_1 = this.parent;\n            this.currentEditedRowData = args.rowData;\n            this.parent.trigger('cellEdit', args, function (arg) {\n                if (arg.columnName === parentReference_1.taskFields.progress && arg.rowData.hasChildRecords) {\n                    arg.cancel = true;\n                }\n                if (data.level === 0 && _this.parent.viewType === 'ResourceView') {\n                    arg.cancel = true;\n                }\n                callBackPromise_1.resolve(arg);\n                if (!arg.cancel) {\n                    if (arg.columnName === _this.parent.taskFields.notes) {\n                        _this.openNotesEditor(arg);\n                    }\n                    else {\n                        _this.isCellEdit = true;\n                        if (!isNOU(_this.parent.toolbarModule)) {\n                            _this.parent.toolbarModule.refreshToolbarItems();\n                        }\n                    }\n                }\n            });\n            return callBackPromise_1;\n        }\n    };\n    /**\n     * To render edit dialog and to focus on notes tab\n     *\n     * @param {CellEditArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.openNotesEditor = function (args) {\n        var taskSettings = this.parent.taskFields;\n        var data = args.rowData;\n        var field = args.columnName;\n        if ((field === taskSettings.notes && !this.parent.showInlineNotes)) {\n            args.cancel = true;\n            var columnTypes = this.parent.editModule.dialogModule.updatedEditFields.map(function (x) { return x.type; });\n            var index = columnTypes.indexOf('Notes');\n            if (index !== -1) {\n                this.parent.editModule.dialogModule.openEditDialog(data.ganttProperties.rowUniqueID);\n                var tabObj = document.getElementById(this.parent.element.id + '_Tab').ej2_instances[0];\n                tabObj.selectedItem = index;\n            }\n        }\n        if (field === taskSettings.notes && this.parent.showInlineNotes === true) {\n            this.isCellEdit = true;\n        }\n    };\n    // private isValueChange(args: Record<string, unknown>, field: string): boolean {\n    //     const data: IGanttData = getValue('data', args);\n    //     const editedValue: Record<string, unknown> = data[`${field}`];\n    //     const previousValue: Record<string, unknown> = getValue('previousData', args);\n    //     if ((isNOU(editedValue) && !isNOU(previousValue)) || (!isNOU(editedValue) && isNOU(previousValue))) {\n    //         return true;\n    //     } else if (!isNOU(editedValue) && !isNOU(previousValue)) {\n    //         if (editedValue instanceof Date) {\n    //             return editedValue.getTime() !== data.taskData[field as string].getTime() ? true : false;\n    //         } else if (field === this.parent.taskFields.resourceInfo) {\n    //             return editedValue !== previousValue ? true : false;\n    //         } else if (editedValue !== data.taskData[field as string]) {\n    //             return true;\n    //         }\n    //     }\n    //     return false;\n    // }\n    /**\n     * Initiate cell save action on Gantt with arguments from TreeGrid\n     *\n     * @param {object} args .\n     * @param {object} editedObj .\n     * @returns {void} .\n     * @private\n     */\n    CellEdit.prototype.initiateCellEdit = function (args, editedObj) {\n        var isValid = true;\n        if (args['name'] === 'actionComplete' && args['previousData'] === args['data'][args['column'].field]) {\n            isValid = false;\n        }\n        if (this.parent.undoRedoModule && this.parent['isUndoRedoItemPresent']('Edit')) {\n            if (isValid) {\n                if (this.parent.undoRedoModule['redoEnabled']) {\n                    this.parent.undoRedoModule['disableRedo']();\n                }\n                this.parent.undoRedoModule['createUndoCollection']();\n                var action = {};\n                action['action'] = 'CellEditing';\n                action['editedColumn'] = args['column'].field;\n                action['modifiedRecords'] = [];\n                this.parent.undoRedoModule['getUndoCollection'][this.parent.undoRedoModule['getUndoCollection'].length - 1] = action;\n            }\n        }\n        var column = getValue('column', args);\n        var data = getValue('data', args);\n        var editedArgs = {};\n        editedArgs.action = 'CellEditing';\n        editedArgs.data = this.parent.getTaskByUniqueID(data.uniqueID);\n        var previousValue = getValue('previousData', args);\n        var editedValue = this.parent.allowUnscheduledTasks ? data[column.field] : ((isNullOrUndefined(data[column.field])\n            || data[column.field] === '') && (this.parent.taskFields.duration === column.field ||\n            this.parent.taskFields.startDate === column.field || this.parent.taskFields.endDate === column.field)) ? previousValue\n            : data[column.field];\n        if (!isNOU(data)) {\n            data[column.field] = previousValue;\n            editedArgs.data[column.field] = previousValue;\n            this.parent.initiateEditAction(true);\n            if (this.parent.weekWorkingTime.length > 0 && editedValue && (column.field === this.parent.taskFields.startDate ||\n                column.field === this.parent.taskFields.baselineStartDate)) {\n                var sDate = column.field === this.parent.taskFields.startDate ? data.ganttProperties.startDate :\n                    data.ganttProperties.baselineStartDate;\n                var prevDay = this.parent['getStartTime'](sDate);\n                if (prevDay / 3600 === sDate.getHours()) {\n                    var dayStartTime = this.parent['getStartTime'](editedValue);\n                    this.parent.dataOperation.setTime(dayStartTime, editedValue);\n                    this.parent.setRecordValue(column.field, editedValue, editedArgs.data);\n                }\n                else {\n                    this.parent.setRecordValue(column.field, editedValue, editedArgs.data);\n                }\n            }\n            else {\n                this.parent.setRecordValue(column.field, editedValue, editedArgs.data);\n            }\n            if (column.field === this.parent.taskFields.name) {\n                this.taskNameEdited(editedArgs);\n            }\n            else if (column.field === this.parent.taskFields.startDate) {\n                this.startDateEdited(editedArgs);\n            }\n            else if (column.field === this.parent.taskFields.endDate) {\n                this.endDateEdited(editedArgs);\n            }\n            else if (column.field === this.parent.taskFields.duration) {\n                this.durationEdited(editedArgs);\n            }\n            else if (column.field === this.parent.taskFields.resourceInfo) {\n                this.resourceEdited(editedArgs, editedObj, data);\n            }\n            else if (column.field === this.parent.taskFields.progress) {\n                this.progressEdited(editedArgs);\n            }\n            else if (column.field === this.parent.taskFields.baselineStartDate\n                || column.field === this.parent.taskFields.baselineEndDate) {\n                this.baselineEdited(editedArgs);\n            }\n            else if (column.field === this.parent.taskFields.dependency) {\n                this.dependencyEdited(editedArgs, previousValue);\n            }\n            else if (column.field === this.parent.taskFields.notes) {\n                this.notedEdited(editedArgs);\n            }\n            else if (column.field === this.parent.taskFields.work) {\n                this.workEdited(editedArgs);\n            }\n            else if ((column.field === this.parent.taskFields.type || column.field === 'taskType') &&\n                !isNOU(this.parent.taskFields.work)) {\n                this.typeEdited(editedArgs, editedObj);\n            }\n            else if (column.field === this.parent.taskFields.manual) {\n                this.taskmodeEdited(editedArgs);\n            }\n            else {\n                this.parent.setRecordValue('taskData.' + column.field, editedArgs.data[column.field], editedArgs.data);\n                this.parent.editModule.initiateSaveAction(editedArgs);\n            }\n        }\n        else {\n            this.parent.editModule.endEditAction(args);\n        }\n        this.isCellEdit = false;\n        if (!isNullOrUndefined(this.parent.editModule.cellEditModule.editedColumn)) {\n            this.parent.editModule.cellEditModule.editedColumn = null;\n        }\n        if (!isNOU(this.parent.toolbarModule)) {\n            this.parent.toolbarModule.refreshToolbarItems();\n        }\n    };\n    /**\n     * To update task name cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.taskNameEdited = function (args) {\n        this.parent.setRecordValue('taskData.' + this.parent.taskFields.name, args.data[this.parent.taskFields.name], args.data);\n        this.parent.setRecordValue('taskName', args.data[this.parent.taskFields.name], args.data.ganttProperties, true);\n        this.updateEditedRecord(args);\n    };\n    /**\n     * To update task notes cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.notedEdited = function (args) {\n        this.parent.setRecordValue('taskData.' + this.parent.taskFields.notes, args.data[this.parent.taskFields.notes], args.data);\n        this.parent.setRecordValue('notes', args.data[this.parent.taskFields.notes], args.data.ganttProperties, true);\n        this.updateEditedRecord(args);\n    };\n    /**\n     * To update task schedule mode cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.taskmodeEdited = function (args) {\n        this.parent.setRecordValue('isAutoSchedule', !args.data[this.parent.taskFields.manual], args.data.ganttProperties, true);\n        this.parent.editModule.updateTaskScheduleModes(args.data);\n        this.updateEditedRecord(args);\n    };\n    /**\n     * To update task start date cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.startDateEdited = function (args) {\n        var ganttData = args.data;\n        var ganttProb = args.data.ganttProperties;\n        var currentValue = args.data[this.parent.taskFields.startDate];\n        currentValue = currentValue ? new Date(currentValue.getTime()) : null;\n        currentValue = this.parent.dateValidationModule.checkStartDate(currentValue, ganttData.ganttProperties, ganttData.ganttProperties.isMilestone);\n        if (isNOU(currentValue)) {\n            if (!ganttData.hasChildRecords) {\n                this.parent.setRecordValue('startDate', null, ganttProb, true);\n                if (!(ganttProb.startDate === null && ganttProb.endDate === null && ganttProb.duration !== null)) {\n                    this.parent.setRecordValue('duration', null, ganttProb, true);\n                }\n                this.parent.setRecordValue('isMilestone', false, ganttProb, true);\n                // if (this.parent.allowUnscheduledTasks && isNOU(this.parent.taskFields.endDate)) {\n                //     this.parent.setRecordValue('endDate', null, ganttProb, true);\n                // }\n            }\n        }\n        else if (ganttProb.endDate || !isNOU(ganttProb.duration)) {\n            this.parent.setRecordValue('startDate', new Date(currentValue.getTime()), ganttProb, true);\n            this.parent.dateValidationModule.calculateEndDate(ganttData);\n        }\n        else if (isNOU(ganttProb.endDate) && isNOU(ganttProb.duration)) {\n            this.parent.setRecordValue('startDate', new Date(currentValue.getTime()), ganttProb, true);\n        }\n        this.parent.setRecordValue('isMilestone', ganttProb.duration === 0 ? true : false, ganttProb, true);\n        this.parent.dataOperation.updateWidthLeft(args.data);\n        this.parent.dataOperation.updateMappingData(ganttData, 'startDate');\n        this.parent.dataOperation.updateMappingData(ganttData, 'endDate');\n        this.parent.dataOperation.updateMappingData(ganttData, 'duration');\n        this.updateEditedRecord(args);\n    };\n    CellEdit.prototype.validateEndDateWithSegments = function (ganttProp) {\n        var ganttSegments = [];\n        var segments = ganttProp.segments;\n        for (var i = 0; i < segments.length; i++) {\n            var segment = segments[parseInt(i.toString(), 10)];\n            var endDate = segment.endDate;\n            endDate = (!isNullOrUndefined(ganttProp.endDate)) && endDate.getTime() <\n                ganttProp.endDate.getTime() && i !== segments.length - 1 ? endDate : ganttProp.endDate;\n            segment.duration = this.parent.dataOperation.getDuration(segment.startDate, endDate, ganttProp.durationUnit, ganttProp.isAutoSchedule, ganttProp.isMilestone);\n            if (segments.length > 0 && endDate.getTime() < segment.startDate.getTime()\n                && endDate.getTime() <= ganttProp.endDate.getTime()) {\n                segments[i - 1].duration = this.parent.dataOperation.getDuration(segments[i - 1].startDate, ganttProp.endDate, ganttProp.durationUnit, ganttProp.isAutoSchedule, ganttProp.isMilestone);\n                continue;\n            }\n            ganttSegments.push(segment);\n        }\n        return ganttSegments;\n    };\n    /**\n     * To update task end date cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.endDateEdited = function (args) {\n        var ganttProb = args.data.ganttProperties;\n        var currentValue = args.data[this.parent.taskFields.endDate];\n        currentValue = currentValue ? new Date(currentValue.getTime()) : null;\n        if (isNOU(currentValue)) {\n            this.parent.setRecordValue('endDate', currentValue, ganttProb, true);\n            if (!(ganttProb.startDate === null && ganttProb.endDate === null && ganttProb.duration !== null)) {\n                this.parent.setRecordValue('duration', null, ganttProb, true);\n            }\n            this.parent.setRecordValue('isMilestone', false, ganttProb, true);\n        }\n        else {\n            var dayEndTime = this.parent['getCurrentDayEndTime'](currentValue);\n            if ((currentValue.getHours() === 0 && dayEndTime !== 86400)) {\n                this.parent.dateValidationModule.setTime(dayEndTime, currentValue);\n            }\n            currentValue = this.parent.dateValidationModule.checkEndDate(currentValue, ganttProb, ganttProb.isMilestone);\n            this.parent.setRecordValue('endDate', currentValue, ganttProb, true);\n            if (!isNOU(ganttProb.startDate) && isNOU(ganttProb.duration)) {\n                if (this.parent.dateValidationModule.compareDates(ganttProb.endDate, ganttProb.startDate) === -1) {\n                    this.parent.setRecordValue('endDate', new Date(ganttProb.startDate.getTime()), ganttProb, true);\n                    dayEndTime = this.parent['getCurrentDayEndTime'](ganttProb.endDate);\n                    this.parent.dateValidationModule.setTime(dayEndTime, ganttProb.endDate);\n                }\n            }\n            else if (!isNOU(ganttProb.duration) && isNOU(ganttProb.startDate)) {\n                this.parent.setRecordValue('startDate', this.parent.dateValidationModule.getStartDate(ganttProb.endDate, ganttProb.duration, ganttProb.durationUnit, ganttProb), ganttProb, true);\n            }\n            if (!isNullOrUndefined(ganttProb.segments)) {\n                ganttProb.segments = this.validateEndDateWithSegments(ganttProb);\n            }\n            if (this.compareDatesFromRecord(ganttProb) <= 0) {\n                this.parent.dateValidationModule.calculateDuration(args.data);\n            }\n            else {\n                this.parent.editModule.revertCellEdit(args);\n            }\n            this.updateDates(args);\n            this.parent.setRecordValue('isMilestone', (ganttProb.duration === 0 ? true : false), ganttProb, true);\n            if (ganttProb.isMilestone) {\n                this.parent.setRecordValue('startDate', this.parent.dateValidationModule.checkStartDate(ganttProb.startDate, ganttProb), ganttProb, true);\n            }\n        }\n        if (!isNullOrUndefined(args.data.ganttProperties.segments) && args.data.ganttProperties.segments.length > 0) {\n            this.parent.setRecordValue('segments', this.parent.dataOperation.setSegmentsInfo(args.data, false), args.data.ganttProperties, true);\n            this.parent.dataOperation.updateMappingData(args.data, 'segments');\n        }\n        this.parent.dataOperation.updateWidthLeft(args.data);\n        this.parent.dataOperation.updateMappingData(args.data, 'startDate');\n        this.parent.dataOperation.updateMappingData(args.data, 'endDate');\n        this.parent.dataOperation.updateMappingData(args.data, 'duration');\n        this.parent.editModule.updateResourceRelatedFields(args.data, 'endDate');\n        this.updateEditedRecord(args);\n    };\n    /**\n     * To update duration cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.durationEdited = function (args) {\n        var regex = /^[^\\d.-]+$/;\n        if (regex.test(args.data[this.parent.taskFields.duration])) {\n            var err = \"The provided value for the \" + this.parent.taskFields.duration + \" field is invalid. Please ensure the \" + this.parent.taskFields.duration + \" field contains only valid numeric values.\";\n            this.parent.trigger('actionFailure', { error: err });\n        }\n        if (parseInt(args.data[this.parent.taskFields.duration], 10) < 0) {\n            args.data[this.parent.taskFields.duration] = 0;\n        }\n        var ganttProb = args.data.ganttProperties;\n        var durationString = args.data[this.parent.taskFields.duration];\n        this.parent.dataOperation.updateDurationValue(durationString, ganttProb);\n        this.updateDates(args);\n        this.parent.editModule.updateResourceRelatedFields(args.data, 'duration');\n        this.updateEditedRecord(args);\n    };\n    /**\n     * To update start date, end date based on duration\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.updateDates = function (args) {\n        var ganttProb = args.data.ganttProperties;\n        var endDate = this.parent.dateValidationModule.getDateFromFormat(ganttProb.endDate);\n        var startDate = this.parent.dateValidationModule.getDateFromFormat(ganttProb.startDate);\n        var currentDuration = ganttProb.duration;\n        if (isNOU(currentDuration)) {\n            this.parent.setRecordValue('isMilestone', false, ganttProb, true);\n            if (args.data[this.parent.taskFields.duration] !== null) {\n                this.parent.setRecordValue('endDate', null, ganttProb, true);\n            }\n        }\n        else {\n            if (isNOU(startDate) && !isNOU(endDate)) {\n                this.parent.setRecordValue('startDate', this.parent.dateValidationModule.getStartDate(endDate, currentDuration, ganttProb.durationUnit, ganttProb), ganttProb, true);\n            }\n            if (currentDuration !== 0 && ganttProb.isMilestone) {\n                this.parent.setRecordValue('isMilestone', false, ganttProb, true);\n                if (!isNullOrUndefined(this.parent.taskFields.milestone)) {\n                    this.parent.setRecordValue(this.parent.taskFields.milestone, false, args.data, true);\n                }\n                this.parent.setRecordValue('startDate', this.parent.dateValidationModule.checkStartDate(ganttProb.startDate, ganttProb), ganttProb, true);\n            }\n            if (!isNullOrUndefined(ganttProb.segments) && ganttProb.segments.length > 0) {\n                this.parent.setRecordValue('segments', this.parent.dataOperation.setSegmentsInfo(args.data, false), ganttProb, true);\n                this.parent.dataOperation.updateMappingData(args.data, 'segments');\n            }\n            this.parent.setRecordValue('isMilestone', (ganttProb.duration === 0 ? true : false), ganttProb, true);\n            this.parent.dateValidationModule.calculateEndDate(args.data);\n        }\n        this.parent.dataOperation.updateWidthLeft(args.data);\n        this.parent.dataOperation.updateMappingData(args.data, 'endDate');\n        this.parent.dataOperation.updateMappingData(args.data, 'startDate');\n        this.parent.dataOperation.updateMappingData(args.data, 'duration');\n    };\n    /**\n     * To update progress cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.progressEdited = function (args) {\n        var ganttRecord = args.data;\n        this.parent.setRecordValue('progress', (ganttRecord[this.parent.taskFields.progress] > 100 ? 100 : ganttRecord[this.parent.taskFields.progress]), ganttRecord.ganttProperties, true);\n        this.parent.setRecordValue('taskData.' + this.parent.taskFields.progress, (ganttRecord[this.parent.taskFields.progress] > 100 ? 100 : ganttRecord[this.parent.taskFields.progress]), args.data);\n        if (!ganttRecord.ganttProperties.isAutoSchedule) {\n            this.parent.setRecordValue('autoWidth', this.parent.dataOperation.calculateWidth(ganttRecord, false), ganttRecord.ganttProperties, true);\n        }\n        if (!isNullOrUndefined(args.data.ganttProperties.segments) && args.data.ganttProperties.segments.length > 0 &&\n            !isNullOrUndefined(this.parent.editModule.taskbarEditModule)) {\n            this.parent.editModule.taskbarEditModule.updateSegmentProgress(args.data.ganttProperties);\n        }\n        if (!args.data.hasChildRecords) {\n            var width = ganttRecord.ganttProperties.isAutoSchedule ? ganttRecord.ganttProperties.width :\n                ganttRecord.ganttProperties.autoWidth;\n            this.parent.setRecordValue('progressWidth', this.parent.dataOperation.getProgressWidth(width, ganttRecord.ganttProperties.progress), ganttRecord.ganttProperties, true);\n        }\n        this.updateEditedRecord(args);\n    };\n    /**\n     * To update baselines with new baseline start date and baseline end date\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.baselineEdited = function (args) {\n        var ganttRecord = args.data.ganttProperties;\n        var baseLineStartDate = args.data[this.parent.taskFields.baselineStartDate];\n        var baseLineEndDate = args.data[this.parent.taskFields.baselineEndDate];\n        var dayEndTime = this.parent['getCurrentDayEndTime'](baseLineEndDate);\n        if (baseLineEndDate && baseLineEndDate.getHours() === 0 && dayEndTime !== 86400) {\n            this.parent.dateValidationModule.setTime(dayEndTime, baseLineEndDate);\n        }\n        this.parent.setRecordValue('baselineStartDate', this.parent.dateValidationModule.checkBaselineStartDate(baseLineStartDate, ganttRecord), ganttRecord, true);\n        this.parent.setRecordValue('baselineEndDate', this.parent.dateValidationModule.checkBaselineEndDate(baseLineEndDate), ganttRecord, true);\n        if (ganttRecord.baselineStartDate && ganttRecord.baselineEndDate) {\n            this.parent.setRecordValue('baselineLeft', this.parent.dataOperation.calculateBaselineLeft(ganttRecord), ganttRecord, true);\n            this.parent.setRecordValue('baselineWidth', this.parent.dataOperation.calculateBaselineWidth(ganttRecord), ganttRecord, true);\n        }\n        this.updateEditedRecord(args);\n    };\n    /**\n     * To update task's resource cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @param {object} editedObj .\n     * @param {IGanttData} previousData .\n     * @returns {void} .\n     */\n    CellEdit.prototype.resourceEdited = function (args, editedObj, previousData) {\n        var resourceSettings = this.parent.resourceFields;\n        var editedResourceId = editedObj[this.parent.taskFields.resourceInfo];\n        if (editedResourceId) {\n            this.isResourceCellEdited = true;\n            var tempResourceInfo = this.parent.dataOperation.setResourceInfo(editedObj);\n            var editedResouceLength = tempResourceInfo.length;\n            var previousResource = previousData.ganttProperties.resourceInfo;\n            var index = void 0;\n            var editedResources = [];\n            var resourceData = this.parent.resources;\n            var newIndex = void 0;\n            var _loop_1 = function (count) {\n                if (previousResource) {\n                    var previousResourceLength = previousResource.length;\n                    for (newIndex = 0; newIndex < previousResourceLength; newIndex++) {\n                        if (previousResource[newIndex][resourceSettings.id] === editedResourceId[count]) {\n                            index = newIndex;\n                            break;\n                        }\n                        else {\n                            index = -1;\n                        }\n                    }\n                }\n                if (!isNOU(index) && index !== -1) {\n                    editedResources.push(previousResource[parseInt(index.toString(), 10)]);\n                }\n                else {\n                    var resource = resourceData.filter(function (resourceInfo) {\n                        return (editedResourceId[count] === resourceInfo[resourceSettings.id]);\n                    });\n                    var ganttDataResource = extend({}, resource[0]);\n                    ganttDataResource[resourceSettings.unit] = 100;\n                    editedResources.push(ganttDataResource);\n                }\n            };\n            for (var count = 0; count < editedResouceLength; count++) {\n                _loop_1(count);\n            }\n            args.data.ganttProperties.resourceInfo = editedResources;\n            this.parent.dataOperation.updateMappingData(args.data, 'resourceInfo');\n            this.parent.editModule.updateResourceRelatedFields(args.data, 'resource');\n            if (this.parent.viewType === 'ResourceView') {\n                this.parent.editModule.dialogModule.isResourceUpdate = true;\n                this.parent.editModule.dialogModule.previousResource = previousResource;\n            }\n            this.updateDates(args);\n            this.updateEditedRecord(args);\n        }\n    };\n    /**\n     * To update task's predecessor cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} editedArgs .\n     * @param {object} cellEditArgs .\n     * @returns {void} .\n     */\n    CellEdit.prototype.dependencyEdited = function (editedArgs, cellEditArgs) {\n        var specialCharacterPattern = /[!@#$%^&*()_=[\\]{};:<>|./?-]/;\n        if (specialCharacterPattern.test(editedArgs.data[this.parent.taskFields.dependency])) {\n            var err = \"The provided value for the \" + this.parent.taskFields.dependency + \" field is invalid. Please ensure that the \" + this.parent.taskFields.dependency + \" field does not contain any special characters.\";\n            this.parent.trigger('actionFailure', { error: err });\n        }\n        this.parent.predecessorModule.updateUnscheduledDependency(editedArgs.data);\n        var FF = this.parent.localeObj.getConstant('FF');\n        var FS = this.parent.localeObj.getConstant('FS');\n        var SS = this.parent.localeObj.getConstant('SS');\n        var SF = this.parent.localeObj.getConstant('SF');\n        var value = '';\n        if (!isNullOrUndefined(editedArgs.data[this.parent.taskFields.dependency])) {\n            var splitString_1 = editedArgs.data[this.parent.taskFields.dependency].split(',');\n            splitString_1.map(function (splitvalue, index) {\n                if (splitvalue.includes(FF)) {\n                    value += splitvalue.replace(FF, 'FF');\n                    value += (splitString_1.length !== index + 1) ? ',' : '';\n                }\n                else if (splitvalue.includes(FS)) {\n                    value += splitvalue.replace(FS, 'FS');\n                    value += (splitString_1.length !== index + 1) ? ',' : '';\n                }\n                else if (splitvalue.includes(SS)) {\n                    value += splitvalue.replace(SS, 'SS');\n                    value += (splitString_1.length !== index + 1) ? ',' : '';\n                }\n                else if (splitvalue.includes(SF)) {\n                    value += splitvalue.replace(SF, 'SF');\n                    value += (splitString_1.length !== index + 1) ? ',' : '';\n                }\n                else {\n                    value += splitvalue;\n                    value += (splitString_1.length !== index + 1) ? ',' : '';\n                }\n            });\n        }\n        if (!this.parent.connectorLineEditModule.updatePredecessor(editedArgs.data, value, editedArgs)) {\n            this.parent.editModule.revertCellEdit(cellEditArgs);\n        }\n    };\n    /**\n     * To update task's work cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} editedArgs .\n     * @returns {void} .\n     */\n    CellEdit.prototype.workEdited = function (editedArgs) {\n        var ganttProb = editedArgs.data.ganttProperties;\n        if (editedArgs.data[this.parent.taskFields.work] < 0) {\n            editedArgs.data[this.parent.taskFields.work] = 0;\n        }\n        var workValue = editedArgs.data[this.parent.taskFields.work];\n        this.parent.setRecordValue('work', workValue, ganttProb, true);\n        this.parent.editModule.updateResourceRelatedFields(editedArgs.data, 'work');\n        this.updateDates(editedArgs);\n        this.updateEditedRecord(editedArgs);\n    };\n    /**\n     * To update task type cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @param {object} editedObj .\n     * @returns {void} .\n     */\n    CellEdit.prototype.typeEdited = function (args, editedObj) {\n        var key = this.parent.taskFields.type || 'taskType';\n        var ganttProb = args.data.ganttProperties;\n        var taskType = editedObj[\"\" + key];\n        this.parent.setRecordValue('taskType', taskType, ganttProb, true);\n        // To validate the work column as well, if duartion column value is 0, when FixedDuration type\n        if (ganttProb.taskType === 'FixedDuration' && ganttProb.duration === 0) {\n            this.parent.editModule.updateResourceRelatedFields(args.data, 'work');\n        }\n        //this.parent.dataOperation.updateMappingData(args.data, 'taskType');\n        this.updateEditedRecord(args);\n    };\n    /**\n     * To compare start date and end date from Gantt record\n     *\n     * @param {ITaskData} ganttRecord .\n     * @returns {number} .\n     */\n    CellEdit.prototype.compareDatesFromRecord = function (ganttRecord) {\n        var sDate = this.parent.dateValidationModule.getValidStartDate(ganttRecord);\n        var eDate = this.parent.dateValidationModule.getValidEndDate(ganttRecord);\n        return this.parent.dateValidationModule.compareDates(sDate, eDate);\n    };\n    /**\n     * To start method save action with edited cell value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.updateEditedRecord = function (args) {\n        this.parent.editModule.initiateUpdateAction(args);\n    };\n    /**\n     * To remove all public private properties\n     *\n     * @returns {void} .\n     * @private\n     */\n    CellEdit.prototype.destroy = function () {\n        // Destroy Method\n        this.parent.editModule.cellEditModule = undefined;\n    };\n    return CellEdit;\n}());\nexport { CellEdit };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}