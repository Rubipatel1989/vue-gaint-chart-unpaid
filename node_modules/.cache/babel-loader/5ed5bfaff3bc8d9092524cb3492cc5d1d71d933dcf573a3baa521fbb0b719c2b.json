{"ast":null,"code":"import { getObject, Grid, Reorder as GridReorder } from '@syncfusion/ej2-grids';\n/**\n * TreeGrid Reorder module\n *\n * @hidden\n */\nvar Reorder = /** @class */function () {\n  /**\n   * Constructor for Reorder module\n   *\n   * @param {TreeGrid} parent - Tree Grid instance\n   */\n  function Reorder(parent) {\n    Grid.Inject(GridReorder);\n    this.parent = parent;\n    this.addEventListener();\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @private\n   * @returns {string} Returns Reorder module name\n   */\n  Reorder.prototype.getModuleName = function () {\n    return 'reorder';\n  };\n  /**\n   * @hidden\n   * @returns {void}\n   */\n  Reorder.prototype.addEventListener = function () {\n    this.parent.on('getColumnIndex', this.getTreeColumn, this);\n  };\n  Reorder.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n    this.parent.off('getColumnIndex', this.getTreeColumn);\n  };\n  /**\n   * To destroy the Reorder\n   *\n   * @returns {void}\n   * @hidden\n   */\n  Reorder.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n  Reorder.prototype.getTreeColumn = function () {\n    var columnModel = 'columnModel';\n    var treeColumn = this.parent[\"\" + columnModel][this.parent.treeColumnIndex];\n    var treeIndex;\n    var updatedCols = this.parent.getColumns();\n    for (var f = 0; f < updatedCols.length; f++) {\n      var treeColumnfield = getObject('field', treeColumn);\n      var parentColumnfield = getObject('field', updatedCols[parseInt(f.toString(), 10)]);\n      if (treeColumnfield === parentColumnfield) {\n        treeIndex = f;\n        break;\n      }\n    }\n    this.parent.setProperties({\n      treeColumnIndex: treeIndex\n    }, true);\n  };\n  return Reorder;\n}();\nexport { Reorder };","map":{"version":3,"names":["getObject","Grid","Reorder","GridReorder","parent","Inject","addEventListener","prototype","getModuleName","on","getTreeColumn","removeEventListener","isDestroyed","off","destroy","columnModel","treeColumn","treeColumnIndex","treeIndex","updatedCols","getColumns","f","length","treeColumnfield","parentColumnfield","parseInt","toString","setProperties"],"sources":["/var/www/vue/vue-gantt-chart/node_modules/@syncfusion/ej2-treegrid/src/treegrid/actions/reorder.js"],"sourcesContent":["import { getObject, Grid, Reorder as GridReorder } from '@syncfusion/ej2-grids';\n/**\n * TreeGrid Reorder module\n *\n * @hidden\n */\nvar Reorder = /** @class */ (function () {\n    /**\n     * Constructor for Reorder module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance\n     */\n    function Reorder(parent) {\n        Grid.Inject(GridReorder);\n        this.parent = parent;\n        this.addEventListener();\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns Reorder module name\n     */\n    Reorder.prototype.getModuleName = function () {\n        return 'reorder';\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Reorder.prototype.addEventListener = function () {\n        this.parent.on('getColumnIndex', this.getTreeColumn, this);\n    };\n    Reorder.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('getColumnIndex', this.getTreeColumn);\n    };\n    /**\n     * To destroy the Reorder\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Reorder.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    Reorder.prototype.getTreeColumn = function () {\n        var columnModel = 'columnModel';\n        var treeColumn = this.parent[\"\" + columnModel][this.parent.treeColumnIndex];\n        var treeIndex;\n        var updatedCols = this.parent.getColumns();\n        for (var f = 0; f < updatedCols.length; f++) {\n            var treeColumnfield = getObject('field', treeColumn);\n            var parentColumnfield = getObject('field', updatedCols[parseInt(f.toString(), 10)]);\n            if (treeColumnfield === parentColumnfield) {\n                treeIndex = f;\n                break;\n            }\n        }\n        this.parent.setProperties({ treeColumnIndex: treeIndex }, true);\n    };\n    return Reorder;\n}());\nexport { Reorder };\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,IAAI,EAAEC,OAAO,IAAIC,WAAW,QAAQ,uBAAuB;AAC/E;AACA;AACA;AACA;AACA;AACA,IAAID,OAAO,GAAG,aAAe,YAAY;EACrC;AACJ;AACA;AACA;AACA;EACI,SAASA,OAAOA,CAACE,MAAM,EAAE;IACrBH,IAAI,CAACI,MAAM,CAACF,WAAW,CAAC;IACxB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACE,gBAAgB,CAAC,CAAC;EAC3B;EACA;AACJ;AACA;AACA;AACA;AACA;EACIJ,OAAO,CAACK,SAAS,CAACC,aAAa,GAAG,YAAY;IAC1C,OAAO,SAAS;EACpB,CAAC;EACD;AACJ;AACA;AACA;EACIN,OAAO,CAACK,SAAS,CAACD,gBAAgB,GAAG,YAAY;IAC7C,IAAI,CAACF,MAAM,CAACK,EAAE,CAAC,gBAAgB,EAAE,IAAI,CAACC,aAAa,EAAE,IAAI,CAAC;EAC9D,CAAC;EACDR,OAAO,CAACK,SAAS,CAACI,mBAAmB,GAAG,YAAY;IAChD,IAAI,IAAI,CAACP,MAAM,CAACQ,WAAW,EAAE;MACzB;IACJ;IACA,IAAI,CAACR,MAAM,CAACS,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAACH,aAAa,CAAC;EACzD,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIR,OAAO,CAACK,SAAS,CAACO,OAAO,GAAG,YAAY;IACpC,IAAI,CAACH,mBAAmB,CAAC,CAAC;EAC9B,CAAC;EACDT,OAAO,CAACK,SAAS,CAACG,aAAa,GAAG,YAAY;IAC1C,IAAIK,WAAW,GAAG,aAAa;IAC/B,IAAIC,UAAU,GAAG,IAAI,CAACZ,MAAM,CAAC,EAAE,GAAGW,WAAW,CAAC,CAAC,IAAI,CAACX,MAAM,CAACa,eAAe,CAAC;IAC3E,IAAIC,SAAS;IACb,IAAIC,WAAW,GAAG,IAAI,CAACf,MAAM,CAACgB,UAAU,CAAC,CAAC;IAC1C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,WAAW,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACzC,IAAIE,eAAe,GAAGvB,SAAS,CAAC,OAAO,EAAEgB,UAAU,CAAC;MACpD,IAAIQ,iBAAiB,GAAGxB,SAAS,CAAC,OAAO,EAAEmB,WAAW,CAACM,QAAQ,CAACJ,CAAC,CAACK,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;MACnF,IAAIH,eAAe,KAAKC,iBAAiB,EAAE;QACvCN,SAAS,GAAGG,CAAC;QACb;MACJ;IACJ;IACA,IAAI,CAACjB,MAAM,CAACuB,aAAa,CAAC;MAAEV,eAAe,EAAEC;IAAU,CAAC,EAAE,IAAI,CAAC;EACnE,CAAC;EACD,OAAOhB,OAAO;AAClB,CAAC,CAAC,CAAE;AACJ,SAASA,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}