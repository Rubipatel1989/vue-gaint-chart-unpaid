{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { PdfTreeGrid } from '../pdf-treegrid';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { RectangleF, PdfTextAlignment, PdfBorderOverlapStyle, PointF, PdfDashStyle, PdfLineCap, PdfSolidBrush, PdfStandardFont } from '@syncfusion/ej2-pdf-export';\nimport { SizeF, PdfFontStyle, PdfBitmap, PdfImage, PdfTextWebLink } from '@syncfusion/ej2-pdf-export';\nimport { PdfStringFormat, PdfStringLayouter } from '@syncfusion/ej2-pdf-export';\n/**@hidden*/\nvar PdfTreeGridCell = /** @class */function () {\n  function PdfTreeGridCell(row) {\n    this.cellWidth = 0;\n    this.cellHeight = 0;\n    /** @private */\n    this.finishedDrawingCell = true;\n    if (isNullOrUndefined(row)) {\n      this.rowSpan = 1;\n      this.columnSpan = 1;\n    } else {\n      this.row = row;\n    }\n    this.style = {};\n  }\n  Object.defineProperty(PdfTreeGridCell.prototype, \"height\", {\n    /**\n     * Gets the `height` of the PdfTreeGrid cell.[Read-Only].\n     *\n     * @returns {number} .\n     * @private\n     */\n    get: function () {\n      if (this.cellHeight === 0) {\n        this.cellHeight = this.measureHeight();\n      }\n      return this.cellHeight;\n    },\n    set: function (value) {\n      this.cellHeight = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTreeGridCell.prototype, \"width\", {\n    /**\n     * Gets the `width` of the PdfTreeGrid cell.[Read-Only].\n     *\n     * @returns {number} .\n     * @private\n     */\n    get: function () {\n      if (this.cellWidth === 0) {\n        this.cellWidth = this.measureWidth();\n      }\n      return Math.round(this.cellWidth);\n    },\n    set: function (value) {\n      this.cellWidth = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  PdfTreeGridCell.prototype.measureWidth = function () {\n    var width = 0;\n    var layouter = new PdfStringLayouter();\n    if (typeof this.value === 'string') {\n      /* eslint-disable-next-line */\n      var font = new PdfStandardFont(this.row.treegrid.ganttStyle.fontFamily, this.style.fontSize, this.style.fontStyle);\n      if (this.row.isParentRow) {\n        font = new PdfStandardFont(this.row.treegrid.ganttStyle.fontFamily, this.style.fontSize, PdfFontStyle.Bold);\n      } else {\n        font = new PdfStandardFont(this.row.treegrid.ganttStyle.fontFamily, this.style.fontSize, this.style.fontStyle);\n      }\n      if (this.row.treegrid.ganttStyle.font) {\n        font = this.row.treegrid.ganttStyle.font;\n      }\n      /* eslint-disable-next-line */\n      var slr = layouter.layout(this.value, font, this.style.format, new SizeF(Number.MAX_VALUE, Number.MAX_VALUE), false, new SizeF(0, 0));\n      width += slr.actualSize.width;\n      width += (this.style.borders.left.width + this.style.borders.right.width) * 2;\n    }\n    if (typeof this.row.treegrid.style.cellPadding.left !== 'undefined' && this.row.treegrid.style.cellPadding.hasLeftPad) {\n      width += this.row.treegrid.style.cellPadding.left;\n    }\n    if (typeof this.row.treegrid.style.cellPadding.right !== 'undefined' && this.row.treegrid.style.cellPadding.hasRightPad) {\n      width += this.row.treegrid.style.cellPadding.right;\n    }\n    width += this.row.treegrid.style.cellSpacing;\n    return width;\n  };\n  /**\n   * @returns {number} .\n   * @private\n   */\n  /* eslint-disable */\n  PdfTreeGridCell.prototype.measureHeight = function () {\n    var rowHeight = this.row.treegrid.rowHeight;\n    var height = 0;\n    var width = this.calculateWidth();\n    width -= this.row.treegrid.style.cellPadding.right + this.row.treegrid.style.cellPadding.left;\n    width -= this.style.borders ? this.style.borders.left.width + this.style.borders.right.width : 0;\n    var layouter = new PdfStringLayouter();\n    if (typeof this.value === 'string' || typeof this.remainingString === 'string') {\n      var currentValue = this.value;\n      if (!this.finishedDrawingCell) {\n        currentValue = !(isNullOrUndefined(this.remainingString) || this.remainingString === '') ? this.remainingString : this.value;\n      }\n      var font = null;\n      if (this.row.isParentRow) {\n        font = new PdfStandardFont(this.row.treegrid.ganttStyle.fontFamily, this.style.fontSize, PdfFontStyle.Bold);\n      } else {\n        font = new PdfStandardFont(this.row.treegrid.ganttStyle.fontFamily, this.style.fontSize, this.style.fontStyle);\n      }\n      if (this.row.treegrid.ganttStyle.font) {\n        font = this.row.treegrid.ganttStyle.font;\n      }\n      /* eslint-disable */\n      var slr = layouter.layout(currentValue, font, this.style.format, new SizeF(width - 10, 0), false, new SizeF(0, 0));\n      var value = Math.max(slr.lineHeight, slr.actualSize.height);\n      if (currentValue.length > 80) {\n        height += value + 20;\n      } else {\n        height += value + slr.size.height / 2;\n      }\n      height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n    }\n    height += this.row.treegrid.style.cellPadding.top + this.row.treegrid.style.cellPadding.bottom;\n    height += this.row.treegrid.style.cellSpacing;\n    return height > rowHeight ? height : rowHeight;\n  };\n  /* eslint-enable */\n  PdfTreeGridCell.prototype.calculateWidth = function () {\n    var cellIndex = this.row.cells.indexOf(this);\n    var columnSpan = this.columnSpan;\n    var width = 0;\n    for (var i = 0; i < columnSpan; i++) {\n      width += this.row.treegrid.columns.getColumn(cellIndex + i) ? this.row.treegrid.columns.getColumn(cellIndex + i).width : 0;\n    }\n    if (this.row.treegrid.columns.getColumn(cellIndex) && this.row.treegrid.columns.getColumn(cellIndex).isTreeColumn) {\n      width -= this.row.level * 10;\n    }\n    return width;\n  };\n  /**\n   * `Draws` the specified graphics.\n   *\n   * @param {PdfGraphics} graphics .\n   * @param {RectangleF} bounds .\n   * @param {boolean} cancelSubsequentSpans .\n   * @param {number} leftAdjustment .\n   * @returns {PdfStringLayoutResult} .\n   * @private\n   */\n  PdfTreeGridCell.prototype.draw = function (graphics, bounds, cancelSubsequentSpans, leftAdjustment) {\n    var result = null;\n    var padding = 10;\n    // if (cancelSubsequentSpans) {\n    //     // Cancel all subsequent cell spans, if no space exists.\n    //     const currentCellIndex: number = this.row.cells.indexOf(this);\n    //     for (let i: number = currentCellIndex + 1; i <= currentCellIndex + this.columnSpan; i++) {\n    //         this.row.cells.getCell(i).isCellMergeContinue = false;\n    //         this.row.cells.getCell(i).isRowMergeContinue = false;\n    //     }\n    //     this.columnSpan = 1;\n    // }\n    // Skip cells which were already covered by span map.\n    // if (this.isCellMergeContinue || this.isRowMergeContinue) {\n    //     if (this.isCellMergeContinue && this.row.treegrid.style.allowHorizontalOverflow) {\n    //         if ((this.row.rowOverflowIndex > 0 && (this.row.cells.indexOf(this) !== this.row.rowOverflowIndex + 1)) ||\n    //             (this.row.rowOverflowIndex === 0 && this.isCellMergeContinue)) {\n    //             return result;\n    //         } else {\n    //             return result;\n    //         }\n    //     }\n    // }\n    //bounds = this.adjustContentLayoutArea(bounds);\n    this.drawCellBackground(graphics, bounds);\n    var textPen = null;\n    var textBrush = new PdfSolidBrush(this.style.fontColor);\n    var font = null;\n    if (this.row.isParentRow) {\n      font = new PdfStandardFont(this.row.treegrid.ganttStyle.fontFamily, this.style.fontSize, PdfFontStyle.Bold);\n    } else {\n      font = new PdfStandardFont(this.row.treegrid.ganttStyle.fontFamily, this.style.fontSize, this.style.fontStyle);\n    }\n    if (this.row.treegrid.ganttStyle.font) {\n      font = this.row.treegrid.ganttStyle.font;\n    }\n    var innerLayoutArea = bounds;\n    if (!this.isHeaderCell) {\n      /* eslint-disable-next-line */\n      innerLayoutArea.x = innerLayoutArea.x;\n      /* eslint-disable-next-line */\n      innerLayoutArea.width = innerLayoutArea.width;\n    }\n    if (innerLayoutArea.height >= graphics.clientSize.height) {\n      // To break row to next page\n      if (this.row.treegrid.allowRowBreakAcrossPages) {\n        innerLayoutArea.height -= innerLayoutArea.y;\n        bounds.height -= bounds.y;\n      } else {\n        innerLayoutArea.height = graphics.clientSize.height;\n        bounds.height = graphics.clientSize.height;\n      }\n    }\n    innerLayoutArea = this.adjustContentLayoutArea(innerLayoutArea);\n    if (this.image && this.value) {\n      var imageBounds = void 0;\n      if (this.image.width <= innerLayoutArea.width) {\n        imageBounds = new RectangleF(innerLayoutArea.x, innerLayoutArea.y, this.image.width, this.image.height);\n      } else {\n        imageBounds = innerLayoutArea;\n      }\n      graphics.drawImage(this.image, imageBounds.x, imageBounds.y - 5, imageBounds.width, imageBounds.height);\n      var temp = null;\n      // font = new PdfStandardFont(this.row.treegrid.ganttStyle.fontFamily, this.style.fontSize, this.style.fontStyle);\n      var customisedFont = void 0;\n      var fontStyles = this.fontStyle;\n      if (!fontStyles) {\n        fontStyles = this.style;\n      }\n      var newFont = new PdfStandardFont(fontStyles.fontFamily, fontStyles.fontSize, fontStyles.fontStyle);\n      if (fontStyles.fontFamily) {\n        customisedFont = newFont;\n      } else {\n        customisedFont = font;\n      }\n      var customisedBrush = void 0;\n      if (fontStyles.fontBrush) {\n        customisedBrush = new PdfSolidBrush(this.fontStyle.fontBrush);\n      } else {\n        customisedBrush = textBrush;\n      }\n      if (this.finishedDrawingCell) {\n        temp = this.remainingString === '' ? this.remainingString : this.value;\n        /* eslint-disable-next-line */\n        graphics.drawString(temp, customisedFont, textPen, customisedBrush, innerLayoutArea.x + leftAdjustment, this.isHeaderCell ? innerLayoutArea.y - 16 : innerLayoutArea.y, innerLayoutArea.width - leftAdjustment - padding, innerLayoutArea.height - padding, this.style.format);\n      } else {\n        /* eslint-disable-next-line */\n        graphics.drawString(this.remainingString, customisedFont, textPen, customisedBrush, innerLayoutArea.x + leftAdjustment, this.isHeaderCell ? innerLayoutArea.y - 16 : innerLayoutArea.y, this.style.format);\n      }\n      result = graphics.stringLayoutResult;\n    } else if (typeof this.value === 'string' || typeof this.remainingString === 'string') {\n      var temp = null;\n      var customisedFont = void 0;\n      var newFont = new PdfStandardFont(this.style.fontFamily, this.style.fontSize, this.style.fontStyle);\n      if (this.style.fontFamily) {\n        customisedFont = newFont;\n      } else {\n        customisedFont = font;\n      }\n      var customisedBrush = void 0;\n      if (this.style.fontBrush) {\n        customisedBrush = new PdfSolidBrush(this.style.fontBrush);\n      } else {\n        customisedBrush = textBrush;\n      }\n      if (this.finishedDrawingCell) {\n        temp = this.remainingString === '' ? this.remainingString : this.value;\n        /* eslint-disable-next-line */\n        graphics.drawString(temp, customisedFont, textPen, customisedBrush, innerLayoutArea.x + leftAdjustment, this.isHeaderCell ? innerLayoutArea.y - 16 : innerLayoutArea.y - 3, innerLayoutArea.width - leftAdjustment - padding, innerLayoutArea.height - padding, this.style.format);\n      } else {\n        /* eslint-disable-next-line */\n        graphics.drawString(this.remainingString, customisedFont, textPen, customisedBrush, innerLayoutArea.x + leftAdjustment, this.isHeaderCell ? innerLayoutArea.y - 16 : innerLayoutArea.y, this.style.format);\n      }\n      result = graphics.stringLayoutResult;\n    } else if (this.value instanceof PdfImage || this.value instanceof PdfBitmap) {\n      var imageBounds = void 0;\n      if (this.value.width <= innerLayoutArea.width) {\n        imageBounds = new RectangleF(innerLayoutArea.x, innerLayoutArea.y, this.value.width, innerLayoutArea.height);\n      } else {\n        imageBounds = innerLayoutArea;\n      }\n      graphics.drawImage(this.value, imageBounds.x, imageBounds.y - 10, imageBounds.width, imageBounds.height);\n    } else if (this.value instanceof PdfTextWebLink) {\n      this.value.draw(graphics.currentPage, innerLayoutArea);\n    }\n    if (this.style.borders !== null) {\n      this.drawCellBorder(graphics, bounds);\n    }\n    return result;\n  };\n  /**\n   * Draw the `cell background`.\n   *\n   * @param {PdfGraphics} graphics .\n   * @param {RectangleF} bounds .\n   * @returns {void} .\n   * @private\n   */\n  PdfTreeGridCell.prototype.drawCellBackground = function (graphics, bounds) {\n    var backgroundBrush = new PdfSolidBrush(this.style.backgroundColor);\n    if (backgroundBrush !== null) {\n      graphics.save();\n      graphics.drawRectangle(backgroundBrush, bounds.x, bounds.y, bounds.width, bounds.height);\n      graphics.restore();\n    }\n    // if (this.style.backgroundImage !== null) {\n    //     let image: PdfImage = this.getBackgroundImage();\n    //     graphics.drawImage(this.style.backgroundImage, bounds.x, bounds.y, bounds.width, bounds.height);\n    // }\n  };\n  /**\n   * `Adjusts the text layout area`.\n   *\n   * @param {RectangleF} bounds .\n   * @returns {RectangleF} .\n   * @private\n   */\n  PdfTreeGridCell.prototype.adjustContentLayoutArea = function (bounds) {\n    //Add Padding value to its Cell Bounds\n    var returnBounds = new RectangleF(new PointF(bounds.x, bounds.y), new SizeF(bounds.width, bounds.height));\n    var cellPadding = this.style.padding;\n    if (this.value instanceof PdfTreeGrid) {\n      var size = this.value.size;\n      if (this.style.format.alignment === PdfTextAlignment.Center) {\n        returnBounds.x += cellPadding.left + (returnBounds.width - size.width) / 2;\n        returnBounds.y += cellPadding.top + (returnBounds.height - size.height) / 2;\n      } else if (this.style.format.alignment === PdfTextAlignment.Left) {\n        returnBounds.x += cellPadding.left;\n        returnBounds.y += cellPadding.top;\n      } else if (this.style.format.alignment === PdfTextAlignment.Right) {\n        returnBounds.x += cellPadding.left + (returnBounds.width - size.width);\n        returnBounds.y += cellPadding.top;\n      }\n    } else {\n      returnBounds.x += cellPadding.left;\n      returnBounds.y += cellPadding.top;\n    }\n    return returnBounds;\n  };\n  /**\n   * @param {PdfGraphics} graphics .\n   * @param {RectangleF} bounds .\n   * @returns {void} .\n   * @private\n   */\n  PdfTreeGridCell.prototype.drawCellBorder = function (graphics, bounds) {\n    if (this.row.treegrid.style.borderOverlapStyle === PdfBorderOverlapStyle.Inside) {\n      bounds.x += this.style.borders.left.width;\n      bounds.y += this.style.borders.top.width;\n      bounds.width -= this.style.borders.right.width;\n      bounds.height -= this.style.borders.bottom.width;\n    }\n    if (this.style.borders.isAll && this.isHeaderCell) {\n      graphics.drawRectangle(this.style.borders.left, bounds.x, bounds.y, bounds.width, bounds.height);\n      graphics.restore();\n      return;\n    } else {\n      var p1 = new PointF(bounds.x, bounds.y + bounds.height);\n      var p2 = new PointF(bounds.x, bounds.y);\n      var pen = this.style.borders.left;\n      pen.lineCap = this.style.borders.left.dashStyle === PdfDashStyle.Solid ? PdfLineCap.Square : pen.lineCap;\n      graphics.drawLine(pen, p1, p2);\n      graphics.restore();\n      p1 = new PointF(bounds.x + bounds.width, bounds.y);\n      p2 = new PointF(bounds.x + bounds.width, bounds.y + bounds.height);\n      pen = this.style.borders.right;\n      if (bounds.x + bounds.width > graphics.clientSize.width - pen.width / 2) {\n        p1 = new PointF(graphics.clientSize.width - pen.width / 2, bounds.y);\n        p2 = new PointF(graphics.clientSize.width - pen.width / 2, bounds.y + bounds.height);\n      }\n      pen.lineCap = this.style.borders.right.dashStyle === PdfDashStyle.Solid ? PdfLineCap.Square : pen.lineCap;\n      graphics.drawLine(pen, p1, p2);\n      graphics.restore();\n      p1 = new PointF(bounds.x, bounds.y);\n      p2 = new PointF(bounds.x + bounds.width, bounds.y);\n      pen = this.style.borders.top;\n      pen.lineCap = this.style.borders.top.dashStyle === PdfDashStyle.Solid ? PdfLineCap.Square : pen.lineCap;\n      graphics.drawLine(pen, p1, p2);\n      graphics.restore();\n      p1 = new PointF(bounds.x + bounds.width, bounds.y + bounds.height);\n      p2 = new PointF(bounds.x, bounds.y + bounds.height);\n      pen = this.style.borders.bottom;\n      if (bounds.y + bounds.height > graphics.clientSize.height - pen.width / 2) {\n        p1 = new PointF(bounds.x + bounds.width, graphics.clientSize.height - pen.width / 2);\n        p2 = new PointF(bounds.x, graphics.clientSize.height - pen.width / 2);\n      }\n      pen.lineCap = this.style.borders.bottom.dashStyle === PdfDashStyle.Solid ? PdfLineCap.Square : pen.lineCap;\n      graphics.drawLine(pen, p1, p2);\n      graphics.restore();\n    }\n  };\n  return PdfTreeGridCell;\n}();\nexport { PdfTreeGridCell };\n/**\n * `PdfTreeGridCellCollection` class provides access to an ordered,\n * strongly typed collection of 'PdfTreeGridCell' objects.\n *\n * @private\n */\nvar PdfTreeGridCellCollection = /** @class */function () {\n  //Constructor\n  /**\n   * Initializes a new instance of the `PdfGridCellCollection` class with the row.\n   *\n   * @param { PdfTreeGridRow} row .\n   * @private\n   */\n  function PdfTreeGridCellCollection(row) {\n    this.treegridRow = row;\n    this.cells = [];\n  }\n  //Properties\n  /**\n   * Gets the current `cell`.\n   *\n   * @param {number} index .\n   * @returns {PdfTreeGridCell} .\n   * @private\n   */\n  PdfTreeGridCellCollection.prototype.getCell = function (index) {\n    if (index < 0 || index >= this.count) {\n      throw new Error('IndexOutOfRangeException');\n    }\n    return this.cells[index];\n  };\n  Object.defineProperty(PdfTreeGridCellCollection.prototype, \"count\", {\n    /**\n     * Gets the cells `count`.[Read-Only].\n     *\n     * @returns {number} .\n     * @private\n     */\n    get: function () {\n      return this.cells.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  //Implementation\n  /**\n   * `Adds` this instance.\n   *\n   * @param {PdfTreeGridCell} cell .\n   * @returns {PdfTreeGridCell | void} .\n   * @private\n   */\n  PdfTreeGridCellCollection.prototype.add = function (cell) {\n    if (typeof cell === 'undefined') {\n      var tempcell = new PdfTreeGridCell();\n      this.add(tempcell);\n      return cell;\n    } else {\n      cell.row = this.treegridRow;\n      this.cells.push(cell);\n    }\n  };\n  /**\n   * Returns the `index of` a particular cell in the collection.\n   *\n   * @param {PdfTreeGridCell} cell .\n   * @returns {number} .\n   * @private\n   */\n  PdfTreeGridCellCollection.prototype.indexOf = function (cell) {\n    return this.cells.indexOf(cell);\n  };\n  return PdfTreeGridCellCollection;\n}();\nexport { PdfTreeGridCellCollection };\n/**\n *\n */\nvar PdfTreeGridRow = /** @class */function () {\n  function PdfTreeGridRow(treegrid) {\n    this.treegridRowOverflowIndex = 0;\n    this.rowHeight = 0;\n    this.rowWidth = 0;\n    /* eslint-disable-next-line */\n    this._isParentRow = false;\n    this.intendLevel = 0;\n    this.pdfTreeGrid = treegrid;\n  }\n  Object.defineProperty(PdfTreeGridRow.prototype, \"cells\", {\n    get: function () {\n      if (isNullOrUndefined(this.treegridCells)) {\n        this.treegridCells = new PdfTreeGridCellCollection(this);\n      }\n      return this.treegridCells;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTreeGridRow.prototype, \"isParentRow\", {\n    get: function () {\n      return this._isParentRow;\n    },\n    set: function (value) {\n      this._isParentRow = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTreeGridRow.prototype, \"treegrid\", {\n    get: function () {\n      return this.pdfTreeGrid;\n    },\n    set: function (value) {\n      this.pdfTreeGrid = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTreeGridRow.prototype, \"rowBreakHeight\", {\n    /**\n     * `Height` of the row yet to be drawn after split.\n     *\n     * @returns {number} .\n     * @private\n     */\n    get: function () {\n      if (typeof this.treegridRowBreakHeight === 'undefined') {\n        this.treegridRowBreakHeight = 0;\n      }\n      return this.treegridRowBreakHeight;\n    },\n    set: function (value) {\n      this.treegridRowBreakHeight = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTreeGridRow.prototype, \"rowOverflowIndex\", {\n    /**\n     * `over flow index` of the row.\n     *\n     * @returns {number} .\n     * @private\n     */\n    get: function () {\n      return this.treegridRowOverflowIndex;\n    },\n    set: function (value) {\n      this.treegridRowOverflowIndex = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTreeGridRow.prototype, \"level\", {\n    get: function () {\n      return this.intendLevel;\n    },\n    set: function (value) {\n      this.intendLevel = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTreeGridRow.prototype, \"height\", {\n    /**\n     * Gets or sets the `height` of the row.\n     *\n     * @returns {number} .\n     * @private\n     */\n    get: function () {\n      if (this.rowHeight === 0) {\n        this.rowHeight = this.measureHeight();\n      }\n      return this.rowHeight;\n    },\n    set: function (value) {\n      this.rowHeight = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTreeGridRow.prototype, \"width\", {\n    /**\n     * Gets or sets the `width` of the row.\n     *\n     * @returns {number} .\n     * @private\n     */\n    get: function () {\n      if (this.rowWidth === 0) {\n        this.rowWidth = this.measureWidth();\n      }\n      return this.rowWidth;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTreeGridRow.prototype, \"rowIndex\", {\n    get: function () {\n      return this.treegrid.rows.rowCollection.indexOf(this);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  PdfTreeGridRow.prototype.measureWidth = function () {\n    var columns = this.treegrid.columns.columns;\n    var totalWidth = 0;\n    for (var i = 0; i < columns.length; i++) {\n      var column = columns[i];\n      totalWidth += column.width;\n    }\n    return totalWidth;\n  };\n  PdfTreeGridRow.prototype.measureHeight = function () {\n    var rowHeight = this.cells.getCell(0).height;\n    for (var i = 0; i < this.cells.count; i++) {\n      var cell = this.cells.getCell(i);\n      if (cell.columnSpan === 1 || cell.rowSpan === 1) {\n        rowHeight = Math.max(rowHeight, cell.height);\n      } else {\n        rowHeight = Math.min(rowHeight, cell.height);\n      }\n      cell.height = rowHeight;\n    }\n    return rowHeight;\n  };\n  return PdfTreeGridRow;\n}();\nexport { PdfTreeGridRow };\n/**\n * `PdfTreeGridRowCollection` class provides access to an ordered, strongly typed collection of 'PdfTreeGridRow' objects.\n *\n * @private\n */\nvar PdfTreeGridRowCollection = /** @class */function () {\n  // Constructor\n  /**\n   * Initializes a new instance of the `PdfTreeGridRowCollection` class with the parent grid.\n   *\n   * @param {PdfTreeGrid} treegrid .\n   * @private\n   */\n  function PdfTreeGridRowCollection(treegrid) {\n    this.rows = [];\n    this.treegrid = treegrid;\n  }\n  Object.defineProperty(PdfTreeGridRowCollection.prototype, \"count\", {\n    //Properties\n    /**\n     * Gets the number of header in the `PdfTreeGrid`.[Read-Only].\n     *\n     * @returns {number} .\n     * @private\n     */\n    get: function () {\n      return this.rows.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTreeGridRowCollection.prototype, \"rowCollection\", {\n    //Implementation\n    /**\n     * Return the row collection of the `treegrid`.\n     *\n     * @returns {PdfTreeGridRow[]} .\n     * @private\n     */\n    get: function () {\n      return this.rows;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  PdfTreeGridRowCollection.prototype.addRow = function (row) {\n    if (typeof row === 'undefined') {\n      var row_1 = new PdfTreeGridRow(this.treegrid);\n      this.addRow(row_1);\n      return row_1;\n    } else {\n      if (row.cells.count === 0) {\n        for (var i = 0; i < this.treegrid.columns.count; i++) {\n          row.cells.add(new PdfTreeGridCell());\n        }\n      }\n      this.rows.push(row);\n    }\n  };\n  /**\n   * Return the row by index.\n   *\n   * @param {number} index .\n   * @returns {PdfTreeGridRow} .\n   * @private\n   */\n  PdfTreeGridRowCollection.prototype.getRow = function (index) {\n    return this.rows[index];\n  };\n  return PdfTreeGridRowCollection;\n}();\nexport { PdfTreeGridRowCollection };\n/**\n * `PdfTreeGridHeaderCollection` class provides customization of the settings for the header.\n *\n * @private\n */\nvar PdfTreeGridHeaderCollection = /** @class */function () {\n  //constructor\n  /**\n   * Initializes a new instance of the `PdfTreeGridHeaderCollection` class with the parent grid.\n   *\n   * @param {PdfTreeGrid} treegrid .\n   * @private\n   */\n  function PdfTreeGridHeaderCollection(treegrid) {\n    /**\n     * The array to store the `rows` of the grid header.\n     *\n     * @returns {PdfTreeGridRow[]} .\n     * @private\n     */\n    this.rows = [];\n    this.treegrid = treegrid;\n    this.rows = [];\n  }\n  //Properties\n  /**\n   * Gets a 'PdfTreeGridRow' object that represents the `header` row in a 'PdfGridHeaderCollection' control.[Read-Only].\n   *\n   * @param {number} index .\n   * @returns {PdfTreeGridRow} .\n   * @private\n   */\n  PdfTreeGridHeaderCollection.prototype.getHeader = function (index) {\n    return this.rows[index];\n  };\n  Object.defineProperty(PdfTreeGridHeaderCollection.prototype, \"count\", {\n    /**\n     * Gets the `number of header` in the 'PdfGrid'.[Read-Only]\n     *\n     * @returns {number} .\n     * @private\n     */\n    get: function () {\n      return this.rows.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  //Implementation\n  /**\n   * `Adds` the specified row.\n   *\n   * @param {PdfTreeGridRow} row .\n   * @returns {void} .\n   * @private\n   */\n  PdfTreeGridHeaderCollection.prototype.add = function (row) {\n    this.rows.push(row);\n  };\n  PdfTreeGridHeaderCollection.prototype.indexOf = function (row) {\n    return this.rows.indexOf(row);\n  };\n  return PdfTreeGridHeaderCollection;\n}();\nexport { PdfTreeGridHeaderCollection };\nvar PdfTreeGridColumn = /** @class */function () {\n  function PdfTreeGridColumn(treegrid) {\n    this.columnWidth = 0;\n    this.treeColumnIndex = false;\n    this._headerText = '';\n    this._field = '';\n    this.treegrid = treegrid;\n  }\n  Object.defineProperty(PdfTreeGridColumn.prototype, \"headerText\", {\n    get: function () {\n      return this._headerText;\n    },\n    set: function (value) {\n      this._headerText = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTreeGridColumn.prototype, \"field\", {\n    get: function () {\n      return this._field;\n    },\n    set: function (value) {\n      this._field = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTreeGridColumn.prototype, \"width\", {\n    get: function () {\n      return this.columnWidth;\n    },\n    set: function (value) {\n      this.columnWidth = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTreeGridColumn.prototype, \"isTreeColumn\", {\n    get: function () {\n      return this.treeColumnIndex;\n    },\n    set: function (value) {\n      this.treeColumnIndex = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTreeGridColumn.prototype, \"format\", {\n    /**\n     * Gets or sets the information about the text `formatting`.\n     *\n     * @returns {PdfStringFormat} .\n     * @private\n     */\n    get: function () {\n      if (isNullOrUndefined(this.stringFormat)) {\n        this.stringFormat = new PdfStringFormat(); //GetDefaultFormat();\n      }\n      return this.stringFormat;\n    },\n    set: function (value) {\n      this.stringFormat = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfTreeGridColumn;\n}();\nexport { PdfTreeGridColumn };\n/**\n * `PdfTreeGridColumnCollection` class provides access to an ordered,\n * strongly typed collection of 'PdfTreeGridColumn' objects.\n *\n * @private\n */\nvar PdfTreeGridColumnCollection = /** @class */function () {\n  //properties\n  //Constructors\n  /**\n   * Initializes a new instance of the `PdfTreeGridColumnCollection` class with the parent grid.\n   *\n   * @param { PdfTreeGrid} treegrid .\n   * @private\n   */\n  function PdfTreeGridColumnCollection(treegrid) {\n    /**\n     * @private\n     */\n    this.internalColumns = [];\n    /**\n     * @private\n     */\n    this.columnWidth = 0;\n    this.treegrid = treegrid;\n    this.internalColumns = [];\n  }\n  //Implementation\n  /**\n   * `Add` a new column to the 'PdfGrid'.\n   *\n   * @param {number} count .\n   * @returns {void} .\n   * @private\n   */\n  PdfTreeGridColumnCollection.prototype.add = function (count) {\n    // public add(column : PdfGridColumn) : void\n    // public add(arg : number|PdfGridColumn) : void {\n    // if (typeof arg === 'number') {\n    for (var i = 0; i < count; i++) {\n      this.internalColumns.push(new PdfTreeGridColumn(this.treegrid));\n      for (var index = 0; index < this.treegrid.rows.count; index++) {\n        var row = this.treegrid.rows.getRow(index);\n        var cell = new PdfTreeGridCell();\n        cell.value = '';\n        row.cells.add(cell);\n      }\n    }\n    // } else {\n    //     let column : PdfGridColumn = new PdfGridColumn(this.grid);\n    //     this.columns.push(column);\n    //     return column;\n    // }\n  };\n  Object.defineProperty(PdfTreeGridColumnCollection.prototype, \"count\", {\n    /**\n     * Gets the `number of columns` in the 'PdfGrid'.[Read-Only].\n     *\n     * @returns {number} .\n     * @private\n     */\n    get: function () {\n      return this.internalColumns.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTreeGridColumnCollection.prototype, \"width\", {\n    /**\n     * Gets the `widths`.\n     *\n     * @returns {number} .\n     * @private\n     */\n    get: function () {\n      if (this.columnWidth === 0) {\n        this.columnWidth = this.measureColumnsWidth();\n      }\n      return this.columnWidth;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTreeGridColumnCollection.prototype, \"columns\", {\n    /**\n     * Gets the `array of PdfGridColumn`.[Read-Only]\n     *\n     * @returns {PdfTreeGridColumn[]} .\n     * @private\n     */\n    get: function () {\n      return this.internalColumns;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Gets the `PdfTreeGridColumn` from the specified index.[Read-Only]\n   *\n   * @param {number} index .\n   * @returns {PdfTreeGridColumn} .\n   * @private\n   */\n  PdfTreeGridColumnCollection.prototype.getColumn = function (index) {\n    if (index >= 0 && index <= this.columns.length) {\n      return this.columns[index];\n    } else {\n      throw Error('can not get the column from the index: ' + index);\n    }\n  };\n  //Implementation\n  /**\n   * `Calculates the column widths`.\n   *\n   * @returns {number} .\n   * @private\n   */\n  PdfTreeGridColumnCollection.prototype.measureColumnsWidth = function () {\n    var totalWidth = 0;\n    this.treegrid.measureColumnsWidth();\n    for (var i = 0, count = this.internalColumns.length; i < count; i++) {\n      totalWidth += this.internalColumns[i].width;\n    }\n    return totalWidth;\n  };\n  /**\n   * Gets the `widths of the columns`.\n   *\n   * @param {number} totalWidth .\n   * @returns {number} .\n   * @private\n   */\n  PdfTreeGridColumnCollection.prototype.getDefaultWidths = function (totalWidth) {\n    var widths = [];\n    var subFactor = this.count;\n    for (var i = 0; i < this.count; i++) {\n      widths[i] = this.internalColumns[i].width;\n      if (this.internalColumns[i].width > 0) {\n        totalWidth -= this.internalColumns[i].width;\n        subFactor--;\n      } else {\n        widths[i] = 0;\n      }\n    }\n    for (var i = 0; i < this.count; i++) {\n      var width = totalWidth / subFactor;\n      if (widths[i] <= 0) {\n        widths[i] = width;\n      }\n    }\n    return widths;\n  };\n  return PdfTreeGridColumnCollection;\n}();\nexport { PdfTreeGridColumnCollection };","map":{"version":3,"names":["PdfTreeGrid","isNullOrUndefined","RectangleF","PdfTextAlignment","PdfBorderOverlapStyle","PointF","PdfDashStyle","PdfLineCap","PdfSolidBrush","PdfStandardFont","SizeF","PdfFontStyle","PdfBitmap","PdfImage","PdfTextWebLink","PdfStringFormat","PdfStringLayouter","PdfTreeGridCell","row","cellWidth","cellHeight","finishedDrawingCell","rowSpan","columnSpan","style","Object","defineProperty","prototype","get","measureHeight","set","value","enumerable","configurable","measureWidth","Math","round","width","layouter","font","treegrid","ganttStyle","fontFamily","fontSize","fontStyle","isParentRow","Bold","slr","layout","format","Number","MAX_VALUE","actualSize","borders","left","right","cellPadding","hasLeftPad","hasRightPad","cellSpacing","rowHeight","height","calculateWidth","remainingString","currentValue","max","lineHeight","length","size","top","bottom","cellIndex","cells","indexOf","i","columns","getColumn","isTreeColumn","level","draw","graphics","bounds","cancelSubsequentSpans","leftAdjustment","result","padding","drawCellBackground","textPen","textBrush","fontColor","innerLayoutArea","isHeaderCell","x","clientSize","allowRowBreakAcrossPages","y","adjustContentLayoutArea","image","imageBounds","drawImage","temp","customisedFont","fontStyles","newFont","customisedBrush","fontBrush","drawString","stringLayoutResult","currentPage","drawCellBorder","backgroundBrush","backgroundColor","save","drawRectangle","restore","returnBounds","alignment","Center","Left","Right","borderOverlapStyle","Inside","isAll","p1","p2","pen","lineCap","dashStyle","Solid","Square","drawLine","PdfTreeGridCellCollection","treegridRow","getCell","index","count","Error","add","cell","tempcell","push","PdfTreeGridRow","treegridRowOverflowIndex","rowWidth","_isParentRow","intendLevel","pdfTreeGrid","treegridCells","treegridRowBreakHeight","rows","rowCollection","totalWidth","column","min","PdfTreeGridRowCollection","addRow","row_1","getRow","PdfTreeGridHeaderCollection","getHeader","PdfTreeGridColumn","columnWidth","treeColumnIndex","_headerText","_field","stringFormat","PdfTreeGridColumnCollection","internalColumns","measureColumnsWidth","getDefaultWidths","widths","subFactor"],"sources":["/var/www/vue/vue-gantt-chart/node_modules/@syncfusion/ej2-gantt/src/gantt/export/pdf-base/pdf-grid-table.js"],"sourcesContent":["import { PdfTreeGrid } from '../pdf-treegrid';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { RectangleF, PdfTextAlignment, PdfBorderOverlapStyle, PointF, PdfDashStyle, PdfLineCap, PdfSolidBrush, PdfStandardFont } from '@syncfusion/ej2-pdf-export';\nimport { SizeF, PdfFontStyle, PdfBitmap, PdfImage, PdfTextWebLink } from '@syncfusion/ej2-pdf-export';\nimport { PdfStringFormat, PdfStringLayouter } from '@syncfusion/ej2-pdf-export';\n/**@hidden*/\nvar PdfTreeGridCell = /** @class */ (function () {\n    function PdfTreeGridCell(row) {\n        this.cellWidth = 0;\n        this.cellHeight = 0;\n        /** @private */\n        this.finishedDrawingCell = true;\n        if (isNullOrUndefined(row)) {\n            this.rowSpan = 1;\n            this.columnSpan = 1;\n        }\n        else {\n            this.row = row;\n        }\n        this.style = {};\n    }\n    Object.defineProperty(PdfTreeGridCell.prototype, \"height\", {\n        /**\n         * Gets the `height` of the PdfTreeGrid cell.[Read-Only].\n         *\n         * @returns {number} .\n         * @private\n         */\n        get: function () {\n            if (this.cellHeight === 0) {\n                this.cellHeight = this.measureHeight();\n            }\n            return this.cellHeight;\n        },\n        set: function (value) {\n            this.cellHeight = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridCell.prototype, \"width\", {\n        /**\n         * Gets the `width` of the PdfTreeGrid cell.[Read-Only].\n         *\n         * @returns {number} .\n         * @private\n         */\n        get: function () {\n            if (this.cellWidth === 0) {\n                this.cellWidth = this.measureWidth();\n            }\n            return Math.round(this.cellWidth);\n        },\n        set: function (value) {\n            this.cellWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfTreeGridCell.prototype.measureWidth = function () {\n        var width = 0;\n        var layouter = new PdfStringLayouter();\n        if (typeof this.value === 'string') {\n            /* eslint-disable-next-line */\n            var font = new PdfStandardFont(this.row.treegrid.ganttStyle.fontFamily, this.style.fontSize, this.style.fontStyle);\n            if (this.row.isParentRow) {\n                font = new PdfStandardFont(this.row.treegrid.ganttStyle.fontFamily, this.style.fontSize, PdfFontStyle.Bold);\n            }\n            else {\n                font = new PdfStandardFont(this.row.treegrid.ganttStyle.fontFamily, this.style.fontSize, this.style.fontStyle);\n            }\n            if (this.row.treegrid.ganttStyle.font) {\n                font = this.row.treegrid.ganttStyle.font;\n            }\n            /* eslint-disable-next-line */\n            var slr = layouter.layout(this.value, font, this.style.format, new SizeF(Number.MAX_VALUE, Number.MAX_VALUE), false, new SizeF(0, 0));\n            width += slr.actualSize.width;\n            width += (this.style.borders.left.width + this.style.borders.right.width) * 2;\n        }\n        if (typeof this.row.treegrid.style.cellPadding.left !== 'undefined' && this.row.treegrid.style.cellPadding.hasLeftPad) {\n            width += this.row.treegrid.style.cellPadding.left;\n        }\n        if (typeof this.row.treegrid.style.cellPadding.right !== 'undefined' && this.row.treegrid.style.cellPadding.hasRightPad) {\n            width += this.row.treegrid.style.cellPadding.right;\n        }\n        width += this.row.treegrid.style.cellSpacing;\n        return width;\n    };\n    /**\n     * @returns {number} .\n     * @private\n     */\n    /* eslint-disable */\n    PdfTreeGridCell.prototype.measureHeight = function () {\n        var rowHeight = this.row.treegrid.rowHeight;\n        var height = 0;\n        var width = this.calculateWidth();\n        width -= this.row.treegrid.style.cellPadding.right + this.row.treegrid.style.cellPadding.left;\n        width -= this.style.borders ? this.style.borders.left.width + this.style.borders.right.width : 0;\n        var layouter = new PdfStringLayouter();\n        if (typeof this.value === 'string' || typeof this.remainingString === 'string') {\n            var currentValue = this.value;\n            if (!this.finishedDrawingCell) {\n                currentValue = !(isNullOrUndefined(this.remainingString) || this.remainingString === '') ? this.remainingString : this.value;\n            }\n            var font = null;\n            if (this.row.isParentRow) {\n                font = new PdfStandardFont(this.row.treegrid.ganttStyle.fontFamily, this.style.fontSize, PdfFontStyle.Bold);\n            }\n            else {\n                font = new PdfStandardFont(this.row.treegrid.ganttStyle.fontFamily, this.style.fontSize, this.style.fontStyle);\n            }\n            if (this.row.treegrid.ganttStyle.font) {\n                font = this.row.treegrid.ganttStyle.font;\n            }\n            /* eslint-disable */\n            var slr = layouter.layout(currentValue, font, this.style.format, new SizeF(width - 10, 0), false, new SizeF(0, 0));\n            var value = Math.max(slr.lineHeight, slr.actualSize.height);\n            if (currentValue.length > 80) {\n                height += value + 20;\n            }\n            else {\n                height += value + (slr.size.height / 2);\n            }\n            height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n        }\n        height += this.row.treegrid.style.cellPadding.top + this.row.treegrid.style.cellPadding.bottom;\n        height += this.row.treegrid.style.cellSpacing;\n        return height > rowHeight ? height : rowHeight;\n    };\n    /* eslint-enable */\n    PdfTreeGridCell.prototype.calculateWidth = function () {\n        var cellIndex = this.row.cells.indexOf(this);\n        var columnSpan = this.columnSpan;\n        var width = 0;\n        for (var i = 0; i < columnSpan; i++) {\n            width += this.row.treegrid.columns.getColumn(cellIndex + i) ? this.row.treegrid.columns.getColumn(cellIndex + i).width : 0;\n        }\n        if (this.row.treegrid.columns.getColumn(cellIndex) && this.row.treegrid.columns.getColumn(cellIndex).isTreeColumn) {\n            width -= (this.row.level * 10);\n        }\n        return width;\n    };\n    /**\n     * `Draws` the specified graphics.\n     *\n     * @param {PdfGraphics} graphics .\n     * @param {RectangleF} bounds .\n     * @param {boolean} cancelSubsequentSpans .\n     * @param {number} leftAdjustment .\n     * @returns {PdfStringLayoutResult} .\n     * @private\n     */\n    PdfTreeGridCell.prototype.draw = function (graphics, bounds, cancelSubsequentSpans, leftAdjustment) {\n        var result = null;\n        var padding = 10;\n        // if (cancelSubsequentSpans) {\n        //     // Cancel all subsequent cell spans, if no space exists.\n        //     const currentCellIndex: number = this.row.cells.indexOf(this);\n        //     for (let i: number = currentCellIndex + 1; i <= currentCellIndex + this.columnSpan; i++) {\n        //         this.row.cells.getCell(i).isCellMergeContinue = false;\n        //         this.row.cells.getCell(i).isRowMergeContinue = false;\n        //     }\n        //     this.columnSpan = 1;\n        // }\n        // Skip cells which were already covered by span map.\n        // if (this.isCellMergeContinue || this.isRowMergeContinue) {\n        //     if (this.isCellMergeContinue && this.row.treegrid.style.allowHorizontalOverflow) {\n        //         if ((this.row.rowOverflowIndex > 0 && (this.row.cells.indexOf(this) !== this.row.rowOverflowIndex + 1)) ||\n        //             (this.row.rowOverflowIndex === 0 && this.isCellMergeContinue)) {\n        //             return result;\n        //         } else {\n        //             return result;\n        //         }\n        //     }\n        // }\n        //bounds = this.adjustContentLayoutArea(bounds);\n        this.drawCellBackground(graphics, bounds);\n        var textPen = null;\n        var textBrush = new PdfSolidBrush(this.style.fontColor);\n        var font = null;\n        if (this.row.isParentRow) {\n            font = new PdfStandardFont(this.row.treegrid.ganttStyle.fontFamily, this.style.fontSize, PdfFontStyle.Bold);\n        }\n        else {\n            font = new PdfStandardFont(this.row.treegrid.ganttStyle.fontFamily, this.style.fontSize, this.style.fontStyle);\n        }\n        if (this.row.treegrid.ganttStyle.font) {\n            font = this.row.treegrid.ganttStyle.font;\n        }\n        var innerLayoutArea = bounds;\n        if (!this.isHeaderCell) {\n            /* eslint-disable-next-line */\n            innerLayoutArea.x = innerLayoutArea.x;\n            /* eslint-disable-next-line */\n            innerLayoutArea.width = innerLayoutArea.width;\n        }\n        if (innerLayoutArea.height >= graphics.clientSize.height) {\n            // To break row to next page\n            if (this.row.treegrid.allowRowBreakAcrossPages) {\n                innerLayoutArea.height -= innerLayoutArea.y;\n                bounds.height -= bounds.y;\n            }\n            else {\n                innerLayoutArea.height = graphics.clientSize.height;\n                bounds.height = graphics.clientSize.height;\n            }\n        }\n        innerLayoutArea = this.adjustContentLayoutArea(innerLayoutArea);\n        if (this.image && this.value) {\n            var imageBounds = void 0;\n            if (this.image.width <= innerLayoutArea.width) {\n                imageBounds = new RectangleF(innerLayoutArea.x, innerLayoutArea.y, this.image.width, this.image.height);\n            }\n            else {\n                imageBounds = innerLayoutArea;\n            }\n            graphics.drawImage(this.image, imageBounds.x, imageBounds.y - 5, imageBounds.width, imageBounds.height);\n            var temp = null;\n            // font = new PdfStandardFont(this.row.treegrid.ganttStyle.fontFamily, this.style.fontSize, this.style.fontStyle);\n            var customisedFont = void 0;\n            var fontStyles = this.fontStyle;\n            if (!fontStyles) {\n                fontStyles = this.style;\n            }\n            var newFont = new PdfStandardFont(fontStyles.fontFamily, fontStyles.fontSize, fontStyles.fontStyle);\n            if (fontStyles.fontFamily) {\n                customisedFont = newFont;\n            }\n            else {\n                customisedFont = font;\n            }\n            var customisedBrush = void 0;\n            if (fontStyles.fontBrush) {\n                customisedBrush = new PdfSolidBrush(this.fontStyle.fontBrush);\n            }\n            else {\n                customisedBrush = textBrush;\n            }\n            if (this.finishedDrawingCell) {\n                temp = (this.remainingString === '') ? this.remainingString : this.value;\n                /* eslint-disable-next-line */\n                graphics.drawString(temp, customisedFont, textPen, customisedBrush, (innerLayoutArea.x + leftAdjustment), this.isHeaderCell ? innerLayoutArea.y - 16 : innerLayoutArea.y, (innerLayoutArea.width - leftAdjustment - padding), (innerLayoutArea.height - padding), this.style.format);\n            }\n            else {\n                /* eslint-disable-next-line */\n                graphics.drawString(this.remainingString, customisedFont, textPen, customisedBrush, (innerLayoutArea.x + leftAdjustment), this.isHeaderCell ? innerLayoutArea.y - 16 : innerLayoutArea.y, this.style.format);\n            }\n            result = graphics.stringLayoutResult;\n        }\n        else if (typeof this.value === 'string' || typeof this.remainingString === 'string') {\n            var temp = null;\n            var customisedFont = void 0;\n            var newFont = new PdfStandardFont(this.style.fontFamily, this.style.fontSize, this.style.fontStyle);\n            if (this.style.fontFamily) {\n                customisedFont = newFont;\n            }\n            else {\n                customisedFont = font;\n            }\n            var customisedBrush = void 0;\n            if (this.style.fontBrush) {\n                customisedBrush = new PdfSolidBrush(this.style.fontBrush);\n            }\n            else {\n                customisedBrush = textBrush;\n            }\n            if (this.finishedDrawingCell) {\n                temp = (this.remainingString === '') ? this.remainingString : this.value;\n                /* eslint-disable-next-line */\n                graphics.drawString(temp, customisedFont, textPen, customisedBrush, (innerLayoutArea.x + leftAdjustment), this.isHeaderCell ? innerLayoutArea.y - 16 : innerLayoutArea.y - 3, (innerLayoutArea.width - leftAdjustment - padding), (innerLayoutArea.height - padding), this.style.format);\n            }\n            else {\n                /* eslint-disable-next-line */\n                graphics.drawString(this.remainingString, customisedFont, textPen, customisedBrush, (innerLayoutArea.x + leftAdjustment), this.isHeaderCell ? innerLayoutArea.y - 16 : innerLayoutArea.y, this.style.format);\n            }\n            result = graphics.stringLayoutResult;\n        }\n        else if (this.value instanceof PdfImage || this.value instanceof PdfBitmap) {\n            var imageBounds = void 0;\n            if (this.value.width <= innerLayoutArea.width) {\n                imageBounds = new RectangleF(innerLayoutArea.x, innerLayoutArea.y, this.value.width, innerLayoutArea.height);\n            }\n            else {\n                imageBounds = innerLayoutArea;\n            }\n            graphics.drawImage(this.value, imageBounds.x, imageBounds.y - 10, imageBounds.width, imageBounds.height);\n        }\n        else if (this.value instanceof PdfTextWebLink) {\n            this.value.draw(graphics.currentPage, innerLayoutArea);\n        }\n        if (this.style.borders !== null) {\n            this.drawCellBorder(graphics, bounds);\n        }\n        return result;\n    };\n    /**\n     * Draw the `cell background`.\n     *\n     * @param {PdfGraphics} graphics .\n     * @param {RectangleF} bounds .\n     * @returns {void} .\n     * @private\n     */\n    PdfTreeGridCell.prototype.drawCellBackground = function (graphics, bounds) {\n        var backgroundBrush = new PdfSolidBrush(this.style.backgroundColor);\n        if (backgroundBrush !== null) {\n            graphics.save();\n            graphics.drawRectangle(backgroundBrush, bounds.x, bounds.y, bounds.width, bounds.height);\n            graphics.restore();\n        }\n        // if (this.style.backgroundImage !== null) {\n        //     let image: PdfImage = this.getBackgroundImage();\n        //     graphics.drawImage(this.style.backgroundImage, bounds.x, bounds.y, bounds.width, bounds.height);\n        // }\n    };\n    /**\n     * `Adjusts the text layout area`.\n     *\n     * @param {RectangleF} bounds .\n     * @returns {RectangleF} .\n     * @private\n     */\n    PdfTreeGridCell.prototype.adjustContentLayoutArea = function (bounds) {\n        //Add Padding value to its Cell Bounds\n        var returnBounds = new RectangleF(new PointF(bounds.x, bounds.y), new SizeF(bounds.width, bounds.height));\n        var cellPadding = this.style.padding;\n        if (this.value instanceof PdfTreeGrid) {\n            var size = this.value.size;\n            if (this.style.format.alignment === PdfTextAlignment.Center) {\n                returnBounds.x += cellPadding.left + (returnBounds.width - size.width) / 2;\n                returnBounds.y += cellPadding.top + (returnBounds.height - size.height) / 2;\n            }\n            else if (this.style.format.alignment === PdfTextAlignment.Left) {\n                returnBounds.x += cellPadding.left;\n                returnBounds.y += cellPadding.top;\n            }\n            else if (this.style.format.alignment === PdfTextAlignment.Right) {\n                returnBounds.x += cellPadding.left + (returnBounds.width - size.width);\n                returnBounds.y += cellPadding.top;\n            }\n        }\n        else {\n            returnBounds.x += cellPadding.left;\n            returnBounds.y += cellPadding.top;\n        }\n        return returnBounds;\n    };\n    /**\n     * @param {PdfGraphics} graphics .\n     * @param {RectangleF} bounds .\n     * @returns {void} .\n     * @private\n     */\n    PdfTreeGridCell.prototype.drawCellBorder = function (graphics, bounds) {\n        if (this.row.treegrid.style.borderOverlapStyle === PdfBorderOverlapStyle.Inside) {\n            bounds.x += this.style.borders.left.width;\n            bounds.y += this.style.borders.top.width;\n            bounds.width -= this.style.borders.right.width;\n            bounds.height -= this.style.borders.bottom.width;\n        }\n        if (this.style.borders.isAll && this.isHeaderCell) {\n            graphics.drawRectangle(this.style.borders.left, bounds.x, bounds.y, bounds.width, bounds.height);\n            graphics.restore();\n            return;\n        }\n        else {\n            var p1 = new PointF(bounds.x, bounds.y + bounds.height);\n            var p2 = new PointF(bounds.x, bounds.y);\n            var pen = this.style.borders.left;\n            pen.lineCap = (this.style.borders.left.dashStyle === PdfDashStyle.Solid) ? PdfLineCap.Square : pen.lineCap;\n            graphics.drawLine(pen, p1, p2);\n            graphics.restore();\n            p1 = new PointF(bounds.x + bounds.width, bounds.y);\n            p2 = new PointF(bounds.x + bounds.width, bounds.y + bounds.height);\n            pen = this.style.borders.right;\n            if ((bounds.x + bounds.width) > (graphics.clientSize.width - (pen.width / 2))) {\n                p1 = new PointF(graphics.clientSize.width - (pen.width / 2), bounds.y);\n                p2 = new PointF(graphics.clientSize.width - (pen.width / 2), bounds.y + bounds.height);\n            }\n            pen.lineCap = (this.style.borders.right.dashStyle === PdfDashStyle.Solid) ? PdfLineCap.Square : pen.lineCap;\n            graphics.drawLine(pen, p1, p2);\n            graphics.restore();\n            p1 = new PointF(bounds.x, bounds.y);\n            p2 = new PointF(bounds.x + bounds.width, bounds.y);\n            pen = this.style.borders.top;\n            pen.lineCap = (this.style.borders.top.dashStyle === PdfDashStyle.Solid) ? PdfLineCap.Square : pen.lineCap;\n            graphics.drawLine(pen, p1, p2);\n            graphics.restore();\n            p1 = new PointF(bounds.x + bounds.width, bounds.y + bounds.height);\n            p2 = new PointF(bounds.x, bounds.y + bounds.height);\n            pen = this.style.borders.bottom;\n            if (bounds.y + bounds.height > graphics.clientSize.height - pen.width / 2) {\n                p1 = new PointF(bounds.x + bounds.width, graphics.clientSize.height - pen.width / 2);\n                p2 = new PointF(bounds.x, graphics.clientSize.height - pen.width / 2);\n            }\n            pen.lineCap = (this.style.borders.bottom.dashStyle === PdfDashStyle.Solid) ? PdfLineCap.Square : pen.lineCap;\n            graphics.drawLine(pen, p1, p2);\n            graphics.restore();\n        }\n    };\n    return PdfTreeGridCell;\n}());\nexport { PdfTreeGridCell };\n/**\n * `PdfTreeGridCellCollection` class provides access to an ordered,\n * strongly typed collection of 'PdfTreeGridCell' objects.\n *\n * @private\n */\nvar PdfTreeGridCellCollection = /** @class */ (function () {\n    //Constructor\n    /**\n     * Initializes a new instance of the `PdfGridCellCollection` class with the row.\n     *\n     * @param { PdfTreeGridRow} row .\n     * @private\n     */\n    function PdfTreeGridCellCollection(row) {\n        this.treegridRow = row;\n        this.cells = [];\n    }\n    //Properties\n    /**\n     * Gets the current `cell`.\n     *\n     * @param {number} index .\n     * @returns {PdfTreeGridCell} .\n     * @private\n     */\n    PdfTreeGridCellCollection.prototype.getCell = function (index) {\n        if (index < 0 || index >= this.count) {\n            throw new Error('IndexOutOfRangeException');\n        }\n        return this.cells[index];\n    };\n    Object.defineProperty(PdfTreeGridCellCollection.prototype, \"count\", {\n        /**\n         * Gets the cells `count`.[Read-Only].\n         *\n         * @returns {number} .\n         * @private\n         */\n        get: function () {\n            return this.cells.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Implementation\n    /**\n     * `Adds` this instance.\n     *\n     * @param {PdfTreeGridCell} cell .\n     * @returns {PdfTreeGridCell | void} .\n     * @private\n     */\n    PdfTreeGridCellCollection.prototype.add = function (cell) {\n        if (typeof cell === 'undefined') {\n            var tempcell = new PdfTreeGridCell();\n            this.add(tempcell);\n            return cell;\n        }\n        else {\n            cell.row = this.treegridRow;\n            this.cells.push(cell);\n        }\n    };\n    /**\n     * Returns the `index of` a particular cell in the collection.\n     *\n     * @param {PdfTreeGridCell} cell .\n     * @returns {number} .\n     * @private\n     */\n    PdfTreeGridCellCollection.prototype.indexOf = function (cell) {\n        return this.cells.indexOf(cell);\n    };\n    return PdfTreeGridCellCollection;\n}());\nexport { PdfTreeGridCellCollection };\n/**\n *\n */\nvar PdfTreeGridRow = /** @class */ (function () {\n    function PdfTreeGridRow(treegrid) {\n        this.treegridRowOverflowIndex = 0;\n        this.rowHeight = 0;\n        this.rowWidth = 0;\n        /* eslint-disable-next-line */\n        this._isParentRow = false;\n        this.intendLevel = 0;\n        this.pdfTreeGrid = treegrid;\n    }\n    Object.defineProperty(PdfTreeGridRow.prototype, \"cells\", {\n        get: function () {\n            if (isNullOrUndefined(this.treegridCells)) {\n                this.treegridCells = new PdfTreeGridCellCollection(this);\n            }\n            return this.treegridCells;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridRow.prototype, \"isParentRow\", {\n        get: function () {\n            return this._isParentRow;\n        },\n        set: function (value) {\n            this._isParentRow = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridRow.prototype, \"treegrid\", {\n        get: function () {\n            return this.pdfTreeGrid;\n        },\n        set: function (value) {\n            this.pdfTreeGrid = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridRow.prototype, \"rowBreakHeight\", {\n        /**\n         * `Height` of the row yet to be drawn after split.\n         *\n         * @returns {number} .\n         * @private\n         */\n        get: function () {\n            if (typeof this.treegridRowBreakHeight === 'undefined') {\n                this.treegridRowBreakHeight = 0;\n            }\n            return this.treegridRowBreakHeight;\n        },\n        set: function (value) {\n            this.treegridRowBreakHeight = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridRow.prototype, \"rowOverflowIndex\", {\n        /**\n         * `over flow index` of the row.\n         *\n         * @returns {number} .\n         * @private\n         */\n        get: function () {\n            return this.treegridRowOverflowIndex;\n        },\n        set: function (value) {\n            this.treegridRowOverflowIndex = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridRow.prototype, \"level\", {\n        get: function () {\n            return this.intendLevel;\n        },\n        set: function (value) {\n            this.intendLevel = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridRow.prototype, \"height\", {\n        /**\n         * Gets or sets the `height` of the row.\n         *\n         * @returns {number} .\n         * @private\n         */\n        get: function () {\n            if (this.rowHeight === 0) {\n                this.rowHeight = this.measureHeight();\n            }\n            return this.rowHeight;\n        },\n        set: function (value) {\n            this.rowHeight = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridRow.prototype, \"width\", {\n        /**\n         * Gets or sets the `width` of the row.\n         *\n         * @returns {number} .\n         * @private\n         */\n        get: function () {\n            if (this.rowWidth === 0) {\n                this.rowWidth = this.measureWidth();\n            }\n            return this.rowWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridRow.prototype, \"rowIndex\", {\n        get: function () {\n            return this.treegrid.rows.rowCollection.indexOf(this);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfTreeGridRow.prototype.measureWidth = function () {\n        var columns = this.treegrid.columns.columns;\n        var totalWidth = 0;\n        for (var i = 0; i < columns.length; i++) {\n            var column = columns[i];\n            totalWidth += column.width;\n        }\n        return totalWidth;\n    };\n    PdfTreeGridRow.prototype.measureHeight = function () {\n        var rowHeight = this.cells.getCell(0).height;\n        for (var i = 0; i < this.cells.count; i++) {\n            var cell = this.cells.getCell(i);\n            if (cell.columnSpan === 1 || cell.rowSpan === 1) {\n                rowHeight = Math.max(rowHeight, cell.height);\n            }\n            else {\n                rowHeight = Math.min(rowHeight, cell.height);\n            }\n            cell.height = rowHeight;\n        }\n        return rowHeight;\n    };\n    return PdfTreeGridRow;\n}());\nexport { PdfTreeGridRow };\n/**\n * `PdfTreeGridRowCollection` class provides access to an ordered, strongly typed collection of 'PdfTreeGridRow' objects.\n *\n * @private\n */\nvar PdfTreeGridRowCollection = /** @class */ (function () {\n    // Constructor\n    /**\n     * Initializes a new instance of the `PdfTreeGridRowCollection` class with the parent grid.\n     *\n     * @param {PdfTreeGrid} treegrid .\n     * @private\n     */\n    function PdfTreeGridRowCollection(treegrid) {\n        this.rows = [];\n        this.treegrid = treegrid;\n    }\n    Object.defineProperty(PdfTreeGridRowCollection.prototype, \"count\", {\n        //Properties\n        /**\n         * Gets the number of header in the `PdfTreeGrid`.[Read-Only].\n         *\n         * @returns {number} .\n         * @private\n         */\n        get: function () {\n            return this.rows.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridRowCollection.prototype, \"rowCollection\", {\n        //Implementation\n        /**\n         * Return the row collection of the `treegrid`.\n         *\n         * @returns {PdfTreeGridRow[]} .\n         * @private\n         */\n        get: function () {\n            return this.rows;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfTreeGridRowCollection.prototype.addRow = function (row) {\n        if (typeof row === 'undefined') {\n            var row_1 = new PdfTreeGridRow(this.treegrid);\n            this.addRow(row_1);\n            return row_1;\n        }\n        else {\n            if (row.cells.count === 0) {\n                for (var i = 0; i < this.treegrid.columns.count; i++) {\n                    row.cells.add(new PdfTreeGridCell());\n                }\n            }\n            this.rows.push(row);\n        }\n    };\n    /**\n     * Return the row by index.\n     *\n     * @param {number} index .\n     * @returns {PdfTreeGridRow} .\n     * @private\n     */\n    PdfTreeGridRowCollection.prototype.getRow = function (index) {\n        return this.rows[index];\n    };\n    return PdfTreeGridRowCollection;\n}());\nexport { PdfTreeGridRowCollection };\n/**\n * `PdfTreeGridHeaderCollection` class provides customization of the settings for the header.\n *\n * @private\n */\nvar PdfTreeGridHeaderCollection = /** @class */ (function () {\n    //constructor\n    /**\n     * Initializes a new instance of the `PdfTreeGridHeaderCollection` class with the parent grid.\n     *\n     * @param {PdfTreeGrid} treegrid .\n     * @private\n     */\n    function PdfTreeGridHeaderCollection(treegrid) {\n        /**\n         * The array to store the `rows` of the grid header.\n         *\n         * @returns {PdfTreeGridRow[]} .\n         * @private\n         */\n        this.rows = [];\n        this.treegrid = treegrid;\n        this.rows = [];\n    }\n    //Properties\n    /**\n     * Gets a 'PdfTreeGridRow' object that represents the `header` row in a 'PdfGridHeaderCollection' control.[Read-Only].\n     *\n     * @param {number} index .\n     * @returns {PdfTreeGridRow} .\n     * @private\n     */\n    PdfTreeGridHeaderCollection.prototype.getHeader = function (index) {\n        return (this.rows[index]);\n    };\n    Object.defineProperty(PdfTreeGridHeaderCollection.prototype, \"count\", {\n        /**\n         * Gets the `number of header` in the 'PdfGrid'.[Read-Only]\n         *\n         * @returns {number} .\n         * @private\n         */\n        get: function () {\n            return this.rows.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Implementation\n    /**\n     * `Adds` the specified row.\n     *\n     * @param {PdfTreeGridRow} row .\n     * @returns {void} .\n     * @private\n     */\n    PdfTreeGridHeaderCollection.prototype.add = function (row) {\n        this.rows.push(row);\n    };\n    PdfTreeGridHeaderCollection.prototype.indexOf = function (row) {\n        return this.rows.indexOf(row);\n    };\n    return PdfTreeGridHeaderCollection;\n}());\nexport { PdfTreeGridHeaderCollection };\nvar PdfTreeGridColumn = /** @class */ (function () {\n    function PdfTreeGridColumn(treegrid) {\n        this.columnWidth = 0;\n        this.treeColumnIndex = false;\n        this._headerText = '';\n        this._field = '';\n        this.treegrid = treegrid;\n    }\n    Object.defineProperty(PdfTreeGridColumn.prototype, \"headerText\", {\n        get: function () {\n            return this._headerText;\n        },\n        set: function (value) {\n            this._headerText = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridColumn.prototype, \"field\", {\n        get: function () {\n            return this._field;\n        },\n        set: function (value) {\n            this._field = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridColumn.prototype, \"width\", {\n        get: function () {\n            return this.columnWidth;\n        },\n        set: function (value) {\n            this.columnWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridColumn.prototype, \"isTreeColumn\", {\n        get: function () {\n            return this.treeColumnIndex;\n        },\n        set: function (value) {\n            this.treeColumnIndex = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridColumn.prototype, \"format\", {\n        /**\n         * Gets or sets the information about the text `formatting`.\n         *\n         * @returns {PdfStringFormat} .\n         * @private\n         */\n        get: function () {\n            if (isNullOrUndefined(this.stringFormat)) {\n                this.stringFormat = new PdfStringFormat(); //GetDefaultFormat();\n            }\n            return this.stringFormat;\n        },\n        set: function (value) {\n            this.stringFormat = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfTreeGridColumn;\n}());\nexport { PdfTreeGridColumn };\n/**\n * `PdfTreeGridColumnCollection` class provides access to an ordered,\n * strongly typed collection of 'PdfTreeGridColumn' objects.\n *\n * @private\n */\nvar PdfTreeGridColumnCollection = /** @class */ (function () {\n    //properties\n    //Constructors\n    /**\n     * Initializes a new instance of the `PdfTreeGridColumnCollection` class with the parent grid.\n     *\n     * @param { PdfTreeGrid} treegrid .\n     * @private\n     */\n    function PdfTreeGridColumnCollection(treegrid) {\n        /**\n         * @private\n         */\n        this.internalColumns = [];\n        /**\n         * @private\n         */\n        this.columnWidth = 0;\n        this.treegrid = treegrid;\n        this.internalColumns = [];\n    }\n    //Implementation\n    /**\n     * `Add` a new column to the 'PdfGrid'.\n     *\n     * @param {number} count .\n     * @returns {void} .\n     * @private\n     */\n    PdfTreeGridColumnCollection.prototype.add = function (count) {\n        // public add(column : PdfGridColumn) : void\n        // public add(arg : number|PdfGridColumn) : void {\n        // if (typeof arg === 'number') {\n        for (var i = 0; i < count; i++) {\n            this.internalColumns.push(new PdfTreeGridColumn(this.treegrid));\n            for (var index = 0; index < this.treegrid.rows.count; index++) {\n                var row = this.treegrid.rows.getRow(index);\n                var cell = new PdfTreeGridCell();\n                cell.value = '';\n                row.cells.add(cell);\n            }\n        }\n        // } else {\n        //     let column : PdfGridColumn = new PdfGridColumn(this.grid);\n        //     this.columns.push(column);\n        //     return column;\n        // }\n    };\n    Object.defineProperty(PdfTreeGridColumnCollection.prototype, \"count\", {\n        /**\n         * Gets the `number of columns` in the 'PdfGrid'.[Read-Only].\n         *\n         * @returns {number} .\n         * @private\n         */\n        get: function () {\n            return this.internalColumns.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridColumnCollection.prototype, \"width\", {\n        /**\n         * Gets the `widths`.\n         *\n         * @returns {number} .\n         * @private\n         */\n        get: function () {\n            if (this.columnWidth === 0) {\n                this.columnWidth = this.measureColumnsWidth();\n            }\n            return this.columnWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGridColumnCollection.prototype, \"columns\", {\n        /**\n         * Gets the `array of PdfGridColumn`.[Read-Only]\n         *\n         * @returns {PdfTreeGridColumn[]} .\n         * @private\n         */\n        get: function () {\n            return this.internalColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets the `PdfTreeGridColumn` from the specified index.[Read-Only]\n     *\n     * @param {number} index .\n     * @returns {PdfTreeGridColumn} .\n     * @private\n     */\n    PdfTreeGridColumnCollection.prototype.getColumn = function (index) {\n        if (index >= 0 && index <= this.columns.length) {\n            return this.columns[index];\n        }\n        else {\n            throw Error('can not get the column from the index: ' + index);\n        }\n    };\n    //Implementation\n    /**\n     * `Calculates the column widths`.\n     *\n     * @returns {number} .\n     * @private\n     */\n    PdfTreeGridColumnCollection.prototype.measureColumnsWidth = function () {\n        var totalWidth = 0;\n        this.treegrid.measureColumnsWidth();\n        for (var i = 0, count = this.internalColumns.length; i < count; i++) {\n            totalWidth += this.internalColumns[i].width;\n        }\n        return totalWidth;\n    };\n    /**\n     * Gets the `widths of the columns`.\n     *\n     * @param {number} totalWidth .\n     * @returns {number} .\n     * @private\n     */\n    PdfTreeGridColumnCollection.prototype.getDefaultWidths = function (totalWidth) {\n        var widths = [];\n        var subFactor = this.count;\n        for (var i = 0; i < this.count; i++) {\n            widths[i] = this.internalColumns[i].width;\n            if (this.internalColumns[i].width > 0) {\n                totalWidth -= this.internalColumns[i].width;\n                subFactor--;\n            }\n            else {\n                widths[i] = 0;\n            }\n        }\n        for (var i = 0; i < this.count; i++) {\n            var width = totalWidth / subFactor;\n            if (widths[i] <= 0) {\n                widths[i] = width;\n            }\n        }\n        return widths;\n    };\n    return PdfTreeGridColumnCollection;\n}());\nexport { PdfTreeGridColumnCollection };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}