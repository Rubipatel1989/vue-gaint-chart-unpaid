{"ast":null,"code":"export default {\n  name: 'TaskRow',\n  props: {\n    task: Object,\n    dates: Array\n  },\n  computed: {\n    // barStyle() {\n    //        const totalDays = this.dates.length;\n    //        const startIndex = this.dates.findIndex(\n    //               (date) => date.toISOString().split(\"T\")[0] === this.task.start\n    //        );\n    //        const endIndex = this.dates.findIndex(\n    //               (date) => date.toISOString().split(\"T\")[0] === this.task.end\n    //        );\n    //        const width = ((endIndex - startIndex + 1) / totalDays) * 100;\n    //        const left = (startIndex / totalDays) * 100;\n    //        return {\n    //               width: `${width}%`,\n    //               left: `${left}%`,\n    //               backgroundColor: \"lightgreen\",\n    //               height: \"20px\",\n    //               position: \"absolute\",\n    //        };\n    // },\n    barStyle() {\n      const totalDays = this.dates.length;\n      const startIndex = this.dates.findIndex(date => date.toISOString().split(\"T\")[0] === this.task.start);\n      const endIndex = this.dates.findIndex(date => date.toISOString().split(\"T\")[0] === this.task.end);\n      const totalWidth = 40 * totalDays; // Adjust to match the width of the timeline (40px per day)\n      const width = (endIndex - startIndex + 1) * 40; // Width in pixels\n      const left = startIndex * 40; // Left offset in pixels\n      return {\n        width: `${width}px`,\n        left: `${left}px`,\n        backgroundColor: \"lightgreen\",\n        height: \"20px\",\n        position: \"absolute\"\n      };\n    }\n  }\n};","map":{"version":3,"names":["name","props","task","Object","dates","Array","computed","barStyle","totalDays","length","startIndex","findIndex","date","toISOString","split","start","endIndex","end","totalWidth","width","left","backgroundColor","height","position"],"sources":["/var/www/vue/vue-gantt-chart/src/components/TaskRow.vue"],"sourcesContent":["<template>\n       <div class=\"task-row\">\n              <div class=\"task-name\">{{ task.name }}</div>\n              <div class=\"task-bar-container\">\n                     <div class=\"task-bar\" :style=\"barStyle\"></div>\n              </div>\n       </div>\n</template>\n\n<script>\nexport default {\n       name: 'TaskRow',\n       props: {\n              task: Object,\n              dates: Array,\n       },\n       computed: {\n              // barStyle() {\n              //        const totalDays = this.dates.length;\n              //        const startIndex = this.dates.findIndex(\n              //               (date) => date.toISOString().split(\"T\")[0] === this.task.start\n              //        );\n              //        const endIndex = this.dates.findIndex(\n              //               (date) => date.toISOString().split(\"T\")[0] === this.task.end\n              //        );\n              //        const width = ((endIndex - startIndex + 1) / totalDays) * 100;\n              //        const left = (startIndex / totalDays) * 100;\n              //        return {\n              //               width: `${width}%`,\n              //               left: `${left}%`,\n              //               backgroundColor: \"lightgreen\",\n              //               height: \"20px\",\n              //               position: \"absolute\",\n              //        };\n              // },\n              barStyle() {\n  const totalDays = this.dates.length;\n  const startIndex = this.dates.findIndex(\n    (date) => date.toISOString().split(\"T\")[0] === this.task.start\n  );\n  const endIndex = this.dates.findIndex(\n    (date) => date.toISOString().split(\"T\")[0] === this.task.end\n  );\n  const totalWidth = 40 * totalDays; // Adjust to match the width of the timeline (40px per day)\n  const width = (endIndex - startIndex + 1) * 40; // Width in pixels\n  const left = startIndex * 40; // Left offset in pixels\n  return {\n    width: `${width}px`,\n    left: `${left}px`,\n    backgroundColor: \"lightgreen\",\n    height: \"20px\",\n    position: \"absolute\",\n  };\n}\n\n       },\n};\n</script>\n\n<style>\n.task-row {\n       display: flex;\n       align-items: center;\n       border-bottom: 1px solid #ccc;\n       position: relative;\n}\n\n.task-name {\n       width: 100px;\n       text-align: left;\n}\n\n.task-bar-container {\n       position: relative;\n       flex-grow: 1;\n       height: 20px;\n}\n\n.task-bar {\n       position: absolute;\n}\n</style>"],"mappings":"AAUA,eAAe;EACRA,IAAI,EAAE,SAAS;EACfC,KAAK,EAAE;IACAC,IAAI,EAAEC,MAAM;IACZC,KAAK,EAAEC;EACd,CAAC;EACDC,QAAQ,EAAE;IACH;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAC,QAAQA,CAAA,EAAG;MACvB,MAAMC,SAAQ,GAAI,IAAI,CAACJ,KAAK,CAACK,MAAM;MACnC,MAAMC,UAAS,GAAI,IAAI,CAACN,KAAK,CAACO,SAAS,CACpCC,IAAI,IAAKA,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,IAAI,CAACZ,IAAI,CAACa,KAC3D,CAAC;MACD,MAAMC,QAAO,GAAI,IAAI,CAACZ,KAAK,CAACO,SAAS,CAClCC,IAAI,IAAKA,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,IAAI,CAACZ,IAAI,CAACe,GAC3D,CAAC;MACD,MAAMC,UAAS,GAAI,EAAC,GAAIV,SAAS,EAAE;MACnC,MAAMW,KAAI,GAAI,CAACH,QAAO,GAAIN,UAAS,GAAI,CAAC,IAAI,EAAE,EAAE;MAChD,MAAMU,IAAG,GAAIV,UAAS,GAAI,EAAE,EAAE;MAC9B,OAAO;QACLS,KAAK,EAAE,GAAGA,KAAK,IAAI;QACnBC,IAAI,EAAE,GAAGA,IAAI,IAAI;QACjBC,eAAe,EAAE,YAAY;QAC7BC,MAAM,EAAE,MAAM;QACdC,QAAQ,EAAE;MACZ,CAAC;IACH;EAEO;AACP,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}