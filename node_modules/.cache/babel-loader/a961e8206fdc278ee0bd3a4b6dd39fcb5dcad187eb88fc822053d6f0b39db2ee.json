{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport { EventHandler, isNullOrUndefined, detach, formatUnit } from '@syncfusion/ej2-base';\nimport { ListBase } from '@syncfusion/ej2-lists';\nimport { createElement, selectAll } from '@syncfusion/ej2-base';\nimport * as CLS from '../base/classes';\nvar Virtualization = /** @class */function () {\n  function Virtualization(instance) {\n    this.filemanagerInstance = instance;\n    this.largeIconInstance = instance.largeiconsviewModule;\n  }\n  /**\n   * Sets up UI virtualization for the large icon view.\n   *\n   * @returns {void}\n   */\n  Virtualization.prototype.setUIVirtualization = function () {\n    // Get the current view data source\n    var currentViewItems = this.largeIconInstance.items;\n    // Get the first item in the data source\n    var firstItem = currentViewItems.slice(0, 1);\n    // Create a list element from the first item in the data source\n    var listElements = ListBase.createListFromJson(createElement, firstItem, this.largeIconInstance.listObj);\n    // Get the list items from the list element\n    this.itemList = Array.prototype.slice.call(selectAll('.' + CLS.LIST_ITEM, listElements));\n    // Append the list element to the large icon element\n    this.largeIconInstance.element.appendChild(listElements);\n    if (this.itemList.length !== 0 && this.largeIconInstance.element.querySelector('.' + CLS.EMPTY)) {\n      this.largeIconInstance.element.removeChild(this.largeIconInstance.element.querySelector('.' + CLS.EMPTY));\n    }\n    // Get the total number of items\n    this.itemCount = this.getItemCount(Object.keys(this.largeIconInstance.allItems).length);\n    // Remove the first child element from the large icon element\n    this.largeIconInstance.element.firstChild.remove();\n    // Set the items for the large icon view to the current view data source, limited to the number of items to display\n    this.largeIconInstance.items = currentViewItems.slice(0, this.itemCount);\n  };\n  /**\n   * Sets the height of the top and bottom elements that are used for virtualization.\n   * These elements are used to give the appearance of an infinitely scrolling list.\n   *\n   * @returns {void}\n   */\n  Virtualization.prototype.setUlElementHeight = function () {\n    // Calculate the number of items in the last row\n    this.lastRowCount = (this.largeIconInstance.allItems.length - this.itemCount) % this.rowItemCount ? (this.largeIconInstance.allItems.length - this.itemCount) % this.rowItemCount : this.rowItemCount;\n    // Create top and bottom elements\n    this.topElement = this.filemanagerInstance.createElement('div');\n    this.topElement.classList.add('e-virtual-top');\n    this.largeIconInstance.element.firstElementChild.insertBefore(this.topElement, this.largeIconInstance.element.firstElementChild.firstChild);\n    this.bottomElement = this.filemanagerInstance.createElement('div');\n    this.bottomElement.classList.add('e-virtual-bottom');\n    this.largeIconInstance.element.firstElementChild.insertBefore(this.bottomElement, null);\n    // Get the margin value for list items\n    var marginValue = parseInt(window.getComputedStyle(this.largeIconInstance.itemList[0]).getPropertyValue('margin-top'), 10) + parseInt(window.getComputedStyle(this.largeIconInstance.itemList[0]).getPropertyValue('margin-bottom'), 10);\n    // Calculate the height of a single list item\n    this.listItemHeight = this.largeIconInstance.itemList[0].getBoundingClientRect().height + marginValue;\n    // Calculate the total height of the list\n    this.totalHeight = Object.keys(this.largeIconInstance.allItems).length / this.rowItemCount * this.listItemHeight;\n    // Set the initial height of the top and bottom elements\n    this.topElement.style.height = 0 + 'px';\n    this.bottomElement.style.height = this.totalHeight + 'px';\n    // Initialize the top and bottom element heights\n    this.topElementHeight = 0;\n    this.bottomElementHeight = this.totalHeight;\n    // Initialize the list difference variable\n    this.listDiff = 0;\n    // Set the initial rendered count\n    this.renderedCount = this.itemCount;\n  };\n  /**\n   * Calculates the number of items to display in the list based on the available width and height.\n   *\n   * @param {number} dataSourceLength The length of the data source.\n   * @returns {number} The number of items to display.\n   */\n  Virtualization.prototype.getItemCount = function (dataSourceLength) {\n    // Get the margin values for list items\n    var widthMargin = parseInt(window.getComputedStyle(this.itemList[0]).getPropertyValue('margin-right'), 10) + parseInt(window.getComputedStyle(this.itemList[0]).getPropertyValue('margin-left'), 10);\n    // Calculate the number of items that can fit in a single row\n    this.rowItemCount = Math.floor(parseFloat(formatUnit(this.largeIconInstance.element.firstElementChild.clientWidth)) / (this.itemList[0].offsetWidth + widthMargin));\n    // Calculate the number of items that can fit in the available height\n    var itemCount = this.rowItemCount * Math.round(parseFloat(formatUnit(this.largeIconInstance.element.clientHeight)) / this.itemList[0].offsetHeight);\n    // If the calculated item count is greater than the data source length, set the item count to the data source length\n    if (itemCount > dataSourceLength || itemCount === 0) {\n      itemCount = dataSourceLength;\n    }\n    return itemCount;\n  };\n  /**\n   * Wires or un wires the scroll event for the list element.\n   *\n   * @param {boolean} destroy - Set `true` to unwire the scroll event.\n   * @returns {void}\n   */\n  Virtualization.prototype.wireScrollEvent = function (destroy) {\n    if (!destroy) {\n      // Wire the scroll event\n      EventHandler.add(this.largeIconInstance.element.firstElementChild, 'scroll', this.onVirtualUiScroll, this);\n    } else {\n      // Unwire the scroll event\n      EventHandler.remove(this.largeIconInstance.element.firstElementChild, 'scroll', this.onVirtualUiScroll);\n    }\n  };\n  /**\n   * Handles the scroll event for the list element.\n   * This method updates the top and bottom elements and the displayed items based on the scroll position.\n   *\n   * @returns {void}\n   * @private\n   */\n  Virtualization.prototype.onVirtualUiScroll = function () {\n    var _a;\n    // Set the starting height to 0\n    var startingHeight = 0;\n    // Get the current scroll position\n    this.scrollPosition = isNullOrUndefined(this.scrollPosition) ? 0 : this.scrollPosition;\n    var scroll = this.getscrollerHeight(startingHeight);\n    // Calculate the height of the top element\n    this.topElementHeight = this.listItemHeight * Math.floor(scroll / this.listItemHeight);\n    // Calculate the height of the bottom element\n    this.bottomElementHeight = this.totalHeight - this.topElementHeight;\n    // If the scroll position is less than or equal to the total height, set the top and bottom element heights.\n    // Otherwise, set the top element height to the total height and the bottom element height to 0.\n    _a = scroll <= this.totalHeight ? [this.topElementHeight, this.bottomElementHeight] : [this.totalHeight, 0], this.topElementHeight = _a[0], this.bottomElementHeight = _a[1];\n    // If the top element height has changed, update the top and bottom element heights and re-render the items.\n    if (this.topElementHeight !== parseFloat(this.topElement.style.height)) {\n      this.topElement.style.height = this.topElementHeight + 'px';\n      this.bottomElement.style.height = this.bottomElementHeight + 'px';\n      // Check whether the scroll direction is upward or downward\n      if (scroll > this.scrollPosition) {\n        // Scrolling is upward\n        var listDiff = Math.round(this.topElementHeight / this.listItemHeight - this.listDiff);\n        this.onNormalScroll(listDiff, true);\n      } else {\n        // Scrolling is downward\n        var listDiff = Math.round(this.listDiff - this.topElementHeight / this.listItemHeight);\n        this.onNormalScroll(listDiff, false);\n      }\n    }\n    // Update the list difference and scroll position variables\n    this.listDiff = Math.round(this.topElementHeight / this.listItemHeight);\n    this.scrollPosition = scroll;\n    // Update the list of items and the items property of the largeIconInstance\n    this.largeIconInstance.itemList = Array.prototype.slice.call(selectAll('.' + CLS.LIST_ITEM, this.largeIconInstance.element));\n    this.itemCount = this.itemCount !== this.largeIconInstance.itemList.length ? this.largeIconInstance.itemList.length : this.itemCount;\n    this.largeIconInstance.items = this.largeIconInstance.allItems.slice(this.renderedCount - this.itemCount, this.renderedCount);\n  };\n  /**\n   * Calculates the current scroll position of the list element.\n   *\n   * @param {number} startingHeight The starting height from which to calculate the scroll position.\n   * @returns {number} The current scroll position.\n   * @private\n   */\n  Virtualization.prototype.getscrollerHeight = function (startingHeight) {\n    // If the scroll position is less than or equal to the starting height, return 0.\n    // Otherwise, return the scroll position minus the starting height.\n    return this.largeIconInstance.element.firstElementChild.scrollTop - startingHeight <= 0 ? 0 : this.largeIconInstance.element.firstElementChild.scrollTop - startingHeight;\n  };\n  /**\n   * This method updates the displayed items and the selection based on the scroll direction.\n   *\n   * @param {number} listDiff The number of rows to update.\n   * @param {boolean} isScrollingDown If set to true, the scroll direction is downward.\n   * @returns {void}\n   * @private\n   */\n  Virtualization.prototype.onNormalScroll = function (listDiff, isScrollingDown) {\n    // Update the displayed items\n    for (var i = 0; i < listDiff; i++) {\n      this.updateUI(isScrollingDown);\n    }\n  };\n  /**\n   * Updates the items in the large icons view.\n   *\n   * @param {boolean} isScrollingDown - If set to true, the scroll direction is downward.\n   * @returns {void}\n   * @private\n   */\n  Virtualization.prototype.updateUI = function (isScrollingDown) {\n    var _this = this;\n    if (isScrollingDown) {\n      // Get the next batch of items to be displayed\n      this.items = this.largeIconInstance.allItems.slice(this.renderedCount, this.renderedCount + this.rowItemCount);\n      // If there are items to be displayed, create list elements for them and append them to the list\n      if (this.items.length > 0) {\n        var listElements = ListBase.createListFromJson(createElement, this.items, this.largeIconInstance.listObj);\n        this.itemList = Array.prototype.slice.call(selectAll('.' + CLS.LIST_ITEM, listElements));\n        this.itemList.forEach(function (liEle) {\n          _this.largeIconInstance.element.firstElementChild.insertBefore(liEle, _this.bottomElement);\n        });\n        // Update the rendered count variable\n        this.renderedCount = this.largeIconInstance.allItems.length >= this.renderedCount + this.rowItemCount ? this.renderedCount + this.rowItemCount : this.renderedCount + this.lastRowCount;\n        // Remove the first batch of items from the list\n        for (var i = 0; i < this.rowItemCount; i++) {\n          detach(this.topElement.nextElementSibling);\n        }\n      }\n    } else {\n      // Scrolling up\n      var lastItemIndex = void 0;\n      var isAllRendered = void 0;\n      if (this.renderedCount === this.largeIconInstance.allItems.length) {\n        // Set lastItemIndex to the last item in the last row\n        lastItemIndex = this.renderedCount - (this.itemCount - this.rowItemCount + this.lastRowCount);\n        // Set renderedCount to the total number of items that have been rendered, except for the items in the last row\n        this.renderedCount = this.renderedCount - this.lastRowCount < this.itemCount ? this.itemCount : this.renderedCount - this.lastRowCount;\n        // Set isAllRendered to true to indicate that all items have been rendered\n        isAllRendered = true;\n      } else {\n        // Set lastItemIndex to the last item in the current row\n        lastItemIndex = this.renderedCount - this.itemCount;\n        // Set renderedCount to the total number of items that have been rendered, except for the items in the current row\n        this.renderedCount = this.renderedCount - this.rowItemCount < this.itemCount ? this.itemCount : this.renderedCount - this.rowItemCount;\n      }\n      // Set startItemIndex to the first item in the current or previous row\n      var startItemIndex = lastItemIndex - this.rowItemCount > 0 ? lastItemIndex - this.rowItemCount : 0;\n      // Set the items array to the items in the current or previous row\n      this.items = this.largeIconInstance.allItems.slice(startItemIndex, lastItemIndex);\n      if (this.items.length > 0) {\n        // Create a list of elements from the items array\n        var listElements = ListBase.createListFromJson(createElement, this.items, this.largeIconInstance.listObj);\n        // Set the itemList array to the list items in the list elements\n        this.itemList = Array.prototype.slice.call(selectAll('.' + CLS.LIST_ITEM, listElements));\n        // Add the items to the beginning of the list\n        for (var len = this.itemList.length; len > 0; len--) {\n          this.largeIconInstance.element.firstElementChild.insertBefore(this.itemList[len - 1], this.topElement.nextElementSibling);\n        }\n        // Remove the last row of items from the list\n        for (var i = 0; i < (isAllRendered ? this.lastRowCount : this.rowItemCount); i++) {\n          detach(this.bottomElement.previousElementSibling);\n        }\n      }\n    }\n  };\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {string} - returns the module name.\n   * @private\n   */\n  Virtualization.prototype.getModuleName = function () {\n    return 'virtualization';\n  };\n  /**\n   * Destroys the component.\n   *\n   * @returns {void}\n   */\n  Virtualization.prototype.destroy = function () {\n    // If the file manager has already been destroyed, return immediately\n    if (this.filemanagerInstance.isDestroyed) {\n      return;\n    }\n    // If the large icon element has a child element, unwire the scroll event\n    if (!isNullOrUndefined(this.largeIconInstance.element.firstElementChild)) {\n      this.wireScrollEvent(true);\n    }\n  };\n  return Virtualization;\n}();\nexport { Virtualization };","map":{"version":3,"names":["EventHandler","isNullOrUndefined","detach","formatUnit","ListBase","createElement","selectAll","CLS","Virtualization","instance","filemanagerInstance","largeIconInstance","largeiconsviewModule","prototype","setUIVirtualization","currentViewItems","items","firstItem","slice","listElements","createListFromJson","listObj","itemList","Array","call","LIST_ITEM","element","appendChild","length","querySelector","EMPTY","removeChild","itemCount","getItemCount","Object","keys","allItems","firstChild","remove","setUlElementHeight","lastRowCount","rowItemCount","topElement","classList","add","firstElementChild","insertBefore","bottomElement","marginValue","parseInt","window","getComputedStyle","getPropertyValue","listItemHeight","getBoundingClientRect","height","totalHeight","style","topElementHeight","bottomElementHeight","listDiff","renderedCount","dataSourceLength","widthMargin","Math","floor","parseFloat","clientWidth","offsetWidth","round","clientHeight","offsetHeight","wireScrollEvent","destroy","onVirtualUiScroll","_a","startingHeight","scrollPosition","scroll","getscrollerHeight","onNormalScroll","scrollTop","isScrollingDown","i","updateUI","_this","forEach","liEle","nextElementSibling","lastItemIndex","isAllRendered","startItemIndex","len","previousElementSibling","getModuleName","isDestroyed"],"sources":["/var/www/vue/vue-gantt-chart/node_modules/@syncfusion/ej2-filemanager/src/file-manager/actions/virtualization.js"],"sourcesContent":["import { EventHandler, isNullOrUndefined, detach, formatUnit } from '@syncfusion/ej2-base';\nimport { ListBase } from '@syncfusion/ej2-lists';\nimport { createElement, selectAll } from '@syncfusion/ej2-base';\nimport * as CLS from '../base/classes';\nvar Virtualization = /** @class */ (function () {\n    function Virtualization(instance) {\n        this.filemanagerInstance = instance;\n        this.largeIconInstance = instance.largeiconsviewModule;\n    }\n    /**\n     * Sets up UI virtualization for the large icon view.\n     *\n     * @returns {void}\n     */\n    Virtualization.prototype.setUIVirtualization = function () {\n        // Get the current view data source\n        var currentViewItems = this.largeIconInstance.items;\n        // Get the first item in the data source\n        var firstItem = currentViewItems.slice(0, 1);\n        // Create a list element from the first item in the data source\n        var listElements = ListBase.createListFromJson(createElement, firstItem, this.largeIconInstance.listObj);\n        // Get the list items from the list element\n        this.itemList = Array.prototype.slice.call(selectAll('.' + CLS.LIST_ITEM, listElements));\n        // Append the list element to the large icon element\n        this.largeIconInstance.element.appendChild(listElements);\n        if (this.itemList.length !== 0 && this.largeIconInstance.element.querySelector('.' + CLS.EMPTY)) {\n            this.largeIconInstance.element.removeChild(this.largeIconInstance.element.querySelector('.' + CLS.EMPTY));\n        }\n        // Get the total number of items\n        this.itemCount = this.getItemCount(Object.keys(this.largeIconInstance.allItems).length);\n        // Remove the first child element from the large icon element\n        this.largeIconInstance.element.firstChild.remove();\n        // Set the items for the large icon view to the current view data source, limited to the number of items to display\n        this.largeIconInstance.items = currentViewItems.slice(0, this.itemCount);\n    };\n    /**\n     * Sets the height of the top and bottom elements that are used for virtualization.\n     * These elements are used to give the appearance of an infinitely scrolling list.\n     *\n     * @returns {void}\n     */\n    Virtualization.prototype.setUlElementHeight = function () {\n        // Calculate the number of items in the last row\n        this.lastRowCount = (this.largeIconInstance.allItems.length - this.itemCount) % this.rowItemCount ?\n            (this.largeIconInstance.allItems.length - this.itemCount) % this.rowItemCount : this.rowItemCount;\n        // Create top and bottom elements\n        this.topElement = this.filemanagerInstance.createElement('div');\n        this.topElement.classList.add('e-virtual-top');\n        this.largeIconInstance.element.firstElementChild.insertBefore(this.topElement, this.largeIconInstance.element.firstElementChild.firstChild);\n        this.bottomElement = this.filemanagerInstance.createElement('div');\n        this.bottomElement.classList.add('e-virtual-bottom');\n        this.largeIconInstance.element.firstElementChild.insertBefore(this.bottomElement, null);\n        // Get the margin value for list items\n        var marginValue = parseInt(window.getComputedStyle(this.largeIconInstance.itemList[0]).getPropertyValue('margin-top'), 10) +\n            parseInt(window.getComputedStyle(this.largeIconInstance.itemList[0]).getPropertyValue('margin-bottom'), 10);\n        // Calculate the height of a single list item\n        this.listItemHeight = this.largeIconInstance.itemList[0].getBoundingClientRect().height + marginValue;\n        // Calculate the total height of the list\n        this.totalHeight = (Object.keys(this.largeIconInstance.allItems).length / this.rowItemCount) * this.listItemHeight;\n        // Set the initial height of the top and bottom elements\n        this.topElement.style.height = 0 + 'px';\n        this.bottomElement.style.height = this.totalHeight + 'px';\n        // Initialize the top and bottom element heights\n        this.topElementHeight = 0;\n        this.bottomElementHeight = this.totalHeight;\n        // Initialize the list difference variable\n        this.listDiff = 0;\n        // Set the initial rendered count\n        this.renderedCount = this.itemCount;\n    };\n    /**\n     * Calculates the number of items to display in the list based on the available width and height.\n     *\n     * @param {number} dataSourceLength The length of the data source.\n     * @returns {number} The number of items to display.\n     */\n    Virtualization.prototype.getItemCount = function (dataSourceLength) {\n        // Get the margin values for list items\n        var widthMargin = parseInt(window.getComputedStyle(this.itemList[0]).getPropertyValue('margin-right'), 10) +\n            parseInt(window.getComputedStyle(this.itemList[0]).getPropertyValue('margin-left'), 10);\n        // Calculate the number of items that can fit in a single row\n        this.rowItemCount =\n            Math.floor(parseFloat(formatUnit(this.largeIconInstance.element.firstElementChild.clientWidth)) /\n                (this.itemList[0].offsetWidth + widthMargin));\n        // Calculate the number of items that can fit in the available height\n        var itemCount = this.rowItemCount *\n            (Math.round(parseFloat(formatUnit(this.largeIconInstance.element.clientHeight)) / this.itemList[0].offsetHeight));\n        // If the calculated item count is greater than the data source length, set the item count to the data source length\n        if (itemCount > dataSourceLength || itemCount === 0) {\n            itemCount = dataSourceLength;\n        }\n        return itemCount;\n    };\n    /**\n     * Wires or un wires the scroll event for the list element.\n     *\n     * @param {boolean} destroy - Set `true` to unwire the scroll event.\n     * @returns {void}\n     */\n    Virtualization.prototype.wireScrollEvent = function (destroy) {\n        if (!destroy) {\n            // Wire the scroll event\n            EventHandler.add(this.largeIconInstance.element.firstElementChild, 'scroll', this.onVirtualUiScroll, this);\n        }\n        else {\n            // Unwire the scroll event\n            EventHandler.remove(this.largeIconInstance.element.firstElementChild, 'scroll', this.onVirtualUiScroll);\n        }\n    };\n    /**\n     * Handles the scroll event for the list element.\n     * This method updates the top and bottom elements and the displayed items based on the scroll position.\n     *\n     * @returns {void}\n     * @private\n     */\n    Virtualization.prototype.onVirtualUiScroll = function () {\n        var _a;\n        // Set the starting height to 0\n        var startingHeight = 0;\n        // Get the current scroll position\n        this.scrollPosition = isNullOrUndefined(this.scrollPosition) ? 0 : this.scrollPosition;\n        var scroll = this.getscrollerHeight(startingHeight);\n        // Calculate the height of the top element\n        this.topElementHeight = this.listItemHeight * Math.floor(scroll / this.listItemHeight);\n        // Calculate the height of the bottom element\n        this.bottomElementHeight = this.totalHeight - this.topElementHeight;\n        // If the scroll position is less than or equal to the total height, set the top and bottom element heights.\n        // Otherwise, set the top element height to the total height and the bottom element height to 0.\n        _a = scroll <= this.totalHeight ?\n            [this.topElementHeight, this.bottomElementHeight] : [this.totalHeight, 0], this.topElementHeight = _a[0], this.bottomElementHeight = _a[1];\n        // If the top element height has changed, update the top and bottom element heights and re-render the items.\n        if (this.topElementHeight !== parseFloat(this.topElement.style.height)) {\n            this.topElement.style.height = this.topElementHeight + 'px';\n            this.bottomElement.style.height = this.bottomElementHeight + 'px';\n            // Check whether the scroll direction is upward or downward\n            if (scroll > this.scrollPosition) {\n                // Scrolling is upward\n                var listDiff = Math.round(((this.topElementHeight / this.listItemHeight) - this.listDiff));\n                this.onNormalScroll(listDiff, true);\n            }\n            else {\n                // Scrolling is downward\n                var listDiff = Math.round((this.listDiff - (this.topElementHeight / this.listItemHeight)));\n                this.onNormalScroll(listDiff, false);\n            }\n        }\n        // Update the list difference and scroll position variables\n        this.listDiff = Math.round(this.topElementHeight / this.listItemHeight);\n        this.scrollPosition = scroll;\n        // Update the list of items and the items property of the largeIconInstance\n        this.largeIconInstance.itemList = Array.prototype.slice.call(selectAll('.' + CLS.LIST_ITEM, this.largeIconInstance.element));\n        this.itemCount = this.itemCount !== this.largeIconInstance.itemList.length ?\n            this.largeIconInstance.itemList.length : this.itemCount;\n        this.largeIconInstance.items = this.largeIconInstance.allItems.slice(this.renderedCount -\n            this.itemCount, this.renderedCount);\n    };\n    /**\n     * Calculates the current scroll position of the list element.\n     *\n     * @param {number} startingHeight The starting height from which to calculate the scroll position.\n     * @returns {number} The current scroll position.\n     * @private\n     */\n    Virtualization.prototype.getscrollerHeight = function (startingHeight) {\n        // If the scroll position is less than or equal to the starting height, return 0.\n        // Otherwise, return the scroll position minus the starting height.\n        return ((this.largeIconInstance.element.firstElementChild.scrollTop - startingHeight) <= 0) ? 0 :\n            (this.largeIconInstance.element.firstElementChild.scrollTop - startingHeight);\n    };\n    /**\n     * This method updates the displayed items and the selection based on the scroll direction.\n     *\n     * @param {number} listDiff The number of rows to update.\n     * @param {boolean} isScrollingDown If set to true, the scroll direction is downward.\n     * @returns {void}\n     * @private\n     */\n    Virtualization.prototype.onNormalScroll = function (listDiff, isScrollingDown) {\n        // Update the displayed items\n        for (var i = 0; i < listDiff; i++) {\n            this.updateUI(isScrollingDown);\n        }\n    };\n    /**\n     * Updates the items in the large icons view.\n     *\n     * @param {boolean} isScrollingDown - If set to true, the scroll direction is downward.\n     * @returns {void}\n     * @private\n     */\n    Virtualization.prototype.updateUI = function (isScrollingDown) {\n        var _this = this;\n        if (isScrollingDown) {\n            // Get the next batch of items to be displayed\n            this.items = this.largeIconInstance.allItems.slice(this.renderedCount, this.renderedCount + this.rowItemCount);\n            // If there are items to be displayed, create list elements for them and append them to the list\n            if (this.items.length > 0) {\n                var listElements = ListBase.createListFromJson(createElement, this.items, this.largeIconInstance.listObj);\n                this.itemList = Array.prototype.slice.call(selectAll('.' + CLS.LIST_ITEM, listElements));\n                this.itemList.forEach(function (liEle) {\n                    _this.largeIconInstance.element.firstElementChild.insertBefore(liEle, _this.bottomElement);\n                });\n                // Update the rendered count variable\n                this.renderedCount = (this.largeIconInstance.allItems.length >= this.renderedCount + this.rowItemCount) ?\n                    this.renderedCount + this.rowItemCount : this.renderedCount + this.lastRowCount;\n                // Remove the first batch of items from the list\n                for (var i = 0; i < this.rowItemCount; i++) {\n                    detach(this.topElement.nextElementSibling);\n                }\n            }\n        }\n        else {\n            // Scrolling up\n            var lastItemIndex = void 0;\n            var isAllRendered = void 0;\n            if (this.renderedCount === this.largeIconInstance.allItems.length) {\n                // Set lastItemIndex to the last item in the last row\n                lastItemIndex = this.renderedCount - (this.itemCount - this.rowItemCount + this.lastRowCount);\n                // Set renderedCount to the total number of items that have been rendered, except for the items in the last row\n                this.renderedCount = ((this.renderedCount - this.lastRowCount) < this.itemCount) ?\n                    this.itemCount : (this.renderedCount - this.lastRowCount);\n                // Set isAllRendered to true to indicate that all items have been rendered\n                isAllRendered = true;\n            }\n            else {\n                // Set lastItemIndex to the last item in the current row\n                lastItemIndex = this.renderedCount - this.itemCount;\n                // Set renderedCount to the total number of items that have been rendered, except for the items in the current row\n                this.renderedCount = ((this.renderedCount - this.rowItemCount) < this.itemCount) ?\n                    this.itemCount : (this.renderedCount - this.rowItemCount);\n            }\n            // Set startItemIndex to the first item in the current or previous row\n            var startItemIndex = (lastItemIndex - this.rowItemCount > 0) ? lastItemIndex - this.rowItemCount : 0;\n            // Set the items array to the items in the current or previous row\n            this.items = this.largeIconInstance.allItems.slice(startItemIndex, lastItemIndex);\n            if (this.items.length > 0) {\n                // Create a list of elements from the items array\n                var listElements = ListBase.createListFromJson(createElement, this.items, this.largeIconInstance.listObj);\n                // Set the itemList array to the list items in the list elements\n                this.itemList = Array.prototype.slice.call(selectAll('.' + CLS.LIST_ITEM, listElements));\n                // Add the items to the beginning of the list\n                for (var len = this.itemList.length; len > 0; len--) {\n                    this.largeIconInstance.element.firstElementChild.insertBefore(this.itemList[len - 1], this.topElement.nextElementSibling);\n                }\n                // Remove the last row of items from the list\n                for (var i = 0; i < ((isAllRendered) ? this.lastRowCount : this.rowItemCount); i++) {\n                    detach(this.bottomElement.previousElementSibling);\n                }\n            }\n        }\n    };\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @returns {string} - returns the module name.\n     * @private\n     */\n    Virtualization.prototype.getModuleName = function () {\n        return 'virtualization';\n    };\n    /**\n     * Destroys the component.\n     *\n     * @returns {void}\n     */\n    Virtualization.prototype.destroy = function () {\n        // If the file manager has already been destroyed, return immediately\n        if (this.filemanagerInstance.isDestroyed) {\n            return;\n        }\n        // If the large icon element has a child element, unwire the scroll event\n        if (!isNullOrUndefined(this.largeIconInstance.element.firstElementChild)) {\n            this.wireScrollEvent(true);\n        }\n    };\n    return Virtualization;\n}());\nexport { Virtualization };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}