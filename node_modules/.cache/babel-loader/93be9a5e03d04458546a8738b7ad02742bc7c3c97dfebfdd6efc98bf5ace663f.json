{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = [\"x\", \"y\", \"width\", \"height\"];\nconst _hoisted_2 = [\"height\"];\nconst _hoisted_3 = [\"innerHTML\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"svg\", {\n    class: \"gantt-elastic__chart-row-text-wrapper\",\n    style: _normalizeStyle({\n      ...$options.root.style['chart-row-text-wrapper']\n    }),\n    x: $props.task.x + $props.task.width + $options.root.state.options.chart.text.offset,\n    y: $props.task.y - $options.root.state.options.chart.grid.horizontal.gap,\n    width: $options.getWidth,\n    height: $options.getHeight\n  }, [(_openBlock(), _createElementBlock(\"foreignObject\", {\n    x: \"0\",\n    y: \"0\",\n    width: \"100%\",\n    height: $options.getHeight\n  }, [_createElementVNode(\"div\", {\n    xmlns: \"http://www.w3.org/1999/xhtml\",\n    class: \"gantt-elastic__chart-row-text\",\n    style: _normalizeStyle({\n      ...$options.root.style['chart-row-text']\n    })\n  }, [!$options.html ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: \"gantt-elastic__chart-row-text-content gantt-elastic__chart-row-text-content--text\",\n    style: _normalizeStyle({\n      ...$options.root.style['chart-row-text-content'],\n      ...$options.root.style['chart-row-text-content--text'],\n      ...$options.contentStyle\n    })\n  }, [_createElementVNode(\"div\", null, _toDisplayString($props.task.label), 1 /* TEXT */)], 4 /* STYLE */)) : _createCommentVNode(\"v-if\", true), $options.html ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 1,\n    class: \"gantt-elastic__chart-row-text-content gantt-elastic__chart-row-text-content--html\",\n    style: _normalizeStyle({\n      ...$options.root.style['chart-row-text-content'],\n      ...$options.root.style['chart-row-text-content--html'],\n      ...$options.contentStyle\n    }),\n    innerHTML: $props.task.label\n  }, null, 12 /* STYLE, PROPS */, _hoisted_3)) : _createCommentVNode(\"v-if\", true)], 4 /* STYLE */)], 8 /* PROPS */, _hoisted_2))], 12 /* STYLE, PROPS */, _hoisted_1);\n}","map":{"version":3,"names":["_createElementBlock","class","style","_normalizeStyle","$options","root","x","$props","task","width","state","options","chart","text","offset","y","grid","horizontal","gap","getWidth","height","getHeight","_createElementVNode","xmlns","html","key","contentStyle","_toDisplayString","label","_createCommentVNode","innerHTML","_hoisted_3","_hoisted_2","_hoisted_1"],"sources":["/var/www/vue/vue-gantt-chart/node_modules/gantt-elastic/src/components/Chart/Text.vue"],"sourcesContent":["<!--\n/**\n * @fileoverview Text component\n * @license MIT\n * @author Rafal Pospiech <neuronet.io@gmail.com>\n * @package GanttElastic\n */\n-->\n<template>\n  <svg\n    class=\"gantt-elastic__chart-row-text-wrapper\"\n    :style=\"{ ...root.style['chart-row-text-wrapper'] }\"\n    :x=\"task.x + task.width + root.state.options.chart.text.offset\"\n    :y=\"task.y - root.state.options.chart.grid.horizontal.gap\"\n    :width=\"getWidth\"\n    :height=\"getHeight\"\n  >\n    <foreignObject x=\"0\" y=\"0\" width=\"100%\" :height=\"getHeight\">\n      <div\n        xmlns=\"http://www.w3.org/1999/xhtml\"\n        class=\"gantt-elastic__chart-row-text\"\n        :style=\"{ ...root.style['chart-row-text'] }\"\n      >\n        <div\n          class=\"gantt-elastic__chart-row-text-content gantt-elastic__chart-row-text-content--text\"\n          :style=\"{\n            ...root.style['chart-row-text-content'],\n            ...root.style['chart-row-text-content--text'],\n            ...contentStyle\n          }\"\n          v-if=\"!html\"\n        >\n          <div>{{ task.label }}</div>\n        </div>\n        <div\n          class=\"gantt-elastic__chart-row-text-content gantt-elastic__chart-row-text-content--html\"\n          :style=\"{\n            ...root.style['chart-row-text-content'],\n            ...root.style['chart-row-text-content--html'],\n            ...contentStyle\n          }\"\n          v-if=\"html\"\n          v-html=\"task.label\"\n        ></div>\n      </div>\n    </foreignObject>\n  </svg>\n</template>\n\n<script>\nexport default {\n  name: 'ChartText',\n  inject: ['root'],\n  props: ['task'],\n  data() {\n    return {};\n  },\n  computed: {\n    /**\n     * Get width\n     *\n     * @returns {number}\n     */\n    getWidth() {\n      const textStyle = this.root.style['chart-row-text'];\n      this.root.state.ctx.font = `${textStyle['font-weight']} ${textStyle['font-size']} ${textStyle['font-family']}`;\n      const textWidth = this.root.state.ctx.measureText(this.task.label).width;\n      return textWidth + this.root.state.options.chart.text.xPadding * 2;\n    },\n\n    /**\n     * Get height\n     *\n     * @returns {number}\n     */\n    getHeight() {\n      return this.task.height + this.root.state.options.chart.grid.horizontal.gap * 2;\n    },\n\n    /**\n     * Get content style\n     *\n     * @returns {object}\n     */\n    contentStyle() {\n      return { height: '100%', 'line-height': this.getHeight + 'px' };\n    },\n\n    /**\n     * Should we render text as html?\n     *\n     * @returns {boolean}\n     */\n    html() {\n      const cols = this.root.state.options.taskList.columns;\n      for (let i = 0, len = cols.length; i < len; i++) {\n        const col = cols[i];\n        if (col.value === 'label' && typeof col.html !== 'undefined' && col.html) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n};\n</script>\n"],"mappings":";mBAAA;mBAAA;mBAAA;;uBASEA,mBAAA,CAqCM;IApCJC,KAAK,EAAC,uCAAuC;IAC5CC,KAAK,EAXVC,eAAA;MAAA,GAWiBC,QAAA,CAAAC,IAAI,CAACH,KAAK;IAAA;IACtBI,CAAC,EAAEC,MAAA,CAAAC,IAAI,CAACF,CAAC,GAAGC,MAAA,CAAAC,IAAI,CAACC,KAAK,GAAGL,QAAA,CAAAC,IAAI,CAACK,KAAK,CAACC,OAAO,CAACC,KAAK,CAACC,IAAI,CAACC,MAAM;IAC7DC,CAAC,EAAER,MAAA,CAAAC,IAAI,CAACO,CAAC,GAAGX,QAAA,CAAAC,IAAI,CAACK,KAAK,CAACC,OAAO,CAACC,KAAK,CAACI,IAAI,CAACC,UAAU,CAACC,GAAG;IACxDT,KAAK,EAAEL,QAAA,CAAAe,QAAQ;IACfC,MAAM,EAAEhB,QAAA,CAAAiB;qBAETrB,mBAAA,CA4BgB;IA5BDM,CAAC,EAAC,GAAG;IAACS,CAAC,EAAC,GAAG;IAACN,KAAK,EAAC,MAAM;IAAEW,MAAM,EAAEhB,QAAA,CAAAiB;MAC/CC,mBAAA,CA0BM;IAzBJC,KAAK,EAAC,8BAA8B;IACpCtB,KAAK,EAAC,+BAA+B;IACpCC,KAAK,EArBdC,eAAA;MAAA,GAqBqBC,QAAA,CAAAC,IAAI,CAACH,KAAK;IAAA;OASdE,QAAA,CAAAoB,IAAI,I,cAPbxB,mBAAA,CAUM;IAjCdyB,GAAA;IAwBUxB,KAAK,EAAC,mFAAmF;IACxFC,KAAK,EAzBhBC,eAAA;SAyBmCC,QAAA,CAAAC,IAAI,CAACH,KAAK;SAA2CE,QAAA,CAAAC,IAAI,CAACH,KAAK;SAAiDE,QAAA,CAAAsB;;MAOzIJ,mBAAA,CAA2B,aAAAK,gBAAA,CAAnBpB,MAAA,CAAAC,IAAI,CAACoB,KAAK,iB,oBAhC5BC,mBAAA,gBAyCgBzB,QAAA,CAAAoB,IAAI,I,cAPZxB,mBAAA,CASO;IA3CfyB,GAAA;IAmCUxB,KAAK,EAAC,mFAAmF;IACxFC,KAAK,EApChBC,eAAA;SAoCmCC,QAAA,CAAAC,IAAI,CAACH,KAAK;SAA2CE,QAAA,CAAAC,IAAI,CAACH,KAAK;SAAiDE,QAAA,CAAAsB;;IAMzII,SAAmB,EAAXvB,MAAA,CAAAC,IAAI,CAACoB;kCA1CvBG,UAAA,KAAAF,mBAAA,e,kCAAAG,UAAA,G,yBAAAC,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}