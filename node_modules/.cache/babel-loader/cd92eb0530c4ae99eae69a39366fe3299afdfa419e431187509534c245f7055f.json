{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { isNullOrUndefined, extend, getValue } from '@syncfusion/ej2-base';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport { extendArray, getPlainData, getParentData } from '../utils';\n/**\n * Performs CRUD update to Tree Grid data source\n *\n * @param {{value: ITreeData, action: string }} details - Gets modified record value and CRUD action type\n * @param {TreeGrid} details.value - Gets modified record value\n * @param {string} details.action - CRUD action type\n * @param {TreeGrid} control - Tree Grid instance\n * @param {boolean} isSelfReference - Denotes whether Self Referential data binding\n * @param {number} addRowIndex - New add row index\n * @param {number} selectedIndex - Selected Row index\n * @param {string} columnName - Column field name\n * @param {ITreeData} addRowRecord - Newly added record\n * @returns {void}\n */\nexport function editAction(details, control, isSelfReference, addRowIndex, selectedIndex, columnName, addRowRecord) {\n  var value = details.value;\n  var action = details.action;\n  var changedRecords = 'changedRecords';\n  var i;\n  var j;\n  var addedRecords = 'addedRecords';\n  var batchChanges;\n  var key = control.grid.getPrimaryKeyFieldNames()[0];\n  var treeData = control.dataSource instanceof DataManager ? control.dataSource.dataSource.json : control.dataSource;\n  var modifiedData = [];\n  var originalData = value;\n  var isSkip = false;\n  if (control.editSettings.mode === 'Batch') {\n    batchChanges = control.grid.editModule.getBatchChanges();\n  }\n  if (action === 'add' || action === 'batchsave' && control.editSettings.mode === 'Batch' && batchChanges[\"\" + addedRecords].length) {\n    var addAct = addAction(details, treeData, control, isSelfReference, addRowIndex, selectedIndex, addRowRecord);\n    value = addAct.value;\n    isSkip = addAct.isSkip;\n  }\n  if (value instanceof Array) {\n    modifiedData = extendArray(value);\n  } else {\n    modifiedData.push(extend({}, value));\n  }\n  if (!isSkip && (action !== 'add' || control.editSettings.newRowPosition !== 'Top' && control.editSettings.newRowPosition !== 'Bottom')) {\n    for (var k = 0; k < modifiedData.length; k++) {\n      if (typeof modifiedData[parseInt(k.toString(), 10)][\"\" + key] === 'object') {\n        modifiedData[parseInt(k.toString(), 10)] = modifiedData[parseInt(k.toString(), 10)][\"\" + key];\n      }\n      var keys = modifiedData[parseInt(k.toString(), 10)].taskData ? Object.keys(modifiedData[parseInt(k.toString(), 10)].taskData) : Object.keys(modifiedData[parseInt(k.toString(), 10)]);\n      i = treeData.length;\n      var _loop_1 = function () {\n        if (treeData[parseInt(i.toString(), 10)][\"\" + key] === modifiedData[parseInt(k.toString(), 10)][\"\" + key]) {\n          if (action === 'delete') {\n            var currentData_1 = treeData[parseInt(i.toString(), 10)];\n            treeData.splice(i, 1);\n            if (isSelfReference) {\n              if (!isNullOrUndefined(currentData_1[\"\" + control.parentIdMapping])) {\n                var parentData = control.flatData.filter(function (e) {\n                  return e[\"\" + control.idMapping] === currentData_1[\"\" + control.parentIdMapping];\n                })[0];\n                var childRecords = parentData ? parentData[\"\" + control.childMapping] : [];\n                for (var p = childRecords.length - 1; p >= 0; p--) {\n                  if (childRecords[parseInt(p.toString(), 10)][\"\" + control.idMapping] === currentData_1[\"\" + control.idMapping]) {\n                    if (!control.enableImmutableMode && parentData.childRecords.length === parentData['Children'].length) {\n                      parentData['childRecords'].splice(p, 1);\n                    }\n                    childRecords.splice(p, 1);\n                    if (!childRecords.length) {\n                      parentData.hasChildRecords = false;\n                      updateParentRow(key, parentData, action, control, isSelfReference);\n                    }\n                    break;\n                  }\n                }\n              }\n              return \"break\";\n            }\n          } else {\n            if (action === 'edit') {\n              for (j = 0; j < keys.length; j++) {\n                if (Object.prototype.hasOwnProperty.call(treeData[parseInt(i.toString(), 10)], keys[parseInt(j.toString(), 10)]) && (control.editSettings.mode !== 'Cell' || !isNullOrUndefined(batchChanges) && batchChanges[\"\" + changedRecords].length === 0 || keys[parseInt(j.toString(), 10)] === columnName)) {\n                  var editedData = getParentData(control, modifiedData[parseInt(k.toString(), 10)].uniqueID);\n                  treeData[parseInt(i.toString(), 10)][keys[parseInt(j.toString(), 10)]] = modifiedData[parseInt(k.toString(), 10)][keys[parseInt(j.toString(), 10)]];\n                  if (editedData && editedData.taskData) {\n                    editedData.taskData[keys[parseInt(j.toString(), 10)]] = editedData[keys[parseInt(j.toString(), 10)]] = treeData[parseInt(i.toString(), 10)][keys[parseInt(j.toString(), 10)]];\n                  }\n                }\n              }\n            } else if (action === 'add' || action === 'batchsave') {\n              var index = void 0;\n              if (control.editSettings.newRowPosition === 'Child') {\n                if (isSelfReference) {\n                  originalData.taskData[\"\" + control.parentIdMapping] = treeData[parseInt(i.toString(), 10)][\"\" + control.idMapping];\n                  treeData.splice(i + 1, 0, originalData.taskData);\n                } else {\n                  if (!Object.prototype.hasOwnProperty.call(treeData[parseInt(i.toString(), 10)], control.childMapping)) {\n                    treeData[parseInt(i.toString(), 10)][\"\" + control.childMapping] = [];\n                  }\n                  treeData[parseInt(i.toString(), 10)][\"\" + control.childMapping].push(originalData.taskData);\n                  updateParentRow(key, treeData[parseInt(i.toString(), 10)], action, control, isSelfReference, originalData);\n                }\n              } else if (control.editSettings.newRowPosition === 'Below') {\n                treeData.splice(i + 1, 0, originalData.taskData);\n                if (!isNullOrUndefined(originalData.parentItem)) {\n                  updateParentRow(key, treeData[i + 1], action, control, isSelfReference, originalData);\n                }\n              } else if (!addRowIndex) {\n                index = 0;\n                treeData.splice(index, 0, originalData.taskData);\n              } else if (control.editSettings.newRowPosition === 'Above') {\n                treeData.splice(i, 0, originalData.taskData);\n                if (!isNullOrUndefined(originalData.parentItem)) {\n                  updateParentRow(key, treeData[parseInt(i.toString(), 10)], action, control, isSelfReference, originalData);\n                }\n              }\n            }\n            return \"break\";\n          }\n        } else if (!isNullOrUndefined(treeData[parseInt(i.toString(), 10)][\"\" + control.childMapping])) {\n          if (removeChildRecords(treeData[parseInt(i.toString(), 10)][\"\" + control.childMapping], modifiedData[parseInt(k.toString(), 10)], action, key, control, isSelfReference, originalData, columnName)) {\n            updateParentRow(key, treeData[parseInt(i.toString(), 10)], action, control, isSelfReference);\n          }\n        }\n      };\n      while (i-- && i >= 0) {\n        var state_1 = _loop_1();\n        if (state_1 === \"break\") break;\n      }\n    }\n  }\n}\n/**\n * Performs Add action to Tree Grid data source\n *\n * @param {{value: ITreeData, action: string }} details - Gets modified record value and CRUD action type\n * @param {TreeGrid} details.value - Gets modified record value\n * @param {string} details.action - CRUD action type\n * @param {Object[]} treeData - Tree Grid data source\n * @param {TreeGrid} control - Tree Grid instance\n * @param {boolean} isSelfReference - Denotes whether Self Referential data binding\n * @param {number} addRowIndex - New add row index\n * @param {number} selectedIndex - Selected Row index\n * @param {ITreeData} addRowRecord - Newly added record\n * @returns {void}\n */\nexport function addAction(details, treeData, control, isSelfReference, addRowIndex, selectedIndex, addRowRecord) {\n  var value;\n  var isSkip = false;\n  var currentViewRecords = control.grid.getCurrentViewRecords();\n  value = extend({}, details.value);\n  value = getPlainData(value);\n  switch (control.editSettings.newRowPosition) {\n    case 'Top':\n      treeData.unshift(value);\n      isSkip = true;\n      break;\n    case 'Bottom':\n      treeData.push(value);\n      isSkip = true;\n      break;\n    case 'Above':\n      if (!isNullOrUndefined(addRowRecord)) {\n        value = extend({}, addRowRecord);\n        value = getPlainData(value);\n      } else {\n        value = extend({}, currentViewRecords[addRowIndex + 1]);\n        value = getPlainData(value);\n      }\n      break;\n    case 'Below':\n    case 'Child':\n      if (!isNullOrUndefined(addRowRecord)) {\n        value = extend({}, addRowRecord);\n        value = getPlainData(value);\n      } else {\n        var primaryKeys = control.grid.getPrimaryKeyFieldNames()[0];\n        var currentdata = currentViewRecords[parseInt(addRowIndex.toString(), 10)];\n        if (!isNullOrUndefined(currentdata) && currentdata[\"\" + primaryKeys] === details.value[\"\" + primaryKeys] || selectedIndex !== -1) {\n          value = extend({}, currentdata);\n        } else {\n          value = extend({}, details.value);\n        }\n        value = getPlainData(value);\n        var internalProperty = 'internalProperties';\n        control.editModule[\"\" + internalProperty].taskData = value;\n      }\n      if (selectedIndex === -1) {\n        treeData.unshift(value);\n        isSkip = true;\n      }\n  }\n  return {\n    value: value,\n    isSkip: isSkip\n  };\n}\n/**\n * @param {ITreeData[]} childRecords - Child Records collection\n * @param {Object} modifiedData - Modified data in crud action\n * @param {string} action - crud action type\n * @param {string} key - Primary key field name\n * @param {TreeGrid} control - Tree Grid instance\n * @param {boolean} isSelfReference - Specified whether Self Referential data binding\n * @param {ITreeData} originalData - Non updated data from data source, of edited data\n * @param {string} columnName - column field name\n * @returns {boolean} Returns whether child records exists\n */\nexport function removeChildRecords(childRecords, modifiedData, action, key, control, isSelfReference, originalData, columnName) {\n  var isChildAll = false;\n  var j = childRecords.length;\n  while (j-- && j >= 0) {\n    if (childRecords[parseInt(j.toString(), 10)][\"\" + key] === modifiedData[\"\" + key] || isSelfReference && childRecords[parseInt(j.toString(), 10)][control.parentIdMapping] === modifiedData[control.idMapping]) {\n      if (action === 'edit') {\n        var keys = Object.keys(modifiedData);\n        var editedData = getParentData(control, modifiedData.uniqueID);\n        for (var i = 0; i < keys.length; i++) {\n          if (Object.prototype.hasOwnProperty.call(childRecords[parseInt(j.toString(), 10)], keys[parseInt(i.toString(), 10)]) && (control.editSettings.mode !== 'Cell' || keys[parseInt(i.toString(), 10)] === columnName)) {\n            editedData[keys[parseInt(i.toString(), 10)]] = editedData.taskData[keys[parseInt(i.toString(), 10)]] = childRecords[parseInt(j.toString(), 10)][keys[parseInt(i.toString(), 10)]] = modifiedData[keys[parseInt(i.toString(), 10)]];\n            if (control.grid.editSettings.mode === 'Normal' && control.editSettings.mode === 'Cell' && !isNullOrUndefined(control.grid.editModule)) {\n              var editModule = 'editModule';\n              control.grid.editModule[\"\" + editModule].editRowIndex = modifiedData.index;\n              control.grid.editModule[\"\" + editModule].updateCurrentViewData(modifiedData);\n            }\n          }\n        }\n        break;\n      } else if (action === 'add' || action === 'batchsave') {\n        if (control.editSettings.newRowPosition === 'Child') {\n          if (isSelfReference) {\n            originalData[\"\" + control.parentIdMapping] = childRecords[parseInt(j.toString(), 10)][control.idMapping];\n            childRecords.splice(j + 1, 0, originalData);\n            updateParentRow(key, childRecords[parseInt(j.toString(), 10)], action, control, isSelfReference, originalData);\n          } else {\n            if (!Object.prototype.hasOwnProperty.call(childRecords[parseInt(j.toString(), 10)], control.childMapping)) {\n              childRecords[parseInt(j.toString(), 10)][control.childMapping] = [];\n            }\n            childRecords[parseInt(j.toString(), 10)][control.childMapping].push(originalData.taskData);\n            updateParentRow(key, childRecords[parseInt(j.toString(), 10)], action, control, isSelfReference, originalData);\n          }\n        } else if (control.editSettings.newRowPosition === 'Above') {\n          childRecords.splice(j, 0, originalData.taskData);\n          if (!isNullOrUndefined(originalData.parentItem)) {\n            updateParentRow(key, childRecords[parseInt(j.toString(), 10)], action, control, isSelfReference, originalData);\n          }\n        } else if (control.editSettings.newRowPosition === 'Below') {\n          childRecords.splice(j + 1, 0, originalData.taskData);\n          if (!isNullOrUndefined(originalData.parentItem)) {\n            updateParentRow(key, childRecords[parseInt(j.toString(), 10)], action, control, isSelfReference, originalData);\n          }\n        }\n      } else {\n        childRecords.splice(j, 1);\n        if (!childRecords.length) {\n          isChildAll = true;\n        }\n      }\n    } else if (!isNullOrUndefined(childRecords[parseInt(j.toString(), 10)][control.childMapping])) {\n      if (removeChildRecords(childRecords[parseInt(j.toString(), 10)][control.childMapping], modifiedData, action, key, control, isSelfReference, originalData, columnName)) {\n        updateParentRow(key, childRecords[parseInt(j.toString(), 10)], action, control, isSelfReference);\n      }\n    }\n  }\n  return isChildAll;\n}\n/**\n * @param {string} key - Primary key field name\n * @param {ITreeData} record - Parent Record which has to be updated\n * @param {string} action - CRUD action type\n * @param {TreeGrid} control - Tree Grid instance\n * @param {boolean} isSelfReference - Specified whether self referential data binding\n * @param {ITreeData} child - Specifies child record\n * @returns {void}\n */\nexport function updateParentRow(key, record, action, control, isSelfReference, child) {\n  if ((control.editSettings.newRowPosition === 'Above' || control.editSettings.newRowPosition === 'Below') && (action === 'add' || action === 'batchsave') && !isNullOrUndefined(child.parentItem)) {\n    var parentData = getParentData(control, child.parentItem.uniqueID);\n    parentData.childRecords.push(child);\n  } else {\n    var currentRecords = control.grid.getCurrentViewRecords();\n    var index_1;\n    currentRecords.map(function (e, i) {\n      if (e[\"\" + key] === record[\"\" + key]) {\n        index_1 = i;\n        return;\n      }\n    });\n    if (control.enableVirtualization && isNullOrUndefined(index_1)) {\n      var updatedParent = getValue('uniqueIDCollection.' + child.parentUniqueID, control);\n      record = updatedParent;\n    }\n    if (!isNullOrUndefined(index_1)) {\n      record = currentRecords[parseInt(index_1.toString(), 10)];\n    }\n    if (control.enableVirtualization && isNullOrUndefined(record) && !isNullOrUndefined(child)) {\n      record = getValue('uniqueIDCollection.' + child.parentUniqueID, control);\n    }\n    if (!isSelfReference && !isNullOrUndefined(record.childRecords) && record.childRecords.length) {\n      record.hasChildRecords = true;\n    } else {\n      record.hasChildRecords = false;\n    }\n    if (action === 'add' || action === 'batchsave') {\n      record.expanded = true;\n      record.hasChildRecords = true;\n      if (control.sortSettings.columns.length && isNullOrUndefined(child)) {\n        child = currentRecords.filter(function (e) {\n          if (e.parentUniqueID === record.uniqueID) {\n            return e;\n          } else {\n            return null;\n          }\n        });\n      }\n      var childRecords = child ? child instanceof Array ? child[0] : child : currentRecords[index_1 + 1];\n      if (control.editSettings.newRowPosition !== 'Below') {\n        if (!Object.prototype.hasOwnProperty.call(record, 'childRecords')) {\n          record.childRecords = [];\n        } else {\n          if (!isNullOrUndefined(child) && record[\"\" + key] !== child[\"\" + key]) {\n            record.childRecords.push(child);\n          }\n        }\n        if (record.childRecords.indexOf(childRecords) === -1 && record[\"\" + key] !== child[\"\" + key]) {\n          record.childRecords.unshift(childRecords);\n        }\n        if (isSelfReference) {\n          if (!Object.prototype.hasOwnProperty.call(record, control.childMapping)) {\n            record[control.childMapping] = [];\n          }\n          if (record[\"\" + control.childMapping].indexOf(childRecords) === -1 && record[\"\" + key] !== child[\"\" + key]) {\n            record[control.childMapping].unshift(childRecords);\n          }\n        }\n      }\n    }\n    var primaryKeys = control.grid.getPrimaryKeyFieldNames()[0];\n    var data = control.grid.dataSource instanceof DataManager ? control.grid.dataSource.dataSource.json : control.grid.dataSource;\n    for (var i = 0; i < data.length; i++) {\n      if (data[parseInt(i.toString(), 10)][\"\" + primaryKeys] === record[\"\" + primaryKeys]) {\n        data[parseInt(i.toString(), 10)] = record;\n        break;\n      }\n    }\n    control.grid.setRowData(key, record);\n    var row = control.getRowByIndex(index_1);\n    if (control.editSettings.mode === 'Batch') {\n      if (action === 'add') {\n        row = control.getRows()[control.grid.getCurrentViewRecords().indexOf(record)];\n      } else {\n        row = control.getRows()[control.grid.getRowIndexByPrimaryKey(record[\"\" + key])];\n      }\n    }\n    var movableRow = void 0;\n    if (control.frozenRows || control.getFrozenColumns()) {\n      movableRow = control.getRowByIndex(index_1);\n    }\n    if (!control.enableVirtualization && !isNullOrUndefined(row) || !isNullOrUndefined(movableRow)) {\n      var index_2 = control.treeColumnIndex;\n      if (control.allowRowDragAndDrop && control.enableImmutableMode) {\n        index_2 = index_2 + 1;\n      }\n      control.renderModule.cellRender({\n        data: record,\n        cell: row.cells[parseInt(index_2.toString(), 10)] ? row.cells[parseInt(index_2.toString(), 10)] : movableRow.cells[index_2 - control.getFrozenColumns()],\n        column: control.grid.getColumns()[control.treeColumnIndex],\n        requestType: action\n      });\n      if (control.enableImmutableMode && control['action'] === 'indenting' || control['action'] === 'outdenting') {\n        control.renderModule.RowModifier({\n          data: record,\n          row: row\n        });\n      }\n    }\n  }\n}","map":{"version":3,"names":["isNullOrUndefined","extend","getValue","DataManager","extendArray","getPlainData","getParentData","editAction","details","control","isSelfReference","addRowIndex","selectedIndex","columnName","addRowRecord","value","action","changedRecords","i","j","addedRecords","batchChanges","key","grid","getPrimaryKeyFieldNames","treeData","dataSource","json","modifiedData","originalData","isSkip","editSettings","mode","editModule","getBatchChanges","length","addAct","addAction","Array","push","newRowPosition","k","parseInt","toString","keys","taskData","Object","_loop_1","currentData_1","splice","parentIdMapping","parentData","flatData","filter","e","idMapping","childRecords","childMapping","p","enableImmutableMode","hasChildRecords","updateParentRow","prototype","hasOwnProperty","call","editedData","uniqueID","index","parentItem","removeChildRecords","state_1","currentViewRecords","getCurrentViewRecords","unshift","primaryKeys","currentdata","internalProperty","isChildAll","editRowIndex","updateCurrentViewData","record","child","currentRecords","index_1","map","enableVirtualization","updatedParent","parentUniqueID","expanded","sortSettings","columns","indexOf","data","setRowData","row","getRowByIndex","getRows","getRowIndexByPrimaryKey","movableRow","frozenRows","getFrozenColumns","index_2","treeColumnIndex","allowRowDragAndDrop","renderModule","cellRender","cell","cells","column","getColumns","requestType","RowModifier"],"sources":["/var/www/vue/vue-gantt-chart/node_modules/@syncfusion/ej2-treegrid/src/treegrid/actions/crud-actions.js"],"sourcesContent":["import { isNullOrUndefined, extend, getValue } from '@syncfusion/ej2-base';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport { extendArray, getPlainData, getParentData } from '../utils';\n/**\n * Performs CRUD update to Tree Grid data source\n *\n * @param {{value: ITreeData, action: string }} details - Gets modified record value and CRUD action type\n * @param {TreeGrid} details.value - Gets modified record value\n * @param {string} details.action - CRUD action type\n * @param {TreeGrid} control - Tree Grid instance\n * @param {boolean} isSelfReference - Denotes whether Self Referential data binding\n * @param {number} addRowIndex - New add row index\n * @param {number} selectedIndex - Selected Row index\n * @param {string} columnName - Column field name\n * @param {ITreeData} addRowRecord - Newly added record\n * @returns {void}\n */\nexport function editAction(details, control, isSelfReference, addRowIndex, selectedIndex, columnName, addRowRecord) {\n    var value = details.value;\n    var action = details.action;\n    var changedRecords = 'changedRecords';\n    var i;\n    var j;\n    var addedRecords = 'addedRecords';\n    var batchChanges;\n    var key = control.grid.getPrimaryKeyFieldNames()[0];\n    var treeData = control.dataSource instanceof DataManager ?\n        control.dataSource.dataSource.json : control.dataSource;\n    var modifiedData = [];\n    var originalData = value;\n    var isSkip = false;\n    if (control.editSettings.mode === 'Batch') {\n        batchChanges = control.grid.editModule.getBatchChanges();\n    }\n    if (action === 'add' || (action === 'batchsave' && (control.editSettings.mode === 'Batch'\n        && batchChanges[\"\" + addedRecords].length))) {\n        var addAct = addAction(details, treeData, control, isSelfReference, addRowIndex, selectedIndex, addRowRecord);\n        value = addAct.value;\n        isSkip = addAct.isSkip;\n    }\n    if (value instanceof Array) {\n        modifiedData = extendArray(value);\n    }\n    else {\n        modifiedData.push(extend({}, value));\n    }\n    if (!isSkip && (action !== 'add' ||\n        (control.editSettings.newRowPosition !== 'Top' && control.editSettings.newRowPosition !== 'Bottom'))) {\n        for (var k = 0; k < modifiedData.length; k++) {\n            if (typeof (modifiedData[parseInt(k.toString(), 10)][\"\" + key]) === 'object') {\n                modifiedData[parseInt(k.toString(), 10)] = modifiedData[parseInt(k.toString(), 10)][\"\" + key];\n            }\n            var keys = modifiedData[parseInt(k.toString(), 10)].taskData ?\n                Object.keys(modifiedData[parseInt(k.toString(), 10)].taskData) :\n                Object.keys(modifiedData[parseInt(k.toString(), 10)]);\n            i = treeData.length;\n            var _loop_1 = function () {\n                if (treeData[parseInt(i.toString(), 10)][\"\" + key] === modifiedData[parseInt(k.toString(), 10)][\"\" + key]) {\n                    if (action === 'delete') {\n                        var currentData_1 = treeData[parseInt(i.toString(), 10)];\n                        treeData.splice(i, 1);\n                        if (isSelfReference) {\n                            if (!isNullOrUndefined(currentData_1[\"\" + control.parentIdMapping])) {\n                                var parentData = control.flatData.filter(function (e) {\n                                    return e[\"\" + control.idMapping] === currentData_1[\"\" + control.parentIdMapping];\n                                })[0];\n                                var childRecords = parentData ? parentData[\"\" + control.childMapping] : [];\n                                for (var p = childRecords.length - 1; p >= 0; p--) {\n                                    if (childRecords[parseInt(p.toString(), 10)][\"\" + control.idMapping] === currentData_1[\"\" + control.idMapping]) {\n                                        if (!control.enableImmutableMode && parentData.childRecords.length === parentData['Children'].length) {\n                                            parentData['childRecords'].splice(p, 1);\n                                        }\n                                        childRecords.splice(p, 1);\n                                        if (!childRecords.length) {\n                                            parentData.hasChildRecords = false;\n                                            updateParentRow(key, parentData, action, control, isSelfReference);\n                                        }\n                                        break;\n                                    }\n                                }\n                            }\n                            return \"break\";\n                        }\n                    }\n                    else {\n                        if (action === 'edit') {\n                            for (j = 0; j < keys.length; j++) {\n                                if (Object.prototype.hasOwnProperty.call(treeData[parseInt(i.toString(), 10)], keys[parseInt(j.toString(), 10)]) && ((control.editSettings.mode !== 'Cell'\n                                    || (!isNullOrUndefined(batchChanges) && batchChanges[\"\" + changedRecords].length === 0))\n                                    || keys[parseInt(j.toString(), 10)] === columnName)) {\n                                    var editedData = getParentData(control, modifiedData[parseInt(k.toString(), 10)].uniqueID);\n                                    treeData[parseInt(i.toString(), 10)][keys[parseInt(j.toString(), 10)]] =\n                                        modifiedData[parseInt(k.toString(), 10)][keys[parseInt(j.toString(), 10)]];\n                                    if (editedData && editedData.taskData) {\n                                        editedData.taskData[keys[parseInt(j.toString(), 10)]] = editedData[keys[parseInt(j.toString(), 10)]]\n                                            = treeData[parseInt(i.toString(), 10)][keys[parseInt(j.toString(), 10)]];\n                                    }\n                                }\n                            }\n                        }\n                        else if (action === 'add' || action === 'batchsave') {\n                            var index = void 0;\n                            if (control.editSettings.newRowPosition === 'Child') {\n                                if (isSelfReference) {\n                                    originalData.taskData[\"\" + control.parentIdMapping] = treeData[parseInt(i.toString(), 10)][\"\" + control.idMapping];\n                                    treeData.splice(i + 1, 0, originalData.taskData);\n                                }\n                                else {\n                                    if (!Object.prototype.hasOwnProperty.call(treeData[parseInt(i.toString(), 10)], control.childMapping)) {\n                                        treeData[parseInt(i.toString(), 10)][\"\" + control.childMapping] = [];\n                                    }\n                                    treeData[parseInt(i.toString(), 10)][\"\" + control.childMapping].push(originalData.taskData);\n                                    updateParentRow(key, treeData[parseInt(i.toString(), 10)], action, control, isSelfReference, originalData);\n                                }\n                            }\n                            else if (control.editSettings.newRowPosition === 'Below') {\n                                treeData.splice(i + 1, 0, originalData.taskData);\n                                if (!isNullOrUndefined(originalData.parentItem)) {\n                                    updateParentRow(key, treeData[i + 1], action, control, isSelfReference, originalData);\n                                }\n                            }\n                            else if (!addRowIndex) {\n                                index = 0;\n                                treeData.splice(index, 0, originalData.taskData);\n                            }\n                            else if (control.editSettings.newRowPosition === 'Above') {\n                                treeData.splice(i, 0, originalData.taskData);\n                                if (!isNullOrUndefined(originalData.parentItem)) {\n                                    updateParentRow(key, treeData[parseInt(i.toString(), 10)], action, control, isSelfReference, originalData);\n                                }\n                            }\n                        }\n                        return \"break\";\n                    }\n                }\n                else if (!isNullOrUndefined(treeData[parseInt(i.toString(), 10)][\"\" + control.childMapping])) {\n                    if (removeChildRecords(treeData[parseInt(i.toString(), 10)][\"\" + control.childMapping], modifiedData[parseInt(k.toString(), 10)], action, key, control, isSelfReference, originalData, columnName)) {\n                        updateParentRow(key, treeData[parseInt(i.toString(), 10)], action, control, isSelfReference);\n                    }\n                }\n            };\n            while (i-- && i >= 0) {\n                var state_1 = _loop_1();\n                if (state_1 === \"break\")\n                    break;\n            }\n        }\n    }\n}\n/**\n * Performs Add action to Tree Grid data source\n *\n * @param {{value: ITreeData, action: string }} details - Gets modified record value and CRUD action type\n * @param {TreeGrid} details.value - Gets modified record value\n * @param {string} details.action - CRUD action type\n * @param {Object[]} treeData - Tree Grid data source\n * @param {TreeGrid} control - Tree Grid instance\n * @param {boolean} isSelfReference - Denotes whether Self Referential data binding\n * @param {number} addRowIndex - New add row index\n * @param {number} selectedIndex - Selected Row index\n * @param {ITreeData} addRowRecord - Newly added record\n * @returns {void}\n */\nexport function addAction(details, treeData, control, isSelfReference, addRowIndex, selectedIndex, addRowRecord) {\n    var value;\n    var isSkip = false;\n    var currentViewRecords = control.grid.getCurrentViewRecords();\n    value = extend({}, details.value);\n    value = getPlainData(value);\n    switch (control.editSettings.newRowPosition) {\n        case 'Top':\n            treeData.unshift(value);\n            isSkip = true;\n            break;\n        case 'Bottom':\n            treeData.push(value);\n            isSkip = true;\n            break;\n        case 'Above':\n            if (!isNullOrUndefined(addRowRecord)) {\n                value = extend({}, addRowRecord);\n                value = getPlainData(value);\n            }\n            else {\n                value = extend({}, currentViewRecords[addRowIndex + 1]);\n                value = getPlainData(value);\n            }\n            break;\n        case 'Below':\n        case 'Child':\n            if (!isNullOrUndefined(addRowRecord)) {\n                value = extend({}, addRowRecord);\n                value = getPlainData(value);\n            }\n            else {\n                var primaryKeys = control.grid.getPrimaryKeyFieldNames()[0];\n                var currentdata = currentViewRecords[parseInt(addRowIndex.toString(), 10)];\n                if (!isNullOrUndefined(currentdata) && currentdata[\"\" + primaryKeys] === details.value[\"\" + primaryKeys] || selectedIndex !== -1) {\n                    value = extend({}, currentdata);\n                }\n                else {\n                    value = extend({}, details.value);\n                }\n                value = getPlainData(value);\n                var internalProperty = 'internalProperties';\n                control.editModule[\"\" + internalProperty].taskData = value;\n            }\n            if (selectedIndex === -1) {\n                treeData.unshift(value);\n                isSkip = true;\n            }\n    }\n    return { value: value, isSkip: isSkip };\n}\n/**\n * @param {ITreeData[]} childRecords - Child Records collection\n * @param {Object} modifiedData - Modified data in crud action\n * @param {string} action - crud action type\n * @param {string} key - Primary key field name\n * @param {TreeGrid} control - Tree Grid instance\n * @param {boolean} isSelfReference - Specified whether Self Referential data binding\n * @param {ITreeData} originalData - Non updated data from data source, of edited data\n * @param {string} columnName - column field name\n * @returns {boolean} Returns whether child records exists\n */\nexport function removeChildRecords(childRecords, modifiedData, action, key, control, isSelfReference, originalData, columnName) {\n    var isChildAll = false;\n    var j = childRecords.length;\n    while (j-- && j >= 0) {\n        if (childRecords[parseInt(j.toString(), 10)][\"\" + key] === modifiedData[\"\" + key] ||\n            (isSelfReference && childRecords[parseInt(j.toString(), 10)][control.parentIdMapping] === modifiedData[control.idMapping])) {\n            if (action === 'edit') {\n                var keys = Object.keys(modifiedData);\n                var editedData = getParentData(control, modifiedData.uniqueID);\n                for (var i = 0; i < keys.length; i++) {\n                    if (Object.prototype.hasOwnProperty.call(childRecords[parseInt(j.toString(), 10)], keys[parseInt(i.toString(), 10)]) &&\n                        (control.editSettings.mode !== 'Cell' || keys[parseInt(i.toString(), 10)] === columnName)) {\n                        editedData[keys[parseInt(i.toString(), 10)]] =\n                            editedData.taskData[keys[parseInt(i.toString(), 10)]] =\n                                childRecords[parseInt(j.toString(), 10)][keys[parseInt(i.toString(), 10)]] =\n                                    modifiedData[keys[parseInt(i.toString(), 10)]];\n                        if (control.grid.editSettings.mode === 'Normal' && control.editSettings.mode === 'Cell' && !isNullOrUndefined(control.grid.editModule)) {\n                            var editModule = 'editModule';\n                            control.grid.editModule[\"\" + editModule].editRowIndex = modifiedData.index;\n                            control.grid.editModule[\"\" + editModule].updateCurrentViewData(modifiedData);\n                        }\n                    }\n                }\n                break;\n            }\n            else if (action === 'add' || action === 'batchsave') {\n                if (control.editSettings.newRowPosition === 'Child') {\n                    if (isSelfReference) {\n                        originalData[\"\" + control.parentIdMapping] = childRecords[parseInt(j.toString(), 10)][control.idMapping];\n                        childRecords.splice(j + 1, 0, originalData);\n                        updateParentRow(key, childRecords[parseInt(j.toString(), 10)], action, control, isSelfReference, originalData);\n                    }\n                    else {\n                        if (!Object.prototype.hasOwnProperty.call(childRecords[parseInt(j.toString(), 10)], control.childMapping)) {\n                            childRecords[parseInt(j.toString(), 10)][control.childMapping] = [];\n                        }\n                        childRecords[parseInt(j.toString(), 10)][control.childMapping].push(originalData.taskData);\n                        updateParentRow(key, childRecords[parseInt(j.toString(), 10)], action, control, isSelfReference, originalData);\n                    }\n                }\n                else if (control.editSettings.newRowPosition === 'Above') {\n                    childRecords.splice(j, 0, originalData.taskData);\n                    if (!isNullOrUndefined(originalData.parentItem)) {\n                        updateParentRow(key, childRecords[parseInt(j.toString(), 10)], action, control, isSelfReference, originalData);\n                    }\n                }\n                else if (control.editSettings.newRowPosition === 'Below') {\n                    childRecords.splice(j + 1, 0, originalData.taskData);\n                    if (!isNullOrUndefined(originalData.parentItem)) {\n                        updateParentRow(key, childRecords[parseInt(j.toString(), 10)], action, control, isSelfReference, originalData);\n                    }\n                }\n            }\n            else {\n                childRecords.splice(j, 1);\n                if (!childRecords.length) {\n                    isChildAll = true;\n                }\n            }\n        }\n        else if (!isNullOrUndefined(childRecords[parseInt(j.toString(), 10)][control.childMapping])) {\n            if (removeChildRecords(childRecords[parseInt(j.toString(), 10)][control.childMapping], modifiedData, action, key, control, isSelfReference, originalData, columnName)) {\n                updateParentRow(key, childRecords[parseInt(j.toString(), 10)], action, control, isSelfReference);\n            }\n        }\n    }\n    return isChildAll;\n}\n/**\n * @param {string} key - Primary key field name\n * @param {ITreeData} record - Parent Record which has to be updated\n * @param {string} action - CRUD action type\n * @param {TreeGrid} control - Tree Grid instance\n * @param {boolean} isSelfReference - Specified whether self referential data binding\n * @param {ITreeData} child - Specifies child record\n * @returns {void}\n */\nexport function updateParentRow(key, record, action, control, isSelfReference, child) {\n    if ((control.editSettings.newRowPosition === 'Above' || control.editSettings.newRowPosition === 'Below')\n        && ((action === 'add' || action === 'batchsave')) && !isNullOrUndefined(child.parentItem)) {\n        var parentData = getParentData(control, child.parentItem.uniqueID);\n        parentData.childRecords.push(child);\n    }\n    else {\n        var currentRecords = control.grid.getCurrentViewRecords();\n        var index_1;\n        currentRecords.map(function (e, i) { if (e[\"\" + key] === record[\"\" + key]) {\n            index_1 = i;\n            return;\n        } });\n        if (control.enableVirtualization && isNullOrUndefined(index_1)) {\n            var updatedParent = getValue('uniqueIDCollection.' + child.parentUniqueID, control);\n            record = updatedParent;\n        }\n        if (!isNullOrUndefined(index_1)) {\n            record = currentRecords[parseInt(index_1.toString(), 10)];\n        }\n        if (control.enableVirtualization && isNullOrUndefined(record) && !isNullOrUndefined(child)) {\n            record = getValue('uniqueIDCollection.' + child.parentUniqueID, control);\n        }\n        if (!isSelfReference && !isNullOrUndefined(record.childRecords) && record.childRecords.length) {\n            record.hasChildRecords = true;\n        }\n        else {\n            record.hasChildRecords = false;\n        }\n        if (action === 'add' || action === 'batchsave') {\n            record.expanded = true;\n            record.hasChildRecords = true;\n            if (control.sortSettings.columns.length && isNullOrUndefined(child)) {\n                child = currentRecords.filter(function (e) {\n                    if (e.parentUniqueID === record.uniqueID) {\n                        return e;\n                    }\n                    else {\n                        return null;\n                    }\n                });\n            }\n            var childRecords = child ? child instanceof Array ? child[0] : child : currentRecords[index_1 + 1];\n            if (control.editSettings.newRowPosition !== 'Below') {\n                if (!Object.prototype.hasOwnProperty.call(record, 'childRecords')) {\n                    record.childRecords = [];\n                }\n                else {\n                    if (!isNullOrUndefined(child) && record[\"\" + key] !== child[\"\" + key]) {\n                        record.childRecords.push(child);\n                    }\n                }\n                if (record.childRecords.indexOf(childRecords) === -1 && record[\"\" + key] !== child[\"\" + key]) {\n                    record.childRecords.unshift(childRecords);\n                }\n                if (isSelfReference) {\n                    if (!Object.prototype.hasOwnProperty.call(record, control.childMapping)) {\n                        record[control.childMapping] = [];\n                    }\n                    if (record[\"\" + control.childMapping].indexOf(childRecords) === -1 && record[\"\" + key] !== child[\"\" + key]) {\n                        record[control.childMapping].unshift(childRecords);\n                    }\n                }\n            }\n        }\n        var primaryKeys = control.grid.getPrimaryKeyFieldNames()[0];\n        var data = control.grid.dataSource instanceof DataManager ?\n            control.grid.dataSource.dataSource.json : control.grid.dataSource;\n        for (var i = 0; i < data.length; i++) {\n            if (data[parseInt(i.toString(), 10)][\"\" + primaryKeys] === record[\"\" + primaryKeys]) {\n                data[parseInt(i.toString(), 10)] = record;\n                break;\n            }\n        }\n        control.grid.setRowData(key, record);\n        var row = control.getRowByIndex(index_1);\n        if (control.editSettings.mode === 'Batch') {\n            if (action === 'add') {\n                row = control.getRows()[control.grid.getCurrentViewRecords().indexOf(record)];\n            }\n            else {\n                row = control.getRows()[control.grid.getRowIndexByPrimaryKey(record[\"\" + key])];\n            }\n        }\n        var movableRow = void 0;\n        if (control.frozenRows || control.getFrozenColumns()) {\n            movableRow = control.getRowByIndex(index_1);\n        }\n        if (!control.enableVirtualization && !isNullOrUndefined(row) || !isNullOrUndefined(movableRow)) {\n            var index_2 = control.treeColumnIndex;\n            if (control.allowRowDragAndDrop && control.enableImmutableMode) {\n                index_2 = index_2 + 1;\n            }\n            control.renderModule.cellRender({\n                data: record, cell: row.cells[parseInt(index_2.toString(), 10)] ? row.cells[parseInt(index_2.toString(), 10)]\n                    : movableRow.cells[index_2 - control.getFrozenColumns()],\n                column: control.grid.getColumns()[control.treeColumnIndex],\n                requestType: action\n            });\n            if (control.enableImmutableMode && control['action'] === 'indenting' || control['action'] === 'outdenting') {\n                control.renderModule.RowModifier({\n                    data: record, row: row\n                });\n            }\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}