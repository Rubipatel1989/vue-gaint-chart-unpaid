{"ast":null,"code":"import { TreeGrid, Sort as TreeGrdSort } from '@syncfusion/ej2-treegrid';\nimport { getActualProperties } from '@syncfusion/ej2-grids';\n/**\n * The Sort module is used to handle sorting action.\n */\nvar Sort = /** @class */function () {\n  function Sort(gantt) {\n    this.parent = gantt;\n    TreeGrid.Inject(TreeGrdSort);\n    this.parent.treeGrid.allowSorting = this.parent.allowSorting;\n    this.parent.treeGrid.sortSettings = getActualProperties(this.parent.sortSettings);\n    this.addEventListener();\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {string} .\n   * @private\n   */\n  Sort.prototype.getModuleName = function () {\n    return 'sort';\n  };\n  /**\n   * @returns {void} .\n   * @private\n   */\n  Sort.prototype.addEventListener = function () {\n    this.parent.on('updateModel', this.updateModel, this);\n  };\n  /**\n   *\n   * @returns {void} .\n   * @hidden\n   */\n  Sort.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n    this.parent.off('updateModel', this.updateModel);\n  };\n  /**\n   * Destroys the Sorting of TreeGrid.\n   *\n   * @returns {void} .\n   * @private\n   */\n  Sort.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n  /**\n   * Sort a column with given options.\n   *\n   * @param {string} columnName - Defines the column name to sort.\n   * @param {SortDirection} direction - Defines the direction of sort.\n   * @param {boolean} isMultiSort - Defines whether the previously sorted columns are to be maintained.\n   * @returns {void} .\n   */\n  Sort.prototype.sortColumn = function (columnName, direction, isMultiSort) {\n    this.parent.treeGrid.sortByColumn(columnName, direction, isMultiSort);\n  };\n  /**\n   * Method to clear all sorted columns.\n   *\n   * @returns {void} .\n   */\n  Sort.prototype.clearSorting = function () {\n    this.parent.treeGrid.clearSorting();\n  };\n  /**\n   * The function used to update sortSettings of TreeGrid.\n   *\n   * @returns {void} .\n   * @hidden\n   */\n  Sort.prototype.updateModel = function () {\n    this.parent.sortSettings = this.parent.treeGrid.sortSettings;\n  };\n  /**\n   * To clear sorting for specific column.\n   *\n   * @param {string} columnName - Defines the sorted column name to remove.\n   * @returns {void} .\n   */\n  Sort.prototype.removeSortColumn = function (columnName) {\n    this.parent.treeGrid.grid.removeSortColumn(columnName);\n  };\n  return Sort;\n}();\nexport { Sort };","map":{"version":3,"names":["TreeGrid","Sort","TreeGrdSort","getActualProperties","gantt","parent","Inject","treeGrid","allowSorting","sortSettings","addEventListener","prototype","getModuleName","on","updateModel","removeEventListener","isDestroyed","off","destroy","sortColumn","columnName","direction","isMultiSort","sortByColumn","clearSorting","removeSortColumn","grid"],"sources":["/var/www/vue/vue-gantt-chart/node_modules/@syncfusion/ej2-gantt/src/gantt/actions/sort.js"],"sourcesContent":["import { TreeGrid, Sort as TreeGrdSort } from '@syncfusion/ej2-treegrid';\nimport { getActualProperties } from '@syncfusion/ej2-grids';\n/**\n * The Sort module is used to handle sorting action.\n */\nvar Sort = /** @class */ (function () {\n    function Sort(gantt) {\n        this.parent = gantt;\n        TreeGrid.Inject(TreeGrdSort);\n        this.parent.treeGrid.allowSorting = this.parent.allowSorting;\n        this.parent.treeGrid.sortSettings = getActualProperties(this.parent.sortSettings);\n        this.addEventListener();\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @returns {string} .\n     * @private\n     */\n    Sort.prototype.getModuleName = function () {\n        return 'sort';\n    };\n    /**\n     * @returns {void} .\n     * @private\n     */\n    Sort.prototype.addEventListener = function () {\n        this.parent.on('updateModel', this.updateModel, this);\n    };\n    /**\n     *\n     * @returns {void} .\n     * @hidden\n     */\n    Sort.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('updateModel', this.updateModel);\n    };\n    /**\n     * Destroys the Sorting of TreeGrid.\n     *\n     * @returns {void} .\n     * @private\n     */\n    Sort.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    /**\n     * Sort a column with given options.\n     *\n     * @param {string} columnName - Defines the column name to sort.\n     * @param {SortDirection} direction - Defines the direction of sort.\n     * @param {boolean} isMultiSort - Defines whether the previously sorted columns are to be maintained.\n     * @returns {void} .\n     */\n    Sort.prototype.sortColumn = function (columnName, direction, isMultiSort) {\n        this.parent.treeGrid.sortByColumn(columnName, direction, isMultiSort);\n    };\n    /**\n     * Method to clear all sorted columns.\n     *\n     * @returns {void} .\n     */\n    Sort.prototype.clearSorting = function () {\n        this.parent.treeGrid.clearSorting();\n    };\n    /**\n     * The function used to update sortSettings of TreeGrid.\n     *\n     * @returns {void} .\n     * @hidden\n     */\n    Sort.prototype.updateModel = function () {\n        this.parent.sortSettings = this.parent.treeGrid.sortSettings;\n    };\n    /**\n     * To clear sorting for specific column.\n     *\n     * @param {string} columnName - Defines the sorted column name to remove.\n     * @returns {void} .\n     */\n    Sort.prototype.removeSortColumn = function (columnName) {\n        this.parent.treeGrid.grid.removeSortColumn(columnName);\n    };\n    return Sort;\n}());\nexport { Sort };\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,IAAI,IAAIC,WAAW,QAAQ,0BAA0B;AACxE,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D;AACA;AACA;AACA,IAAIF,IAAI,GAAG,aAAe,YAAY;EAClC,SAASA,IAAIA,CAACG,KAAK,EAAE;IACjB,IAAI,CAACC,MAAM,GAAGD,KAAK;IACnBJ,QAAQ,CAACM,MAAM,CAACJ,WAAW,CAAC;IAC5B,IAAI,CAACG,MAAM,CAACE,QAAQ,CAACC,YAAY,GAAG,IAAI,CAACH,MAAM,CAACG,YAAY;IAC5D,IAAI,CAACH,MAAM,CAACE,QAAQ,CAACE,YAAY,GAAGN,mBAAmB,CAAC,IAAI,CAACE,MAAM,CAACI,YAAY,CAAC;IACjF,IAAI,CAACC,gBAAgB,CAAC,CAAC;EAC3B;EACA;AACJ;AACA;AACA;AACA;AACA;EACIT,IAAI,CAACU,SAAS,CAACC,aAAa,GAAG,YAAY;IACvC,OAAO,MAAM;EACjB,CAAC;EACD;AACJ;AACA;AACA;EACIX,IAAI,CAACU,SAAS,CAACD,gBAAgB,GAAG,YAAY;IAC1C,IAAI,CAACL,MAAM,CAACQ,EAAE,CAAC,aAAa,EAAE,IAAI,CAACC,WAAW,EAAE,IAAI,CAAC;EACzD,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIb,IAAI,CAACU,SAAS,CAACI,mBAAmB,GAAG,YAAY;IAC7C,IAAI,IAAI,CAACV,MAAM,CAACW,WAAW,EAAE;MACzB;IACJ;IACA,IAAI,CAACX,MAAM,CAACY,GAAG,CAAC,aAAa,EAAE,IAAI,CAACH,WAAW,CAAC;EACpD,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIb,IAAI,CAACU,SAAS,CAACO,OAAO,GAAG,YAAY;IACjC,IAAI,CAACH,mBAAmB,CAAC,CAAC;EAC9B,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACId,IAAI,CAACU,SAAS,CAACQ,UAAU,GAAG,UAAUC,UAAU,EAAEC,SAAS,EAAEC,WAAW,EAAE;IACtE,IAAI,CAACjB,MAAM,CAACE,QAAQ,CAACgB,YAAY,CAACH,UAAU,EAAEC,SAAS,EAAEC,WAAW,CAAC;EACzE,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIrB,IAAI,CAACU,SAAS,CAACa,YAAY,GAAG,YAAY;IACtC,IAAI,CAACnB,MAAM,CAACE,QAAQ,CAACiB,YAAY,CAAC,CAAC;EACvC,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIvB,IAAI,CAACU,SAAS,CAACG,WAAW,GAAG,YAAY;IACrC,IAAI,CAACT,MAAM,CAACI,YAAY,GAAG,IAAI,CAACJ,MAAM,CAACE,QAAQ,CAACE,YAAY;EAChE,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIR,IAAI,CAACU,SAAS,CAACc,gBAAgB,GAAG,UAAUL,UAAU,EAAE;IACpD,IAAI,CAACf,MAAM,CAACE,QAAQ,CAACmB,IAAI,CAACD,gBAAgB,CAACL,UAAU,CAAC;EAC1D,CAAC;EACD,OAAOnB,IAAI;AACf,CAAC,CAAC,CAAE;AACJ,SAASA,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}