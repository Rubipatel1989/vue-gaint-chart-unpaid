{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { isNullOrUndefined, createElement, extend, addClass, remove, removeClass, closest, merge, classList, getValue } from '@syncfusion/ej2-base';\nimport { parentsUntil } from '../base/utils';\nimport { DateProcessor } from '../base/date-processor';\nimport * as cls from '../base/css-constants';\nimport { EditTooltip } from '../renderer/edit-tooltip';\n/**\n * File for handling taskbar editing operation in Gantt.\n */\nvar TaskbarEdit = /** @class */function (_super) {\n  __extends(TaskbarEdit, _super);\n  function TaskbarEdit(ganttObj) {\n    var _this = _super.call(this, ganttObj) || this;\n    _this.leftValue = 0;\n    _this.previousLeftValue = 0;\n    _this.isMouseDragged = false;\n    _this.dependencyCancel = false;\n    _this.isDragged = false;\n    _this.editElement = null;\n    _this.elementOffsetLeft = 0;\n    _this.elementOffsetTop = 0;\n    _this.elementOffsetWidth = 0;\n    _this.elementOffsetHeight = 0;\n    _this.segmentIndex = -1;\n    _this.currentItemTop = 0;\n    _this.currentItemPrevTop = 0;\n    _this.topValue = 0;\n    _this.draggedRecordMarginTop = '0px';\n    _this.isClonedElement = false;\n    _this.updatePosition = false;\n    _this.tooltipValue = 0;\n    _this.parent = ganttObj;\n    _this.initPublicProp();\n    _this.wireEvents();\n    _this.editTooltip = new EditTooltip(_this.parent, _this);\n    return _this;\n  }\n  TaskbarEdit.prototype.wireEvents = function () {\n    this.parent.on('chartMouseDown', this.mouseDownHandler, this);\n    this.parent.on('chartMouseUp', this.mouseUpHandler, this);\n    this.parent.on('chartMouseLeave', this.mouseLeaveHandler, this);\n    this.parent.on('chartMouseMove', this.mouseMoveAction, this);\n    this.parent.on('chartMouseClick', this.mouseClickHandler, this);\n  };\n  /**\n   * To initialize the public property.\n   *\n   * @returns {void} .\n   * @private\n   */\n  TaskbarEdit.prototype.initPublicProp = function () {\n    this.taskBarEditElement = null;\n    this.taskBarEditRecord = null;\n    this.taskBarEditAction = null;\n    this.connectorSecondElement = null;\n    this.connectorSecondRecord = null;\n    this.connectorSecondAction = null;\n    this.highlightedSecondElement = null;\n    this.fromPredecessorText = null;\n    this.toPredecessorText = null;\n    this.finalPredecessor = null;\n    this.drawPredecessor = false;\n    this.roundOffDuration = true;\n    this.dragMouseLeave = false;\n    this.isMouseDragged = false;\n    this.previousItemProperty = ['left', 'progress', 'duration', 'isMilestone', 'startDate', 'endDate', 'width', 'progressWidth', 'autoLeft', 'autoDuration', 'autoStartDate', 'autoEndDate', 'autoWidth', 'segments'];\n    this.tapPointOnFocus = false;\n    this.touchEdit = false;\n  };\n  TaskbarEdit.prototype.mouseDownHandler = function (e) {\n    if (this.parent.editSettings.allowTaskbarEditing && !this.parent.readOnly) {\n      this.canDrag = false;\n      if (this.taskBarEditElement) {\n        var targetElement = this.getElementByPosition(e);\n        var element = parentsUntil(targetElement, cls.taskBarMainContainer);\n        if (element && element.innerHTML === this.taskBarEditElement.innerHTML || this.taskBarEditElement.classList.contains('e-segmented-taskbar') || this.taskBarEditElement.classList.contains('collpse-parent-border')) {\n          this.updateTaskBarEditElement(e);\n          this.canDrag = true;\n          e.preventDefault();\n        }\n      } else if (!this.parent.isAdaptive) {\n        this.updateTaskBarEditElement(e);\n      }\n    }\n  };\n  TaskbarEdit.prototype.mouseClickHandler = function (e) {\n    if (!this.parent.editSettings.allowTaskbarEditing) {\n      return;\n    }\n    var targetElement = this.getElementByPosition(e);\n    var element = parentsUntil(targetElement, cls.taskBarMainContainer);\n    if (this.parent.selectionModule && this.parent.selectionModule.enableSelectMultiTouch) {\n      if (this.tapPointOnFocus) {\n        this.updateTaskBarEditElement(e);\n      }\n      return;\n    }\n    if (this.tapPointOnFocus && !isNullOrUndefined(this.taskBarEditElement) && element && element.innerHTML !== this.taskBarEditElement.innerHTML) {\n      this.connectorSecondRecord = this.parent.ganttChartModule.getRecordByTaskBar(element);\n      this.connectorSecondAction = 'ConnectorPointLeftDrag';\n      this.connectorSecondElement = element;\n      this.fromPredecessorText = 'Finish';\n      if (this.validateConnectorPoint()) {\n        this.taskBarEditingAction(e, true);\n      }\n      this.showHideActivePredecessors(false);\n      this.initPublicProp();\n    } else if (targetElement.classList.contains(cls.connectorPointLeftHover)) {\n      this.canDrag = false;\n      this.multipleSelectionEnabled();\n      this.showHideTaskBarEditingElements(targetElement, this.taskBarEditElement);\n      this.tapPointOnFocus = true;\n      this.taskBarEditAction = 'ConnectorPointLeftDrag';\n      this.connectorSecondRecord = this.taskBarEditRecord;\n      this.taskBarEditingAction(e, false);\n    } else if (targetElement.classList.contains(cls.connectorPointRightHover)) {\n      this.canDrag = false;\n      this.multipleSelectionEnabled();\n      this.showHideTaskBarEditingElements(targetElement, this.taskBarEditElement);\n      this.tapPointOnFocus = true;\n      this.taskBarEditAction = 'ConnectorPointRightDrag';\n      this.connectorSecondRecord = this.taskBarEditRecord;\n      this.taskBarEditingAction(e, false);\n    } else {\n      if (this.tapPointOnFocus) {\n        this.showHideActivePredecessors(false);\n        this.showHideTaskBarEditingElements(element, this.taskBarEditElement);\n      }\n      this.updateTaskBarEditElement(e);\n    }\n  };\n  TaskbarEdit.prototype.showHideActivePredecessors = function (show) {\n    var ganttProp = this.taskBarEditRecord.ganttProperties;\n    var predecessors = ganttProp.predecessor;\n    var id = this.parent.viewType === 'ResourceView' ? ganttProp.taskId : ganttProp.rowUniqueID;\n    if (predecessors) {\n      for (var i = 0; i < predecessors.length; i++) {\n        var predecessor = predecessors[i];\n        if (id.toString() === predecessor.from || id.toString() === predecessor.to) {\n          this.applyActiveColor(predecessor.from, predecessor.to, show);\n        }\n      }\n    }\n    var chartContent = this.parent.ganttChartModule.chartBodyContainer;\n    if (show) {\n      addClass([this.taskBarEditElement], [cls.activeChildTask]);\n      addClass([chartContent], [cls.touchMode]);\n    } else {\n      removeClass([this.taskBarEditElement], [cls.activeChildTask]);\n      removeClass([chartContent], [cls.touchMode]);\n    }\n    this.touchEdit = show;\n    if (!isNullOrUndefined(this.parent.toolbarModule)) {\n      this.parent.toolbarModule.refreshToolbarItems();\n    }\n  };\n  TaskbarEdit.prototype.applyActiveColor = function (from, to, enable) {\n    var taskId = this.parent.viewType === 'ProjectView' ? this.taskBarEditRecord.ganttProperties.taskId.toString() : this.taskBarEditRecord.ganttProperties.rowUniqueID.toString();\n    var ganttRecord = taskId === from ? this.parent.connectorLineModule.getRecordByID(to) : this.parent.connectorLineModule.getRecordByID(from);\n    var $tr = this.parent.ganttChartModule.getChartRows()[this.parent.currentViewData.indexOf(ganttRecord)];\n    if (!isNullOrUndefined($tr)) {\n      var $taskbar = $tr.querySelector('.' + cls.taskBarMainContainer);\n      var $connectorElement = this.parent.element.querySelector('#ConnectorLineparent' + from + 'child' + to);\n      if (enable) {\n        addClass([$taskbar], [cls.activeConnectedTask]);\n        if ($connectorElement) {\n          addClass([$connectorElement], [cls.activeConnectedTask]);\n        }\n      } else {\n        removeClass([$taskbar], [cls.activeConnectedTask]);\n        if ($connectorElement) {\n          removeClass([$connectorElement], [cls.activeConnectedTask]);\n        }\n      }\n    }\n  };\n  TaskbarEdit.prototype.validateConnectorPoint = function () {\n    var parentRecord = this.taskBarEditRecord.ganttProperties;\n    var childRecord = this.connectorSecondRecord.ganttProperties;\n    var isValid = true;\n    var parentId = this.parent.viewType === 'ResourceView' ? parentRecord.taskId : parentRecord.rowUniqueID;\n    var childId = this.parent.viewType === 'ResourceView' ? childRecord.taskId : childRecord.rowUniqueID;\n    if (this.connectorSecondRecord.hasChildRecords) {\n      isValid = false;\n    } else if (childRecord.predecessor) {\n      for (var i = 0; i < childRecord.predecessor.length; i++) {\n        var predecessor = childRecord.predecessor[i];\n        if (predecessor.from === parentId.toString() && predecessor.to === childId.toString()) {\n          this.parent.connectorLineEditModule.childRecord = this.connectorSecondRecord;\n          this.parent.connectorLineEditModule.predecessorIndex = i;\n          this.parent.connectorLineEditModule.renderPredecessorDeleteConfirmDialog();\n          isValid = false;\n          break;\n        } else if (predecessor.from === childId.toString() && predecessor.to === parentId.toString()) {\n          this.parent.connectorLineEditModule.childRecord = this.taskBarEditRecord;\n          this.parent.connectorLineEditModule.predecessorIndex = i;\n          this.parent.connectorLineEditModule.renderPredecessorDeleteConfirmDialog();\n          isValid = false;\n          break;\n        }\n      }\n    }\n    return isValid;\n  };\n  // eslint-disable-next-line\n  TaskbarEdit.prototype.mouseLeaveHandler = function (e) {\n    if (this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'ParentDrag' || this.taskBarEditAction === 'ProgressResizing' || this.taskBarEditAction === 'LeftResizing' || this.taskBarEditAction === 'RightResizing') {\n      this.dragMouseLeave = false;\n    } else {\n      this.dragMouseLeave = true;\n    }\n  };\n  /**\n   * To update taskbar edited elements on mouse down action.\n   *\n   * @param {PointerEvent} e .\n   * @returns {void} .\n   * @private\n   */\n  TaskbarEdit.prototype.updateTaskBarEditElement = function (e) {\n    var target = this.getElementByPosition(e);\n    var cloneTaskBar;\n    var element;\n    if (target.classList.contains(cls.manualParentRightResizer) || target.classList.contains(cls.manualParentMainContainer) || target.classList.contains(cls.manualParentTaskBar)) {\n      element = parentsUntil(target, cls.manualParentMainContainer);\n    } else if (target.classList.contains(cls.manualParentMilestone)) {\n      element = parentsUntil(target, cls.manualParentMilestone);\n    } else {\n      element = parentsUntil(target, cls.taskBarMainContainer);\n      if (!isNullOrUndefined(element) && !target.classList.contains('e-connectorpoint-left') && !target.classList.contains('e-connectorpoint-right')) {\n        var currentRecord = this.parent.ganttChartModule.getRecordByTaskBar(element);\n        if (!isNullOrUndefined(currentRecord.ganttProperties.segments) && currentRecord.ganttProperties.segments.length > 0) {\n          if (target.classList.contains('e-progressbar-handler-after')) {\n            for (var i = 0; i < currentRecord.ganttProperties.segments.length; i++) {\n              if (currentRecord.ganttProperties.segments[i].showProgress) {\n                element = element.querySelectorAll('.e-segmented-taskbar')[i];\n                break;\n              }\n            }\n          } else {\n            element = parentsUntil(target, cls.childTaskBarInnerDiv);\n          }\n        }\n      }\n    }\n    if (this.parent.editSettings.allowTaskbarEditing && element) {\n      this.showHideTaskBarEditingElements(element, this.editElement);\n      this.editElement = element;\n      this.realTaskbarElement = this.editElement;\n      var index = this.editElement.getAttribute('data-segment-index');\n      if (!isNullOrUndefined(index)) {\n        this.segmentIndex = Number(index);\n      } else {\n        this.segmentIndex = -1;\n      }\n      this.taskBarEditRecord = this.parent.ganttChartModule.getRecordByTaskBar(this.editElement);\n      if (e.type === 'mousedown' || e.type === 'touchstart' || e.type === 'click') {\n        this.taskBarEditAction = this.getTaskBarAction(e);\n        var index_1 = this.editElement.getAttribute('data-segment-index');\n        var currentRecord = this.parent.ganttChartModule.getRecordByTaskBar(element);\n        var ganttprop = currentRecord.ganttProperties;\n        var parentleft = this.editElement.parentElement.offsetLeft;\n        this.currentData = currentRecord;\n        var resizeElement = createElement('div', {\n          styles: 'height:100%;border-style:dashed;border-bottom:none;border-top:none;border-width:1px;position:absolute;z-index:10000'\n        });\n        addClass([resizeElement], 'e-taskbar-resize-div');\n        resizeElement.style.setProperty('width', ganttprop.width + 'px');\n        var currentindex = this.editElement.getAttribute('data-segment-index');\n        if (!isNullOrUndefined(ganttprop.segments) && this.parent.allowTaskbarDragAndDrop && this.taskBarEditAction !== 'LeftResizing' && this.taskBarEditAction !== 'RightResizing' && this.taskBarEditAction !== 'ProgressResizing') {\n          resizeElement.style.setProperty('left', !isNullOrUndefined(ganttprop.segments) ? parentleft + 'px' : ganttprop.left + 'px');\n        } else {\n          resizeElement.style.setProperty('left', !isNullOrUndefined(ganttprop.segments) && ganttprop.segments.length > 1 ? parentleft + ganttprop.segments[Number(currentindex)].left + 'px' : ganttprop.left + 'px');\n        }\n        var resizeTable = this.parent.createElement('table');\n        var resizetableBody = this.parent.createElement('tbody');\n        resizetableBody.appendChild(resizeElement);\n        resizeTable.appendChild(resizetableBody);\n        var Check = this.parent.ganttChartModule.chartBodyContainer.querySelector('.e-clone-taskbar');\n        var createTable = null;\n        if ((this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'LeftResizing') && !isNullOrUndefined(index_1) && !isNullOrUndefined(index_1) ? Number(index_1) === 0 : false) {\n          cloneTaskBar = this.editElement.parentElement.cloneNode(true);\n        } else {\n          if (this.segmentIndex !== -1 && this.parent.allowTaskbarDragAndDrop && this.taskBarEditAction !== 'LeftResizing' && this.taskBarEditAction !== 'RightResizing' && this.taskBarEditAction !== 'ProgressResizing') {\n            cloneTaskBar = this.editElement.parentElement.cloneNode(true);\n          } else {\n            cloneTaskBar = this.editElement.cloneNode(true);\n          }\n        }\n        if (!Check) {\n          addClass([cloneTaskBar], 'e-clone-taskbar');\n          cloneTaskBar.style.setProperty('position', 'absolute');\n          if (currentRecord.hasChildRecords && !currentRecord.ganttProperties.isAutoSchedule) {\n            var containerPosition = this.parent.getOffsetRect(this.parent.ganttChartModule.chartBodyContainer);\n            var taskbarPosition = this.parent.getOffsetRect(this.editElement);\n            if (this.editElement.classList.contains('e-manualparent-main-container')) {\n              cloneTaskBar.style.setProperty('left', currentRecord.ganttProperties.left - currentRecord.ganttProperties.autoLeft + 'px');\n            } else {\n              cloneTaskBar.style.setProperty(this.parent.enableRtl ? 'right' : 'left', Math.abs(taskbarPosition.left - containerPosition.left + Math.abs(this.parent.ganttChartModule.scrollElement.scrollLeft)) + 'px');\n            }\n          }\n          cloneTaskBar.style.setProperty('top', 0 + 'px');\n          createTable = this.parent.createElement('table');\n          var tableBody = this.parent.createElement('tbody');\n          tableBody.appendChild(cloneTaskBar);\n          createTable.appendChild(tableBody);\n        }\n        if ((this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'LeftResizing') && !isNullOrUndefined(index_1) && !isNullOrUndefined(index_1) ? Number(index_1) === 0 : false) {\n          var segmentedTasks = cloneTaskBar.getElementsByClassName('e-segmented-taskbar');\n          this.cloneTaskbarElement = segmentedTasks[Number(index_1)];\n        } else {\n          this.cloneTaskbarElement = cloneTaskBar;\n        }\n        this.taskBarEditElement = this.cloneTaskbarElement;\n        this.taskbarElement = createTable;\n        this.taskbarResizer = resizeTable;\n        this.currentIndex = index_1;\n        this.roundOffDuration = true;\n        if ((this.taskBarEditAction === 'ConnectorPointLeftDrag' || this.taskBarEditAction === 'ConnectorPointRightDrag') && isNullOrUndefined(this.parent.taskFields.dependency)) {\n          this.taskBarEditAction = null;\n        }\n        this.updateMouseDownProperties(e);\n        if (this.parent.viewType === 'ResourceView' || this.parent.viewType === 'ProjectView') {\n          if (this.taskBarEditRecord.level === 0) {\n            return;\n          } else if (this.parent.enableMultiTaskbar) {\n            var parentRecord = this.parent.getTaskByUniqueID(this.taskBarEditRecord.parentItem.uniqueID);\n            if (!isNullOrUndefined(parentRecord) && !parentRecord.expanded) {\n              this.prevZIndex = this.taskBarEditElement.style.zIndex;\n              this.taskBarEditElement.style.zIndex = '1000';\n              if (this.taskBarEditElement.querySelector('.e-gantt-child-taskbar')) {\n                addClass([this.taskBarEditElement.querySelector('.e-gantt-child-taskbar')], 'e-collapsed-taskbar-drag');\n              }\n            }\n          }\n        }\n      }\n    } else {\n      if (this.parent.isAdaptive) {\n        if (this.taskBarEditElement) {\n          this.showHideTaskBarEditingElements(element, this.editElement);\n        }\n        this.initPublicProp();\n      } else {\n        this.showHideTaskBarEditingElements(element, this.editElement);\n      }\n    }\n  };\n  /**\n   * To show/hide taskbar editing elements.\n   *\n   * @param {Element} element .\n   * @param {Element} secondElement .\n   * @param {boolean} fadeConnectorLine .\n   * @returns {void} .\n   * @private\n   */\n  TaskbarEdit.prototype.showHideTaskBarEditingElements = function (element, secondElement, fadeConnectorLine) {\n    secondElement = secondElement ? secondElement : this.editElement;\n    var isShowProgressResizer = this.parent.taskFields.progress ? true : false;\n    var isShowConnectorPoints = true;\n    if (this.parent.readOnly) {\n      return;\n    }\n    var record = element ? this.parent.ganttChartModule.getRecordByTaskBar(element) : secondElement ? this.parent.ganttChartModule.getRecordByTaskBar(secondElement) : null;\n    if (this.parent.enableMultiTaskbar && element) {\n      var parentRecord = this.parent.getParentTask(record.parentItem);\n      if (!isNullOrUndefined(parentRecord)) {\n        if (!parentRecord.expanded) {\n          isShowProgressResizer = false;\n          isShowConnectorPoints = false;\n        }\n      }\n    }\n    if (element) {\n      if (element.querySelector('.' + cls.taskBarLeftResizer)) {\n        addClass([element.querySelector('.' + cls.taskBarLeftResizer)], [cls.leftResizeGripper]);\n        addClass([element.querySelector('.' + cls.taskBarRightResizer)], [cls.rightResizeGripper]);\n        if (isShowProgressResizer) {\n          var progressElement = record && record.ganttProperties.segments && record.ganttProperties.segments.length > 0 ? this.parent.getRowByIndex(this.parent.enableVirtualization ? this.parent.currentViewData.indexOf(record) : this.parent.flatData.indexOf(record)).querySelectorAll('.' + cls.childProgressResizer)[0] : element.querySelector('.' + cls.childProgressResizer);\n          if (!isNullOrUndefined(progressElement)) {\n            addClass([progressElement], [cls.progressResizeGripper]);\n            progressElement.style.top = '3px';\n          }\n        }\n      } else if (this.parent.isAdaptive && isShowProgressResizer) {\n        var record_1 = this.parent.ganttChartModule.getRecordByTaskBar(element);\n        if (record_1.hasChildRecords) {\n          addClass([element], [cls.activeParentTask]);\n        }\n      }\n      addClass(this.parent.ganttChartModule.scrollElement.querySelectorAll('.' + cls.connectorLineContainer), [cls.connectorLineZIndex]);\n      if (!isNullOrUndefined(this.parent.taskFields.dependency) && (element.querySelector('.' + cls.connectorPointLeft) || element.parentElement.querySelector('.' + cls.connectorPointLeft)) && isShowConnectorPoints) {\n        var connectorElement = !isNullOrUndefined(element.querySelector('.' + cls.connectorPointLeft)) ? element : element.parentElement;\n        if (!isNullOrUndefined(connectorElement.querySelector('.' + cls.connectorPointLeft))) {\n          addClass([connectorElement.querySelector('.' + cls.connectorPointLeft)], [cls.connectorPointLeftHover]);\n        }\n        if (!isNullOrUndefined(connectorElement.querySelector('.' + cls.connectorPointRight))) {\n          addClass([connectorElement.querySelector('.' + cls.connectorPointRight)], [cls.connectorPointRightHover]);\n        }\n      }\n    } else if (!fadeConnectorLine) {\n      removeClass(this.parent.ganttChartModule.scrollElement.querySelectorAll('.' + cls.connectorLineContainer), [cls.connectorLineZIndex]);\n    }\n    if (secondElement && element !== secondElement) {\n      if (secondElement.querySelector('.' + cls.taskBarLeftResizer)) {\n        removeClass([secondElement.querySelector('.' + cls.taskBarLeftResizer)], [cls.leftResizeGripper]);\n        removeClass([secondElement.querySelector('.' + cls.taskBarRightResizer)], [cls.rightResizeGripper]);\n        var progressElement = record && record.ganttProperties.segments && record.ganttProperties.segments.length > 0 ? this.parent.getRowByIndex(this.parent.enableVirtualization ? this.parent.currentViewData.indexOf(record) : this.parent.flatData.indexOf(record)) : secondElement;\n        if (progressElement && progressElement.querySelector('.' + cls.childProgressResizer)) {\n          removeClass([progressElement.querySelector('.' + cls.childProgressResizer)], [cls.progressResizeGripper]);\n        }\n      }\n      if (!isNullOrUndefined(this.parent.taskFields.dependency) && (secondElement.querySelector('.' + cls.connectorPointLeft) || secondElement.parentElement.querySelector('.' + cls.connectorPointLeft))) {\n        var connectorElement = !isNullOrUndefined(secondElement.querySelector('.' + cls.connectorPointLeft)) ? secondElement : secondElement.parentElement;\n        var leftConnector = connectorElement.querySelector('.' + cls.connectorPointLeft);\n        var rightConnector = connectorElement.querySelector('.' + cls.connectorPointRight);\n        if (leftConnector) {\n          removeClass([leftConnector], [cls.connectorPointLeftHover]);\n        }\n        if (rightConnector) {\n          removeClass([rightConnector], [cls.connectorPointRightHover]);\n        }\n      } else if (this.parent.isAdaptive) {\n        var record_2 = this.parent.ganttChartModule.getRecordByTaskBar(secondElement);\n        if (record_2 && record_2.hasChildRecords) {\n          removeClass([secondElement], [cls.activeParentTask]);\n        }\n      }\n      this.editElement = null;\n    }\n  };\n  /**\n   * To get taskbar edit actions.\n   *\n   * @param {PointerEvent} e .\n   * @returns {string} .\n   * @private\n   */\n  TaskbarEdit.prototype.getTaskBarAction = function (e) {\n    var mouseDownElement = this.getElementByPosition(e);\n    var data = this.taskBarEditRecord;\n    var action = '';\n    if (mouseDownElement.classList.contains(cls.taskBarLeftResizer)) {\n      action = 'LeftResizing';\n    } else if (mouseDownElement.classList.contains(cls.taskBarRightResizer)) {\n      action = 'RightResizing';\n    } else if ((mouseDownElement.classList.contains(cls.childProgressResizer) || closest(mouseDownElement, '.' + cls.childProgressResizer)) && this.parent.taskFields.progress) {\n      action = 'ProgressResizing';\n    } else if (mouseDownElement.classList.contains(cls.connectorPointLeft)) {\n      action = 'ConnectorPointLeftDrag';\n    } else if (mouseDownElement.classList.contains(cls.connectorPointRight)) {\n      action = 'ConnectorPointRightDrag';\n    } else if (mouseDownElement.classList.contains(cls.manualParentRightResizer)) {\n      action = 'ParentResizing';\n    } else if (mouseDownElement.classList.contains(cls.manualParentTaskBar) || mouseDownElement.classList.contains(cls.manualParentMainContainer) || mouseDownElement.classList.contains(cls.manualParentMilestone)) {\n      action = 'ManualParentDrag';\n    } else if (data) {\n      action = data.hasChildRecords ? data[this.parent.taskFields.manual] ? '' : 'ParentDrag' : data.ganttProperties.isMilestone ? 'MilestoneDrag' : 'ChildDrag';\n    }\n    return action;\n  };\n  /**\n   * To update property while perform mouse down.\n   *\n   * @param {PointerEvent} event .\n   * @returns {void} .\n   * @private\n   */\n  TaskbarEdit.prototype.updateMouseDownProperties = function (event) {\n    var e = this.getCoordinate(event);\n    var parentWithZoomStyle = this.parent.element.closest('[style*=\"zoom\"]');\n    if (parentWithZoomStyle) {\n      var zoom1 = parseFloat(getComputedStyle(parentWithZoomStyle).zoom);\n      e.pageX = e.pageX / zoom1;\n      e.pageY = e.pageY / zoom1;\n    }\n    if (e.pageX || e.pageY) {\n      var containerPosition = this.parent.getOffsetRect(this.parent.ganttChartModule.chartBodyContainer);\n      if (this.parent.enableRtl) {\n        this.mouseDownX = Math.abs(e.pageX - (containerPosition.left + Math.abs(this.parent.ganttChartModule.scrollObject.previousScroll.left)));\n      } else {\n        this.mouseDownX = e.pageX - containerPosition.left + this.parent.ganttChartModule.scrollObject.previousScroll.left;\n      }\n      this.tooltipPositionX = this.mouseDownX;\n      this.mouseDownY = this.dragMoveY = e.pageY - containerPosition.top + this.parent.ganttChartModule.scrollObject.previousScroll.top;\n    }\n    if (this.taskBarEditAction === 'ConnectorPointLeftDrag' || this.taskBarEditAction === 'ConnectorPointRightDrag') {\n      this.fromPredecessorText = this.taskBarEditAction === 'ConnectorPointLeftDrag' ? 'start' : 'finish';\n      this.parent.connectorLineModule.tooltipTable.innerHTML = this.parent.connectorLineModule.getConnectorLineTooltipInnerTd(this.taskBarEditRecord.ganttProperties.taskName, this.fromPredecessorText, '', '');\n    }\n  };\n  TaskbarEdit.prototype.isMouseDragCheck = function () {\n    if (!this.isMouseDragged && this.taskBarEditAction && (this.mouseDownX !== this.mouseMoveX && (this.mouseDownX + 3 < this.mouseMoveX || this.mouseDownX - 3 > this.mouseMoveX) || this.mouseDownY !== this.mouseMoveY && (this.mouseDownY + 3 < this.mouseMoveY || this.mouseDownY - 3 > this.mouseMoveY))) {\n      this.isMouseDragged = true;\n      this.parent.initiateEditAction(true);\n      var item = this.taskBarEditRecord.ganttProperties;\n      this.previousItem = this.parent.timelineModule.extendFunction(item, this.previousItemProperty);\n      if (this.taskBarEditAction !== 'ConnectorPointLeftDrag' && this.taskBarEditAction !== 'ConnectorPointRightDrag' && !(this.parent.viewType === 'ResourceView' && this.taskBarEditAction === 'ParentDrag')) {\n        this.editTooltip.showHideTaskbarEditTooltip(true, this.segmentIndex);\n      }\n      this.taskBarEditElement.setAttribute('aria-grabbed', 'true');\n    }\n  };\n  /* eslint-disable-next-line */\n  TaskbarEdit.prototype.removeFirstBorder = function (element) {\n    var canremove = this.parent.rowDragAndDropModule['dropPosition'] === 'bottomSegment';\n    if (this.parent.element.getElementsByClassName('e-firstrow-border').length > 0 && element && (element.getAttribute('data-rowindex') !== 0 || canremove)) {\n      this.parent.element.getElementsByClassName('e-firstrow-border')[0].remove();\n    }\n  };\n  TaskbarEdit.prototype.removeLastBorder = function (element) {\n    var isEmptyRow = element && (element.classList.contains('e-emptyrow') || element.classList.contains('e-columnheader') || element.classList.contains('e-detailrow'));\n    var islastRowIndex;\n    if (this.parent.enableVirtualization) {\n      islastRowIndex = element && !isEmptyRow && this.parent.treeGrid.getRows()[this.parent.treeGrid.getCurrentViewRecords().length - 1].getAttribute('data-uid') !== element.getAttribute('data-uid');\n    } else {\n      islastRowIndex = element && !isEmptyRow && this.parent.treeGrid.getRowByIndex(this.parent.treeGrid.getCurrentViewRecords().length - 1).getAttribute('data-uid') !== element.getAttribute('data-uid');\n    }\n    var canremove = islastRowIndex || this.parent.rowDragAndDropModule['dropPosition'] === 'topSegment';\n    if (this.parent.element.getElementsByClassName('e-lastrow-border').length > 0 && element && (islastRowIndex || canremove)) {\n      this.parent.element.getElementsByClassName('e-lastrow-border')[0].remove();\n    }\n  };\n  TaskbarEdit.prototype.removetopOrBottomBorder = function () {\n    var border = [].slice.call(this.parent.element.querySelectorAll('.e-dropbottom, .e-droptop'));\n    if (border.length) {\n      this.addRemoveClasses(border, false, 'e-dropbottom');\n      this.addRemoveClasses(border, false, 'e-droptop');\n    }\n  };\n  TaskbarEdit.prototype.topOrBottomBorder = function (target) {\n    var rowElement;\n    if (this.parent.enableVirtualization) {\n      var gridElement = this.parent.treeGrid.getRows().filter(function (data) {\n        return data.getAttribute('data-rowindex') === target.getAttribute('data-rowindex');\n      })[0];\n      var index = this.parent.treeGrid.getRows().indexOf(gridElement);\n      rowElement = this.parent.getRowByIndex(index).children;\n    } else {\n      rowElement = this.parent.getRowByIndex(parseInt(target.getAttribute('data-rowindex'), 10)).children;\n    }\n    if (rowElement) {\n      if (this.parent.rowDragAndDropModule['dropPosition'] === 'above') {\n        this.addRemoveClasses(rowElement, true, 'e-droptop');\n        if (this.parent.element.getElementsByClassName('e-lastrow-dragborder').length > 0) {\n          this.parent.element.getElementsByClassName('e-lastrow-dragborder')[0].remove();\n        }\n      }\n      if (this.parent.rowDragAndDropModule['dropPosition'] === 'below') {\n        this.addRemoveClasses(rowElement, true, 'e-dropbottom');\n      }\n    }\n  };\n  TaskbarEdit.prototype.removeChildBorder = function () {\n    var borderElem = [].slice.call(this.parent.element.querySelectorAll('.e-childborder'));\n    if (borderElem.length > 0) {\n      this.addRemoveClasses(borderElem, false, 'e-childborder');\n    }\n  };\n  TaskbarEdit.prototype.addRemoveClasses = function (cells, add, className) {\n    for (var i = 0, len = cells.length; i < len; i++) {\n      if (add) {\n        cells[parseInt(i.toString(), 10)].classList.add(className);\n      } else {\n        cells[parseInt(i.toString(), 10)].classList.remove(className);\n      }\n    }\n  };\n  TaskbarEdit.prototype.addErrorElem = function () {\n    var dragelem = document.getElementsByClassName('e-clone-taskbar')[0];\n    var errorelem = document.querySelectorAll('.e-errorelem').length;\n    if (!errorelem) {\n      var ele = document.createElement('div');\n      classList(ele, ['e-errorcontainer'], []);\n      classList(ele, ['e-icons', 'e-errorelem'], []);\n      if (this.taskBarEditRecord.ganttProperties.segments && this.taskBarEditRecord.ganttProperties.segments.length > 0) {\n        ele.style.paddingTop = this.parent.taskbarHeight + 'px';\n      }\n      dragelem.appendChild(ele);\n    }\n  };\n  TaskbarEdit.prototype.removeErrorElem = function () {\n    var errorelem = document.querySelector('.e-errorelem');\n    if (errorelem) {\n      errorelem.remove();\n    }\n  };\n  TaskbarEdit.prototype.ensurePosition = function (draggedRecords, currentRecord) {\n    var _this = this;\n    draggedRecords.filter(function (draggedRecord) {\n      if (draggedRecord.hasChildRecords && !isNullOrUndefined(draggedRecord.childRecords)) {\n        var valid = draggedRecord.childRecords.indexOf(currentRecord);\n        if (valid === -1) {\n          _this.ensurePosition(draggedRecord.childRecords, currentRecord);\n        } else {\n          _this.parent.rowDragAndDropModule['dropPosition'] = 'Invalid';\n          _this.addErrorElem();\n          return;\n        }\n      }\n    });\n  };\n  /**\n   * To handle mouse move action in chart\n   *\n   * @param {PointerEvent} event .\n   * @returns {void} .\n   * @private\n   */\n  TaskbarEdit.prototype.mouseMoveAction = function (event) {\n    var _this = this;\n    if (this.parent.isAdaptive) {\n      if (!this.canDrag) {\n        return;\n      } else {\n        this.multipleSelectionEnabled();\n      }\n    }\n    var containerPosition = this.parent.getOffsetRect(this.parent.ganttChartModule.chartBodyContainer);\n    var e = this.getCoordinate(event);\n    if (this.parent.enableRtl) {\n      this.mouseMoveX = Math.abs(e.pageX - (containerPosition.left + Math.abs(this.parent.ganttChartModule.scrollObject.previousScroll.left)));\n    } else {\n      this.mouseMoveX = e.pageX - containerPosition.left + this.parent.ganttChartModule.scrollObject.previousScroll.left;\n    }\n    this.mouseMoveY = e.pageY - containerPosition.top + this.parent.ganttChartModule.scrollObject.previousScroll.top;\n    this.dragMouseLeave = false;\n    var cancel = false;\n    if (this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'ParentDrag' || this.taskBarEditAction === 'ManualParentDrag' || this.taskBarEditAction === 'MilestoneDrag') {\n      var ganttRowElement = void 0;\n      if (this.parent.enableVirtualization) {\n        var index = this.parent.currentViewData.indexOf(this.taskBarEditRecord);\n        ganttRowElement = this.parent.getRowByIndex(index);\n      } else {\n        ganttRowElement = this.parent.getRowByIndex(this.taskBarEditRecord.index);\n      }\n      var eventArgs = {\n        cancel: cancel,\n        cloneElement: this.taskbarElement,\n        data: this.taskBarEditRecord,\n        target: event.target,\n        rows: ganttRowElement\n      };\n      this.parent.trigger('rowDrag', eventArgs);\n      cancel = eventArgs['cancel'];\n    }\n    if (!cancel) {\n      this.isMouseDragCheck();\n    }\n    if (this.isMouseDragged && this.taskBarEditAction) {\n      event.preventDefault();\n      if (!isNullOrUndefined(this.taskbarElement) && !isNullOrUndefined(this.editElement) && this.taskBarEditAction !== 'ConnectorPointRightDrag' && this.taskBarEditAction !== 'ConnectorPointLeftDrag' && !(this.parent.viewType === 'ResourceView' && this.currentData.hasChildRecords)) {\n        var currentElement = this.editElement.parentElement;\n        if (this.parent.enableTimelineVirtualization && this.parent.timelineModule.wholeTimelineWidth > this.parent.element.offsetWidth * 3) {\n          currentElement.style.setProperty('position', 'relative');\n        } else {\n          currentElement.style.setProperty('position', 'absolute');\n        }\n        if ((this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'LeftResizing') && !isNullOrUndefined(this.currentIndex) && !isNullOrUndefined(this.currentIndex) ? Number(this.currentIndex) === 0 : false) {\n          this.taskbarElement.childNodes[0].childNodes[0].style.setProperty('top', currentElement.parentElement.offsetTop + 'px');\n          if (this.parent.allowTaskbarDragAndDrop && this.taskBarEditAction !== 'LeftResizing' && this.taskBarEditAction !== 'RightResizing' && this.taskBarEditAction !== 'ProgressResizing') {\n            this.parent.chartPane.getElementsByClassName('e-gantt-chart')[0].appendChild(this.taskbarElement);\n          } else {\n            currentElement.parentElement.appendChild(this.taskbarElement);\n          }\n        } else {\n          if (this.parent.allowTaskbarDragAndDrop && this.taskBarEditAction !== 'LeftResizing' && this.taskBarEditAction !== 'RightResizing' && this.taskBarEditAction !== 'ProgressResizing') {\n            this.parent.chartPane.getElementsByClassName('e-gantt-chart')[0].appendChild(this.taskbarElement);\n          } else {\n            currentElement.appendChild(this.taskbarElement);\n          }\n        }\n        if (this.taskBarEditAction !== 'ProgressResizing') {\n          if (this.parent.enableTimelineVirtualization && this.parent.timelineModule.wholeTimelineWidth > this.parent.element.offsetWidth * 3) {\n            var rootElement = this.parent.ganttChartModule.chartBodyContainer.querySelectorAll('.e-chart-scroll-container');\n            rootElement[0].appendChild(this.taskbarResizer);\n          } else {\n            var rootElement = this.parent.ganttChartModule.chartBodyContainer.querySelectorAll('.e-chart-rows-container');\n            rootElement[0].appendChild(this.taskbarResizer);\n          }\n        }\n      }\n      if (this.parent.allowTaskbarDragAndDrop && (this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'ParentDrag' || this.taskBarEditAction === 'MilestoneDrag' || this.taskBarEditAction === 'ManualParentDrag')) {\n        var taskbarPosition = this.parent.getOffsetRect(this.taskBarEditElement);\n        var left = !isNullOrUndefined(document.body.className) && document.body.className.includes('e-bigger') ? 12 : 0;\n        var pointerLeft = 3 + this.parent.chartRowsModule.connectorPointWidth + left;\n        var xValue = void 0;\n        if (this.parent.enableRtl) {\n          xValue = Math.abs(taskbarPosition.left + pointerLeft + 1);\n        } else {\n          xValue = Math.abs(taskbarPosition.left - pointerLeft - 1);\n        }\n        if (!this.isClonedElement && !this.parent.enableRtl) {\n          xValue = xValue - this.parent.ganttChartModule.scrollElement.scrollLeft;\n          this.isClonedElement = true;\n        }\n        var rowPositionHeight = 0;\n        this.parent.rowDragAndDropModule['dropPosition'] = undefined;\n        var target = void 0;\n        var yValue = void 0;\n        if (event.type === 'touchmove' || event.type === 'touchstart' || event.type === 'touchend') {\n          yValue = event['changedTouches'][0].pageY;\n        } else {\n          yValue = event.y;\n        }\n        if (this.parent.enableRtl) {\n          target = document.elementFromPoint(this.parent.ganttChartModule.chartBodyContainer.offsetWidth, yValue);\n          if (target.classList.contains('e-taskbar-resize-div')) {\n            target = document.elementFromPoint(this.parent.ganttChartModule.chartBodyContainer.offsetWidth - target['offsetWidth'], yValue);\n          }\n        } else {\n          target = document.elementFromPoint(xValue, yValue);\n        }\n        var draggedTreeGridRowElement = void 0;\n        if (this.parent.enableVirtualization) {\n          if (!this.draggedTreeGridRowElement) {\n            var currentElement = this.editElement.parentElement;\n            draggedTreeGridRowElement = currentElement.parentElement;\n            this.draggedTreeGridRowElement = draggedTreeGridRowElement;\n            this.draggedTreeGridRowHeight = this.draggedTreeGridRowElement.offsetHeight;\n          }\n        } else {\n          draggedTreeGridRowElement = this.parent.treeGrid.getRows()[this.parent.flatData.indexOf(this.taskBarEditRecord)];\n          this.draggedTreeGridRowElement = draggedTreeGridRowElement;\n          if (this.parent.enableMultiTaskbar) {\n            if (this.taskBarEditRecord.parentItem && !isNullOrUndefined(this.parent.getRowByID(this.taskBarEditRecord.parentItem.taskId))) {\n              this.draggedTreeGridRowHeight = this.parent.getRowByID(this.taskBarEditRecord.parentItem.taskId).offsetHeight;\n              if (this.parent.viewType === 'ProjectView' && this.draggedTreeGridRowHeight === 0) {\n                var nestedParent = this.parent.getRecordByID(this.taskBarEditRecord.parentItem.taskId);\n                while (nestedParent.parentItem) {\n                  nestedParent = this.parent.getRecordByID(nestedParent.parentItem.taskId);\n                  this.draggedTreeGridRowHeight = this.parent.getRowByID(nestedParent['TaskID']).offsetHeight;\n                }\n              }\n            } else {\n              var currentElement = this.editElement.parentElement;\n              this.draggedTreeGridRowElement = currentElement.parentElement;\n              this.draggedTreeGridRowHeight = this.draggedTreeGridRowElement.offsetHeight;\n            }\n          } else {\n            this.draggedTreeGridRowHeight = this.draggedTreeGridRowElement.offsetHeight;\n          }\n        }\n        var chartRowElement_1;\n        if (target) {\n          chartRowElement_1 = closest(target, 'tr.' + cls.chartRow);\n        }\n        if (chartRowElement_1) {\n          var droppedTreeGridRowElement = void 0;\n          if (this.parent.enableVirtualization) {\n            droppedTreeGridRowElement = this.parent.treeGrid.getRows().filter(function (data) {\n              return data.getAttribute('data-rowindex') === chartRowElement_1.getAttribute('data-rowindex');\n            })[0];\n          } else {\n            droppedTreeGridRowElement = this.parent.treeGrid.getRows()[parseInt(chartRowElement_1.getAttribute('data-rowindex'), 10)];\n          }\n          this.removeFirstBorder(droppedTreeGridRowElement);\n          this.removeLastBorder(droppedTreeGridRowElement);\n          if (!isNullOrUndefined(droppedTreeGridRowElement) && droppedTreeGridRowElement.getAttribute('data-uid') === this.draggedTreeGridRowElement.getAttribute('data-uid') || !parentsUntil(target, 'e-chart-rows-container')) {\n            this.parent.rowDragAndDropModule['dropPosition'] = 'Invalid';\n            this.addErrorElem();\n          }\n          var tObj = this.parent;\n          var rowTop = 0;\n          var toolHeight = tObj.toolbarModule ? this.parent.toolbarModule.element.offsetHeight : 0;\n          var positionOffSet = this.parent.getOffsetRect(tObj.element);\n          var contentHeight = tObj.treeGrid.getHeaderContent().offsetHeight + positionOffSet.top + toolHeight;\n          var scrollTop = tObj.treeGrid.getContent().firstElementChild.scrollTop;\n          if (!isNullOrUndefined(droppedTreeGridRowElement)) {\n            rowPositionHeight = droppedTreeGridRowElement.offsetTop - scrollTop;\n          }\n          if (this.parent.enableVirtualization) {\n            rowTop = this.parent.getOffsetRect(droppedTreeGridRowElement).top;\n          } else {\n            rowTop = rowPositionHeight + contentHeight;\n          }\n          var rowBottom = rowTop + this.draggedTreeGridRowHeight;\n          var difference = rowBottom - rowTop;\n          var divide = difference / 3;\n          var topRowSegment = rowTop + divide;\n          var middleRowSegment = topRowSegment + divide;\n          var bottomRowSegment = middleRowSegment + divide;\n          var posy = event.type === 'mousemove' ? event.pageY : !isNullOrUndefined(event['changedTouches']) ? event['changedTouches'][0].pageY : null;\n          var isTopSegment = posy <= topRowSegment;\n          var isMiddleRowSegment = posy > topRowSegment && posy <= middleRowSegment;\n          var isBottomRowSegment = posy > middleRowSegment && posy <= bottomRowSegment;\n          if (isTopSegment || isMiddleRowSegment || isBottomRowSegment) {\n            var rowElement = void 0;\n            if (this.parent.enableVirtualization) {\n              var index = this.parent.treeGrid.getRows().indexOf(droppedTreeGridRowElement);\n              rowElement = this.parent.getRowByIndex(index);\n            } else {\n              rowElement = this.parent.getRowByIndex(parseInt(droppedTreeGridRowElement.getAttribute('data-rowindex'), 10));\n            }\n            var rowIndex = getValue('rowIndex', rowElement);\n            var droppedTreeGridRecord = this.parent.flatData[rowIndex];\n            var isValid = true;\n            if (this.parent.viewType === 'ResourceView' && !this.taskBarEditRecord.hasChildRecords && !droppedTreeGridRecord.hasChildRecords && !isNullOrUndefined(droppedTreeGridRecord.parentItem) && this.taskBarEditRecord.parentItem.taskId === droppedTreeGridRecord.parentItem.taskId) {\n              isValid = false;\n            }\n            if (droppedTreeGridRecord) {\n              this.ensurePosition([this.taskBarEditRecord], droppedTreeGridRecord);\n            }\n            if (isValid) {\n              if (isTopSegment && this.parent.rowDragAndDropModule['dropPosition'] !== 'Invalid') {\n                this.parent.rowDragAndDropModule['dropPosition'] = 'above';\n                this.removeChildBorder();\n                this.removeErrorElem();\n                this.removetopOrBottomBorder();\n                this.topOrBottomBorder(rowElement);\n              }\n              if (isMiddleRowSegment && this.parent.rowDragAndDropModule['dropPosition'] !== 'Invalid') {\n                this.parent.rowDragAndDropModule['dropPosition'] = 'child';\n                this.removetopOrBottomBorder();\n                this.addRemoveClasses(rowElement.children, true, 'e-childborder');\n              }\n              if (isBottomRowSegment && this.parent.rowDragAndDropModule['dropPosition'] !== 'Invalid') {\n                this.parent.rowDragAndDropModule['dropPosition'] = 'below';\n                this.removetopOrBottomBorder();\n                this.removeErrorElem();\n                this.removeChildBorder();\n                this.removeFirstBorder(droppedTreeGridRowElement);\n                this.topOrBottomBorder(droppedTreeGridRowElement);\n              }\n            }\n          }\n        }\n      }\n      var args_1 = {\n        cancel: false,\n        requestType: 'taskbarediting',\n        taskBarEditAction: this.taskBarEditAction,\n        data: this.taskBarEditRecord\n      };\n      if (this.segmentIndex !== -1) {\n        args_1.requestType = 'mergeSegment';\n      }\n      this.parent.trigger('actionBegin', args_1, function (arg) {\n        if (args_1.taskBarEditAction === 'ConnectorPointRightDrag' || args_1.taskBarEditAction === 'ConnectorPointLeftDrag' || args_1.taskBarEditAction === 'LeftResizing' || args_1.taskBarEditAction === 'RightResizing' || args_1.taskBarEditAction === 'ProgressResizing' || args_1.taskBarEditAction === 'ChildDrag' || args_1.taskBarEditAction === 'ParentDrag' || args_1.taskBarEditAction === 'MilestoneDrag' || args_1.taskBarEditAction === 'ManualParentDrag' || args_1.taskBarEditAction === 'ParentResizing') {\n          _this.parent.showIndicator = false;\n          if (_this.parent.undoRedoModule && _this.parent['isUndoRedoItemPresent']('Edit')) {\n            if (_this.parent.undoRedoModule['redoEnabled']) {\n              _this.parent.undoRedoModule['disableRedo']();\n            }\n            var action = {};\n            if (_this.parent.undoRedoModule['getUndoCollection'].length === 0) {\n              _this.isDragged = true;\n              action['modifiedRecords'] = [];\n              action['action'] = args_1.taskBarEditAction;\n              _this.parent.undoRedoModule['createUndoCollection']();\n              _this.parent.undoRedoModule['getUndoCollection'][_this.parent.undoRedoModule['getUndoCollection'].length - 1] = action;\n              _this.parent.editModule['createArray'] = false;\n              _this.parent.undoRedoModule['changedRecords'] = [];\n            } else if (_this.parent.editModule['createArray']) {\n              _this.isDragged = true;\n              action['modifiedRecords'] = [];\n              action['action'] = args_1.taskBarEditAction;\n              _this.parent.undoRedoModule['createUndoCollection']();\n              _this.parent.undoRedoModule['getUndoCollection'][_this.parent.undoRedoModule['getUndoCollection'].length - 1] = action;\n              _this.parent.editModule['createArray'] = false;\n              _this.parent.undoRedoModule['changedRecords'] = [];\n            }\n          }\n        }\n        if (!isNullOrUndefined(_this.parent.loadingIndicator) && _this.parent.loadingIndicator.indicatorType === 'Shimmer' && _this.parent.showIndicator) {\n          _this.parent.showMaskRow();\n        } else if (_this.parent.showIndicator) {\n          _this.parent.showSpinner();\n        }\n        if (arg.cancel === false) {\n          _this.taskBarEditingAction(event, false);\n        }\n      });\n    } else if (!this.parent.isAdaptive && !this.taskBarEditAction) {\n      this.updateTaskBarEditElement(event);\n    }\n  };\n  /**\n   * Method to update taskbar editing action on mous move.\n   *\n   * @param {PointerEvent} e .\n   * @param {boolean} isMouseClick .\n   * @returns {void} .\n   * @private\n   */\n  TaskbarEdit.prototype.taskBarEditingAction = function (e, isMouseClick) {\n    var _this = this;\n    var args = {};\n    var recordIndex = this.parent.ganttChartModule.getIndexByTaskBar(this.taskBarEditElement);\n    if (this.taskBarEditRecord !== null) {\n      args.editingFields = this.taskBarEditRecord.ganttProperties;\n      args.data = this.taskBarEditRecord;\n      if (this.parent.viewType === 'ResourceView' && args.data.level === 0) {\n        return;\n      }\n      args.recordIndex = recordIndex;\n      args.taskBarEditAction = this.taskBarEditAction;\n      args.roundOffDuration = this.roundOffDuration;\n      args.cancel = false;\n      args.previousData = this.previousItem;\n      args.segmentIndex = this.segmentIndex;\n      this.roundOffDuration = args.roundOffDuration;\n      this.targetElement = args.target = closest(e.target, '.e-gantt-child-taskbar');\n      this.updateMouseMoveProperties(e);\n      if (!this.oldData) {\n        this.oldData = extend([], [], [this.taskBarEditRecord], true)[0];\n      }\n      var segmentIndex = this.segmentIndex !== -1 ? this.segmentIndex : null;\n      if (this.taskBarEditAction === 'ProgressResizing') {\n        this.mainElement = parentsUntil(this.taskBarEditElement, cls.taskBarMainContainer);\n        if (this.taskBarEditRecord.ganttProperties.segments && this.taskBarEditRecord.ganttProperties.segments.length > 0) {\n          segmentIndex = -1;\n          for (var i = 0; i < this.taskBarEditRecord.ganttProperties.segments.length; i++) {\n            var resizeGripper = document.getElementsByClassName('e-child-progress-resizer e-progress-resize-gripper')[0]['style'];\n            var currentWidth = this.parent.enableRtl ? parseInt(resizeGripper['right'], 10) - 8 : parseInt(resizeGripper['left'], 10) + 8;\n            if (currentWidth < this.taskBarEditRecord.ganttProperties.segments[i].width && i === 0) {\n              segmentIndex = i;\n            }\n            if (this.taskBarEditRecord.ganttProperties.segments[i + 1] && currentWidth < this.taskBarEditRecord.ganttProperties.segments[i + 1].width + this.taskBarEditRecord.ganttProperties.segments[i + 1].left && currentWidth > this.taskBarEditRecord.ganttProperties.segments[i + 1].left) {\n              segmentIndex = i + 1;\n            }\n          }\n        }\n        this.performProgressResize(e, segmentIndex);\n      } else if (this.taskBarEditAction === 'LeftResizing') {\n        this.enableLeftResizing(e);\n      } else if (this.taskBarEditAction === 'RightResizing' || this.taskBarEditAction === 'ParentResizing') {\n        this.enableRightResizing(e);\n      } else if (this.taskBarEditAction === 'ParentDrag' || this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'MilestoneDrag' || this.taskBarEditAction === 'ManualParentDrag') {\n        this.enableDragging(e);\n      } else if (this.taskBarEditAction === 'ConnectorPointLeftDrag' || this.taskBarEditAction === 'ConnectorPointRightDrag') {\n        this.updateConnectorLineSecondProperties(e);\n        this.triggerDependencyEvent(e);\n        this.drawFalseLine();\n      }\n      if (this.parent.allowTaskbarDragAndDrop && this.taskBarEditAction !== 'LeftResizing' && this.taskBarEditAction !== 'RightResizing' && this.taskBarEditAction !== 'ProgressResizing') {\n        var parentClientRect = this.parent.getOffsetRect(this.parent.chartPane);\n        var coordinates = this.getCoordinate(e);\n        var position = {\n          top: coordinates.pageY,\n          left: coordinates.pageX\n        };\n        var pos = {\n          left: Math.abs(position.left - parentClientRect.left),\n          top: position.top - parentClientRect.top\n        };\n        if (this.parent.viewType === 'ResourceView' && this.parent.enableMultiTaskbar) {\n          var parentRecord = this.parent.getRecordByID(this.taskBarEditRecord.parentItem.taskId);\n          if (!this.parent.allowTaskbarOverlap && this.taskBarEditRecord.parentItem && !parentRecord.expanded) {\n            var reduceHeight = 0;\n            if (parseInt(this.editElement['style'].marginTop, 10) > this.parent.rowHeight) {\n              for (var i = 0; i < parentRecord.childRecords.length; i++) {\n                if (parentRecord.childRecords[i].ganttProperties.taskId !== this.taskBarEditRecord.ganttProperties.taskId) {\n                  reduceHeight = reduceHeight + this.parent.rowHeight;\n                } else {\n                  break;\n                }\n              }\n              pos.top = pos.top - reduceHeight;\n            }\n          }\n        }\n        this.topValue = pos.top;\n        var xValue = void 0;\n        if (e.type === 'touchmove' || e.type === 'touchstart' || e.type === 'touchend') {\n          xValue = e['changedTouches'][0].pageX;\n        } else {\n          xValue = e.pageX;\n        }\n        if (this.parent.enableRtl) {\n          this.leftValue = pos.left - Math.abs(xValue - this.parent.getOffsetRect(this.taskBarEditElement).left) - (this.previousLeftValue !== 0 ? xValue - this.previousLeftValue : 0);\n        } else {\n          this.leftValue = pos.left - (xValue - this.parent.getOffsetRect(this.taskBarEditElement).left) + (this.previousLeftValue !== 0 ? xValue - this.previousLeftValue : 0);\n        }\n        if (this.previousLeftValue === 0) {\n          if (!this.parent.enableRtl) {\n            this.leftValue = this.leftValue - this.parent.ganttChartModule.scrollObject.previousScroll.left;\n          } else {\n            this.leftValue = this.leftValue - this.parent.ganttChartModule.scrollObject.previousScroll.left;\n            if (this.parent.ganttChartModule.scrollObject.previousScroll.left === 0) {\n              this.leftValue = this.leftValue - 60;\n            }\n          }\n        }\n        this.previousLeftValue = xValue;\n      } else {\n        this.leftValue = this.taskBarEditRecord.ganttProperties.left;\n      }\n      this.currentSegmentIndex = segmentIndex;\n      this.setItemPosition();\n      this.updateEditedItem();\n      this.tooltipValue = e.type === 'touchmove' || e.type === 'touchstart' || e.type === 'touchend' ? e['changedTouches'][0].pageX : e.pageX;\n      if (!this.taskBarEditRecord.ganttProperties.segments || segmentIndex !== -1) {\n        this.editTooltip.updateTooltip(segmentIndex);\n      }\n      if (isMouseClick) {\n        this.taskBarEditedAction(e);\n      }\n      this.parent.trigger('taskbarEditing', args, function (arg) {\n        if (arg.cancel && _this.taskBarEditRecord !== null) {\n          _this.tapPointOnFocus = false;\n          merge(_this.taskBarEditRecord.ganttProperties, arg.previousData);\n        }\n      });\n    }\n  };\n  /**\n   * To update property while perform mouse move.\n   *\n   * @param {PointerEvent} event .\n   * @returns {void} .\n   * @private\n   */\n  TaskbarEdit.prototype.updateMouseMoveProperties = function (event) {\n    var containerPosition = this.parent.getOffsetRect(this.parent.ganttChartModule.chartBodyContainer);\n    var e = this.getCoordinate(event);\n    var parentWithZoomStyle = this.parent.element.closest('[style*=\"zoom\"]');\n    if (parentWithZoomStyle) {\n      var zoom1 = parseFloat(getComputedStyle(parentWithZoomStyle).zoom);\n      e.pageX = e.pageX / zoom1;\n      e.pageY = e.pageY / zoom1;\n    }\n    if (e.pageX || e.pageY) {\n      if (this.parent.enableRtl) {\n        this.mouseMoveX = Math.abs(e.pageX - (containerPosition.left + Math.abs(this.parent.ganttChartModule.scrollObject.previousScroll.left)));\n      } else {\n        this.mouseMoveX = e.pageX - containerPosition.left + this.parent.ganttChartModule.scrollObject.previousScroll.left;\n      }\n      this.tooltipPositionX = this.mouseMoveX;\n      this.mouseMoveY = e.pageY - containerPosition.top + this.parent.ganttChartModule.scrollObject.previousScroll.top;\n    }\n    var isConnectorLineEdit = this.taskBarEditAction === 'ConnectorPointLeftDrag' || this.taskBarEditAction === 'ConnectorPointRightDrag' ? true : false;\n    if ((this.taskBarEditRecord.ganttProperties.width > 3 || this.taskBarEditRecord.ganttProperties.isMilestone) && !(this.taskBarEditAction === 'ProgressResizing' && (this.taskBarEditRecord.ganttProperties.progress === 0 || this.taskBarEditRecord.ganttProperties.progress === 100)) || isConnectorLineEdit) {\n      var mouseX = 0;\n      if (this.parent.enableRtl) {\n        mouseX = Math.abs(Math.abs(this.mouseMoveX) - Math.abs(this.parent.ganttChartModule.scrollObject.previousScroll.left) + containerPosition.left);\n      } else {\n        mouseX = this.mouseMoveX - this.parent.ganttChartModule.scrollObject.previousScroll.left + containerPosition.left;\n      }\n      var mouseY = this.mouseMoveY - this.parent.ganttChartModule.scrollObject.previousScroll.top + containerPosition.top;\n      if (mouseX + 20 > containerPosition.left + this.parent.ganttChartModule.chartBodyContainer.offsetWidth) {\n        this.timerCount = this.parent.ganttChartModule.scrollObject.previousScroll.left;\n        this.startScrollTimer('right');\n      } else if (mouseX + 40 > containerPosition.left + this.parent.ganttChartModule.chartBodyContainer.offsetWidth && this.parent.enableRtl && this.parent.ganttChartModule.scrollObject.previousScroll.left === 0) {\n        this.parent.ganttChartModule.scrollObject.previousScroll.left = -1;\n        this.timerCount = this.parent.ganttChartModule.scrollObject.previousScroll.left;\n        this.startScrollTimer('right');\n      } else if (mouseX - 20 < containerPosition.left) {\n        this.timerCount = this.parent.ganttChartModule.scrollObject.previousScroll.left;\n        this.startScrollTimer('left');\n      } else if (mouseY + 80 > containerPosition.top + this.parent.ganttChartModule.chartBodyContainer.offsetHeight) {\n        this.timerCount = this.parent.ganttChartModule.scrollObject.previousScroll.top;\n        this.startScrollTimer('bottom');\n      } else if (mouseY - 20 < containerPosition.top) {\n        this.timerCount = this.parent.ganttChartModule.scrollObject.previousScroll.top;\n        this.startScrollTimer('top');\n      } else {\n        this.stopScrollTimer();\n      }\n    } else {\n      this.stopScrollTimer();\n    }\n  };\n  /**\n   * To start the scroll timer.\n   *\n   * @param {string} direction .\n   * @returns {void} .\n   * @private\n   */\n  TaskbarEdit.prototype.startScrollTimer = function (direction) {\n    var _this = this;\n    this.stopScrollTimer();\n    var leftSign = 0;\n    this.scrollTimer = window.setInterval(function () {\n      if (Math.sign(_this.timerCount) === -1) {\n        leftSign = -1;\n        _this.timerCount = Math.abs(_this.timerCount);\n      }\n      if (direction === 'right') {\n        var timelineWidth = _this.parent.enableTimelineVirtualization ? _this.parent.timelineModule.wholeTimelineWidth : _this.parent.timelineModule.totalTimelineWidth;\n        _this.timerCount = _this.timerCount + 1 >= timelineWidth ? timelineWidth : _this.timerCount + 1;\n      } else if (direction === 'bottom') {\n        _this.timerCount = _this.timerCount + 1;\n      } else {\n        _this.timerCount = _this.timerCount - 1 < 0 ? 0 : _this.timerCount - 1;\n      }\n      if (direction === 'bottom' || direction === 'top') {\n        _this.parent.ganttChartModule.scrollObject.setScrollTop(_this.timerCount);\n      } else {\n        _this.parent.ganttChartModule.scrollObject.setScrollLeft(_this.timerCount, leftSign);\n      }\n      if (_this.taskBarEditAction === 'ConnectorPointLeftDrag' || _this.taskBarEditAction === 'ConnectorPointRightDrag') {\n        _this.drawFalseLine();\n      }\n    }, 0);\n  };\n  /**\n   * To stop the scroll timer.\n   *\n   * @returns {void} .\n   * @private\n   */\n  TaskbarEdit.prototype.stopScrollTimer = function () {\n    window.clearInterval(this.scrollTimer);\n    this.scrollTimer = null;\n  };\n  /**\n   * To update left and width while perform taskbar drag operation.\n   *\n   * @param {PointerEvent} e .\n   * @returns {void} .\n   * @private\n   */\n  // eslint-disable-next-line\n  TaskbarEdit.prototype.enableDragging = function (e) {\n    var item = this.taskBarEditRecord.ganttProperties;\n    var timelineWidth = this.parent.enableTimelineVirtualization ? this.parent.timelineModule.wholeTimelineWidth : this.parent.timelineModule.totalTimelineWidth;\n    var differenceWidth = 0;\n    if (this.taskBarEditElement.classList.contains('e-segmented-taskbar') && !this.taskBarEditElement.classList.contains('e-segment-first')) {\n      var segments = this.taskBarEditRecord.ganttProperties.segments.map(function (e) {\n        return __assign({}, e);\n      });\n      var segment = segments[this.segmentIndex];\n      if (this.mouseDownX > this.mouseMoveX) {\n        differenceWidth = isNullOrUndefined(this.previousMouseMove) ? this.mouseDownX - this.mouseMoveX : this.previousMouseMove - this.mouseMoveX;\n        this.previousMouseMove = this.mouseMoveX;\n        segment.left = segment.left - differenceWidth;\n      } else {\n        differenceWidth = isNullOrUndefined(this.previousMouseMove) ? this.mouseMoveX - this.mouseDownX : this.mouseMoveX - this.previousMouseMove;\n        this.previousMouseMove = this.mouseMoveX;\n        segment.left = segment.left + differenceWidth;\n      }\n      var previousSegment = segments[this.segmentIndex - 1];\n      var nextSegment = segments[this.segmentIndex + 1];\n      var left = void 0;\n      if (this.taskBarEditElement.classList.contains('e-segment-inprogress')) {\n        left = segment.left < previousSegment.left + previousSegment.width ? previousSegment.left + previousSegment.width : segment.width + segment.left > nextSegment.left ? nextSegment.left - segment.width : segment.left;\n      } else {\n        left = segment.left < previousSegment.left + previousSegment.width ? previousSegment.left + previousSegment.width : item.left + segment.width + segment.left >= timelineWidth ? timelineWidth - segment.width : segment.left;\n      }\n      segment.left = left;\n      this.parent.setRecordValue('segments', segments, item, true);\n      this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n    } else {\n      if (this.mouseDownX > this.mouseMoveX) {\n        differenceWidth = this.mouseDownX - this.mouseMoveX;\n        if (differenceWidth > 0) {\n          this.parent.setRecordValue('left', this.previousItem.left - differenceWidth, item, true);\n        }\n      } else {\n        differenceWidth = this.mouseMoveX - this.mouseDownX;\n        this.parent.setRecordValue('left', this.previousItem.left + differenceWidth, item, true);\n      }\n      var left = item.left < 0 ? 0 : item.left + item.width >= timelineWidth ? timelineWidth - item.width : item.left;\n      this.parent.setRecordValue('left', left, item, true);\n    }\n  };\n  // eslint-disable-next-line\n  TaskbarEdit.prototype.validateProgressWidth = function (item, progressWidth, totalTaskWidth) {\n    var reduceWidth = 0;\n    if (this.currentSegmentIndex !== -1 && item.segments) {\n      var startIndex = this.currentSegmentIndex >= this.segmentIndex ? 0 : this.currentSegmentIndex !== 0 ? this.currentSegmentIndex : -1;\n      var endIndex = this.currentSegmentIndex >= this.segmentIndex ? this.currentSegmentIndex : this.segmentIndex;\n      if (startIndex !== -1) {\n        for (var i = startIndex; i < endIndex; i++) {\n          reduceWidth = item.segments[i + 1].left - (item.segments[i].left + item.segments[i].width);\n          progressWidth = progressWidth - reduceWidth;\n        }\n      }\n    }\n    if (item.segments && item.segments.length > 0) {\n      totalTaskWidth = this.splitTasksDuration(item.segments) * this.parent.perDayWidth;\n    }\n    return {\n      progressWidth: progressWidth,\n      totalTaskWidth: totalTaskWidth\n    };\n  };\n  /**\n   * To update left and width while perform progress resize operation.\n   *\n   * @param {PointerEvent} e .\n   * @param {number} segmentIndex .\n   * @returns {void} .\n   * @private\n   */\n  TaskbarEdit.prototype.performProgressResize = function (e, segmentIndex) {\n    var item = this.taskBarEditRecord.ganttProperties;\n    var diffrenceWidth = 0;\n    var prevProgress = item.progressWidth;\n    if (this.mouseDownX > this.mouseMoveX) {\n      if (this.mouseMoveX > item.left && this.mouseMoveX < item.left + item.width && item.left > 0) {\n        diffrenceWidth = this.mouseMoveX - item.left;\n        this.parent.setRecordValue('progressWidth', diffrenceWidth, item, true);\n      } else {\n        if (this.mouseMoveX >= item.left + item.width) {\n          this.parent.setRecordValue('progressWidth', item.width, item, true);\n        } else {\n          this.parent.setRecordValue('progressWidth', 0, item, true);\n        }\n      }\n    } else {\n      if (this.mouseMoveX > item.left && this.mouseMoveX < item.left + item.width) {\n        diffrenceWidth = this.mouseMoveX - item.left;\n        this.parent.setRecordValue('progressWidth', diffrenceWidth, item, true);\n      } else {\n        if (this.mouseMoveX <= item.left) {\n          this.parent.setRecordValue('progressWidth', 0, item, true);\n        } else {\n          this.parent.setRecordValue('progressWidth', item.width, item, true);\n        }\n      }\n    }\n    var widthValue = item.progressWidth > item.width ? item.width : item.progressWidth;\n    widthValue = item.progressWidth < 0 ? 0 : item.progressWidth;\n    if (segmentIndex !== -1 || !segmentIndex) {\n      this.parent.setRecordValue('progressWidth', widthValue, item, true);\n    } else {\n      this.parent.setRecordValue('progressWidth', prevProgress, item, true);\n    }\n    this.progressValue = widthValue;\n    var diff = item.width - item.progressWidth;\n    if (diff <= 4) {\n      this.progressBorderRadius = 4 - diff;\n    } else {\n      this.progressBorderRadius = 0;\n    }\n  };\n  /**\n   * To update left and width while perform taskbar left resize operation.\n   *\n   * @param {PointerEvent} e .\n   * @returns {void} .\n   * @private\n   */\n  TaskbarEdit.prototype.enableLeftResizing = function (e) {\n    var item = this.taskBarEditRecord.ganttProperties;\n    var differenceWidth = 0;\n    if (this.taskBarEditElement.classList.contains('e-segmented-taskbar') && item.segments.length > 1) {\n      this.enableSplitTaskLeftResize(item);\n    } else {\n      if (this.mouseDownX > this.mouseMoveX) {\n        if (this.mouseMoveX < item.left + item.width) {\n          differenceWidth = this.mouseDownX - this.mouseMoveX;\n          if (item.left > 0) {\n            this.parent.setRecordValue('left', this.previousItem.left - differenceWidth, item, true);\n            this.parent.setRecordValue('width', this.previousItem.width + differenceWidth, item, true);\n          }\n        } else {\n          if (this.mouseMoveX > item.left + item.width) {\n            differenceWidth = this.mouseDownX - this.mouseMoveX;\n            this.parent.setRecordValue('left', this.previousItem.left - differenceWidth, item, true);\n            this.parent.setRecordValue('width', 3, item, true);\n          }\n        }\n      } else {\n        if (this.mouseMoveX < item.left + item.width) {\n          differenceWidth = this.mouseMoveX - this.mouseDownX;\n          if (item.left < item.left + item.width && this.previousItem.left + differenceWidth <= this.previousItem.left + this.previousItem.width) {\n            this.parent.setRecordValue('left', this.previousItem.left + differenceWidth, item, true);\n            this.parent.setRecordValue('width', this.previousItem.width - differenceWidth, item, true);\n          }\n        } else {\n          differenceWidth = this.mouseMoveX - this.mouseDownX;\n          this.parent.setRecordValue('left', this.previousItem.left + differenceWidth, item, true);\n          this.parent.setRecordValue('width', 3, item, true);\n        }\n      }\n      if (item.segments && item.segments.length === 1) {\n        item.segments[0].width = item.width;\n      }\n      this.updateEditPosition(e, item);\n      this.parent.setRecordValue('left', this.previousItem.left + this.previousItem.width - item.width, item, true);\n    }\n  };\n  TaskbarEdit.prototype.enableSplitTaskLeftResize = function (item) {\n    var segments = this.taskBarEditRecord.ganttProperties.segments.map(function (e) {\n      return __assign({}, e);\n    });\n    var segment = segments[this.segmentIndex];\n    var differenceWidth = 0;\n    //when decrease the left and increase the width\n    if (this.mouseDownX > this.mouseMoveX) {\n      if (this.mouseMoveX < item.left + segment.width + segment.left) {\n        differenceWidth = isNullOrUndefined(this.previousMouseMove) ? this.mouseDownX - this.mouseMoveX : this.previousMouseMove - this.mouseMoveX;\n        this.previousMouseMove = this.mouseMoveX;\n        // when resize other than 0th segment\n        if (segment.left > 0) {\n          segment.left = segment.left - differenceWidth;\n          segment.width = segment.width + differenceWidth;\n          if (this.segmentIndex !== 0) {\n            var previousSegment = segments[this.segmentIndex - 1];\n            if (item.left + segment.left < item.left + previousSegment.left + previousSegment.width) {\n              var difference = item.left + previousSegment.left + previousSegment.width - (item.left + segment.left);\n              segment.width -= difference;\n              segment.left = segment.left + difference;\n            }\n          }\n        } else if (segment.left <= 0 && this.segmentIndex === 0) {\n          this.parent.setRecordValue('left', item.left - differenceWidth, item, true);\n          this.parent.setRecordValue('width', item.width + differenceWidth, item, true);\n          segment.width = segment.width + differenceWidth;\n          for (var i = 1; i < item.segments.length; i++) {\n            var segment_1 = segments[i];\n            segment_1.left = segment_1.left + differenceWidth;\n          }\n        }\n      } else {\n        if (this.mouseMoveX > item.left + segment.width + segment.left) {\n          differenceWidth = isNullOrUndefined(this.previousMouseMove) ? this.mouseDownX - this.mouseMoveX : this.previousMouseMove - this.mouseMoveX;\n          this.previousMouseMove = this.mouseMoveX;\n          segment.left = segment.left - differenceWidth;\n          segment.width = this.parent.perDayWidth;\n        }\n      }\n    } else {\n      // when increase left value and decrease width of segment\n      if (this.mouseMoveX < item.left + segment.width + segment.left - this.parent.perDayWidth) {\n        differenceWidth = isNullOrUndefined(this.previousMouseMove) ? this.mouseMoveX - this.mouseDownX : this.mouseMoveX - this.previousMouseMove;\n        this.previousMouseMove = this.mouseMoveX;\n        // when decrease the first segment width\n        if (this.segmentIndex === 0 && segment.left <= 0) {\n          this.parent.setRecordValue('left', item.left + differenceWidth, item, true);\n          this.parent.setRecordValue('width', item.width - differenceWidth, item, true);\n          segment.width = segment.width - differenceWidth;\n          for (var i = 1; i < item.segments.length; i++) {\n            var segment_2 = segments[i];\n            segment_2.left = segment_2.left - differenceWidth;\n          }\n          // when decrease remaining segments\n        } else if (segment.left < segment.left + segment.width && segment.left + differenceWidth <= segment.left + segment.width) {\n          segment.left = segment.left + differenceWidth;\n          segment.width = segment.width - differenceWidth;\n        }\n        // when mouse move goes beyond one day width of task bar.\n      } else {\n        if (this.mouseMoveX < item.left + segment.left + segment.width) {\n          if (segment.width > this.parent.perDayWidth) {\n            differenceWidth = isNullOrUndefined(this.previousMouseMove) ? this.mouseMoveX - this.mouseDownX : this.mouseMoveX - this.previousMouseMove;\n            this.previousMouseMove = this.mouseMoveX;\n            var singleDayDifference = segment.width - differenceWidth < this.parent.perDayWidth ? this.parent.perDayWidth > segment.width ? this.parent.perDayWidth - segment.width : segment.width - this.parent.perDayWidth : 0;\n            differenceWidth -= singleDayDifference;\n            if (this.segmentIndex === 0) {\n              this.parent.setRecordValue('width', item.width - differenceWidth, item, true);\n              this.parent.setRecordValue('left', item.left + differenceWidth, item, true);\n              segment.width = segment.width - differenceWidth;\n              for (var i = 1; i < item.segments.length; i++) {\n                var segment_3 = segments[i];\n                segment_3.left = segment_3.left - differenceWidth;\n              }\n            } else {\n              segment.left = segment.left + differenceWidth;\n              segment.width = segment.width - differenceWidth;\n            }\n          }\n        }\n      }\n    }\n    this.parent.setRecordValue('segments', segments, item, true);\n    this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n  };\n  /**\n   * Update mouse position and edited item value\n   *\n   * @param {PointerEvent} e .\n   * @param {ITaskData} item .\n   * @returns {void} .\n   */\n  TaskbarEdit.prototype.updateEditPosition = function (e, item) {\n    this.updateIsMilestone(item);\n    this.parent.setRecordValue('progressWidth', this.parent.dataOperation.getProgressWidth(item.width, item.progress), item, true);\n  };\n  /**\n   *  To update milestone property.\n   *\n   * @param {ITaskData} item .\n   * @returns {void} .\n   * @private\n   */\n  TaskbarEdit.prototype.updateIsMilestone = function (item) {\n    if (item.width <= 3) {\n      this.parent.setRecordValue('width', 3, item, true);\n      this.parent.setRecordValue('isMilestone', true, item, true);\n      if (!isNullOrUndefined(this.taskBarEditRecord[this.parent.taskFields.milestone])) {\n        this.parent.setRecordValue(this.parent.taskFields.milestone, true, this.taskBarEditRecord, true);\n      }\n    } else {\n      this.parent.setRecordValue('width', item.width, item, true);\n      this.parent.setRecordValue('isMilestone', false, item, true);\n      if (!isNullOrUndefined(this.taskBarEditRecord[this.parent.taskFields.milestone])) {\n        this.parent.setRecordValue(this.parent.taskFields.milestone, false, this.taskBarEditRecord, true);\n      }\n    }\n  };\n  /**\n   * To update left and width while perform taskbar right resize operation.\n   *\n   * @param {PointerEvent} e .\n   * @returns {void} .\n   * @private\n   */\n  TaskbarEdit.prototype.enableRightResizing = function (e) {\n    var item = this.taskBarEditRecord.ganttProperties;\n    var differenceWidth = 0;\n    if (this.taskBarEditElement.classList.contains('e-segmented-taskbar') && item.segments.length > 1) {\n      var segments = this.taskBarEditRecord.ganttProperties.segments.map(function (e) {\n        return __assign({}, e);\n      });\n      var segment = segments[this.segmentIndex];\n      if (this.mouseDownX > this.mouseMoveX) {\n        if (this.mouseMoveX > item.left + segment.left && this.mouseDownX - this.mouseMoveX > 3) {\n          differenceWidth = isNullOrUndefined(this.previousMouseMove) ? this.mouseDownX - this.mouseMoveX : this.previousMouseMove - this.mouseMoveX;\n          this.previousMouseMove = this.mouseMoveX;\n          segment.width = segment.width - differenceWidth;\n        } else {\n          if (this.mouseMoveX < item.left + segment.left) {\n            var segmentWidth = this.parent.timelineModule.isSingleTier && (this.parent.timelineModule.customTimelineSettings.bottomTier.unit === 'Hour' || this.parent.timelineModule.customTimelineSettings.topTier.unit === 'Hour' || this.parent.timelineModule.customTimelineSettings.bottomTier.unit === 'Minutes' || this.parent.timelineModule.customTimelineSettings.topTier.unit === 'Minutes') || this.parent.timelineModule.customTimelineSettings.bottomTier.unit === 'Hour' || this.parent.timelineModule.customTimelineSettings.bottomTier.unit === 'Minutes' ? this.parent.timelineModule.customTimelineSettings.timelineUnitSize : this.parent.perDayWidth;\n            segment.width = segmentWidth;\n          }\n        }\n      } else {\n        if (this.mouseMoveX > segment.left) {\n          differenceWidth = isNullOrUndefined(this.previousMouseMove) ? this.mouseMoveX - this.mouseDownX : this.mouseMoveX - this.previousMouseMove;\n          this.previousMouseMove = this.mouseMoveX;\n          segment.width = segment.width + differenceWidth;\n        }\n      }\n      var width = void 0;\n      var nextSegment = this.segmentIndex !== segments.length - 1 ? segments[this.segmentIndex + 1] : null;\n      if (!isNullOrUndefined(nextSegment)) {\n        if (!this.taskBarEditElement.classList.contains('e-segment-last')) {\n          width = segment.left + segment.width > nextSegment.left ? nextSegment.left - segment.left : segment.width;\n        }\n        segment.width = width;\n      }\n      if (this.segmentIndex === item.segments.length - 1) {\n        if (this.segmentIndex === 0) {\n          this.parent.setRecordValue('width', segment.width, item, true);\n        }\n      }\n      this.parent.setRecordValue('segments', segments, item, true);\n      this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n    } else {\n      if (this.mouseDownX > this.mouseMoveX) {\n        if (this.mouseMoveX > item.left && this.mouseDownX - this.mouseMoveX > 3) {\n          differenceWidth = this.mouseDownX - this.mouseMoveX;\n          this.parent.setRecordValue('width', this.previousItem.width - differenceWidth, item, true);\n        } else {\n          if (this.mouseMoveX < item.left) {\n            this.parent.setRecordValue('width', 3, item, true);\n          }\n        }\n      } else {\n        if (this.mouseMoveX > item.left) {\n          differenceWidth = this.mouseMoveX - this.mouseDownX;\n          this.parent.setRecordValue('width', this.previousItem.width + differenceWidth, item, true);\n        }\n      }\n      if (item.segments && item.segments.length === 1) {\n        item.segments[0].width = item.width;\n      }\n      this.updateEditPosition(e, item);\n    }\n  };\n  /**\n   * To updated startDate and endDate while perform taskbar edit operation.\n   *\n   * @returns {void} .\n   * @private\n   */\n  TaskbarEdit.prototype.updateEditedItem = function () {\n    var item = this.taskBarEditRecord.ganttProperties;\n    var left;\n    var projectStartDate;\n    var endDate;\n    var startDate;\n    switch (this.taskBarEditAction) {\n      case 'ProgressResizing':\n        {\n          var progressWidth = item.progressWidth;\n          var totalTaskWidth = item.width;\n          var updatedValues = this.validateProgressWidth(item, progressWidth, totalTaskWidth);\n          this.parent.setRecordValue('progress', this.getProgressPercent(updatedValues.totalTaskWidth, updatedValues.progressWidth), item, true);\n          break;\n        }\n      case 'LeftResizing':\n        if (this.segmentIndex === -1) {\n          left = this.getRoundOffStartLeft(item, this.roundOffDuration);\n          projectStartDate = this.getDateByLeft(left);\n          if (isNullOrUndefined(item.endDate)) {\n            endDate = this.parent.dateValidationModule.getValidEndDate(item);\n            this.parent.setRecordValue('endDate', endDate, item, true);\n          }\n          startDate = this.parent.dateValidationModule.checkStartDate(projectStartDate, item, null);\n          this.parent.setRecordValue('startDate', new Date(startDate.getTime()), item, true);\n          if (this.parent.dateValidationModule.compareDates(item.startDate, item.endDate) === 0 && isNullOrUndefined(item.isMilestone) && item.isMilestone === false && item.duration === 0) {\n            this.parent.setRecordValue('duration', 1, item, true);\n          }\n          if (item.isMilestone) {\n            this.parent.setRecordValue('endDate', new Date(startDate.getTime()), item, true);\n          }\n          this.parent.dateValidationModule.calculateDuration(this.taskBarEditRecord);\n          this.parent.editModule.updateResourceRelatedFields(this.taskBarEditRecord, 'duration');\n        } else {\n          this.updateSplitLeftResize(item);\n        }\n        break;\n      case 'RightResizing':\n      case 'ParentResizing':\n        if (this.segmentIndex === -1) {\n          left = this.getRoundOffEndLeft(item, this.roundOffDuration);\n          var tempEndDate = this.getDateByLeft(left);\n          if (isNullOrUndefined(item.startDate)) {\n            startDate = this.parent.dateValidationModule.getValidStartDate(item);\n            this.parent.setRecordValue('startDate', startDate, item, true);\n          }\n          var tempdate = isNullOrUndefined(item.startDate) ? startDate : item.startDate;\n          endDate = item.isMilestone ? tempdate : this.parent.dateValidationModule.checkEndDate(tempEndDate, this.taskBarEditRecord.ganttProperties);\n          this.parent.setRecordValue('endDate', new Date(endDate.getTime()), item, true);\n          this.parent.dateValidationModule.calculateDuration(this.taskBarEditRecord);\n          this.parent.editModule.updateResourceRelatedFields(this.taskBarEditRecord, 'duration');\n        } else {\n          this.updateSplitRightResizing(item);\n        }\n        break;\n      case 'ParentDrag':\n      case 'ChildDrag':\n      case 'MilestoneDrag':\n      case 'ManualParentDrag':\n        if (this.segmentIndex === -1 || this.segmentIndex === 0 || this.segmentIndex !== -1 && this.parent.allowTaskbarDragAndDrop) {\n          this.updateChildDrag(item);\n        } else {\n          this.setSplitTaskDrag(item);\n        }\n        break;\n    }\n    if (!isNullOrUndefined(this.taskBarEditRecord.ganttProperties.segments)) {\n      this.parent.chartRowsModule.updateSegment(this.taskBarEditRecord.ganttProperties.segments, this.taskBarEditRecord.ganttProperties.taskId);\n    }\n  };\n  TaskbarEdit.prototype.updateChildDrag = function (item) {\n    var left = this.getRoundOffStartLeft(item, this.roundOffDuration);\n    var projectStartDate = this.getDateByLeft(left, item.isMilestone, item);\n    var endDate;\n    if (this.segmentIndex === 0) {\n      this.parent.setRecordValue('startDate', this.parent.dateValidationModule.checkStartDate(projectStartDate, item, null), item, true);\n      item.segments[0].startDate = projectStartDate;\n      item.segments[0].endDate = this.parent.dataOperation.getEndDate(item.segments[0].startDate, item.segments[0].duration, item.durationUnit, item, false);\n      this.parent.setRecordValue('segments', item.segments, item, true);\n      this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n      this.parent.chartRowsModule.incrementSegments(item.segments, 0, this.taskBarEditRecord);\n      this.parent.setRecordValue('endDate', item.segments[item.segments.length - 1].endDate, item, true);\n      this.parent.setRecordValue('taskData.' + this.parent.taskFields.segments, item.segments, this.taskBarEditRecord, true);\n    } else {\n      if (!isNullOrUndefined(item.endDate) && isNullOrUndefined(item.startDate)) {\n        endDate = this.parent.dateValidationModule.checkStartDate(projectStartDate, item, null);\n        endDate = this.parent.dateValidationModule.checkEndDate(endDate, this.taskBarEditRecord.ganttProperties);\n        this.parent.setRecordValue('endDate', endDate, item, true);\n      } else {\n        this.parent.setRecordValue('startDate', this.parent.dateValidationModule.checkStartDate(projectStartDate, item, null), item, true);\n        if (!isNullOrUndefined(item.duration)) {\n          this.parent.dateValidationModule.calculateEndDate(this.taskBarEditRecord);\n        }\n      }\n    }\n  };\n  TaskbarEdit.prototype.updateSplitLeftResize = function (item) {\n    var segment = item.segments[this.segmentIndex];\n    var left = this.segmentIndex === 0 ? this.getRoundOffStartLeft(item, this.roundOffDuration) : this.getRoundOffStartLeft(segment, this.roundOffDuration);\n    var projectStartDate = this.getDateByLeft(left);\n    var startDate = this.parent.dataOperation.checkStartDate(projectStartDate, item, false);\n    var duration = this.parent.dataOperation.getDuration(startDate, segment.endDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n    segment.startDate = new Date(startDate.getTime());\n    segment.duration = duration;\n    this.parent.setRecordValue('duration', this.sumOfDuration(item.segments), item, true);\n    if (this.segmentIndex === 0) {\n      this.parent.setRecordValue('startDate', segment.startDate, item, true);\n    }\n    this.parent.editModule.updateResourceRelatedFields(this.taskBarEditRecord, 'duration');\n    if (!isNullOrUndefined(item.segments[this.segmentIndex - 1])) {\n      var segmentOffsetDuration = this.parent.dataOperation.getDuration(item.segments[this.segmentIndex - 1].endDate, item.segments[this.segmentIndex].startDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n      segment.offsetDuration = segmentOffsetDuration;\n    }\n    this.parent.setRecordValue('segments', item.segments, item, true);\n    this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n  };\n  TaskbarEdit.prototype.updateSplitRightResizing = function (item) {\n    var segment = item.segments[this.segmentIndex];\n    var left = this.getRoundOffEndLeft(item, this.roundOffDuration);\n    var tempEndDate = this.getDateByLeft(left);\n    var endDate = this.parent.dataOperation.checkEndDate(tempEndDate, item, false);\n    var duration = this.parent.dataOperation.getDuration(segment.startDate, endDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n    segment.endDate = new Date(endDate.getTime());\n    segment.duration = duration;\n    // update next segment offset duration\n    if (!isNullOrUndefined(item.segments[this.segmentIndex + 1])) {\n      var nextSegment = item.segments[this.segmentIndex + 1];\n      var segmentOffset = this.parent.dataOperation.getDuration(item.segments[this.segmentIndex].endDate, nextSegment.startDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n      segment.offsetDuration = segmentOffset;\n    }\n    this.parent.setRecordValue('segments', item.segments, item, true);\n    this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n    this.parent.setRecordValue('duration', this.sumOfDuration(item.segments), item, true);\n    this.parent.setRecordValue('endDate', item.segments[item.segments.length - 1].endDate, item, true);\n    this.parent.editModule.updateResourceRelatedFields(this.taskBarEditRecord, 'duration');\n  };\n  TaskbarEdit.prototype.sumOfDuration = function (segments) {\n    var duration = 0;\n    for (var i = 0; i < segments.length; i++) {\n      var segment = segments[i];\n      duration += segment.duration;\n    }\n    return duration;\n  };\n  TaskbarEdit.prototype.setSplitTaskDrag = function (item) {\n    var segment = item.segments[this.segmentIndex];\n    var left = this.getRoundOffStartLeft(segment, this.roundOffDuration);\n    var projectStartDate = this.getDateByLeft(left);\n    projectStartDate = this.parent.dateValidationModule.checkStartDate(projectStartDate, item, null);\n    segment.startDate = projectStartDate;\n    var segmentDate = this.parent.dataOperation.getEndDate(segment.startDate, segment.duration, item.durationUnit, item, false);\n    if (item.segments[this.segmentIndex + 1] && segmentDate.getTime() > item.segments[this.segmentIndex + 1].startDate.getTime()) {\n      segment.endDate = item.segments[this.segmentIndex + 1].startDate;\n    } else {\n      segment.endDate = segmentDate;\n    }\n    segment.duration = this.parent.dataOperation.getDuration(segment.startDate, segment.endDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n    this.parent.setRecordValue('duration', this.sumOfDuration(item.segments), item, true);\n    this.parent.setRecordValue('endDate', item.segments[item.segments.length - 1].endDate, item, true);\n    if (!isNullOrUndefined(this.parent.taskFields.endDate)) {\n      this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'endDate');\n    }\n    //set offset if previous record present\n    if (!isNullOrUndefined(item.segments[this.segmentIndex - 1])) {\n      var offsetDuration = this.parent.dataOperation.getDuration(item.segments[this.segmentIndex - 1].endDate, item.segments[this.segmentIndex].startDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n      if (segment.startDate.getDay() === 1 && offsetDuration === 0 && !this.parent.includeWeekend) {\n        offsetDuration = 1;\n      }\n      segment.offsetDuration = offsetDuration;\n    }\n    //set next record  offset if present\n    if (!isNullOrUndefined(item.segments[this.segmentIndex + 1])) {\n      var nextSegment = item.segments[this.segmentIndex + 1];\n      var offsetDuration = this.parent.dataOperation.getDuration(item.segments[this.segmentIndex].endDate, nextSegment.startDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n      if (nextSegment.startDate.getDay() === 1 && offsetDuration === 0 && !this.parent.includeWeekend) {\n        offsetDuration = 1;\n      }\n      nextSegment.offsetDuration = offsetDuration;\n    }\n    this.parent.setRecordValue('segments', item.segments, item, true);\n    this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n  };\n  /**\n   * To get roundoff enddate.\n   *\n   * @param {ITaskData} ganttRecord .\n   * @param {boolean} isRoundOff .\n   * @returns {number} .\n   * @private\n   */\n  TaskbarEdit.prototype.getRoundOffEndLeft = function (ganttRecord, isRoundOff) {\n    var tierMode = this.parent.timelineModule.bottomTier !== 'None' ? this.parent.timelineModule.bottomTier : this.parent.timelineModule.topTier;\n    var totalLeft = ganttRecord.width + ganttRecord.left;\n    if (this.segmentIndex !== -1 && ganttRecord.segments.length > 1) {\n      var segment = ganttRecord.segments[this.segmentIndex];\n      totalLeft = totalLeft - ganttRecord.width + segment.width + segment.left;\n    }\n    var remainingContribution = 1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(totalLeft), 1, 'Day') / (1000 * 60 * 60 * 24));\n    var remainingLeft = this.parent.perDayWidth - this.parent.perDayWidth / remainingContribution;\n    var positionValue = remainingLeft / this.parent.perDayWidth;\n    if (isRoundOff === undefined) {\n      isRoundOff = false;\n    }\n    /*Rounding the decimal value for week-month-year schedule mode*/\n    if (!isRoundOff) {\n      if (tierMode !== 'Hour' && tierMode !== 'Minutes') {\n        if (positionValue > 0.5) {\n          totalLeft = totalLeft - remainingLeft + this.parent.perDayWidth;\n        } else if (positionValue < 0.5) {\n          totalLeft = totalLeft - remainingLeft + this.parent.perDayWidth / 2;\n        }\n      }\n    } else if (isRoundOff) {\n      if (tierMode === 'Hour') {\n        var inHour = this.parent.perDayWidth / 24;\n        remainingContribution = 1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(totalLeft), 1, 'Hour') / (1000 * 60 * 60));\n        remainingLeft = this.parent.perDayWidth / 24 - this.parent.perDayWidth / 24 / remainingContribution;\n        if (remainingLeft !== 0) {\n          totalLeft = totalLeft - remainingLeft + inHour;\n        }\n      } else if (tierMode === 'Minutes') {\n        var inMinutes = this.parent.perDayWidth / (24 * 60);\n        remainingContribution = 1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(totalLeft), 1, 'Minutes') / (1000 * 60));\n        remainingLeft = this.parent.perDayWidth / (24 * 60) - this.parent.perDayWidth / (24 * 60) / remainingContribution;\n        if (remainingLeft !== 0) {\n          totalLeft = totalLeft - remainingLeft + inMinutes;\n        }\n      } else {\n        if (remainingLeft !== 0) {\n          totalLeft = totalLeft - remainingLeft + this.parent.perDayWidth;\n        }\n      }\n    }\n    return totalLeft;\n  };\n  /**\n   * To get roundoff startdate.\n   *\n   * @param {ITaskData | ITaskSegment} ganttRecord .\n   * @param {boolean} isRoundOff .\n   * @returns {number} .\n   * @private\n   */\n  TaskbarEdit.prototype.getRoundOffStartLeft = function (ganttRecord, isRoundOff) {\n    var left = isNullOrUndefined(ganttRecord) ? ganttRecord.left : ganttRecord.left;\n    if (this.segmentIndex !== -1 && isNullOrUndefined(ganttRecord.segments)) {\n      left = ganttRecord.left + this.taskBarEditRecord.ganttProperties.left;\n    }\n    var tierMode = this.parent.timelineModule.bottomTier !== 'None' ? this.parent.timelineModule.bottomTier : this.parent.timelineModule.topTier;\n    var remainingContribution = 1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(left, isNullOrUndefined(ganttRecord) ? ganttRecord.isMilestone : null, ganttRecord), 1, 'Day') / (1000 * 60 * 60 * 24));\n    var remainDays = this.parent.perDayWidth - this.parent.perDayWidth / remainingContribution;\n    var remainDaysInDecimal = remainDays / this.parent.perDayWidth;\n    if (isRoundOff === undefined) {\n      isRoundOff = false;\n    }\n    /*Rounding the decimal value for week-month-year schedule mode*/\n    if (!isRoundOff) {\n      if (tierMode !== 'Hour' && tierMode !== 'Minutes') {\n        if (remainDaysInDecimal <= 0.5) {\n          left = left - remainDays;\n        } else if (remainDaysInDecimal > 0.5) {\n          left = left - remainDays + this.parent.perDayWidth / 2;\n        }\n      }\n    } else if (isRoundOff) {\n      if (tierMode === 'Hour') {\n        remainingContribution = 1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(left), 1, 'Hour') / (1000 * 60 * 60));\n        remainDays = this.parent.perDayWidth / 24 - this.parent.perDayWidth / 24 / remainingContribution;\n        left = left - remainDays;\n      } else if (tierMode === 'Minutes') {\n        remainingContribution = 1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(left), 1, 'Minutes') / (1000 * 60));\n        remainDays = this.parent.perDayWidth / (24 * 60) - this.parent.perDayWidth / (24 * 60) / remainingContribution;\n        left = left - remainDays;\n      } else {\n        left = left - remainDays;\n      }\n    }\n    return left;\n  };\n  /**\n   * To get date by left value.\n   *\n   * @param {number} left .\n   * @param {boolean} isMilestone .\n   * @param {ITaskData} property .\n   * @returns {Date} .\n   * @private\n   */\n  TaskbarEdit.prototype.getDateByLeft = function (left, isMilestone, property) {\n    var pStartDate = new Date(this.parent.timelineModule.timelineStartDate.toString());\n    var milliSecondsPerPixel = 24 * 60 * 60 * 1000 / this.parent.perDayWidth;\n    pStartDate.setTime(pStartDate.getTime() + left * milliSecondsPerPixel);\n    /* To render the milestone in proper date while editing */\n    if (isMilestone && !isNullOrUndefined(property.predecessorsName) && property.predecessorsName !== '') {\n      //  pStartDate.setDate(pStartDate.getDate() -1);\n      var dayEndTime = this.parent['getCurrentDayEndTime'](property.isAutoSchedule ? property.autoEndDate : property.endDate);\n      this.parent.dateValidationModule.setTime(dayEndTime, pStartDate);\n      pStartDate = this.parent.dateValidationModule.checkStartDate(pStartDate, property, true);\n    }\n    var tierMode = this.parent.timelineModule.bottomTier !== 'None' ? this.parent.timelineModule.topTier : this.parent.timelineModule.bottomTier;\n    if (tierMode !== 'Hour' && tierMode !== 'Minutes') {\n      if (this.parent.isInDst(new Date(this.parent.timelineModule.timelineStartDate.toString())) && !this.parent.isInDst(pStartDate)) {\n        pStartDate.setTime(pStartDate.getTime() + 60 * 60 * 1000);\n      }\n      // else if (!this.parent.isInDst(new Date(this.parent.timelineModule.timelineStartDate.toString())) && this.parent.isInDst(pStartDate)) {\n      //     pStartDate.setTime(pStartDate.getTime() - (60 * 60 * 1000));\n      // }\n    }\n    return pStartDate;\n  };\n  /**\n   * To set item position.\n   *\n   * @returns {void} .\n   * @private\n   */\n  TaskbarEdit.prototype.setItemPosition = function () {\n    if (!isNullOrUndefined(this.editElement)) {\n      var currentElement = this.editElement.parentElement;\n      if (this.parent.allowTaskbarDragAndDrop && this.taskBarEditAction === 'ChildDrag') {\n        currentElement.style.position = null;\n      } else {\n        if (this.parent.enableTimelineVirtualization && this.parent.timelineModule.wholeTimelineWidth > this.parent.element.offsetWidth * 3) {\n          currentElement.style.setProperty('position', 'relative');\n        } else {\n          currentElement.style.setProperty('position', 'absolute');\n        }\n      }\n    }\n    var item = this.taskBarEditRecord.ganttProperties;\n    var position = this.parent.enableRtl ? 'right' : 'left';\n    var segment = !isNullOrUndefined(item.segments) ? item.segments[this.segmentIndex] : null;\n    var width = this.taskBarEditAction === 'MilestoneDrag' || item.isMilestone ? this.parent.chartRowsModule.milestoneHeight : item.width;\n    var rightResizer = this.parent.isAdaptive ? width - 2 : width - 10;\n    if (!isNullOrUndefined(segment)) {\n      rightResizer = this.parent.isAdaptive ? segment.width - 2 : segment.width - 10;\n    }\n    this.taskBarEditElement.style.setProperty('opacity', '.75');\n    var taskBarMainContainer;\n    if (this.parent.allowTaskbarDragAndDrop && !item.isAutoSchedule && this.taskBarEditRecord.hasChildRecords) {\n      taskBarMainContainer = this.taskBarEditElement;\n    } else {\n      taskBarMainContainer = !this.taskBarEditElement.classList.contains(cls.taskBarMainContainer) ? (this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'LeftResizing') && this.segmentIndex === 0 ? this.taskBarEditElement.parentElement : closest(this.taskBarEditElement, 'tr.' + cls.chartRow).querySelector('.' + cls.taskBarMainContainer) : this.taskBarEditElement;\n    }\n    var segmentedTaskBarContainer = this.taskBarEditElement.classList.contains('e-segmented-taskbar') || this.taskBarEditElement.querySelector('.e-segmented-taskbar') ? true : false;\n    var traceChildProgressBar = this.taskBarEditElement.querySelector('.' + cls.traceChildProgressBar);\n    var traceChildTaskBar = this.taskBarEditElement.querySelector('.' + cls.traceChildTaskBar);\n    var childProgressResizer = segmentedTaskBarContainer ? parentsUntil(this.taskBarEditElement, cls.taskBarMainContainer).querySelector('.' + cls.childProgressResizer) : this.taskBarEditElement.querySelector('.' + cls.childProgressResizer);\n    var taskBarRightResizer = this.taskBarEditElement.querySelector('.' + cls.taskBarRightResizer);\n    var traceParentTaskBar = this.taskBarEditElement.querySelector('.' + cls.traceParentTaskBar);\n    var traceParentProgressBar = this.taskBarEditElement.querySelector('.' + cls.traceParentProgressBar);\n    var traceConnectorPointRight = this.taskBarEditElement.querySelector('.' + cls.rightConnectorPointOuterDiv);\n    var segmentConnectorPointRight = taskBarMainContainer.querySelector('.' + cls.rightConnectorPointOuterDiv);\n    var manualParentTaskbar = this.taskBarEditElement;\n    var manualTaskbar = this.taskBarEditElement.querySelector('.' + cls.manualParentTaskBar);\n    var manualParentRight = this.taskBarEditElement.querySelector('.' + cls.manualParentRightResizer);\n    var manualParentLeft = this.taskBarEditElement.querySelector('.' + cls.manualParentLeftResizer);\n    var resizeLine = this.parent.ganttChartModule.chartBodyContainer.querySelector('.e-taskbar-resize-div');\n    if (this.parent.allowTaskbarDragAndDrop && !this.updatePosition) {\n      this.leftValue = this.leftValue + 30;\n      this.updatePosition = true;\n    }\n    if (this.taskBarEditAction !== 'ConnectorPointRightDrag' && this.taskBarEditAction !== 'ConnectorPointLeftDrag') {\n      if (this.taskBarEditAction !== 'ParentResizing' && this.taskBarEditAction !== 'ManualParentDrag') {\n        if (segmentedTaskBarContainer && !isNullOrUndefined(item.segments) && (this.taskBarEditAction === 'RightResizing' || this.segmentIndex !== 0)) {\n          if (!isNullOrUndefined(resizeLine)) {\n            if (!this.parent.allowTaskbarDragAndDrop || this.parent.allowTaskbarDragAndDrop && this.parent.rowDragAndDropModule && this.taskBarEditAction !== 'ChildDrag' && this.taskBarEditAction !== 'ParentDrag') {\n              resizeLine.style.width = segment.width + 'px';\n            }\n          }\n          this.taskBarEditElement.style.width = segment.width + 'px';\n          if (this.parent.enableRtl) {\n            this.taskBarEditElement.style.right = segment.left + 'px';\n          } else {\n            this.taskBarEditElement.style.left = segment.left + 'px';\n            if (!isNullOrUndefined(resizeLine)) {\n              if (!this.parent.allowTaskbarDragAndDrop || this.parent.allowTaskbarDragAndDrop && this.parent.rowDragAndDropModule && this.taskBarEditAction !== 'ChildDrag' && this.taskBarEditAction !== 'ParentDrag') {\n                resizeLine.style.left = segment.left + this.editElement.parentElement.offsetLeft + 'px';\n              }\n            }\n          }\n        }\n        taskBarMainContainer.style.setProperty(position, (this.parent.allowTaskbarDragAndDrop ? this.leftValue : item.left) + 'px');\n        taskBarMainContainer.style.width = width + 'px';\n        if (segmentedTaskBarContainer && segmentConnectorPointRight) {\n          segmentConnectorPointRight.style.left = (this.parent.isAdaptive ? width + 10 : width + 2) + 'px';\n        }\n        if (this.parent.allowTaskbarDragAndDrop && this.parent.rowDragAndDropModule && this.taskBarEditAction !== 'LeftResizing' && this.taskBarEditAction !== 'RightResizing' && this.taskBarEditAction !== 'ProgressResizing') {\n          var addTop = this.parent.taskbarHeight / 2;\n          taskBarMainContainer.style.setProperty('top', this.topValue + addTop + 'px');\n          taskBarMainContainer.style.zIndex = '4';\n        }\n        if (this.taskBarEditAction === 'LeftResizing' && this.segmentIndex === 0) {\n          this.taskBarEditElement.style.setProperty('opacity', '.75');\n          var parent_1 = this.taskBarEditElement.parentElement;\n          var segmentedTasks = parent_1.getElementsByClassName('e-segmented-taskbar');\n          for (var i = 0; i < item.segments.length; i++) {\n            var segment_4 = item.segments[i];\n            var segmentElement = segmentedTasks[i];\n            segmentElement.style.width = segment_4.width + 'px';\n            if (item.segments.length === 1) {\n              resizeLine.style.width = segment_4.width + 'px';\n              resizeLine.style.setProperty(position, item.left + 'px');\n            } else {\n              if (i === 0) {\n                resizeLine.style.width = segment_4.width + 'px';\n                resizeLine.style.setProperty(position, segment_4.left + item.left + 'px');\n              }\n              if (this.parent.enableRtl) {\n                segmentElement.style.right = segment_4.left + 'px';\n              } else {\n                segmentElement.style.left = segment_4.left + 'px';\n              }\n            }\n          }\n        }\n        if (this.taskBarEditAction === 'ChildDrag' && (this.segmentIndex === 0 || this.segmentIndex !== -1 && this.parent.allowTaskbarDragAndDrop)) {\n          resizeLine.style.width = width + 'px';\n          resizeLine.style.setProperty(position, item.left + 'px');\n          taskBarMainContainer.style.setProperty('opacity', '.75');\n        }\n      }\n      if (traceConnectorPointRight) {\n        if (this.parent.enableRtl) {\n          traceConnectorPointRight.style.left = (this.parent.isAdaptive ? width + 10 : width - 2) + 'px';\n        } else {\n          traceConnectorPointRight.style.left = (this.parent.isAdaptive ? width + 10 : width + 2) + 'px';\n        }\n      }\n      if (traceConnectorPointRight && this.taskBarEditAction === 'LeftResizing') {\n        traceConnectorPointRight.style.left = width - 2 + 'px';\n      }\n      if (childProgressResizer && traceChildProgressBar && (this.taskBarEditAction === 'LeftResizing' || this.taskBarEditAction === 'RightResizing' || this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'ParentDrag')) {\n        childProgressResizer.style.display = 'none';\n        traceChildProgressBar.style.display = 'none';\n      }\n      if (traceConnectorPointRight && this.taskBarEditAction === 'ProgressResizing') {\n        traceConnectorPointRight.style.display = 'none';\n      }\n      if (this.taskBarEditAction === 'MilestoneDrag' || item.isMilestone) {\n        taskBarMainContainer.style.setProperty(position, (this.parent.allowTaskbarDragAndDrop ? this.leftValue : item.left - width / 2) + 'px');\n        resizeLine.style.setProperty(position, item.left - width / 2 + 'px');\n        resizeLine.style.width = width + 'px';\n      } else if (this.taskBarEditAction === 'ProgressResizing') {\n        if (this.segmentIndex === -1) {\n          traceChildTaskBar.style.setProperty(position, item.left + item.progressWidth - 10 + 'px');\n          if (!isNullOrUndefined(traceChildProgressBar)) {\n            traceChildProgressBar.style.width = item.progressWidth + 'px';\n            traceChildProgressBar.style.borderBottomRightRadius = this.progressBorderRadius + 'px';\n            traceChildProgressBar.style.borderTopRightRadius = this.progressBorderRadius + 'px';\n            var width_1 = this.parent.enableRtl ? item.progressWidth + 8 : item.progressWidth - 8;\n            childProgressResizer.style.setProperty(position, width_1 + 'px');\n          }\n        } else {\n          this.updateSegmentProgress(this.taskBarEditRecord.ganttProperties);\n          var progressElements = taskBarMainContainer.querySelectorAll('.e-gantt-child-progressbar');\n          for (var count = 0; count < progressElements.length; count++) {\n            if (item.segments[count] && item.segments[count].progressWidth && this.segmentIndex !== count) {\n              progressElements[count]['style'].display = 'block';\n              progressElements[count].style.width = item.segments[count].progressWidth + 'px';\n            }\n          }\n          traceChildProgressBar.style.width = item.segments[this.segmentIndex].progressWidth + 'px';\n          traceChildProgressBar.style.borderBottomRightRadius = this.progressBorderRadius + 'px';\n          traceChildProgressBar.style.borderTopRightRadius = this.progressBorderRadius + 'px';\n          var width_2 = this.parent.enableRtl ? this.progressValue + 8 : this.progressValue - 8;\n          childProgressResizer.style.setProperty(position, width_2 + 'px');\n        }\n      } else if (this.taskBarEditAction === 'RightResizing' && !isNullOrUndefined(traceChildTaskBar)) {\n        resizeLine.style.width = width + 'px';\n        traceChildTaskBar.style.width = width + 'px';\n        if (!isNullOrUndefined(traceChildProgressBar)) {\n          traceChildProgressBar.style.width = item.progressWidth + 'px';\n          taskBarRightResizer.style.setProperty(position, rightResizer + 'px');\n          if (!isNullOrUndefined(childProgressResizer)) {\n            childProgressResizer.style.setProperty(position, item.progressWidth - 10 + 'px');\n          }\n        }\n      } else if (this.taskBarEditAction === 'ParentDrag') {\n        resizeLine.style.setProperty(position, item.left + 'px');\n        resizeLine.style.width = width + 'px';\n        resizeLine.style.width = item.width + 'px';\n        if (!isNullOrUndefined(traceParentTaskBar)) {\n          traceParentTaskBar.style.width = width + 'px';\n          resizeLine.style.width = item.width + 'px';\n        }\n        if (!isNullOrUndefined(traceChildProgressBar)) {\n          traceParentProgressBar.style.width = item.progressWidth + 'px';\n        }\n      } else if (this.taskBarEditAction === 'ParentResizing') {\n        resizeLine.style.width = item.width + 'px';\n        resizeLine.style.setProperty(position, item.left + 'px');\n        manualParentTaskbar.style.setProperty('width', item.width + 'px');\n        manualTaskbar.style.setProperty('width', item.width + 'px');\n        this.editElement.parentElement.style.setProperty('width', item.width + 'px');\n      } else if (this.taskBarEditAction === 'ManualParentDrag') {\n        resizeLine.style.width = item.width + 'px';\n        resizeLine.style.setProperty(position, item.left + 'px');\n        manualParentTaskbar.style.setProperty(position, item.left - item.autoLeft + 'px');\n        if (this.parent.allowTaskbarDragAndDrop) {\n          manualParentTaskbar.style.setProperty(position, this.leftValue + 'px');\n          manualParentTaskbar.style.setProperty('top', this.topValue + 'px');\n          manualParentTaskbar.style.zIndex = '4';\n        }\n      } else {\n        if (!isNullOrUndefined(traceChildTaskBar) && !segmentedTaskBarContainer) {\n          traceChildTaskBar.style.width = item.width + 'px';\n          traceChildTaskBar.style.left = item.left + 'px';\n          this.taskBarEditElement.style.width = item.width + 'px';\n          this.taskBarEditElement.style.left = (this.parent.allowTaskbarDragAndDrop ? this.leftValue : item.left) + 'px';\n          resizeLine.style.setProperty(position, item.left + 'px');\n          resizeLine.style.width = item.width + 'px';\n        }\n        if (!isNullOrUndefined(traceChildProgressBar)) {\n          taskBarRightResizer.style.setProperty(position, rightResizer + 'px');\n          traceChildProgressBar.style.width = item.progressWidth + 'px';\n          if (!isNullOrUndefined(childProgressResizer)) {\n            childProgressResizer.style.setProperty(position, item.progressWidth - 10 + 'px');\n          }\n        }\n        if (segmentedTaskBarContainer) {\n          taskBarRightResizer.style.setProperty(position, rightResizer + 'px');\n          traceChildProgressBar.style.width = segment.width + 'px';\n          if (!isNullOrUndefined(childProgressResizer)) {\n            childProgressResizer.style.setProperty(position, segment.width - 10 + 'px');\n          }\n        }\n      }\n    }\n    if (this.parent.allowTaskbarDragAndDrop && (this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'ParentDrag' || this.taskBarEditAction === 'ManualParentDrag' || this.taskBarEditAction === 'MilestoneDrag')) {\n      var resizeValue = this.parent.enableRtl ? parseInt(resizeLine.style.right, 10) : parseInt(resizeLine.style.left, 10);\n      if (this.parent.enableRtl) {\n        resizeLine.style.right = resizeValue - 30 + 'px';\n      } else {\n        resizeLine.style.left = resizeValue + 30 + 'px';\n      }\n    }\n  };\n  /**\n   * To handle mouse up event in chart\n   *\n   * @param {PointerEvent} e .\n   * @returns {void} .\n   * @private\n   */\n  TaskbarEdit.prototype.mouseUpHandler = function (e) {\n    var mouseDragged = this.isMouseDragged;\n    this.previousMouseMove = null;\n    this.editTooltip.showHideTaskbarEditTooltip(false, this.segmentIndex);\n    if (this.taskBarEditAction && this.isMouseDragged) {\n      if (!this.dragMouseLeave && this.taskBarEditedAction || this.parent.allowTaskbarDragAndDrop) {\n        if (e.type === 'touchmove' || e.type === 'touchstart' || e.type === 'touchend') {\n          var coordinates = this.getCoordinate(e);\n          this['droppedTarget'] = document.elementFromPoint(coordinates.pageX, coordinates.pageY);\n        } else {\n          if (this.taskBarEditRecord.hasChildRecords && !this.taskBarEditRecord.ganttProperties.isAutoSchedule) {\n            var taskbarPosition = this.parent.getOffsetRect(this.taskBarEditElement);\n            var left = !isNullOrUndefined(document.body.className) && document.body.className.includes('e-bigger') ? 12 : 0;\n            var pointerLeft = 3 + this.parent.chartRowsModule.connectorPointWidth + left;\n            var xValue = void 0;\n            if (this.parent.enableRtl) {\n              xValue = Math.abs(taskbarPosition.left + pointerLeft + 1);\n            } else {\n              xValue = Math.abs(Math.abs(taskbarPosition.left - pointerLeft - 1) - this.parent.ganttChartModule.scrollElement.scrollLeft);\n            }\n            this['droppedTarget'] = document.elementFromPoint(xValue, e.y);\n          } else {\n            this['droppedTarget'] = document.elementFromPoint(e.x, e.y);\n          }\n          if (this['droppedTarget'] && this['droppedTarget'].classList.contains('e-span-label')) {\n            this['droppedTarget'] = document.elementFromPoint(e.x + this['droppedTarget']['offsetWidth'], e.y);\n          }\n        }\n        this.previousIds = this.parent.ids.slice();\n        this.previousFlatData = this.parent.flatData.slice();\n        this.taskBarEditedAction(e);\n        this.isMouseDragged = false;\n      } else {\n        this.parent.isOnEdit = false;\n        this.cancelTaskbarEditActionInMouseLeave();\n        var criticalModule = this.parent.criticalPathModule;\n        if (this.parent.enableCriticalPath && criticalModule && criticalModule.criticalPathCollection) {\n          criticalModule.criticalConnectorLine(criticalModule.criticalPathCollection, criticalModule.detailPredecessorCollection, true, criticalModule.predecessorCollectionTaskIds);\n        }\n      }\n    }\n    if (this.parent.enableMultiTaskbar && !isNullOrUndefined(this.taskBarEditElement)) {\n      if (!isNullOrUndefined(this.taskBarEditElement.querySelector('.e-gantt-child-taskbar'))) {\n        if (this.taskBarEditElement.querySelector('.e-gantt-child-taskbar').classList.contains('e-collapsed-taskbar-drag')) {\n          removeClass([this.taskBarEditElement.querySelector('.e-gantt-child-taskbar')], 'e-collapsed-taskbar-drag');\n          this.taskBarEditElement.style.zIndex = this.prevZIndex;\n          this.prevZIndex = '';\n        }\n      }\n    }\n    if (!this.parent.isAdaptive || mouseDragged) {\n      this.initPublicProp();\n    }\n    this.stopScrollTimer();\n  };\n  /**\n   * To perform taskbar edit operation.\n   *\n   * @param {PointerEvent} event .\n   * @returns {void} .\n   * @private\n   */\n  TaskbarEdit.prototype.taskBarEditedAction = function (event) {\n    var args = {};\n    var x1 = this.mouseDownX;\n    var y1 = this.mouseDownY;\n    var item = this.taskBarEditRecord;\n    var recordIndex = this.parent.ganttChartModule.getIndexByTaskBar(this.taskBarEditElement);\n    var x2 = this.mouseMoveX;\n    var e = this.getCoordinate(event);\n    var resMouseY = e.pageY - this.parent.ganttChartModule.chartBodyContainer.offsetTop;\n    if ((this.taskBarEditAction === 'ConnectorPointLeftDrag' || this.taskBarEditAction === 'ConnectorPointRightDrag') && !this.drawPredecessor) {\n      this.dependencyCancel = true;\n    }\n    var parentRecord = [];\n    if ((this.taskBarEditAction === 'ConnectorPointLeftDrag' || this.taskBarEditAction === 'ConnectorPointRightDrag') && this.drawPredecessor && (!this.connectorSecondRecord.hasChildRecords || this.connectorSecondRecord.hasChildRecords && this.parent.allowParentDependency)) {\n      parentRecord.push(extend([], [], [this.taskBarEditRecord], true)[0]);\n      if (this.parent.undoRedoModule) {\n        this.parent.undoRedoModule['getUndoCollection'][this.parent.undoRedoModule['getUndoCollection'].length - 1]['connectedRecords'] = parentRecord;\n        if (this.parent.toolbarModule) {\n          this.parent.toolbarModule.enableItems([this.parent.controlId + '_undo'], true);\n        }\n      }\n      this.parent.connectorLineEditModule.updatePredecessor(this.connectorSecondRecord, this.finalPredecessor);\n    } else {\n      if (this.taskBarEditAction === 'ConnectorPointLeftDrag' || this.taskBarEditAction === 'ConnectorPointRightDrag' || this.oldData && JSON.stringify(item.ganttProperties) === JSON.stringify(this.oldData.ganttProperties)) {\n        if (this.parent.undoRedoModule && this.parent.undoRedoModule['getUndoCollection'].length > 0) {\n          this.parent['totalUndoAction']--;\n          this.parent.undoRedoModule['getUndoCollection'].splice(this.parent.undoRedoModule['getUndoCollection'].length - 1, 1);\n          if (this.parent.toolbarModule) {\n            this.parent.toolbarModule.enableItems([this.parent.controlId + '_undo'], false);\n          }\n        }\n      } else {\n        if (this.parent.undoRedoModule && this.parent.toolbarModule && this.parent.undoRedoModule['getUndoCollection'].length > 0) {\n          this.parent.toolbarModule.enableItems([this.parent.controlId + '_undo'], true);\n        }\n      }\n      if (x1 !== x2 || Math.abs(y1 - resMouseY) >= (this.parent.rowHeight - this.parent.taskbarHeight) / 2) {\n        if (item !== null) {\n          args.editingFields = item.ganttProperties;\n          args.data = item;\n          args.recordIndex = recordIndex;\n          args.previousData = this.previousItem;\n          args.taskBarEditAction = this.taskBarEditAction;\n          args.action = 'TaskbarEditing';\n          args.roundOffDuration = this.roundOffDuration;\n          args.target = this.targetElement;\n          this.taskbarEditedArgs = args;\n          this.taskbarEdited(args);\n        }\n      }\n    }\n    this.parent['isProjectDateUpdated'] = false;\n  };\n  /**\n   * To cancel the taskbar edt action.\n   *\n   * @returns {void} .\n   * @private\n   */\n  TaskbarEdit.prototype.cancelTaskbarEditActionInMouseLeave = function () {\n    this.parent.editModule.reUpdatePreviousRecords(true);\n  };\n  TaskbarEdit.prototype.updateSegmentProgress = function (taskData) {\n    var segments = taskData.segments;\n    var fixedWidth = true;\n    var totalTaskWidth = this.splitTasksDuration(segments) * this.parent.perDayWidth;\n    var progress = Math.ceil(taskData.progressWidth / totalTaskWidth * 100);\n    var totalProgressWidth = totalTaskWidth * progress / 100;\n    var tempWidth = totalProgressWidth;\n    for (var i = 0; i < segments.length; i++) {\n      var segment = segments[i];\n      if (i !== 0) {\n        if (segment.left <= tempWidth) {\n          var newWidth = tempWidth - segment.left;\n          totalProgressWidth = newWidth;\n        } else {\n          totalProgressWidth = 0;\n        }\n      }\n      delete segment.progressWidth;\n      if (totalProgressWidth > 0 && totalProgressWidth > segment.width) {\n        totalProgressWidth = totalProgressWidth - segment.width;\n        segment.progressWidth = segment.width;\n        segment.showProgress = false;\n      } else if (fixedWidth) {\n        segment.progressWidth = totalProgressWidth;\n        segment.showProgress = true;\n        totalProgressWidth = totalProgressWidth - segment.width;\n        fixedWidth = false;\n      }\n    }\n  };\n  /**\n   * To trigger taskbar edited event.\n   *\n   * @param {ITaskbarEditedEventArgs} arg .\n   * @returns {void} .\n   * @private\n   */\n  TaskbarEdit.prototype.taskbarEdited = function (arg) {\n    var args = extend({}, arg);\n    var ganttRecord = args.data;\n    var taskData = ganttRecord.ganttProperties;\n    var draggedRecIndex = this.parent.flatData.indexOf(ganttRecord);\n    if (this.parent.allowTaskbarDragAndDrop && this.dragMoveY > 0 && (this.parent.viewType === 'ResourceView' && !ganttRecord.hasChildRecords || this.parent.viewType === 'ProjectView')) {\n      if (this.parent.rowDragAndDropModule) {\n        var flatRecordCol = this.parent.currentViewData;\n        if (this.taskBarEditRecord.parentItem && flatRecordCol[this.taskBarEditRecord.parentItem.index] && this.parent.editedRecords.indexOf(flatRecordCol[this.taskBarEditRecord.parentItem.index]) === -1) {\n          this.parent.editedRecords.push(flatRecordCol[this.taskBarEditRecord.parentItem.index]);\n        }\n        this.removeChildBorder();\n        this.removeErrorElem();\n        this.removetopOrBottomBorder();\n        var droppedRecord = void 0;\n        this.updatePosition = false;\n        this.draggedRecordMarginTop = this.taskBarEditElement.style.marginTop;\n        var row = void 0;\n        if (!isNullOrUndefined(this.droppedTarget)) {\n          row = closest(this.droppedTarget, 'tr.' + cls.chartRow);\n        }\n        if (row) {\n          var recordIndex = parseInt(row.getAttribute('data-rowindex'), 10);\n          droppedRecord = this.parent.flatData[recordIndex];\n          var droppedParentRecordIndex = this.parent.getRootParent(droppedRecord, 0).index;\n          var draggedParentRecordIndex = this.parent.getRootParent(this.taskBarEditRecord, 0).index;\n          var e = {\n            cancel: false,\n            data: this.taskBarEditRecord,\n            fromIndex: this.taskBarEditRecord.index,\n            dropIndex: droppedRecord.index,\n            dropPosition: this.parent.rowDragAndDropModule['dropPosition'],\n            dropRecord: droppedRecord\n          };\n          this.parent.trigger('rowDrop', e);\n          if (!e['cancel'] && droppedRecord && recordIndex !== draggedRecIndex && (droppedParentRecordIndex !== draggedParentRecordIndex || this.taskBarEditRecord.hasChildRecords && droppedRecord.hasChildRecords || !this.taskBarEditRecord.hasChildRecords)) {\n            var droppedRecordIndex = this.parent.flatData.indexOf(droppedRecord);\n            var position = void 0;\n            if (this.parent.viewType === 'ProjectView' && !isNullOrUndefined(this.parent.rowDragAndDropModule['dropPosition'])) {\n              position = this.parent.rowDragAndDropModule['dropPosition'];\n            } else {\n              position = droppedRecord.hasChildRecords || !droppedRecord.parentItem && droppedRecord.childRecords.length === 0 ? 'child' : this.parent.rowDragAndDropModule['dropPosition'];\n            }\n            if (this.parent.rowDragAndDropModule) {\n              if (this.parent.viewType === 'ResourceView' && position === 'child' && !droppedRecord.hasChildRecords && !isNullOrUndefined(droppedRecord.parentItem)) {\n                position = 'Invalid';\n                this.parent.rowDragAndDropModule['dropPosition'] = 'Invalid';\n              }\n              if (position) {\n                this.parent.rowDragAndDropModule.reorderRows([draggedRecIndex], droppedRecordIndex, position);\n              }\n            }\n            this.dragMoveY = 0;\n          }\n        }\n        this.isClonedElement = false;\n      }\n      if (this.parent.showOverAllocation) {\n        this.parent.ganttChartModule.renderOverAllocationContainer();\n      }\n    }\n    if (args.taskBarEditAction === 'ProgressResizing') {\n      if (args.previousData.progress !== taskData.progress) {\n        var progressWidth = args.data.ganttProperties.progressWidth;\n        var totalTaskWidth = args.data.ganttProperties.width;\n        /* eslint-disable-next-line */\n        var updatedValues = this.validateProgressWidth(args.data.ganttProperties, progressWidth, totalTaskWidth);\n        this.parent.setRecordValue('progress', this.getProgressPercent(updatedValues.totalTaskWidth, updatedValues.progressWidth), taskData, true);\n        if (ganttRecord.parentItem) {\n          this.parent.editModule.updateParentProgress(ganttRecord.parentItem);\n        }\n        if (!isNullOrUndefined(taskData.segments)) {\n          this.updateSegmentProgress(taskData);\n        }\n      }\n    } else {\n      var segments = args.data.ganttProperties.segments;\n      if (!isNullOrUndefined(segments) && segments.length > 0 && (this.taskBarEditAction === 'LeftResizing' && this.segmentIndex !== 0 || this.taskBarEditAction === 'ChildDrag' && this.segmentIndex !== 0 || this.taskBarEditAction === 'RightResizing')) {\n        var segment = segments[this.segmentIndex];\n        var ganttProp = this.taskBarEditRecord.ganttProperties;\n        var previousSegment = this.segmentIndex === 0 ? null : segments[this.segmentIndex - 1];\n        var nextSegment = this.segmentIndex === segments.length - 1 ? null : segments[this.segmentIndex + 1];\n        var sDate = !isNullOrUndefined(nextSegment) ? new Date(nextSegment.startDate.getTime()) : this.parent.cloneProjectEndDate;\n        var eDate = !isNullOrUndefined(previousSegment) ? new Date(previousSegment.endDate.getTime()) : this.parent.cloneProjectStartDate;\n        var cStartDate = new Date(segment.startDate.getTime());\n        var cEndDate = new Date(segment.endDate.getTime());\n        if (this.parent.timelineModule.topTier === 'Day' && this.parent.timelineModule.bottomTier === 'Hour') {\n          cStartDate.setHours(cStartDate.getHours() - 1);\n          cEndDate.setHours(cEndDate.getHours() + 1);\n        } else {\n          cStartDate.setDate(cStartDate.getDate());\n          cEndDate.setDate(cEndDate.getDate());\n        }\n        if (this.parent.includeWeekend) {\n          sDate.setHours(0, 0, 0, 0);\n          eDate.setHours(0, 0, 0, 0);\n          cStartDate.setDate(cStartDate.getDate() - 1);\n          cEndDate.setDate(cEndDate.getDate() + 1);\n          cStartDate.setHours(0, 0, 0, 0);\n          cEndDate.setHours(0, 0, 0, 0);\n          if (cStartDate.getTime() <= eDate.getTime() && !isNullOrUndefined(previousSegment) && !isNullOrUndefined(segment)) {\n            var segmentIndexes = [{\n              'firstSegmentIndex': previousSegment.segmentIndex,\n              'secondSegmentIndex': segment.segmentIndex\n            }];\n            this.parent.chartRowsModule.mergeTask(ganttProp.taskId, segmentIndexes);\n          } else if (cEndDate.getTime() >= sDate.getTime() && this.segmentIndex !== segments.length - 1) {\n            var segmentIndexes = [{\n              'firstSegmentIndex': segment.segmentIndex,\n              'secondSegmentIndex': nextSegment.segmentIndex\n            }];\n            this.parent.chartRowsModule.mergeTask(ganttProp.taskId, segmentIndexes);\n          } else if (cEndDate.getTime() >= sDate.getTime()) {\n            segment.endDate.setDate(this.parent.cloneProjectEndDate.getDate() - 1);\n            segment.startDate = this.parent.dataOperation.getStartDate(segment.endDate, segment.duration, ganttProp.durationUnit, ganttProp);\n            // eslint-disable-next-line\n            for (var i = segments.length - 2; i >= 0; i++) {\n              var segment_5 = segments[i];\n              var eDate_1 = segment_5.endDate;\n              eDate_1.setDate(eDate_1.getDate() - segment_5.offsetDuration);\n              segment_5.endDate = eDate_1;\n              segment_5.startDate = this.parent.dataOperation.getStartDate(segment_5.endDate, segment_5.duration, ganttProp.durationUnit, ganttProp);\n            }\n          }\n        } else {\n          //Hits while dragging taskbar toward right & taskbar rightside resizing:\n          if (cEndDate.getTime() <= sDate.getTime() && this.segmentIndex !== segments.length - 1 && !this.parent.includeWeekend && this.parent.dataOperation.getDuration(this.parent.dataOperation.checkStartDate(cEndDate, taskData, false), sDate, taskData.durationUnit, false, false) === 0) {\n            var segmentIndexes = [{\n              'firstSegmentIndex': segment.segmentIndex,\n              'secondSegmentIndex': nextSegment.segmentIndex\n            }];\n            this.parent.chartRowsModule.mergeTask(ganttProp.taskId, segmentIndexes);\n          }\n          //Hits while dragging taskbar toward left & taskbar leftside resizing:\n          else if (cStartDate.getTime() >= eDate.getTime() && !isNullOrUndefined(previousSegment) && !isNullOrUndefined(segment) && !this.parent.includeWeekend && this.parent.dataOperation.getDuration(this.parent.dataOperation.checkEndDate(cStartDate, taskData, false), eDate, taskData.durationUnit, false, false) === 0) {\n            var segmentIndexes = [{\n              'firstSegmentIndex': previousSegment.segmentIndex,\n              'secondSegmentIndex': segment.segmentIndex\n            }];\n            this.parent.chartRowsModule.mergeTask(ganttProp.taskId, segmentIndexes);\n          }\n        }\n      }\n      this.parent.dataOperation.updateWidthLeft(args.data);\n    }\n    this.isDragged = false;\n    this.parent.dataOperation.updateTaskData(ganttRecord);\n    this.parent.editModule.initiateUpdateAction(args);\n  };\n  /**\n   * To get progress in percentage.\n   *\n   * @param {number} parentwidth .\n   * @param {number} progresswidth .\n   * @returns {number} .\n   * @private\n   */\n  TaskbarEdit.prototype.getProgressPercent = function (parentwidth, progresswidth) {\n    return Math.ceil(progresswidth / parentwidth * 100);\n  };\n  /**\n   * false line implementation.\n   *\n   * @returns {void} .\n   * @private\n   */\n  TaskbarEdit.prototype.drawFalseLine = function () {\n    var x1 = this.mouseDownX;\n    var y1 = this.mouseDownY;\n    var x2 = this.mouseMoveX;\n    var y2 = this.mouseMoveY;\n    var length = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n    var angle = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;\n    var transform = 'rotate(' + (this.parent.enableRtl ? -angle : angle) + 'deg)';\n    var left;\n    var width = 0;\n    if (!isNullOrUndefined(document.querySelectorAll('.e-chart-row')[0])) {\n      width = document.querySelectorAll('.e-chart-row')[0].offsetWidth;\n    }\n    if (this.taskBarEditAction === 'ConnectorPointLeftDrag') {\n      if (this.parent.enableRtl) {\n        left = width - (this.elementOffsetLeft + this.parent.chartRowsModule.connectorPointWidth / 2) - Math.abs(this.parent.ganttChartModule.scrollObject.previousScroll.left);\n      } else {\n        left = this.elementOffsetLeft - this.parent.chartRowsModule.connectorPointWidth / 2 - this.parent.ganttChartModule.scrollObject.previousScroll.left;\n      }\n    }\n    if (this.taskBarEditAction === 'ConnectorPointRightDrag') {\n      if (this.parent.enableRtl) {\n        left = width - (this.elementOffsetLeft + this.elementOffsetWidth + this.parent.chartRowsModule.connectorPointWidth / 2) - Math.abs(this.parent.ganttChartModule.scrollObject.previousScroll.left);\n      } else {\n        left = this.elementOffsetLeft + this.elementOffsetWidth + this.parent.chartRowsModule.connectorPointWidth / 2 - Math.abs(this.parent.ganttChartModule.scrollObject.previousScroll.left);\n      }\n    }\n    var top = this.elementOffsetTop + this.elementOffsetHeight / 2 + this.parent.ganttChartModule.chartBodyContainer.offsetTop - this.parent.ganttChartModule.scrollObject.previousScroll.top;\n    this.removeFalseLine(false);\n    this.falseLine = createElement('div', {\n      className: cls.falseLine,\n      id: 'ganttfalseline' + this.parent.element.id,\n      styles: 'position: absolute;transform:' + transform + ';' + 'border-top-width: 1px;border-top-style: dashed;z-index: 5;width:' + (length - 3) + 'px;' + 'top:' + top + 'px;'\n    });\n    if (this.parent.enableRtl) {\n      this.falseLine.style.left = 'auto';\n      this.falseLine.style.right = left + 'px';\n      this.falseLine.style.transformOrigin = '100% 0%';\n    } else {\n      this.falseLine.style.right = 'auto';\n      this.falseLine.style.left = left + 'px';\n      this.falseLine.style.transformOrigin = '0% 100%';\n    }\n    this.parent.ganttChartModule.chartBodyContainer.appendChild(this.falseLine);\n  };\n  /**\n   *\n   * @param {boolean} isRemoveConnectorPointDisplay .\n   * @returns {void} .\n   * @private\n   */\n  TaskbarEdit.prototype.removeFalseLine = function (isRemoveConnectorPointDisplay) {\n    if (this.falseLine) {\n      remove(this.falseLine);\n      this.falseLine = null;\n      if (isRemoveConnectorPointDisplay) {\n        this.elementOffsetLeft = 0;\n        this.elementOffsetTop = 0;\n        this.elementOffsetWidth = 0;\n        this.elementOffsetHeight = 0;\n        removeClass(this.parent.ganttChartModule.scrollElement.querySelectorAll('.' + cls.connectorLineContainer), [cls.connectorLineZIndex]);\n      }\n    }\n  };\n  /**\n   *\n   * @param {PointerEvent} e .\n   * @returns {void} .\n   * @private\n   */\n  TaskbarEdit.prototype.updateConnectorLineSecondProperties = function (e) {\n    var target = this.getElementByPosition(e);\n    var element = parentsUntil(target, cls.taskBarMainContainer);\n    var isBigger = document.body.className.includes('e-bigger');\n    this.connectorSecondAction = null;\n    var scrollTop = 0;\n    if (parentsUntil(target, cls.connectorPointLeft)) {\n      this.connectorSecondAction = 'ConnectorPointLeftDrag';\n      this.toPredecessorText = 'Start';\n    } else if (parentsUntil(target, cls.connectorPointRight)) {\n      this.connectorSecondAction = 'ConnectorPointRightDrag';\n      this.toPredecessorText = 'Finish';\n    } else {\n      this.connectorSecondAction = null;\n      this.toPredecessorText = null;\n    }\n    if (this.taskBarEditElement !== element && this.taskBarEditElement !== this.highlightedSecondElement) {\n      if (this.parent.virtualScrollModule && this.parent.enableVirtualization) {\n        var top_1 = this.parent.virtualScrollModule.getTopPosition();\n        scrollTop = top_1;\n      }\n      if (this.parent.virtualScrollModule && this.parent.enableVirtualization && !this.elementOffsetLeft || !this.parent.enableVirtualization) {\n        if (!this.parent.allowParentDependency) {\n          this.elementOffsetLeft = this.realTaskbarElement.offsetLeft - (isBigger ? 10 : 0);\n          this.elementOffsetTop = this.realTaskbarElement.parentElement.offsetTop + this.realTaskbarElement.offsetHeight / 3 + scrollTop;\n        } else {\n          if (this.taskBarEditElement.children[0].classList.contains('e-manualparent-main-container')) {\n            this.elementOffsetLeft = this.realTaskbarElement.children[0]['offsetLeft'] + this.realTaskbarElement.offsetLeft - (isBigger ? 10 : 0);\n            this.elementOffsetTop = this.realTaskbarElement.parentElement.offsetTop + this.realTaskbarElement.offsetHeight / 3 - 5 + this.taskBarEditElement.children[0]['offsetTop'] + scrollTop;\n          } else {\n            this.elementOffsetLeft = this.realTaskbarElement.offsetLeft - (isBigger ? 10 : 0);\n            this.elementOffsetTop = this.realTaskbarElement.parentElement.offsetTop + this.realTaskbarElement.offsetHeight / 3 + scrollTop;\n          }\n        }\n        this.elementOffsetWidth = this.realTaskbarElement.offsetWidth + (isBigger ? 20 : 0);\n        this.elementOffsetHeight = this.realTaskbarElement.offsetHeight;\n      }\n      this.showHideTaskBarEditingElements(element, this.highlightedSecondElement, true);\n    }\n    if (isNullOrUndefined(this.connectorSecondAction) && !isNullOrUndefined(this.connectorSecondElement) && (!this.connectorSecondRecord.hasChildRecords || this.connectorSecondRecord.hasChildRecords && this.parent.allowParentDependency)) {\n      this.editTooltip.showHideTaskbarEditTooltip(false, this.segmentIndex);\n      removeClass([this.connectorSecondElement.querySelector('.' + cls.connectorPointLeft)], [cls.connectorPointAllowBlock]);\n      removeClass([this.connectorSecondElement.querySelector('.' + cls.connectorPointRight)], [cls.connectorPointAllowBlock]);\n    }\n    this.connectorSecondElement = this.connectorSecondAction ? element : null;\n    this.highlightedSecondElement = element;\n    this.connectorSecondRecord = isNullOrUndefined(this.connectorSecondElement) ? null : this.parent.ganttChartModule.getRecordByTaskBar(this.connectorSecondElement);\n  };\n  // eslint-disable-next-line\n  TaskbarEdit.prototype.triggerDependencyEvent = function (e, mouseUp) {\n    var parentWithZoomStyle = this.parent.element.closest('[style*=\"zoom\"]');\n    var zoomedPageY;\n    if (parentWithZoomStyle) {\n      var zoom1 = parseFloat(getComputedStyle(parentWithZoomStyle).zoom);\n      zoomedPageY = e.pageY / zoom1;\n    }\n    var fromItem = this.taskBarEditRecord.ganttProperties;\n    var toItem = this.connectorSecondRecord ? this.connectorSecondRecord.ganttProperties : null;\n    var predecessor;\n    var currentTarget;\n    var target = this.getElementByPosition(e);\n    var element = target;\n    var uniqueId = this.parent.viewType === 'ResourceView' ? fromItem.taskId : fromItem.rowUniqueID;\n    if (this.taskBarEditAction === 'ConnectorPointLeftDrag') {\n      predecessor = uniqueId + (this.parent.enableRtl ? 'F' : 'S');\n    } else if (this.taskBarEditAction === 'ConnectorPointRightDrag') {\n      predecessor = uniqueId + (this.parent.enableRtl ? 'S' : 'F');\n    }\n    if (this.connectorSecondAction) {\n      if (this.connectorSecondAction === 'ConnectorPointLeftDrag') {\n        predecessor += this.parent.enableRtl ? 'F' : 'S';\n        currentTarget = this.parent.enableRtl ? 'finish' : 'start';\n      } else if (this.connectorSecondAction === 'ConnectorPointRightDrag') {\n        predecessor += this.parent.enableRtl ? 'S' : 'F';\n        currentTarget = this.parent.enableRtl ? 'start' : 'finish';\n      }\n    }\n    if (isNullOrUndefined(toItem)) {\n      this.drawPredecessor = false;\n      return;\n    }\n    if (toItem.predecessorsName) {\n      this.finalPredecessor = toItem.predecessorsName + ',' + predecessor;\n    } else {\n      this.finalPredecessor = predecessor;\n    }\n    var isValidLink = this.parent.connectorLineEditModule.validatePredecessorRelation(this.connectorSecondRecord, this.finalPredecessor);\n    // eslint-disable-next-line\n    var predecessorArray = this.parent.predecessorModule.calculatePredecessor(predecessor, this.connectorSecondRecord);\n    var args = {};\n    args.fromItem = fromItem;\n    args.toItem = toItem;\n    args.newPredecessorString = this.finalPredecessor;\n    args.predecessor = predecessorArray && predecessorArray[0];\n    args.isValidLink = isValidLink;\n    args.requestType = 'ValidateDependency';\n    this.parent.trigger('actionBegin', args);\n    if (!isNullOrUndefined(this.parent.loadingIndicator) && this.parent.loadingIndicator.indicatorType === 'Shimmer' && args.requestType !== 'ValidateDependency') {\n      this.parent.showMaskRow();\n    } else if (args.requestType !== 'ValidateDependency') {\n      this.parent.showSpinner();\n    }\n    args.isValidLink = !isValidLink && args.isValidLink ? false : args.isValidLink;\n    if (args.isValidLink) {\n      if (!this.editTooltip.toolTipObj && !this.parent.isAdaptive) {\n        this.editTooltip.showHideTaskbarEditTooltip(true, this.segmentIndex);\n      }\n      if (!isNullOrUndefined(this.editTooltip.toolTipObj)) {\n        this.parent.connectorLineModule.tooltipTable.innerHTML = this.parent.connectorLineModule.getConnectorLineTooltipInnerTd(this.parent.editModule.taskbarEditModule.taskBarEditRecord.ganttProperties.taskName, this.parent.editModule.taskbarEditModule.fromPredecessorText, '', '');\n        var table = this.parent.connectorLineModule.tooltipTable.querySelector('#toPredecessor').querySelectorAll('td');\n        table[1].innerText = toItem.taskName;\n        table[2].innerText = this.parent.localeObj.getConstant(currentTarget);\n        if (!isNullOrUndefined(this.parent.connectorLineModule.tooltipTable.parentElement) && !isNullOrUndefined(this.parent.connectorLineModule.tooltipTable.parentElement.parentElement)) {\n          var tooltipElement = this.parent.connectorLineModule.tooltipTable.parentElement.parentElement;\n          if (tooltipElement.offsetTop + tooltipElement.offsetHeight > zoomedPageY) {\n            tooltipElement.style.top = e.pageY - tooltipElement.offsetHeight - 20 + 'px';\n          }\n        }\n      }\n      this.drawPredecessor = true;\n    } else {\n      if (this.parent.isAdaptive) {\n        if (target.classList.contains(cls.connectorPointLeft) || target.classList.contains(cls.connectorPointRight)) {\n          this.showHideActivePredecessors(true);\n        }\n      } else {\n        addClass([element], [cls.connectorPointAllowBlock]);\n      }\n      this.drawPredecessor = false;\n    }\n  };\n  // Get XY coordinates for touch and non-touch device\n  TaskbarEdit.prototype.getCoordinate = function (event) {\n    var coordinates = {};\n    var e = event;\n    coordinates.pageX = e.pageX;\n    coordinates.pageY = e.pageY;\n    if (event && event.type !== 'click') {\n      var e_1 = event;\n      if (e_1.type === 'touchmove' || e_1.type === 'touchstart' || e_1.type === 'touchend') {\n        coordinates.pageX = e_1.changedTouches[0].pageX;\n        coordinates.pageY = e_1.changedTouches[0].pageY;\n      }\n    }\n    return coordinates;\n  };\n  // Get current target element by mouse position\n  // window.pageXOffset && window.pageYOffset is used to find the accurate element position in IPad/IPhone\n  TaskbarEdit.prototype.getElementByPosition = function (event) {\n    if (!this.parent.isAdaptive) {\n      return event.target;\n    } else {\n      var e = this.getCoordinate(event);\n      return document.elementFromPoint(e.pageX - window.pageXOffset, e.pageY - window.pageYOffset);\n    }\n  };\n  TaskbarEdit.prototype.multipleSelectionEnabled = function () {\n    if (this.parent.selectionModule && this.parent.selectionSettings.mode !== 'Cell' && this.parent.selectionSettings.type === 'Multiple') {\n      this.parent.selectionModule.hidePopUp();\n    }\n  };\n  TaskbarEdit.prototype.unWireEvents = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n    this.parent.off('chartMouseDown', this.mouseDownHandler);\n    this.parent.off('chartMouseUp', this.mouseUpHandler);\n    this.parent.off('chartMouseLeave', this.mouseLeaveHandler);\n    this.parent.off('chartMouseMove', this.mouseMoveAction);\n    this.parent.off('chartMouseClick', this.mouseClickHandler);\n  };\n  /**\n   * @returns {void} .\n   * @private\n   */\n  TaskbarEdit.prototype.destroy = function () {\n    this.unWireEvents();\n    this.stopScrollTimer();\n    this.parent.editModule.taskbarEditModule = undefined;\n  };\n  return TaskbarEdit;\n}(DateProcessor);\nexport { TaskbarEdit };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","isNullOrUndefined","createElement","extend","addClass","remove","removeClass","closest","merge","classList","getValue","parentsUntil","DateProcessor","cls","EditTooltip","TaskbarEdit","_super","ganttObj","_this","leftValue","previousLeftValue","isMouseDragged","dependencyCancel","isDragged","editElement","elementOffsetLeft","elementOffsetTop","elementOffsetWidth","elementOffsetHeight","segmentIndex","currentItemTop","currentItemPrevTop","topValue","draggedRecordMarginTop","isClonedElement","updatePosition","tooltipValue","parent","initPublicProp","wireEvents","editTooltip","on","mouseDownHandler","mouseUpHandler","mouseLeaveHandler","mouseMoveAction","mouseClickHandler","taskBarEditElement","taskBarEditRecord","taskBarEditAction","connectorSecondElement","connectorSecondRecord","connectorSecondAction","highlightedSecondElement","fromPredecessorText","toPredecessorText","finalPredecessor","drawPredecessor","roundOffDuration","dragMouseLeave","previousItemProperty","tapPointOnFocus","touchEdit","e","editSettings","allowTaskbarEditing","readOnly","canDrag","targetElement","getElementByPosition","element","taskBarMainContainer","innerHTML","contains","updateTaskBarEditElement","preventDefault","isAdaptive","selectionModule","enableSelectMultiTouch","ganttChartModule","getRecordByTaskBar","validateConnectorPoint","taskBarEditingAction","showHideActivePredecessors","connectorPointLeftHover","multipleSelectionEnabled","showHideTaskBarEditingElements","connectorPointRightHover","show","ganttProp","ganttProperties","predecessors","predecessor","id","viewType","taskId","rowUniqueID","toString","from","to","applyActiveColor","chartContent","chartBodyContainer","activeChildTask","touchMode","toolbarModule","refreshToolbarItems","enable","ganttRecord","connectorLineModule","getRecordByID","$tr","getChartRows","currentViewData","indexOf","$taskbar","querySelector","$connectorElement","activeConnectedTask","parentRecord","childRecord","isValid","parentId","childId","hasChildRecords","connectorLineEditModule","predecessorIndex","renderPredecessorDeleteConfirmDialog","target","cloneTaskBar","manualParentRightResizer","manualParentMainContainer","manualParentTaskBar","manualParentMilestone","currentRecord","segments","showProgress","querySelectorAll","childTaskBarInnerDiv","realTaskbarElement","index","getAttribute","Number","type","getTaskBarAction","index_1","ganttprop","parentleft","parentElement","offsetLeft","currentData","resizeElement","styles","style","setProperty","width","currentindex","allowTaskbarDragAndDrop","left","resizeTable","resizetableBody","appendChild","Check","createTable","cloneNode","isAutoSchedule","containerPosition","getOffsetRect","taskbarPosition","autoLeft","enableRtl","Math","abs","scrollElement","scrollLeft","tableBody","segmentedTasks","getElementsByClassName","cloneTaskbarElement","taskbarElement","taskbarResizer","currentIndex","taskFields","dependency","updateMouseDownProperties","level","enableMultiTaskbar","getTaskByUniqueID","parentItem","uniqueID","expanded","prevZIndex","zIndex","secondElement","fadeConnectorLine","isShowProgressResizer","progress","isShowConnectorPoints","record","getParentTask","taskBarLeftResizer","leftResizeGripper","taskBarRightResizer","rightResizeGripper","progressElement","getRowByIndex","enableVirtualization","flatData","childProgressResizer","progressResizeGripper","top","record_1","activeParentTask","connectorLineContainer","connectorLineZIndex","connectorPointLeft","connectorElement","connectorPointRight","leftConnector","rightConnector","record_2","mouseDownElement","data","action","manual","isMilestone","event","getCoordinate","parentWithZoomStyle","zoom1","parseFloat","getComputedStyle","zoom","pageX","pageY","mouseDownX","scrollObject","previousScroll","tooltipPositionX","mouseDownY","dragMoveY","tooltipTable","getConnectorLineTooltipInnerTd","taskName","isMouseDragCheck","mouseMoveX","mouseMoveY","initiateEditAction","item","previousItem","timelineModule","extendFunction","showHideTaskbarEditTooltip","setAttribute","removeFirstBorder","canremove","rowDragAndDropModule","removeLastBorder","isEmptyRow","islastRowIndex","treeGrid","getRows","getCurrentViewRecords","removetopOrBottomBorder","border","slice","addRemoveClasses","topOrBottomBorder","rowElement","gridElement","filter","children","parseInt","removeChildBorder","borderElem","cells","add","className","len","addErrorElem","dragelem","document","errorelem","ele","paddingTop","taskbarHeight","removeErrorElem","ensurePosition","draggedRecords","draggedRecord","childRecords","valid","cancel","ganttRowElement","eventArgs","cloneElement","rows","trigger","currentElement","enableTimelineVirtualization","wholeTimelineWidth","offsetWidth","childNodes","offsetTop","chartPane","rootElement","body","includes","pointerLeft","chartRowsModule","connectorPointWidth","xValue","rowPositionHeight","undefined","yValue","y","elementFromPoint","draggedTreeGridRowElement","draggedTreeGridRowHeight","offsetHeight","getRowByID","nestedParent","chartRowElement_1","chartRow","droppedTreeGridRowElement","tObj","rowTop","toolHeight","positionOffSet","contentHeight","getHeaderContent","scrollTop","getContent","firstElementChild","rowBottom","difference","divide","topRowSegment","middleRowSegment","bottomRowSegment","posy","isTopSegment","isMiddleRowSegment","isBottomRowSegment","rowIndex","droppedTreeGridRecord","args_1","requestType","arg","showIndicator","undoRedoModule","editModule","loadingIndicator","indicatorType","showMaskRow","showSpinner","isMouseClick","args","recordIndex","getIndexByTaskBar","editingFields","previousData","updateMouseMoveProperties","oldData","mainElement","resizeGripper","currentWidth","performProgressResize","enableLeftResizing","enableRightResizing","enableDragging","updateConnectorLineSecondProperties","triggerDependencyEvent","drawFalseLine","parentClientRect","coordinates","position","pos","allowTaskbarOverlap","reduceHeight","marginTop","rowHeight","currentSegmentIndex","setItemPosition","updateEditedItem","updateTooltip","taskBarEditedAction","isConnectorLineEdit","mouseX","mouseY","timerCount","startScrollTimer","stopScrollTimer","direction","leftSign","scrollTimer","window","setInterval","sign","timelineWidth","totalTimelineWidth","setScrollTop","setScrollLeft","clearInterval","differenceWidth","map","segment","previousMouseMove","previousSegment","nextSegment","setRecordValue","dataOperation","updateMappingData","validateProgressWidth","progressWidth","totalTaskWidth","reduceWidth","startIndex","endIndex","splitTasksDuration","perDayWidth","diffrenceWidth","prevProgress","widthValue","progressValue","diff","progressBorderRadius","enableSplitTaskLeftResize","updateEditPosition","segment_1","segment_2","singleDayDifference","segment_3","updateIsMilestone","getProgressWidth","milestone","segmentWidth","isSingleTier","customTimelineSettings","bottomTier","unit","topTier","timelineUnitSize","projectStartDate","endDate","startDate","updatedValues","getProgressPercent","getRoundOffStartLeft","getDateByLeft","dateValidationModule","getValidEndDate","checkStartDate","Date","getTime","compareDates","duration","calculateDuration","updateResourceRelatedFields","updateSplitLeftResize","getRoundOffEndLeft","tempEndDate","getValidStartDate","tempdate","checkEndDate","updateSplitRightResizing","updateChildDrag","setSplitTaskDrag","updateSegment","getEndDate","durationUnit","incrementSegments","calculateEndDate","getDuration","sumOfDuration","segmentOffsetDuration","offsetDuration","segmentOffset","segmentDate","getDay","includeWeekend","isRoundOff","tierMode","totalLeft","remainingContribution","getIncrement","remainingLeft","positionValue","inHour","inMinutes","remainDays","remainDaysInDecimal","property","pStartDate","timelineStartDate","milliSecondsPerPixel","setTime","predecessorsName","dayEndTime","autoEndDate","isInDst","milestoneHeight","rightResizer","segmentedTaskBarContainer","traceChildProgressBar","traceChildTaskBar","traceParentTaskBar","traceParentProgressBar","traceConnectorPointRight","rightConnectorPointOuterDiv","segmentConnectorPointRight","manualParentTaskbar","manualTaskbar","manualParentRight","manualParentLeft","manualParentLeftResizer","resizeLine","right","addTop","parent_1","segment_4","segmentElement","display","borderBottomRightRadius","borderTopRightRadius","width_1","updateSegmentProgress","progressElements","count","width_2","resizeValue","mouseDragged","x","previousIds","ids","previousFlatData","isOnEdit","cancelTaskbarEditActionInMouseLeave","criticalModule","criticalPathModule","enableCriticalPath","criticalPathCollection","criticalConnectorLine","detailPredecessorCollection","predecessorCollectionTaskIds","x1","y1","x2","resMouseY","allowParentDependency","push","enableItems","controlId","updatePredecessor","JSON","stringify","splice","taskbarEditedArgs","taskbarEdited","reUpdatePreviousRecords","taskData","fixedWidth","ceil","totalProgressWidth","tempWidth","newWidth","draggedRecIndex","flatRecordCol","editedRecords","droppedRecord","row","droppedTarget","droppedParentRecordIndex","getRootParent","draggedParentRecordIndex","fromIndex","dropIndex","dropPosition","dropRecord","droppedRecordIndex","reorderRows","showOverAllocation","renderOverAllocationContainer","updateParentProgress","sDate","cloneProjectEndDate","eDate","cloneProjectStartDate","cStartDate","cEndDate","setHours","getHours","setDate","getDate","segmentIndexes","mergeTask","getStartDate","segment_5","eDate_1","updateWidthLeft","updateTaskData","initiateUpdateAction","parentwidth","progresswidth","y2","sqrt","angle","atan2","PI","transform","removeFalseLine","falseLine","transformOrigin","isRemoveConnectorPointDisplay","isBigger","virtualScrollModule","top_1","getTopPosition","connectorPointAllowBlock","mouseUp","zoomedPageY","fromItem","toItem","currentTarget","uniqueId","isValidLink","validatePredecessorRelation","predecessorArray","predecessorModule","calculatePredecessor","newPredecessorString","toolTipObj","taskbarEditModule","table","innerText","localeObj","getConstant","tooltipElement","e_1","changedTouches","pageXOffset","pageYOffset","selectionSettings","mode","hidePopUp","unWireEvents","isDestroyed","off","destroy"],"sources":["/var/www/vue/vue-gantt-chart/node_modules/@syncfusion/ej2-gantt/src/gantt/actions/taskbar-edit.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { isNullOrUndefined, createElement, extend, addClass, remove, removeClass, closest, merge, classList, getValue } from '@syncfusion/ej2-base';\nimport { parentsUntil } from '../base/utils';\nimport { DateProcessor } from '../base/date-processor';\nimport * as cls from '../base/css-constants';\nimport { EditTooltip } from '../renderer/edit-tooltip';\n/**\n * File for handling taskbar editing operation in Gantt.\n */\nvar TaskbarEdit = /** @class */ (function (_super) {\n    __extends(TaskbarEdit, _super);\n    function TaskbarEdit(ganttObj) {\n        var _this = _super.call(this, ganttObj) || this;\n        _this.leftValue = 0;\n        _this.previousLeftValue = 0;\n        _this.isMouseDragged = false;\n        _this.dependencyCancel = false;\n        _this.isDragged = false;\n        _this.editElement = null;\n        _this.elementOffsetLeft = 0;\n        _this.elementOffsetTop = 0;\n        _this.elementOffsetWidth = 0;\n        _this.elementOffsetHeight = 0;\n        _this.segmentIndex = -1;\n        _this.currentItemTop = 0;\n        _this.currentItemPrevTop = 0;\n        _this.topValue = 0;\n        _this.draggedRecordMarginTop = '0px';\n        _this.isClonedElement = false;\n        _this.updatePosition = false;\n        _this.tooltipValue = 0;\n        _this.parent = ganttObj;\n        _this.initPublicProp();\n        _this.wireEvents();\n        _this.editTooltip = new EditTooltip(_this.parent, _this);\n        return _this;\n    }\n    TaskbarEdit.prototype.wireEvents = function () {\n        this.parent.on('chartMouseDown', this.mouseDownHandler, this);\n        this.parent.on('chartMouseUp', this.mouseUpHandler, this);\n        this.parent.on('chartMouseLeave', this.mouseLeaveHandler, this);\n        this.parent.on('chartMouseMove', this.mouseMoveAction, this);\n        this.parent.on('chartMouseClick', this.mouseClickHandler, this);\n    };\n    /**\n     * To initialize the public property.\n     *\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.initPublicProp = function () {\n        this.taskBarEditElement = null;\n        this.taskBarEditRecord = null;\n        this.taskBarEditAction = null;\n        this.connectorSecondElement = null;\n        this.connectorSecondRecord = null;\n        this.connectorSecondAction = null;\n        this.highlightedSecondElement = null;\n        this.fromPredecessorText = null;\n        this.toPredecessorText = null;\n        this.finalPredecessor = null;\n        this.drawPredecessor = false;\n        this.roundOffDuration = true;\n        this.dragMouseLeave = false;\n        this.isMouseDragged = false;\n        this.previousItemProperty = ['left', 'progress', 'duration', 'isMilestone', 'startDate', 'endDate', 'width', 'progressWidth',\n            'autoLeft', 'autoDuration', 'autoStartDate', 'autoEndDate', 'autoWidth', 'segments'];\n        this.tapPointOnFocus = false;\n        this.touchEdit = false;\n    };\n    TaskbarEdit.prototype.mouseDownHandler = function (e) {\n        if (this.parent.editSettings.allowTaskbarEditing && !this.parent.readOnly) {\n            this.canDrag = false;\n            if (this.taskBarEditElement) {\n                var targetElement = this.getElementByPosition(e);\n                var element = parentsUntil(targetElement, cls.taskBarMainContainer);\n                if ((element && element.innerHTML === this.taskBarEditElement.innerHTML ||\n                    this.taskBarEditElement.classList.contains('e-segmented-taskbar') || this.taskBarEditElement.classList.contains('collpse-parent-border'))) {\n                    this.updateTaskBarEditElement(e);\n                    this.canDrag = true;\n                    e.preventDefault();\n                }\n            }\n            else if (!this.parent.isAdaptive) {\n                this.updateTaskBarEditElement(e);\n            }\n        }\n    };\n    TaskbarEdit.prototype.mouseClickHandler = function (e) {\n        if (!this.parent.editSettings.allowTaskbarEditing) {\n            return;\n        }\n        var targetElement = this.getElementByPosition(e);\n        var element = parentsUntil(targetElement, cls.taskBarMainContainer);\n        if (this.parent.selectionModule && this.parent.selectionModule.enableSelectMultiTouch) {\n            if (this.tapPointOnFocus) {\n                this.updateTaskBarEditElement(e);\n            }\n            return;\n        }\n        if (this.tapPointOnFocus && !isNullOrUndefined(this.taskBarEditElement) && element &&\n            element.innerHTML !== this.taskBarEditElement.innerHTML) {\n            this.connectorSecondRecord = this.parent.ganttChartModule.getRecordByTaskBar(element);\n            this.connectorSecondAction = 'ConnectorPointLeftDrag';\n            this.connectorSecondElement = element;\n            this.fromPredecessorText = 'Finish';\n            if (this.validateConnectorPoint()) {\n                this.taskBarEditingAction(e, true);\n            }\n            this.showHideActivePredecessors(false);\n            this.initPublicProp();\n        }\n        else if (targetElement.classList.contains(cls.connectorPointLeftHover)) {\n            this.canDrag = false;\n            this.multipleSelectionEnabled();\n            this.showHideTaskBarEditingElements(targetElement, this.taskBarEditElement);\n            this.tapPointOnFocus = true;\n            this.taskBarEditAction = 'ConnectorPointLeftDrag';\n            this.connectorSecondRecord = this.taskBarEditRecord;\n            this.taskBarEditingAction(e, false);\n        }\n        else if (targetElement.classList.contains(cls.connectorPointRightHover)) {\n            this.canDrag = false;\n            this.multipleSelectionEnabled();\n            this.showHideTaskBarEditingElements(targetElement, this.taskBarEditElement);\n            this.tapPointOnFocus = true;\n            this.taskBarEditAction = 'ConnectorPointRightDrag';\n            this.connectorSecondRecord = this.taskBarEditRecord;\n            this.taskBarEditingAction(e, false);\n        }\n        else {\n            if (this.tapPointOnFocus) {\n                this.showHideActivePredecessors(false);\n                this.showHideTaskBarEditingElements(element, this.taskBarEditElement);\n            }\n            this.updateTaskBarEditElement(e);\n        }\n    };\n    TaskbarEdit.prototype.showHideActivePredecessors = function (show) {\n        var ganttProp = this.taskBarEditRecord.ganttProperties;\n        var predecessors = ganttProp.predecessor;\n        var id = this.parent.viewType === 'ResourceView' ? ganttProp.taskId : ganttProp.rowUniqueID;\n        if (predecessors) {\n            for (var i = 0; i < predecessors.length; i++) {\n                var predecessor = predecessors[i];\n                if (id.toString() === predecessor.from || id.toString() === predecessor.to) {\n                    this.applyActiveColor(predecessor.from, predecessor.to, show);\n                }\n            }\n        }\n        var chartContent = this.parent.ganttChartModule.chartBodyContainer;\n        if (show) {\n            addClass([this.taskBarEditElement], [cls.activeChildTask]);\n            addClass([chartContent], [cls.touchMode]);\n        }\n        else {\n            removeClass([this.taskBarEditElement], [cls.activeChildTask]);\n            removeClass([chartContent], [cls.touchMode]);\n        }\n        this.touchEdit = show;\n        if (!isNullOrUndefined(this.parent.toolbarModule)) {\n            this.parent.toolbarModule.refreshToolbarItems();\n        }\n    };\n    TaskbarEdit.prototype.applyActiveColor = function (from, to, enable) {\n        var taskId = this.parent.viewType === 'ProjectView' ? this.taskBarEditRecord.ganttProperties.taskId.toString() :\n            this.taskBarEditRecord.ganttProperties.rowUniqueID.toString();\n        var ganttRecord = (taskId === from) ? this.parent.connectorLineModule.getRecordByID(to) :\n            this.parent.connectorLineModule.getRecordByID(from);\n        var $tr = this.parent.ganttChartModule.getChartRows()[this.parent.currentViewData.indexOf(ganttRecord)];\n        if (!isNullOrUndefined($tr)) {\n            var $taskbar = $tr.querySelector('.' + cls.taskBarMainContainer);\n            var $connectorElement = this.parent.element.querySelector('#ConnectorLineparent' + from + 'child' + to);\n            if (enable) {\n                addClass([$taskbar], [cls.activeConnectedTask]);\n                if ($connectorElement) {\n                    addClass([$connectorElement], [cls.activeConnectedTask]);\n                }\n            }\n            else {\n                removeClass([$taskbar], [cls.activeConnectedTask]);\n                if ($connectorElement) {\n                    removeClass([$connectorElement], [cls.activeConnectedTask]);\n                }\n            }\n        }\n    };\n    TaskbarEdit.prototype.validateConnectorPoint = function () {\n        var parentRecord = this.taskBarEditRecord.ganttProperties;\n        var childRecord = this.connectorSecondRecord.ganttProperties;\n        var isValid = true;\n        var parentId = this.parent.viewType === 'ResourceView' ? parentRecord.taskId : parentRecord.rowUniqueID;\n        var childId = this.parent.viewType === 'ResourceView' ? childRecord.taskId : childRecord.rowUniqueID;\n        if (this.connectorSecondRecord.hasChildRecords) {\n            isValid = false;\n        }\n        else if (childRecord.predecessor) {\n            for (var i = 0; i < childRecord.predecessor.length; i++) {\n                var predecessor = childRecord.predecessor[i];\n                if (predecessor.from === parentId.toString() &&\n                    predecessor.to === childId.toString()) {\n                    this.parent.connectorLineEditModule.childRecord = this.connectorSecondRecord;\n                    this.parent.connectorLineEditModule.predecessorIndex = i;\n                    this.parent.connectorLineEditModule.renderPredecessorDeleteConfirmDialog();\n                    isValid = false;\n                    break;\n                }\n                else if (predecessor.from === childId.toString() &&\n                    predecessor.to === parentId.toString()) {\n                    this.parent.connectorLineEditModule.childRecord = this.taskBarEditRecord;\n                    this.parent.connectorLineEditModule.predecessorIndex = i;\n                    this.parent.connectorLineEditModule.renderPredecessorDeleteConfirmDialog();\n                    isValid = false;\n                    break;\n                }\n            }\n        }\n        return isValid;\n    };\n    // eslint-disable-next-line\n    TaskbarEdit.prototype.mouseLeaveHandler = function (e) {\n        if (this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'ParentDrag' ||\n            this.taskBarEditAction === 'ProgressResizing' || this.taskBarEditAction === 'LeftResizing' ||\n            this.taskBarEditAction === 'RightResizing') {\n            this.dragMouseLeave = false;\n        }\n        else {\n            this.dragMouseLeave = true;\n        }\n    };\n    /**\n     * To update taskbar edited elements on mouse down action.\n     *\n     * @param {PointerEvent} e .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.updateTaskBarEditElement = function (e) {\n        var target = this.getElementByPosition(e);\n        var cloneTaskBar;\n        var element;\n        if (target.classList.contains(cls.manualParentRightResizer) || target.classList.contains(cls.manualParentMainContainer)\n            || target.classList.contains(cls.manualParentTaskBar)) {\n            element = parentsUntil(target, cls.manualParentMainContainer);\n        }\n        else if (target.classList.contains(cls.manualParentMilestone)) {\n            element = parentsUntil(target, cls.manualParentMilestone);\n        }\n        else {\n            element = parentsUntil(target, cls.taskBarMainContainer);\n            if (!isNullOrUndefined(element) && !target.classList.contains('e-connectorpoint-left') &&\n                !target.classList.contains('e-connectorpoint-right')) {\n                var currentRecord = this.parent.ganttChartModule.getRecordByTaskBar(element);\n                if (!isNullOrUndefined(currentRecord.ganttProperties.segments) && currentRecord.ganttProperties.segments.length > 0) {\n                    if (target.classList.contains('e-progressbar-handler-after')) {\n                        for (var i = 0; i < currentRecord.ganttProperties.segments.length; i++) {\n                            if (currentRecord.ganttProperties.segments[i].showProgress) {\n                                element = element.querySelectorAll('.e-segmented-taskbar')[i];\n                                break;\n                            }\n                        }\n                    }\n                    else {\n                        element = parentsUntil(target, cls.childTaskBarInnerDiv);\n                    }\n                }\n            }\n        }\n        if (this.parent.editSettings.allowTaskbarEditing && element) {\n            this.showHideTaskBarEditingElements(element, this.editElement);\n            this.editElement = element;\n            this.realTaskbarElement = this.editElement;\n            var index = this.editElement.getAttribute('data-segment-index');\n            if (!isNullOrUndefined(index)) {\n                this.segmentIndex = Number(index);\n            }\n            else {\n                this.segmentIndex = -1;\n            }\n            this.taskBarEditRecord = this.parent.ganttChartModule.getRecordByTaskBar(this.editElement);\n            if (e.type === 'mousedown' || e.type === 'touchstart' || e.type === 'click') {\n                this.taskBarEditAction = this.getTaskBarAction(e);\n                var index_1 = this.editElement.getAttribute('data-segment-index');\n                var currentRecord = this.parent.ganttChartModule.getRecordByTaskBar(element);\n                var ganttprop = currentRecord.ganttProperties;\n                var parentleft = this.editElement.parentElement.offsetLeft;\n                this.currentData = currentRecord;\n                var resizeElement = createElement('div', { styles: 'height:100%;border-style:dashed;border-bottom:none;border-top:none;border-width:1px;position:absolute;z-index:10000' });\n                addClass([resizeElement], 'e-taskbar-resize-div');\n                resizeElement.style.setProperty('width', ganttprop.width + 'px');\n                var currentindex = this.editElement.getAttribute('data-segment-index');\n                if (!isNullOrUndefined(ganttprop.segments) && this.parent.allowTaskbarDragAndDrop && this.taskBarEditAction !== 'LeftResizing' && this.taskBarEditAction !== 'RightResizing' && this.taskBarEditAction !== 'ProgressResizing') {\n                    resizeElement.style.setProperty('left', ((!isNullOrUndefined(ganttprop.segments) ? parentleft + 'px' : (ganttprop.left) + 'px')));\n                }\n                else {\n                    resizeElement.style.setProperty('left', (((!isNullOrUndefined(ganttprop.segments) && ganttprop.segments.length > 1) ? parentleft + ganttprop.segments[Number(currentindex)].left + 'px' : (ganttprop.left) + 'px')));\n                }\n                var resizeTable = this.parent.createElement('table');\n                var resizetableBody = this.parent.createElement('tbody');\n                resizetableBody.appendChild(resizeElement);\n                resizeTable.appendChild(resizetableBody);\n                var Check = this.parent.ganttChartModule.chartBodyContainer.querySelector('.e-clone-taskbar');\n                var createTable = null;\n                if ((this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'LeftResizing') && !isNullOrUndefined(index_1) && !isNullOrUndefined(index_1) ? Number(index_1) === 0 : false) {\n                    cloneTaskBar = this.editElement.parentElement.cloneNode(true);\n                }\n                else {\n                    if (this.segmentIndex !== -1 && this.parent.allowTaskbarDragAndDrop && this.taskBarEditAction !== 'LeftResizing' &&\n                        this.taskBarEditAction !== 'RightResizing' && this.taskBarEditAction !== 'ProgressResizing') {\n                        cloneTaskBar = this.editElement.parentElement.cloneNode(true);\n                    }\n                    else {\n                        cloneTaskBar = this.editElement.cloneNode(true);\n                    }\n                }\n                if (!Check) {\n                    addClass([cloneTaskBar], 'e-clone-taskbar');\n                    cloneTaskBar.style.setProperty('position', 'absolute');\n                    if (currentRecord.hasChildRecords && !currentRecord.ganttProperties.isAutoSchedule) {\n                        var containerPosition = this.parent.getOffsetRect(this.parent.ganttChartModule.chartBodyContainer);\n                        var taskbarPosition = this.parent.getOffsetRect(this.editElement);\n                        if (this.editElement.classList.contains('e-manualparent-main-container')) {\n                            cloneTaskBar.style.setProperty('left', (currentRecord.ganttProperties.left - currentRecord.ganttProperties.autoLeft) + 'px');\n                        }\n                        else {\n                            cloneTaskBar.style.setProperty(this.parent.enableRtl ?\n                                'right' : 'left', Math.abs(taskbarPosition.left - containerPosition.left + Math.abs(this.parent.ganttChartModule.scrollElement.scrollLeft)) + 'px');\n                        }\n                    }\n                    cloneTaskBar.style.setProperty('top', 0 + 'px');\n                    createTable = this.parent.createElement('table');\n                    var tableBody = this.parent.createElement('tbody');\n                    tableBody.appendChild(cloneTaskBar);\n                    createTable.appendChild(tableBody);\n                }\n                if ((this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'LeftResizing') && !isNullOrUndefined(index_1) && !isNullOrUndefined(index_1) ? Number(index_1) === 0 : false) {\n                    var segmentedTasks = cloneTaskBar.getElementsByClassName('e-segmented-taskbar');\n                    this.cloneTaskbarElement = segmentedTasks[Number(index_1)];\n                }\n                else {\n                    this.cloneTaskbarElement = cloneTaskBar;\n                }\n                this.taskBarEditElement = this.cloneTaskbarElement;\n                this.taskbarElement = createTable;\n                this.taskbarResizer = resizeTable;\n                this.currentIndex = index_1;\n                this.roundOffDuration = true;\n                if ((this.taskBarEditAction === 'ConnectorPointLeftDrag' || this.taskBarEditAction === 'ConnectorPointRightDrag') &&\n                    isNullOrUndefined(this.parent.taskFields.dependency)) {\n                    this.taskBarEditAction = null;\n                }\n                this.updateMouseDownProperties(e);\n                if (this.parent.viewType === 'ResourceView' || this.parent.viewType === 'ProjectView') {\n                    if (this.taskBarEditRecord.level === 0) {\n                        return;\n                    }\n                    else if (this.parent.enableMultiTaskbar) {\n                        var parentRecord = this.parent.getTaskByUniqueID(this.taskBarEditRecord.parentItem.uniqueID);\n                        if (!isNullOrUndefined(parentRecord) && !parentRecord.expanded) {\n                            this.prevZIndex = (this.taskBarEditElement).style.zIndex;\n                            (this.taskBarEditElement).style.zIndex = '1000';\n                            if (this.taskBarEditElement.querySelector('.e-gantt-child-taskbar')) {\n                                addClass([this.taskBarEditElement.querySelector('.e-gantt-child-taskbar')], 'e-collapsed-taskbar-drag');\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            if (this.parent.isAdaptive) {\n                if (this.taskBarEditElement) {\n                    this.showHideTaskBarEditingElements(element, this.editElement);\n                }\n                this.initPublicProp();\n            }\n            else {\n                this.showHideTaskBarEditingElements(element, this.editElement);\n            }\n        }\n    };\n    /**\n     * To show/hide taskbar editing elements.\n     *\n     * @param {Element} element .\n     * @param {Element} secondElement .\n     * @param {boolean} fadeConnectorLine .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.showHideTaskBarEditingElements = function (element, secondElement, fadeConnectorLine) {\n        secondElement = secondElement ? secondElement : this.editElement;\n        var isShowProgressResizer = this.parent.taskFields.progress ? true : false;\n        var isShowConnectorPoints = true;\n        if (this.parent.readOnly) {\n            return;\n        }\n        var record = element ? this.parent.ganttChartModule.getRecordByTaskBar(element) :\n            secondElement ? this.parent.ganttChartModule.getRecordByTaskBar(secondElement) : null;\n        if (this.parent.enableMultiTaskbar && element) {\n            var parentRecord = this.parent.getParentTask(record.parentItem);\n            if (!isNullOrUndefined(parentRecord)) {\n                if (!parentRecord.expanded) {\n                    isShowProgressResizer = false;\n                    isShowConnectorPoints = false;\n                }\n            }\n        }\n        if (element) {\n            if (element.querySelector('.' + cls.taskBarLeftResizer)) {\n                addClass([element.querySelector('.' + cls.taskBarLeftResizer)], [cls.leftResizeGripper]);\n                addClass([element.querySelector('.' + cls.taskBarRightResizer)], [cls.rightResizeGripper]);\n                if (isShowProgressResizer) {\n                    var progressElement = (record && record.ganttProperties.segments &&\n                        record.ganttProperties.segments.length > 0) ?\n                        this.parent.getRowByIndex(this.parent.enableVirtualization ? this.parent.currentViewData.indexOf(record)\n                            : this.parent.flatData.indexOf(record)).\n                            querySelectorAll('.' + cls.childProgressResizer)[0] :\n                        element.querySelector('.' + cls.childProgressResizer);\n                    if (!isNullOrUndefined(progressElement)) {\n                        addClass([progressElement], [cls.progressResizeGripper]);\n                        progressElement.style.top = '3px';\n                    }\n                }\n            }\n            else if (this.parent.isAdaptive && isShowProgressResizer) {\n                var record_1 = this.parent.ganttChartModule.getRecordByTaskBar(element);\n                if (record_1.hasChildRecords) {\n                    addClass([element], [cls.activeParentTask]);\n                }\n            }\n            addClass(this.parent.ganttChartModule.scrollElement.querySelectorAll('.' + cls.connectorLineContainer), [cls.connectorLineZIndex]);\n            if (!isNullOrUndefined(this.parent.taskFields.dependency)\n                && (element.querySelector('.' + cls.connectorPointLeft)\n                    || element.parentElement.querySelector('.' + cls.connectorPointLeft))\n                && isShowConnectorPoints) {\n                var connectorElement = !isNullOrUndefined(element.querySelector('.' + cls.connectorPointLeft)) ?\n                    element : element.parentElement;\n                if (!isNullOrUndefined(connectorElement.querySelector('.' + cls.connectorPointLeft))) {\n                    addClass([connectorElement.querySelector('.' + cls.connectorPointLeft)], [cls.connectorPointLeftHover]);\n                }\n                if (!isNullOrUndefined(connectorElement.querySelector('.' + cls.connectorPointRight))) {\n                    addClass([connectorElement.querySelector('.' + cls.connectorPointRight)], [cls.connectorPointRightHover]);\n                }\n            }\n        }\n        else if (!fadeConnectorLine) {\n            removeClass(this.parent.ganttChartModule.scrollElement.querySelectorAll('.' + cls.connectorLineContainer), [cls.connectorLineZIndex]);\n        }\n        if (secondElement && element !== secondElement) {\n            if (secondElement.querySelector('.' + cls.taskBarLeftResizer)) {\n                removeClass([secondElement.querySelector('.' + cls.taskBarLeftResizer)], [cls.leftResizeGripper]);\n                removeClass([secondElement.querySelector('.' + cls.taskBarRightResizer)], [cls.rightResizeGripper]);\n                var progressElement = (record && record.ganttProperties.segments && record.ganttProperties.segments.length > 0) ?\n                    this.parent.getRowByIndex(this.parent.enableVirtualization ? this.parent.currentViewData.indexOf(record) :\n                        this.parent.flatData.indexOf(record)) : secondElement;\n                if (progressElement && progressElement.querySelector('.' + cls.childProgressResizer)) {\n                    removeClass([progressElement.querySelector('.' + cls.childProgressResizer)], [cls.progressResizeGripper]);\n                }\n            }\n            if (!isNullOrUndefined(this.parent.taskFields.dependency)\n                && (secondElement.querySelector('.' + cls.connectorPointLeft)\n                    || secondElement.parentElement.querySelector('.' + cls.connectorPointLeft))) {\n                var connectorElement = !isNullOrUndefined(secondElement.querySelector('.' + cls.connectorPointLeft)) ?\n                    secondElement : secondElement.parentElement;\n                var leftConnector = connectorElement.querySelector('.' + cls.connectorPointLeft);\n                var rightConnector = connectorElement.querySelector('.' + cls.connectorPointRight);\n                if (leftConnector) {\n                    removeClass([leftConnector], [cls.connectorPointLeftHover]);\n                }\n                if (rightConnector) {\n                    removeClass([rightConnector], [cls.connectorPointRightHover]);\n                }\n            }\n            else if (this.parent.isAdaptive) {\n                var record_2 = this.parent.ganttChartModule.getRecordByTaskBar(secondElement);\n                if (record_2 && record_2.hasChildRecords) {\n                    removeClass([secondElement], [cls.activeParentTask]);\n                }\n            }\n            this.editElement = null;\n        }\n    };\n    /**\n     * To get taskbar edit actions.\n     *\n     * @param {PointerEvent} e .\n     * @returns {string} .\n     * @private\n     */\n    TaskbarEdit.prototype.getTaskBarAction = function (e) {\n        var mouseDownElement = this.getElementByPosition(e);\n        var data = this.taskBarEditRecord;\n        var action = '';\n        if (mouseDownElement.classList.contains(cls.taskBarLeftResizer)) {\n            action = 'LeftResizing';\n        }\n        else if (mouseDownElement.classList.contains(cls.taskBarRightResizer)) {\n            action = 'RightResizing';\n        }\n        else if ((mouseDownElement.classList.contains(cls.childProgressResizer) ||\n            closest(mouseDownElement, '.' + cls.childProgressResizer)) && (this.parent.taskFields.progress)) {\n            action = 'ProgressResizing';\n        }\n        else if (mouseDownElement.classList.contains(cls.connectorPointLeft)) {\n            action = 'ConnectorPointLeftDrag';\n        }\n        else if (mouseDownElement.classList.contains(cls.connectorPointRight)) {\n            action = 'ConnectorPointRightDrag';\n        }\n        else if (mouseDownElement.classList.contains(cls.manualParentRightResizer)) {\n            action = 'ParentResizing';\n        }\n        else if (mouseDownElement.classList.contains(cls.manualParentTaskBar) ||\n            mouseDownElement.classList.contains(cls.manualParentMainContainer) ||\n            mouseDownElement.classList.contains(cls.manualParentMilestone)) {\n            action = 'ManualParentDrag';\n        }\n        else if (data) {\n            action = data.hasChildRecords ? data[this.parent.taskFields.manual] ? '' : 'ParentDrag'\n                : data.ganttProperties.isMilestone ? 'MilestoneDrag' : 'ChildDrag';\n        }\n        return action;\n    };\n    /**\n     * To update property while perform mouse down.\n     *\n     * @param {PointerEvent} event .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.updateMouseDownProperties = function (event) {\n        var e = this.getCoordinate(event);\n        var parentWithZoomStyle = this.parent.element.closest('[style*=\"zoom\"]');\n        if (parentWithZoomStyle) {\n            var zoom1 = parseFloat(getComputedStyle(parentWithZoomStyle).zoom);\n            e.pageX = e.pageX / zoom1;\n            e.pageY = e.pageY / zoom1;\n        }\n        if (e.pageX || e.pageY) {\n            var containerPosition = this.parent.getOffsetRect(this.parent.ganttChartModule.chartBodyContainer);\n            if (this.parent.enableRtl) {\n                this.mouseDownX = Math.abs(e.pageX - (containerPosition.left +\n                    Math.abs(this.parent.ganttChartModule.scrollObject.previousScroll.left)));\n            }\n            else {\n                this.mouseDownX = (e.pageX - containerPosition.left) +\n                    this.parent.ganttChartModule.scrollObject.previousScroll.left;\n            }\n            this.tooltipPositionX = this.mouseDownX;\n            this.mouseDownY = this.dragMoveY = e.pageY - containerPosition.top +\n                this.parent.ganttChartModule.scrollObject.previousScroll.top;\n        }\n        if (this.taskBarEditAction === 'ConnectorPointLeftDrag' || this.taskBarEditAction === 'ConnectorPointRightDrag') {\n            this.fromPredecessorText = this.taskBarEditAction === 'ConnectorPointLeftDrag' ? 'start' : 'finish';\n            this.parent.connectorLineModule.tooltipTable.innerHTML = this.parent.connectorLineModule.getConnectorLineTooltipInnerTd(this.taskBarEditRecord.ganttProperties.taskName, this.fromPredecessorText, '', '');\n        }\n    };\n    TaskbarEdit.prototype.isMouseDragCheck = function () {\n        if (!this.isMouseDragged && this.taskBarEditAction && ((this.mouseDownX !== this.mouseMoveX) &&\n            ((this.mouseDownX + 3) < this.mouseMoveX || (this.mouseDownX - 3) > this.mouseMoveX)\n            || (this.mouseDownY !== this.mouseMoveY) &&\n                ((this.mouseDownY + 3) < this.mouseMoveY || (this.mouseDownY - 3) > this.mouseMoveY))) {\n            this.isMouseDragged = true;\n            this.parent.initiateEditAction(true);\n            var item = this.taskBarEditRecord.ganttProperties;\n            this.previousItem = this.parent.timelineModule.extendFunction(item, this.previousItemProperty);\n            if (this.taskBarEditAction !== 'ConnectorPointLeftDrag' &&\n                this.taskBarEditAction !== 'ConnectorPointRightDrag' &&\n                !(this.parent.viewType === 'ResourceView' && this.taskBarEditAction === 'ParentDrag')) {\n                this.editTooltip.showHideTaskbarEditTooltip(true, this.segmentIndex);\n            }\n            this.taskBarEditElement.setAttribute('aria-grabbed', 'true');\n        }\n    };\n    /* eslint-disable-next-line */\n    TaskbarEdit.prototype.removeFirstBorder = function (element) {\n        var canremove = this.parent.rowDragAndDropModule['dropPosition'] === 'bottomSegment';\n        if (this.parent.element.getElementsByClassName('e-firstrow-border').length > 0 && element &&\n            (element.getAttribute('data-rowindex') !== 0 || canremove)) {\n            this.parent.element.getElementsByClassName('e-firstrow-border')[0].remove();\n        }\n    };\n    TaskbarEdit.prototype.removeLastBorder = function (element) {\n        var isEmptyRow = element && (element.classList.contains('e-emptyrow') || element.classList.contains('e-columnheader')\n            || element.classList.contains('e-detailrow'));\n        var islastRowIndex;\n        if (this.parent.enableVirtualization) {\n            islastRowIndex = element && !isEmptyRow &&\n                this.parent.treeGrid.getRows()[this.parent.treeGrid.getCurrentViewRecords().length - 1].getAttribute('data-uid') !==\n                    element.getAttribute('data-uid');\n        }\n        else {\n            islastRowIndex = element && !isEmptyRow &&\n                this.parent.treeGrid.getRowByIndex(this.parent.treeGrid.getCurrentViewRecords().length - 1).getAttribute('data-uid') !==\n                    element.getAttribute('data-uid');\n        }\n        var canremove = islastRowIndex || this.parent.rowDragAndDropModule['dropPosition'] === 'topSegment';\n        if (this.parent.element.getElementsByClassName('e-lastrow-border').length > 0 && element && (islastRowIndex || canremove)) {\n            this.parent.element.getElementsByClassName('e-lastrow-border')[0].remove();\n        }\n    };\n    TaskbarEdit.prototype.removetopOrBottomBorder = function () {\n        var border = [].slice.call(this.parent.element.querySelectorAll('.e-dropbottom, .e-droptop'));\n        if (border.length) {\n            this.addRemoveClasses(border, false, 'e-dropbottom');\n            this.addRemoveClasses(border, false, 'e-droptop');\n        }\n    };\n    TaskbarEdit.prototype.topOrBottomBorder = function (target) {\n        var rowElement;\n        if (this.parent.enableVirtualization) {\n            var gridElement = this.parent.treeGrid.getRows().filter(function (data) {\n                return data.getAttribute('data-rowindex') === target.getAttribute('data-rowindex');\n            })[0];\n            var index = this.parent.treeGrid.getRows().indexOf(gridElement);\n            rowElement = this.parent.getRowByIndex(index).children;\n        }\n        else {\n            rowElement = this.parent.getRowByIndex(parseInt(target.getAttribute('data-rowindex'), 10)).children;\n        }\n        if (rowElement) {\n            if (this.parent.rowDragAndDropModule['dropPosition'] === 'above') {\n                this.addRemoveClasses(rowElement, true, 'e-droptop');\n                if (this.parent.element.getElementsByClassName('e-lastrow-dragborder').length > 0) {\n                    this.parent.element.getElementsByClassName('e-lastrow-dragborder')[0].remove();\n                }\n            }\n            if (this.parent.rowDragAndDropModule['dropPosition'] === 'below') {\n                this.addRemoveClasses(rowElement, true, 'e-dropbottom');\n            }\n        }\n    };\n    TaskbarEdit.prototype.removeChildBorder = function () {\n        var borderElem = [].slice.call(this.parent.element.querySelectorAll('.e-childborder'));\n        if (borderElem.length > 0) {\n            this.addRemoveClasses(borderElem, false, 'e-childborder');\n        }\n    };\n    TaskbarEdit.prototype.addRemoveClasses = function (cells, add, className) {\n        for (var i = 0, len = cells.length; i < len; i++) {\n            if (add) {\n                cells[parseInt(i.toString(), 10)].classList.add(className);\n            }\n            else {\n                cells[parseInt(i.toString(), 10)].classList.remove(className);\n            }\n        }\n    };\n    TaskbarEdit.prototype.addErrorElem = function () {\n        var dragelem = document.getElementsByClassName('e-clone-taskbar')[0];\n        var errorelem = document.querySelectorAll('.e-errorelem').length;\n        if (!errorelem) {\n            var ele = document.createElement('div');\n            classList(ele, ['e-errorcontainer'], []);\n            classList(ele, ['e-icons', 'e-errorelem'], []);\n            if (this.taskBarEditRecord.ganttProperties.segments && this.taskBarEditRecord.ganttProperties.segments.length > 0) {\n                ele.style.paddingTop = this.parent.taskbarHeight + 'px';\n            }\n            dragelem.appendChild(ele);\n        }\n    };\n    TaskbarEdit.prototype.removeErrorElem = function () {\n        var errorelem = document.querySelector('.e-errorelem');\n        if (errorelem) {\n            errorelem.remove();\n        }\n    };\n    TaskbarEdit.prototype.ensurePosition = function (draggedRecords, currentRecord) {\n        var _this = this;\n        draggedRecords.filter(function (draggedRecord) {\n            if (draggedRecord.hasChildRecords && !isNullOrUndefined(draggedRecord.childRecords)) {\n                var valid = draggedRecord.childRecords.indexOf(currentRecord);\n                if (valid === -1) {\n                    _this.ensurePosition(draggedRecord.childRecords, currentRecord);\n                }\n                else {\n                    _this.parent.rowDragAndDropModule['dropPosition'] = 'Invalid';\n                    _this.addErrorElem();\n                    return;\n                }\n            }\n        });\n    };\n    /**\n     * To handle mouse move action in chart\n     *\n     * @param {PointerEvent} event .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.mouseMoveAction = function (event) {\n        var _this = this;\n        if (this.parent.isAdaptive) {\n            if (!this.canDrag) {\n                return;\n            }\n            else {\n                this.multipleSelectionEnabled();\n            }\n        }\n        var containerPosition = this.parent.getOffsetRect(this.parent.ganttChartModule.chartBodyContainer);\n        var e = this.getCoordinate(event);\n        if (this.parent.enableRtl) {\n            this.mouseMoveX = Math.abs(e.pageX - (containerPosition.left +\n                Math.abs(this.parent.ganttChartModule.scrollObject.previousScroll.left)));\n        }\n        else {\n            this.mouseMoveX = e.pageX - containerPosition.left +\n                this.parent.ganttChartModule.scrollObject.previousScroll.left;\n        }\n        this.mouseMoveY = e.pageY - containerPosition.top +\n            this.parent.ganttChartModule.scrollObject.previousScroll.top;\n        this.dragMouseLeave = false;\n        var cancel = false;\n        if (this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'ParentDrag' || this.taskBarEditAction === 'ManualParentDrag' || this.taskBarEditAction === 'MilestoneDrag') {\n            var ganttRowElement = void 0;\n            if (this.parent.enableVirtualization) {\n                var index = this.parent.currentViewData.indexOf(this.taskBarEditRecord);\n                ganttRowElement = this.parent.getRowByIndex(index);\n            }\n            else {\n                ganttRowElement = this.parent.getRowByIndex(this.taskBarEditRecord.index);\n            }\n            var eventArgs = {\n                cancel: cancel,\n                cloneElement: this.taskbarElement,\n                data: this.taskBarEditRecord,\n                target: event.target,\n                rows: ganttRowElement\n            };\n            this.parent.trigger('rowDrag', eventArgs);\n            cancel = eventArgs['cancel'];\n        }\n        if (!cancel) {\n            this.isMouseDragCheck();\n        }\n        if (this.isMouseDragged && this.taskBarEditAction) {\n            event.preventDefault();\n            if (!isNullOrUndefined(this.taskbarElement) && !isNullOrUndefined(this.editElement) && (this.taskBarEditAction !== 'ConnectorPointRightDrag' &&\n                this.taskBarEditAction !== 'ConnectorPointLeftDrag') && !(this.parent.viewType === 'ResourceView' && this.currentData.hasChildRecords)) {\n                var currentElement = this.editElement.parentElement;\n                if (this.parent.enableTimelineVirtualization &&\n                    this.parent.timelineModule.wholeTimelineWidth > this.parent.element.offsetWidth * 3) {\n                    currentElement.style.setProperty('position', 'relative');\n                }\n                else {\n                    currentElement.style.setProperty('position', 'absolute');\n                }\n                if ((this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'LeftResizing') &&\n                    !isNullOrUndefined(this.currentIndex) && !isNullOrUndefined(this.currentIndex) ? Number(this.currentIndex) === 0 : false) {\n                    this.taskbarElement.childNodes[0].childNodes[0].style.setProperty('top', currentElement.parentElement.offsetTop + 'px');\n                    if (this.parent.allowTaskbarDragAndDrop && this.taskBarEditAction !== 'LeftResizing' && this.taskBarEditAction !== 'RightResizing' && this.taskBarEditAction !== 'ProgressResizing') {\n                        this.parent.chartPane.getElementsByClassName('e-gantt-chart')[0].appendChild(this.taskbarElement);\n                    }\n                    else {\n                        currentElement.parentElement.appendChild(this.taskbarElement);\n                    }\n                }\n                else {\n                    if (this.parent.allowTaskbarDragAndDrop && this.taskBarEditAction !== 'LeftResizing' && this.taskBarEditAction !== 'RightResizing' && this.taskBarEditAction !== 'ProgressResizing') {\n                        this.parent.chartPane.getElementsByClassName('e-gantt-chart')[0].appendChild(this.taskbarElement);\n                    }\n                    else {\n                        currentElement.appendChild(this.taskbarElement);\n                    }\n                }\n                if (this.taskBarEditAction !== 'ProgressResizing') {\n                    if (this.parent.enableTimelineVirtualization &&\n                        this.parent.timelineModule.wholeTimelineWidth > this.parent.element.offsetWidth * 3) {\n                        var rootElement = this.parent.ganttChartModule.chartBodyContainer.querySelectorAll('.e-chart-scroll-container');\n                        rootElement[0].appendChild(this.taskbarResizer);\n                    }\n                    else {\n                        var rootElement = this.parent.ganttChartModule.chartBodyContainer.querySelectorAll('.e-chart-rows-container');\n                        rootElement[0].appendChild(this.taskbarResizer);\n                    }\n                }\n            }\n            if (this.parent.allowTaskbarDragAndDrop && (this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'ParentDrag' ||\n                this.taskBarEditAction === 'MilestoneDrag' || this.taskBarEditAction === 'ManualParentDrag')) {\n                var taskbarPosition = this.parent.getOffsetRect(this.taskBarEditElement);\n                var left = (!isNullOrUndefined(document.body.className) && document.body.className.includes('e-bigger')) ? 12 : 0;\n                var pointerLeft = (3 + this.parent.chartRowsModule.connectorPointWidth + left);\n                var xValue = void 0;\n                if (this.parent.enableRtl) {\n                    xValue = Math.abs(taskbarPosition.left + pointerLeft + 1);\n                }\n                else {\n                    xValue = Math.abs(taskbarPosition.left - pointerLeft - 1);\n                }\n                if (!this.isClonedElement && !this.parent.enableRtl) {\n                    xValue = xValue - this.parent.ganttChartModule.scrollElement.scrollLeft;\n                    this.isClonedElement = true;\n                }\n                var rowPositionHeight = 0;\n                this.parent.rowDragAndDropModule['dropPosition'] = undefined;\n                var target = void 0;\n                var yValue = void 0;\n                if (event.type === 'touchmove' || event.type === 'touchstart' || event.type === 'touchend') {\n                    yValue = event['changedTouches'][0].pageY;\n                }\n                else {\n                    yValue = event.y;\n                }\n                if (this.parent.enableRtl) {\n                    target = document.elementFromPoint(this.parent.ganttChartModule.chartBodyContainer.offsetWidth, yValue);\n                    if (target.classList.contains('e-taskbar-resize-div')) {\n                        target = document.elementFromPoint(this.parent.ganttChartModule.chartBodyContainer.offsetWidth - target['offsetWidth'], yValue);\n                    }\n                }\n                else {\n                    target = document.elementFromPoint(xValue, yValue);\n                }\n                var draggedTreeGridRowElement = void 0;\n                if (this.parent.enableVirtualization) {\n                    if (!this.draggedTreeGridRowElement) {\n                        var currentElement = this.editElement.parentElement;\n                        draggedTreeGridRowElement = currentElement.parentElement;\n                        this.draggedTreeGridRowElement = draggedTreeGridRowElement;\n                        this.draggedTreeGridRowHeight = this.draggedTreeGridRowElement.offsetHeight;\n                    }\n                }\n                else {\n                    draggedTreeGridRowElement = this.parent.treeGrid.getRows()[this.parent.flatData.indexOf(this.taskBarEditRecord)];\n                    this.draggedTreeGridRowElement = draggedTreeGridRowElement;\n                    if (this.parent.enableMultiTaskbar) {\n                        if (this.taskBarEditRecord.parentItem &&\n                            !isNullOrUndefined(this.parent.getRowByID(this.taskBarEditRecord.parentItem.taskId))) {\n                            this.draggedTreeGridRowHeight = this.parent.getRowByID(this.taskBarEditRecord.parentItem.taskId).offsetHeight;\n                            if (this.parent.viewType === 'ProjectView' && this.draggedTreeGridRowHeight === 0) {\n                                var nestedParent = this.parent.getRecordByID(this.taskBarEditRecord.parentItem.taskId);\n                                while (nestedParent.parentItem) {\n                                    nestedParent = this.parent.getRecordByID(nestedParent.parentItem.taskId);\n                                    this.draggedTreeGridRowHeight = this.parent.getRowByID(nestedParent['TaskID']).offsetHeight;\n                                }\n                            }\n                        }\n                        else {\n                            var currentElement = this.editElement.parentElement;\n                            this.draggedTreeGridRowElement = currentElement.parentElement;\n                            this.draggedTreeGridRowHeight = this.draggedTreeGridRowElement.offsetHeight;\n                        }\n                    }\n                    else {\n                        this.draggedTreeGridRowHeight = this.draggedTreeGridRowElement.offsetHeight;\n                    }\n                }\n                var chartRowElement_1;\n                if (target) {\n                    chartRowElement_1 = closest(target, 'tr.' + cls.chartRow);\n                }\n                if (chartRowElement_1) {\n                    var droppedTreeGridRowElement = void 0;\n                    if (this.parent.enableVirtualization) {\n                        droppedTreeGridRowElement = this.parent.treeGrid.getRows().filter(function (data) {\n                            return data.getAttribute('data-rowindex') === chartRowElement_1.getAttribute('data-rowindex');\n                        })[0];\n                    }\n                    else {\n                        droppedTreeGridRowElement = this.parent.treeGrid.getRows()[parseInt(chartRowElement_1.getAttribute('data-rowindex'), 10)];\n                    }\n                    this.removeFirstBorder(droppedTreeGridRowElement);\n                    this.removeLastBorder(droppedTreeGridRowElement);\n                    if (!isNullOrUndefined(droppedTreeGridRowElement) && droppedTreeGridRowElement.getAttribute('data-uid') === this.draggedTreeGridRowElement.getAttribute('data-uid')\n                        || !parentsUntil(target, 'e-chart-rows-container')) {\n                        this.parent.rowDragAndDropModule['dropPosition'] = 'Invalid';\n                        this.addErrorElem();\n                    }\n                    var tObj = this.parent;\n                    var rowTop = 0;\n                    var toolHeight = tObj.toolbarModule ?\n                        this.parent.toolbarModule.element.offsetHeight : 0;\n                    var positionOffSet = this.parent.getOffsetRect(tObj.element);\n                    var contentHeight = tObj.treeGrid.getHeaderContent().offsetHeight + positionOffSet.top + toolHeight;\n                    var scrollTop = tObj.treeGrid.getContent().firstElementChild.scrollTop;\n                    if (!isNullOrUndefined(droppedTreeGridRowElement)) {\n                        rowPositionHeight = droppedTreeGridRowElement.offsetTop - scrollTop;\n                    }\n                    if (this.parent.enableVirtualization) {\n                        rowTop = this.parent.getOffsetRect(droppedTreeGridRowElement).top;\n                    }\n                    else {\n                        rowTop = rowPositionHeight + contentHeight;\n                    }\n                    var rowBottom = rowTop + this.draggedTreeGridRowHeight;\n                    var difference = rowBottom - rowTop;\n                    var divide = difference / 3;\n                    var topRowSegment = rowTop + divide;\n                    var middleRowSegment = topRowSegment + divide;\n                    var bottomRowSegment = middleRowSegment + divide;\n                    var posy = (event.type === 'mousemove') ? event.pageY : ((!isNullOrUndefined(event['changedTouches'])) ? event['changedTouches'][0].pageY : null);\n                    var isTopSegment = posy <= topRowSegment;\n                    var isMiddleRowSegment = (posy > topRowSegment && posy <= middleRowSegment);\n                    var isBottomRowSegment = (posy > middleRowSegment && posy <= bottomRowSegment);\n                    if (isTopSegment || isMiddleRowSegment || isBottomRowSegment) {\n                        var rowElement = void 0;\n                        if (this.parent.enableVirtualization) {\n                            var index = this.parent.treeGrid.getRows().indexOf(droppedTreeGridRowElement);\n                            rowElement = this.parent.getRowByIndex(index);\n                        }\n                        else {\n                            rowElement = this.parent.getRowByIndex(parseInt(droppedTreeGridRowElement.getAttribute('data-rowindex'), 10));\n                        }\n                        var rowIndex = getValue('rowIndex', rowElement);\n                        var droppedTreeGridRecord = this.parent.flatData[rowIndex];\n                        var isValid = true;\n                        if (this.parent.viewType === 'ResourceView' && !this.taskBarEditRecord.hasChildRecords && !droppedTreeGridRecord.hasChildRecords &&\n                            !isNullOrUndefined(droppedTreeGridRecord.parentItem) &&\n                            this.taskBarEditRecord.parentItem.taskId === droppedTreeGridRecord.parentItem.taskId) {\n                            isValid = false;\n                        }\n                        if (droppedTreeGridRecord) {\n                            this.ensurePosition([this.taskBarEditRecord], droppedTreeGridRecord);\n                        }\n                        if (isValid) {\n                            if (isTopSegment && this.parent.rowDragAndDropModule['dropPosition'] !== 'Invalid') {\n                                this.parent.rowDragAndDropModule['dropPosition'] = 'above';\n                                this.removeChildBorder();\n                                this.removeErrorElem();\n                                this.removetopOrBottomBorder();\n                                this.topOrBottomBorder(rowElement);\n                            }\n                            if (isMiddleRowSegment && this.parent.rowDragAndDropModule['dropPosition'] !== 'Invalid') {\n                                this.parent.rowDragAndDropModule['dropPosition'] = 'child';\n                                this.removetopOrBottomBorder();\n                                this.addRemoveClasses(rowElement.children, true, 'e-childborder');\n                            }\n                            if (isBottomRowSegment && this.parent.rowDragAndDropModule['dropPosition'] !== 'Invalid') {\n                                this.parent.rowDragAndDropModule['dropPosition'] = 'below';\n                                this.removetopOrBottomBorder();\n                                this.removeErrorElem();\n                                this.removeChildBorder();\n                                this.removeFirstBorder(droppedTreeGridRowElement);\n                                this.topOrBottomBorder(droppedTreeGridRowElement);\n                            }\n                        }\n                    }\n                }\n            }\n            var args_1 = {\n                cancel: false,\n                requestType: 'taskbarediting',\n                taskBarEditAction: this.taskBarEditAction,\n                data: this.taskBarEditRecord\n            };\n            if (this.segmentIndex !== -1) {\n                args_1.requestType = 'mergeSegment';\n            }\n            this.parent.trigger('actionBegin', args_1, function (arg) {\n                if (args_1.taskBarEditAction === 'ConnectorPointRightDrag' || args_1.taskBarEditAction === 'ConnectorPointLeftDrag'\n                    || args_1.taskBarEditAction === 'LeftResizing' || args_1.taskBarEditAction === 'RightResizing'\n                    || args_1.taskBarEditAction === 'ProgressResizing' || args_1.taskBarEditAction === 'ChildDrag' || args_1.taskBarEditAction === 'ParentDrag' ||\n                    args_1.taskBarEditAction === 'MilestoneDrag' || args_1.taskBarEditAction === 'ManualParentDrag' || args_1.taskBarEditAction === 'ParentResizing') {\n                    _this.parent.showIndicator = false;\n                    if (_this.parent.undoRedoModule && _this.parent['isUndoRedoItemPresent']('Edit')) {\n                        if (_this.parent.undoRedoModule['redoEnabled']) {\n                            _this.parent.undoRedoModule['disableRedo']();\n                        }\n                        var action = {};\n                        if (_this.parent.undoRedoModule['getUndoCollection'].length === 0) {\n                            _this.isDragged = true;\n                            action['modifiedRecords'] = [];\n                            action['action'] = args_1.taskBarEditAction;\n                            _this.parent.undoRedoModule['createUndoCollection']();\n                            _this.parent.undoRedoModule['getUndoCollection'][_this.parent.undoRedoModule['getUndoCollection'].length - 1] = action;\n                            _this.parent.editModule['createArray'] = false;\n                            _this.parent.undoRedoModule['changedRecords'] = [];\n                        }\n                        else if (_this.parent.editModule['createArray']) {\n                            _this.isDragged = true;\n                            action['modifiedRecords'] = [];\n                            action['action'] = args_1.taskBarEditAction;\n                            _this.parent.undoRedoModule['createUndoCollection']();\n                            _this.parent.undoRedoModule['getUndoCollection'][_this.parent.undoRedoModule['getUndoCollection'].length - 1] = action;\n                            _this.parent.editModule['createArray'] = false;\n                            _this.parent.undoRedoModule['changedRecords'] = [];\n                        }\n                    }\n                }\n                if (!isNullOrUndefined(_this.parent.loadingIndicator) && _this.parent.loadingIndicator.indicatorType === 'Shimmer' && _this.parent.showIndicator) {\n                    _this.parent.showMaskRow();\n                }\n                else if (_this.parent.showIndicator) {\n                    _this.parent.showSpinner();\n                }\n                if (arg.cancel === false) {\n                    _this.taskBarEditingAction(event, false);\n                }\n            });\n        }\n        else if (!this.parent.isAdaptive && !this.taskBarEditAction) {\n            this.updateTaskBarEditElement(event);\n        }\n    };\n    /**\n     * Method to update taskbar editing action on mous move.\n     *\n     * @param {PointerEvent} e .\n     * @param {boolean} isMouseClick .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.taskBarEditingAction = function (e, isMouseClick) {\n        var _this = this;\n        var args = {};\n        var recordIndex = this.parent.ganttChartModule.getIndexByTaskBar(this.taskBarEditElement);\n        if (this.taskBarEditRecord !== null) {\n            args.editingFields = this.taskBarEditRecord.ganttProperties;\n            args.data = this.taskBarEditRecord;\n            if (this.parent.viewType === 'ResourceView' && args.data.level === 0) {\n                return;\n            }\n            args.recordIndex = recordIndex;\n            args.taskBarEditAction = this.taskBarEditAction;\n            args.roundOffDuration = this.roundOffDuration;\n            args.cancel = false;\n            args.previousData = this.previousItem;\n            args.segmentIndex = this.segmentIndex;\n            this.roundOffDuration = args.roundOffDuration;\n            this.targetElement = args.target = closest(e.target, '.e-gantt-child-taskbar');\n            this.updateMouseMoveProperties(e);\n            if (!this.oldData) {\n                this.oldData = extend([], [], [this.taskBarEditRecord], true)[0];\n            }\n            var segmentIndex = this.segmentIndex !== -1 ? this.segmentIndex : null;\n            if (this.taskBarEditAction === 'ProgressResizing') {\n                this.mainElement = parentsUntil(this.taskBarEditElement, cls.taskBarMainContainer);\n                if (this.taskBarEditRecord.ganttProperties.segments && this.taskBarEditRecord.ganttProperties.segments.length > 0) {\n                    segmentIndex = -1;\n                    for (var i = 0; i < this.taskBarEditRecord.ganttProperties.segments.length; i++) {\n                        var resizeGripper = document.getElementsByClassName('e-child-progress-resizer e-progress-resize-gripper')[0]['style'];\n                        var currentWidth = (this.parent.enableRtl ? parseInt(resizeGripper['right'], 10) - 8 : parseInt(resizeGripper['left'], 10) + 8);\n                        if (currentWidth < this.taskBarEditRecord.ganttProperties.segments[i].width && i === 0) {\n                            segmentIndex = i;\n                        }\n                        if (this.taskBarEditRecord.ganttProperties.segments[i + 1] &&\n                            currentWidth < this.taskBarEditRecord.ganttProperties.segments[i + 1].width +\n                                this.taskBarEditRecord.ganttProperties.segments[i + 1].left && currentWidth >\n                            this.taskBarEditRecord.ganttProperties.segments[i + 1].left) {\n                            segmentIndex = i + 1;\n                        }\n                    }\n                }\n                this.performProgressResize(e, segmentIndex);\n            }\n            else if (this.taskBarEditAction === 'LeftResizing') {\n                this.enableLeftResizing(e);\n            }\n            else if (this.taskBarEditAction === 'RightResizing' || this.taskBarEditAction === 'ParentResizing') {\n                this.enableRightResizing(e);\n            }\n            else if (this.taskBarEditAction === 'ParentDrag' || this.taskBarEditAction === 'ChildDrag' ||\n                this.taskBarEditAction === 'MilestoneDrag' || this.taskBarEditAction === 'ManualParentDrag') {\n                this.enableDragging(e);\n            }\n            else if (this.taskBarEditAction === 'ConnectorPointLeftDrag' ||\n                this.taskBarEditAction === 'ConnectorPointRightDrag') {\n                this.updateConnectorLineSecondProperties(e);\n                this.triggerDependencyEvent(e);\n                this.drawFalseLine();\n            }\n            if (this.parent.allowTaskbarDragAndDrop && this.taskBarEditAction !== 'LeftResizing' && this.taskBarEditAction !== 'RightResizing' && this.taskBarEditAction !== 'ProgressResizing') {\n                var parentClientRect = this.parent.getOffsetRect(this.parent.chartPane);\n                var coordinates = this.getCoordinate(e);\n                var position = { top: coordinates.pageY, left: coordinates.pageX };\n                var pos = { left: Math.abs(position.left - parentClientRect.left), top: position.top - parentClientRect.top };\n                if (this.parent.viewType === 'ResourceView' && this.parent.enableMultiTaskbar) {\n                    var parentRecord = this.parent.getRecordByID(this.taskBarEditRecord.parentItem.taskId);\n                    if (!this.parent.allowTaskbarOverlap && this.taskBarEditRecord.parentItem && !parentRecord.expanded) {\n                        var reduceHeight = 0;\n                        if (parseInt(this.editElement['style'].marginTop, 10) > this.parent.rowHeight) {\n                            for (var i = 0; i < parentRecord.childRecords.length; i++) {\n                                if (parentRecord.childRecords[i].ganttProperties.taskId !==\n                                    this.taskBarEditRecord.ganttProperties.taskId) {\n                                    reduceHeight = reduceHeight + this.parent.rowHeight;\n                                }\n                                else {\n                                    break;\n                                }\n                            }\n                            pos.top = pos.top - reduceHeight;\n                        }\n                    }\n                }\n                this.topValue = pos.top;\n                var xValue = void 0;\n                if (e.type === 'touchmove' || e.type === 'touchstart' || e.type === 'touchend') {\n                    xValue = e['changedTouches'][0].pageX;\n                }\n                else {\n                    xValue = e.pageX;\n                }\n                if (this.parent.enableRtl) {\n                    this.leftValue = pos.left - Math.abs(xValue - (this.parent.getOffsetRect(this.taskBarEditElement).left)) -\n                        (this.previousLeftValue !== 0 ? xValue - this.previousLeftValue : 0);\n                }\n                else {\n                    this.leftValue = pos.left - (xValue - this.parent.getOffsetRect(this.taskBarEditElement).left) +\n                        (this.previousLeftValue !== 0 ? xValue - this.previousLeftValue : 0);\n                }\n                if (this.previousLeftValue === 0) {\n                    if (!this.parent.enableRtl) {\n                        this.leftValue = this.leftValue - this.parent.ganttChartModule.scrollObject.previousScroll.left;\n                    }\n                    else {\n                        this.leftValue = this.leftValue - (this.parent.ganttChartModule.scrollObject.previousScroll.left);\n                        if (this.parent.ganttChartModule.scrollObject.previousScroll.left === 0) {\n                            this.leftValue = this.leftValue - 60;\n                        }\n                    }\n                }\n                this.previousLeftValue = xValue;\n            }\n            else {\n                this.leftValue = this.taskBarEditRecord.ganttProperties.left;\n            }\n            this.currentSegmentIndex = segmentIndex;\n            this.setItemPosition();\n            this.updateEditedItem();\n            this.tooltipValue = (e.type === 'touchmove' || e.type === 'touchstart' || e.type === 'touchend') ? e['changedTouches'][0].pageX : e.pageX;\n            if (!this.taskBarEditRecord.ganttProperties.segments || segmentIndex !== -1) {\n                this.editTooltip.updateTooltip(segmentIndex);\n            }\n            if (isMouseClick) {\n                this.taskBarEditedAction(e);\n            }\n            this.parent.trigger('taskbarEditing', args, function (arg) {\n                if (arg.cancel && _this.taskBarEditRecord !== null) {\n                    _this.tapPointOnFocus = false;\n                    merge(_this.taskBarEditRecord.ganttProperties, arg.previousData);\n                }\n            });\n        }\n    };\n    /**\n     * To update property while perform mouse move.\n     *\n     * @param {PointerEvent} event .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.updateMouseMoveProperties = function (event) {\n        var containerPosition = this.parent.getOffsetRect(this.parent.ganttChartModule.chartBodyContainer);\n        var e = this.getCoordinate(event);\n        var parentWithZoomStyle = this.parent.element.closest('[style*=\"zoom\"]');\n        if (parentWithZoomStyle) {\n            var zoom1 = parseFloat(getComputedStyle(parentWithZoomStyle).zoom);\n            e.pageX = e.pageX / zoom1;\n            e.pageY = e.pageY / zoom1;\n        }\n        if (e.pageX || e.pageY) {\n            if (this.parent.enableRtl) {\n                this.mouseMoveX = Math.abs(e.pageX - (containerPosition.left +\n                    Math.abs(this.parent.ganttChartModule.scrollObject.previousScroll.left)));\n            }\n            else {\n                this.mouseMoveX = e.pageX - containerPosition.left +\n                    this.parent.ganttChartModule.scrollObject.previousScroll.left;\n            }\n            this.tooltipPositionX = this.mouseMoveX;\n            this.mouseMoveY = e.pageY - containerPosition.top +\n                this.parent.ganttChartModule.scrollObject.previousScroll.top;\n        }\n        var isConnectorLineEdit = (this.taskBarEditAction === 'ConnectorPointLeftDrag' ||\n            this.taskBarEditAction === 'ConnectorPointRightDrag') ?\n            true : false;\n        if (((this.taskBarEditRecord.ganttProperties.width > 3 || this.taskBarEditRecord.ganttProperties.isMilestone) && !(this.taskBarEditAction === 'ProgressResizing' &&\n            (this.taskBarEditRecord.ganttProperties.progress === 0 || this.taskBarEditRecord.ganttProperties.progress === 100))) ||\n            isConnectorLineEdit) {\n            var mouseX = 0;\n            if (this.parent.enableRtl) {\n                mouseX = Math.abs(Math.abs(this.mouseMoveX) - Math.abs(this.parent.ganttChartModule.scrollObject.previousScroll.left) +\n                    containerPosition.left);\n            }\n            else {\n                mouseX = this.mouseMoveX - this.parent.ganttChartModule.scrollObject.previousScroll.left +\n                    containerPosition.left;\n            }\n            var mouseY = this.mouseMoveY - this.parent.ganttChartModule.scrollObject.previousScroll.top +\n                containerPosition.top;\n            if ((mouseX + 20) >\n                containerPosition.left + this.parent.ganttChartModule.chartBodyContainer.offsetWidth) {\n                this.timerCount = this.parent.ganttChartModule.scrollObject.previousScroll.left;\n                this.startScrollTimer('right');\n            }\n            else if ((mouseX + 40) >\n                containerPosition.left + this.parent.ganttChartModule.chartBodyContainer.offsetWidth && this.parent.enableRtl &&\n                this.parent.ganttChartModule.scrollObject.previousScroll.left === 0) {\n                this.parent.ganttChartModule.scrollObject.previousScroll.left = -1;\n                this.timerCount = this.parent.ganttChartModule.scrollObject.previousScroll.left;\n                this.startScrollTimer('right');\n            }\n            else if ((mouseX - 20) < containerPosition.left) {\n                this.timerCount = this.parent.ganttChartModule.scrollObject.previousScroll.left;\n                this.startScrollTimer('left');\n            }\n            else if (((mouseY + 80) >\n                containerPosition.top + this.parent.ganttChartModule.chartBodyContainer.offsetHeight)) {\n                this.timerCount = this.parent.ganttChartModule.scrollObject.previousScroll.top;\n                this.startScrollTimer('bottom');\n            }\n            else if (((mouseY - 20) < containerPosition.top)) {\n                this.timerCount = this.parent.ganttChartModule.scrollObject.previousScroll.top;\n                this.startScrollTimer('top');\n            }\n            else {\n                this.stopScrollTimer();\n            }\n        }\n        else {\n            this.stopScrollTimer();\n        }\n    };\n    /**\n     * To start the scroll timer.\n     *\n     * @param {string} direction .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.startScrollTimer = function (direction) {\n        var _this = this;\n        this.stopScrollTimer();\n        var leftSign = 0;\n        this.scrollTimer = window.setInterval(function () {\n            if (Math.sign(_this.timerCount) === -1) {\n                leftSign = -1;\n                _this.timerCount = Math.abs(_this.timerCount);\n            }\n            if (direction === 'right') {\n                var timelineWidth = _this.parent.enableTimelineVirtualization ?\n                    _this.parent.timelineModule.wholeTimelineWidth : _this.parent.timelineModule.totalTimelineWidth;\n                _this.timerCount = (_this.timerCount + 1) >= timelineWidth ?\n                    timelineWidth : (_this.timerCount + 1);\n            }\n            else if (direction === 'bottom') {\n                _this.timerCount = _this.timerCount + 1;\n            }\n            else {\n                _this.timerCount = (_this.timerCount - 1) < 0 ? 0 : (_this.timerCount - 1);\n            }\n            if (direction === 'bottom' || direction === 'top') {\n                _this.parent.ganttChartModule.scrollObject.setScrollTop(_this.timerCount);\n            }\n            else {\n                _this.parent.ganttChartModule.scrollObject.setScrollLeft(_this.timerCount, leftSign);\n            }\n            if (_this.taskBarEditAction === 'ConnectorPointLeftDrag'\n                || _this.taskBarEditAction === 'ConnectorPointRightDrag') {\n                _this.drawFalseLine();\n            }\n        }, 0);\n    };\n    /**\n     * To stop the scroll timer.\n     *\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.stopScrollTimer = function () {\n        window.clearInterval(this.scrollTimer);\n        this.scrollTimer = null;\n    };\n    /**\n     * To update left and width while perform taskbar drag operation.\n     *\n     * @param {PointerEvent} e .\n     * @returns {void} .\n     * @private\n     */\n    // eslint-disable-next-line\n    TaskbarEdit.prototype.enableDragging = function (e) {\n        var item = this.taskBarEditRecord.ganttProperties;\n        var timelineWidth = this.parent.enableTimelineVirtualization ?\n            this.parent.timelineModule.wholeTimelineWidth : this.parent.timelineModule.totalTimelineWidth;\n        var differenceWidth = 0;\n        if (this.taskBarEditElement.classList.contains('e-segmented-taskbar') &&\n            !this.taskBarEditElement.classList.contains('e-segment-first')) {\n            var segments = this.taskBarEditRecord.ganttProperties.segments.map(function (e) { return (__assign({}, e)); });\n            var segment = segments[this.segmentIndex];\n            if (this.mouseDownX > this.mouseMoveX) {\n                differenceWidth = isNullOrUndefined(this.previousMouseMove) ?\n                    (this.mouseDownX - this.mouseMoveX) : (this.previousMouseMove - this.mouseMoveX);\n                this.previousMouseMove = this.mouseMoveX;\n                segment.left = segment.left - differenceWidth;\n            }\n            else {\n                differenceWidth = isNullOrUndefined(this.previousMouseMove) ?\n                    (this.mouseMoveX - this.mouseDownX) : (this.mouseMoveX - this.previousMouseMove);\n                this.previousMouseMove = this.mouseMoveX;\n                segment.left = segment.left + differenceWidth;\n            }\n            var previousSegment = segments[this.segmentIndex - 1];\n            var nextSegment = segments[this.segmentIndex + 1];\n            var left = void 0;\n            if (this.taskBarEditElement.classList.contains('e-segment-inprogress')) {\n                left = segment.left < (previousSegment.left + previousSegment.width) ? (previousSegment.left + previousSegment.width) :\n                    ((segment.width + segment.left) > (nextSegment.left)) ? nextSegment.left - segment.width : segment.left;\n            }\n            else {\n                left = segment.left < (previousSegment.left + previousSegment.width) ? (previousSegment.left + previousSegment.width) :\n                    (item.left + segment.width + segment.left) >= timelineWidth ?\n                        (timelineWidth - segment.width) : segment.left;\n            }\n            segment.left = left;\n            this.parent.setRecordValue('segments', segments, item, true);\n            this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n        }\n        else {\n            if (this.mouseDownX > this.mouseMoveX) {\n                differenceWidth = this.mouseDownX - this.mouseMoveX;\n                if (differenceWidth > 0) {\n                    this.parent.setRecordValue('left', this.previousItem.left - differenceWidth, item, true);\n                }\n            }\n            else {\n                differenceWidth = this.mouseMoveX - this.mouseDownX;\n                this.parent.setRecordValue('left', this.previousItem.left + differenceWidth, item, true);\n            }\n            var left = item.left < 0 ? 0 : (item.left + item.width) >= timelineWidth ?\n                (timelineWidth - item.width) : item.left;\n            this.parent.setRecordValue('left', left, item, true);\n        }\n    };\n    // eslint-disable-next-line\n    TaskbarEdit.prototype.validateProgressWidth = function (item, progressWidth, totalTaskWidth) {\n        var reduceWidth = 0;\n        if (this.currentSegmentIndex !== -1 && item.segments) {\n            var startIndex = this.currentSegmentIndex >= this.segmentIndex ? 0 : this.currentSegmentIndex !== 0 ?\n                this.currentSegmentIndex : -1;\n            var endIndex = this.currentSegmentIndex >= this.segmentIndex ? this.currentSegmentIndex : this.segmentIndex;\n            if (startIndex !== -1) {\n                for (var i = startIndex; i < endIndex; i++) {\n                    reduceWidth = (item.segments[i + 1].left) - (item.segments[i].left + item.segments[i].width);\n                    progressWidth = progressWidth - reduceWidth;\n                }\n            }\n        }\n        if (item.segments && item.segments.length > 0) {\n            totalTaskWidth = this.splitTasksDuration(item.segments) * this.parent.perDayWidth;\n        }\n        return { progressWidth: progressWidth, totalTaskWidth: totalTaskWidth };\n    };\n    /**\n     * To update left and width while perform progress resize operation.\n     *\n     * @param {PointerEvent} e .\n     * @param {number} segmentIndex .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.performProgressResize = function (e, segmentIndex) {\n        var item = this.taskBarEditRecord.ganttProperties;\n        var diffrenceWidth = 0;\n        var prevProgress = item.progressWidth;\n        if (this.mouseDownX > this.mouseMoveX) {\n            if (this.mouseMoveX > item.left &&\n                (this.mouseMoveX < (item.left + item.width)) && item.left > 0) {\n                diffrenceWidth = this.mouseMoveX - item.left;\n                this.parent.setRecordValue('progressWidth', diffrenceWidth, item, true);\n            }\n            else {\n                if (this.mouseMoveX >= (item.left + item.width)) {\n                    this.parent.setRecordValue('progressWidth', item.width, item, true);\n                }\n                else {\n                    this.parent.setRecordValue('progressWidth', 0, item, true);\n                }\n            }\n        }\n        else {\n            if (this.mouseMoveX > item.left &&\n                (this.mouseMoveX < (item.left + item.width))) {\n                diffrenceWidth = this.mouseMoveX - item.left;\n                this.parent.setRecordValue('progressWidth', diffrenceWidth, item, true);\n            }\n            else {\n                if (this.mouseMoveX <= item.left) {\n                    this.parent.setRecordValue('progressWidth', 0, item, true);\n                }\n                else {\n                    this.parent.setRecordValue('progressWidth', item.width, item, true);\n                }\n            }\n        }\n        var widthValue = item.progressWidth > item.width ?\n            item.width : item.progressWidth;\n        widthValue = item.progressWidth < 0 ? 0 : item.progressWidth;\n        if (segmentIndex !== -1 || !segmentIndex) {\n            this.parent.setRecordValue('progressWidth', widthValue, item, true);\n        }\n        else {\n            this.parent.setRecordValue('progressWidth', prevProgress, item, true);\n        }\n        this.progressValue = widthValue;\n        var diff = item.width - item.progressWidth;\n        if (diff <= 4) {\n            this.progressBorderRadius = 4 - diff;\n        }\n        else {\n            this.progressBorderRadius = 0;\n        }\n    };\n    /**\n     * To update left and width while perform taskbar left resize operation.\n     *\n     * @param {PointerEvent} e .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.enableLeftResizing = function (e) {\n        var item = this.taskBarEditRecord.ganttProperties;\n        var differenceWidth = 0;\n        if (this.taskBarEditElement.classList.contains('e-segmented-taskbar') && item.segments.length > 1) {\n            this.enableSplitTaskLeftResize(item);\n        }\n        else {\n            if (this.mouseDownX > this.mouseMoveX) {\n                if (this.mouseMoveX < (item.left + item.width)) {\n                    differenceWidth = this.mouseDownX - this.mouseMoveX;\n                    if (item.left > 0) {\n                        this.parent.setRecordValue('left', this.previousItem.left - differenceWidth, item, true);\n                        this.parent.setRecordValue('width', this.previousItem.width + differenceWidth, item, true);\n                    }\n                }\n                else {\n                    if (this.mouseMoveX > (item.left + item.width)) {\n                        differenceWidth = this.mouseDownX - this.mouseMoveX;\n                        this.parent.setRecordValue('left', this.previousItem.left - differenceWidth, item, true);\n                        this.parent.setRecordValue('width', 3, item, true);\n                    }\n                }\n            }\n            else {\n                if (this.mouseMoveX < (item.left + item.width)) {\n                    differenceWidth = this.mouseMoveX - this.mouseDownX;\n                    if ((item.left) < (item.left + item.width) &&\n                        ((this.previousItem.left + differenceWidth) <= (this.previousItem.left + this.previousItem.width))) {\n                        this.parent.setRecordValue('left', this.previousItem.left + differenceWidth, item, true);\n                        this.parent.setRecordValue('width', this.previousItem.width - differenceWidth, item, true);\n                    }\n                }\n                else {\n                    differenceWidth = this.mouseMoveX - this.mouseDownX;\n                    this.parent.setRecordValue('left', this.previousItem.left + differenceWidth, item, true);\n                    this.parent.setRecordValue('width', 3, item, true);\n                }\n            }\n            if (item.segments && item.segments.length === 1) {\n                item.segments[0].width = item.width;\n            }\n            this.updateEditPosition(e, item);\n            this.parent.setRecordValue('left', (this.previousItem.left + this.previousItem.width - item.width), item, true);\n        }\n    };\n    TaskbarEdit.prototype.enableSplitTaskLeftResize = function (item) {\n        var segments = this.taskBarEditRecord.ganttProperties.segments.map(function (e) { return (__assign({}, e)); });\n        var segment = segments[this.segmentIndex];\n        var differenceWidth = 0;\n        //when decrease the left and increase the width\n        if (this.mouseDownX > this.mouseMoveX) {\n            if (this.mouseMoveX < (item.left + segment.width + segment.left)) {\n                differenceWidth = isNullOrUndefined(this.previousMouseMove) ?\n                    (this.mouseDownX - this.mouseMoveX) : (this.previousMouseMove - this.mouseMoveX);\n                this.previousMouseMove = this.mouseMoveX;\n                // when resize other than 0th segment\n                if (segment.left > 0) {\n                    segment.left = segment.left - differenceWidth;\n                    segment.width = segment.width + differenceWidth;\n                    if (this.segmentIndex !== 0) {\n                        var previousSegment = segments[this.segmentIndex - 1];\n                        if ((item.left + segment.left) < (item.left + previousSegment.left + previousSegment.width)) {\n                            var difference = (item.left + previousSegment.left + previousSegment.width) - (item.left + segment.left);\n                            segment.width -= difference;\n                            segment.left = segment.left + difference;\n                        }\n                    }\n                }\n                else if (segment.left <= 0 && this.segmentIndex === 0) {\n                    this.parent.setRecordValue('left', item.left - differenceWidth, item, true);\n                    this.parent.setRecordValue('width', item.width + differenceWidth, item, true);\n                    segment.width = segment.width + differenceWidth;\n                    for (var i = 1; i < item.segments.length; i++) {\n                        var segment_1 = segments[i];\n                        segment_1.left = segment_1.left + differenceWidth;\n                    }\n                }\n            }\n            else {\n                if (this.mouseMoveX > (item.left + segment.width + segment.left)) {\n                    differenceWidth = isNullOrUndefined(this.previousMouseMove) ?\n                        (this.mouseDownX - this.mouseMoveX) : (this.previousMouseMove - this.mouseMoveX);\n                    this.previousMouseMove = this.mouseMoveX;\n                    segment.left = segment.left - differenceWidth;\n                    segment.width = this.parent.perDayWidth;\n                }\n            }\n        }\n        else {\n            // when increase left value and decrease width of segment\n            if (this.mouseMoveX < (item.left + segment.width + segment.left - this.parent.perDayWidth)) {\n                differenceWidth = isNullOrUndefined(this.previousMouseMove) ?\n                    (this.mouseMoveX - this.mouseDownX) : (this.mouseMoveX - this.previousMouseMove);\n                this.previousMouseMove = this.mouseMoveX;\n                // when decrease the first segment width\n                if (this.segmentIndex === 0 && segment.left <= 0) {\n                    this.parent.setRecordValue('left', item.left + differenceWidth, item, true);\n                    this.parent.setRecordValue('width', item.width - differenceWidth, item, true);\n                    segment.width = segment.width - differenceWidth;\n                    for (var i = 1; i < item.segments.length; i++) {\n                        var segment_2 = segments[i];\n                        segment_2.left = segment_2.left - differenceWidth;\n                    }\n                    // when decrease remaining segments\n                }\n                else if ((segment.left) < (segment.left + segment.width) &&\n                    ((segment.left + differenceWidth) <= (segment.left + segment.width))) {\n                    segment.left = segment.left + differenceWidth;\n                    segment.width = segment.width - differenceWidth;\n                }\n                // when mouse move goes beyond one day width of task bar.\n            }\n            else {\n                if (this.mouseMoveX < (item.left + segment.left + segment.width)) {\n                    if (segment.width > this.parent.perDayWidth) {\n                        differenceWidth = isNullOrUndefined(this.previousMouseMove) ?\n                            (this.mouseMoveX - this.mouseDownX) : (this.mouseMoveX - this.previousMouseMove);\n                        this.previousMouseMove = this.mouseMoveX;\n                        var singleDayDifference = (segment.width - differenceWidth) < this.parent.perDayWidth ?\n                            this.parent.perDayWidth > segment.width ?\n                                this.parent.perDayWidth - segment.width : segment.width - this.parent.perDayWidth : 0;\n                        differenceWidth -= singleDayDifference;\n                        if (this.segmentIndex === 0) {\n                            this.parent.setRecordValue('width', item.width - differenceWidth, item, true);\n                            this.parent.setRecordValue('left', item.left + differenceWidth, item, true);\n                            segment.width = segment.width - differenceWidth;\n                            for (var i = 1; i < item.segments.length; i++) {\n                                var segment_3 = segments[i];\n                                segment_3.left = segment_3.left - differenceWidth;\n                            }\n                        }\n                        else {\n                            segment.left = segment.left + differenceWidth;\n                            segment.width = segment.width - differenceWidth;\n                        }\n                    }\n                }\n            }\n        }\n        this.parent.setRecordValue('segments', segments, item, true);\n        this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n    };\n    /**\n     * Update mouse position and edited item value\n     *\n     * @param {PointerEvent} e .\n     * @param {ITaskData} item .\n     * @returns {void} .\n     */\n    TaskbarEdit.prototype.updateEditPosition = function (e, item) {\n        this.updateIsMilestone(item);\n        this.parent.setRecordValue('progressWidth', this.parent.dataOperation.getProgressWidth(item.width, item.progress), item, true);\n    };\n    /**\n     *  To update milestone property.\n     *\n     * @param {ITaskData} item .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.updateIsMilestone = function (item) {\n        if (item.width <= 3) {\n            this.parent.setRecordValue('width', 3, item, true);\n            this.parent.setRecordValue('isMilestone', true, item, true);\n            if (!isNullOrUndefined(this.taskBarEditRecord[this.parent.taskFields.milestone])) {\n                this.parent.setRecordValue(this.parent.taskFields.milestone, true, this.taskBarEditRecord, true);\n            }\n        }\n        else {\n            this.parent.setRecordValue('width', item.width, item, true);\n            this.parent.setRecordValue('isMilestone', false, item, true);\n            if (!isNullOrUndefined(this.taskBarEditRecord[this.parent.taskFields.milestone])) {\n                this.parent.setRecordValue(this.parent.taskFields.milestone, false, this.taskBarEditRecord, true);\n            }\n        }\n    };\n    /**\n     * To update left and width while perform taskbar right resize operation.\n     *\n     * @param {PointerEvent} e .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.enableRightResizing = function (e) {\n        var item = this.taskBarEditRecord.ganttProperties;\n        var differenceWidth = 0;\n        if (this.taskBarEditElement.classList.contains('e-segmented-taskbar') && item.segments.length > 1) {\n            var segments = this.taskBarEditRecord.ganttProperties.segments.map(function (e) { return (__assign({}, e)); });\n            var segment = segments[this.segmentIndex];\n            if (this.mouseDownX > this.mouseMoveX) {\n                if (this.mouseMoveX > (item.left + segment.left) && (this.mouseDownX - this.mouseMoveX) > 3) {\n                    differenceWidth = isNullOrUndefined(this.previousMouseMove) ?\n                        (this.mouseDownX - this.mouseMoveX) : (this.previousMouseMove - this.mouseMoveX);\n                    this.previousMouseMove = this.mouseMoveX;\n                    segment.width = segment.width - differenceWidth;\n                }\n                else {\n                    if (this.mouseMoveX < (item.left + segment.left)) {\n                        var segmentWidth = (this.parent.timelineModule.isSingleTier &&\n                            (this.parent.timelineModule.customTimelineSettings.bottomTier.unit === 'Hour' ||\n                                this.parent.timelineModule.customTimelineSettings.topTier.unit === 'Hour' ||\n                                this.parent.timelineModule.customTimelineSettings.bottomTier.unit === 'Minutes' ||\n                                this.parent.timelineModule.customTimelineSettings.topTier.unit === 'Minutes')) ||\n                            (this.parent.timelineModule.customTimelineSettings.bottomTier.unit === 'Hour' ||\n                                this.parent.timelineModule.customTimelineSettings.bottomTier.unit === 'Minutes') ?\n                            this.parent.timelineModule.customTimelineSettings.timelineUnitSize :\n                            this.parent.perDayWidth;\n                        segment.width = segmentWidth;\n                    }\n                }\n            }\n            else {\n                if (this.mouseMoveX > segment.left) {\n                    differenceWidth = isNullOrUndefined(this.previousMouseMove) ?\n                        (this.mouseMoveX - this.mouseDownX) : (this.mouseMoveX - this.previousMouseMove);\n                    this.previousMouseMove = this.mouseMoveX;\n                    segment.width = segment.width + differenceWidth;\n                }\n            }\n            var width = void 0;\n            var nextSegment = this.segmentIndex !== segments.length - 1 ? segments[this.segmentIndex + 1] : null;\n            if (!isNullOrUndefined(nextSegment)) {\n                if (!this.taskBarEditElement.classList.contains('e-segment-last')) {\n                    width = (segment.left + segment.width) > nextSegment.left ? (nextSegment.left - segment.left) : segment.width;\n                }\n                segment.width = width;\n            }\n            if (this.segmentIndex === item.segments.length - 1) {\n                if (this.segmentIndex === 0) {\n                    this.parent.setRecordValue('width', segment.width, item, true);\n                }\n            }\n            this.parent.setRecordValue('segments', segments, item, true);\n            this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n        }\n        else {\n            if (this.mouseDownX > this.mouseMoveX) {\n                if (this.mouseMoveX > item.left && (this.mouseDownX - this.mouseMoveX) > 3) {\n                    differenceWidth = this.mouseDownX - this.mouseMoveX;\n                    this.parent.setRecordValue('width', this.previousItem.width - differenceWidth, item, true);\n                }\n                else {\n                    if (this.mouseMoveX < item.left) {\n                        this.parent.setRecordValue('width', 3, item, true);\n                    }\n                }\n            }\n            else {\n                if (this.mouseMoveX > item.left) {\n                    differenceWidth = this.mouseMoveX - this.mouseDownX;\n                    this.parent.setRecordValue('width', this.previousItem.width + differenceWidth, item, true);\n                }\n            }\n            if (item.segments && item.segments.length === 1) {\n                item.segments[0].width = item.width;\n            }\n            this.updateEditPosition(e, item);\n        }\n    };\n    /**\n     * To updated startDate and endDate while perform taskbar edit operation.\n     *\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.updateEditedItem = function () {\n        var item = this.taskBarEditRecord.ganttProperties;\n        var left;\n        var projectStartDate;\n        var endDate;\n        var startDate;\n        switch (this.taskBarEditAction) {\n            case 'ProgressResizing':\n                {\n                    var progressWidth = item.progressWidth;\n                    var totalTaskWidth = item.width;\n                    var updatedValues = this.validateProgressWidth(item, progressWidth, totalTaskWidth);\n                    this.parent.setRecordValue('progress', this.getProgressPercent(updatedValues.totalTaskWidth, updatedValues.progressWidth), item, true);\n                    break;\n                }\n            case 'LeftResizing':\n                if (this.segmentIndex === -1) {\n                    left = this.getRoundOffStartLeft(item, this.roundOffDuration);\n                    projectStartDate = this.getDateByLeft(left);\n                    if (isNullOrUndefined(item.endDate)) {\n                        endDate = this.parent.dateValidationModule.getValidEndDate(item);\n                        this.parent.setRecordValue('endDate', endDate, item, true);\n                    }\n                    startDate = this.parent.dateValidationModule.checkStartDate(projectStartDate, item, null);\n                    this.parent.setRecordValue('startDate', new Date(startDate.getTime()), item, true);\n                    if (this.parent.dateValidationModule.compareDates(item.startDate, item.endDate) === 0\n                        && isNullOrUndefined(item.isMilestone) && item.isMilestone === false && item.duration === 0) {\n                        this.parent.setRecordValue('duration', 1, item, true);\n                    }\n                    if (item.isMilestone) {\n                        this.parent.setRecordValue('endDate', new Date(startDate.getTime()), item, true);\n                    }\n                    this.parent.dateValidationModule.calculateDuration(this.taskBarEditRecord);\n                    this.parent.editModule.updateResourceRelatedFields(this.taskBarEditRecord, 'duration');\n                }\n                else {\n                    this.updateSplitLeftResize(item);\n                }\n                break;\n            case 'RightResizing':\n            case 'ParentResizing':\n                if (this.segmentIndex === -1) {\n                    left = this.getRoundOffEndLeft(item, this.roundOffDuration);\n                    var tempEndDate = this.getDateByLeft(left);\n                    if (isNullOrUndefined(item.startDate)) {\n                        startDate = this.parent.dateValidationModule.getValidStartDate(item);\n                        this.parent.setRecordValue('startDate', startDate, item, true);\n                    }\n                    var tempdate = isNullOrUndefined(item.startDate) ? startDate : item.startDate;\n                    endDate = item.isMilestone ? tempdate :\n                        this.parent.dateValidationModule.checkEndDate(tempEndDate, this.taskBarEditRecord.ganttProperties);\n                    this.parent.setRecordValue('endDate', new Date(endDate.getTime()), item, true);\n                    this.parent.dateValidationModule.calculateDuration(this.taskBarEditRecord);\n                    this.parent.editModule.updateResourceRelatedFields(this.taskBarEditRecord, 'duration');\n                }\n                else {\n                    this.updateSplitRightResizing(item);\n                }\n                break;\n            case 'ParentDrag':\n            case 'ChildDrag':\n            case 'MilestoneDrag':\n            case 'ManualParentDrag':\n                if (this.segmentIndex === -1 || this.segmentIndex === 0 || (this.segmentIndex !== -1 && this.parent.allowTaskbarDragAndDrop)) {\n                    this.updateChildDrag(item);\n                }\n                else {\n                    this.setSplitTaskDrag(item);\n                }\n                break;\n        }\n        if (!isNullOrUndefined(this.taskBarEditRecord.ganttProperties.segments)) {\n            this.parent.chartRowsModule.updateSegment(this.taskBarEditRecord.ganttProperties.segments, this.taskBarEditRecord.ganttProperties.taskId);\n        }\n    };\n    TaskbarEdit.prototype.updateChildDrag = function (item) {\n        var left = this.getRoundOffStartLeft(item, this.roundOffDuration);\n        var projectStartDate = this.getDateByLeft(left, item.isMilestone, item);\n        var endDate;\n        if (this.segmentIndex === 0) {\n            this.parent.setRecordValue('startDate', this.parent.dateValidationModule.checkStartDate(projectStartDate, item, null), item, true);\n            item.segments[0].startDate = projectStartDate;\n            item.segments[0].endDate = this.parent.dataOperation.getEndDate(item.segments[0].startDate, item.segments[0].duration, item.durationUnit, item, false);\n            this.parent.setRecordValue('segments', item.segments, item, true);\n            this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n            this.parent.chartRowsModule.incrementSegments(item.segments, 0, this.taskBarEditRecord);\n            this.parent.setRecordValue('endDate', item.segments[item.segments.length - 1].endDate, item, true);\n            this.parent.setRecordValue('taskData.' + this.parent.taskFields.segments, item.segments, this.taskBarEditRecord, true);\n        }\n        else {\n            if (!isNullOrUndefined(item.endDate) && isNullOrUndefined(item.startDate)) {\n                endDate = this.parent.dateValidationModule.checkStartDate(projectStartDate, item, null);\n                endDate = this.parent.dateValidationModule.checkEndDate(endDate, this.taskBarEditRecord.ganttProperties);\n                this.parent.setRecordValue('endDate', endDate, item, true);\n            }\n            else {\n                this.parent.setRecordValue('startDate', this.parent.dateValidationModule.checkStartDate(projectStartDate, item, null), item, true);\n                if (!isNullOrUndefined(item.duration)) {\n                    this.parent.dateValidationModule.calculateEndDate(this.taskBarEditRecord);\n                }\n            }\n        }\n    };\n    TaskbarEdit.prototype.updateSplitLeftResize = function (item) {\n        var segment = item.segments[this.segmentIndex];\n        var left = this.segmentIndex === 0 ? this.getRoundOffStartLeft(item, this.roundOffDuration) :\n            this.getRoundOffStartLeft(segment, this.roundOffDuration);\n        var projectStartDate = this.getDateByLeft(left);\n        var startDate = this.parent.dataOperation.checkStartDate(projectStartDate, item, false);\n        var duration = this.parent.dataOperation.getDuration(startDate, segment.endDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n        segment.startDate = new Date(startDate.getTime());\n        segment.duration = duration;\n        this.parent.setRecordValue('duration', this.sumOfDuration(item.segments), item, true);\n        if (this.segmentIndex === 0) {\n            this.parent.setRecordValue('startDate', segment.startDate, item, true);\n        }\n        this.parent.editModule.updateResourceRelatedFields(this.taskBarEditRecord, 'duration');\n        if (!isNullOrUndefined(item.segments[this.segmentIndex - 1])) {\n            var segmentOffsetDuration = this.parent.dataOperation.getDuration(item.segments[this.segmentIndex - 1].endDate, item.segments[this.segmentIndex].startDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n            segment.offsetDuration = segmentOffsetDuration;\n        }\n        this.parent.setRecordValue('segments', item.segments, item, true);\n        this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n    };\n    TaskbarEdit.prototype.updateSplitRightResizing = function (item) {\n        var segment = item.segments[this.segmentIndex];\n        var left = this.getRoundOffEndLeft(item, this.roundOffDuration);\n        var tempEndDate = this.getDateByLeft(left);\n        var endDate = this.parent.dataOperation.checkEndDate(tempEndDate, item, false);\n        var duration = this.parent.dataOperation.getDuration(segment.startDate, endDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n        segment.endDate = new Date(endDate.getTime());\n        segment.duration = duration;\n        // update next segment offset duration\n        if (!isNullOrUndefined(item.segments[this.segmentIndex + 1])) {\n            var nextSegment = item.segments[this.segmentIndex + 1];\n            var segmentOffset = this.parent.dataOperation.getDuration(item.segments[this.segmentIndex].endDate, nextSegment.startDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n            segment.offsetDuration = segmentOffset;\n        }\n        this.parent.setRecordValue('segments', item.segments, item, true);\n        this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n        this.parent.setRecordValue('duration', this.sumOfDuration(item.segments), item, true);\n        this.parent.setRecordValue('endDate', item.segments[item.segments.length - 1].endDate, item, true);\n        this.parent.editModule.updateResourceRelatedFields(this.taskBarEditRecord, 'duration');\n    };\n    TaskbarEdit.prototype.sumOfDuration = function (segments) {\n        var duration = 0;\n        for (var i = 0; i < segments.length; i++) {\n            var segment = segments[i];\n            duration += segment.duration;\n        }\n        return duration;\n    };\n    TaskbarEdit.prototype.setSplitTaskDrag = function (item) {\n        var segment = item.segments[this.segmentIndex];\n        var left = this.getRoundOffStartLeft(segment, this.roundOffDuration);\n        var projectStartDate = this.getDateByLeft(left);\n        projectStartDate = this.parent.dateValidationModule.checkStartDate(projectStartDate, item, null);\n        segment.startDate = projectStartDate;\n        var segmentDate = this.parent.dataOperation.getEndDate(segment.startDate, segment.duration, item.durationUnit, item, false);\n        if (item.segments[this.segmentIndex + 1] && segmentDate.getTime() > item.segments[this.segmentIndex + 1].startDate.getTime()) {\n            segment.endDate = item.segments[this.segmentIndex + 1].startDate;\n        }\n        else {\n            segment.endDate = segmentDate;\n        }\n        segment.duration = this.parent.dataOperation.getDuration(segment.startDate, segment.endDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n        this.parent.setRecordValue('duration', this.sumOfDuration(item.segments), item, true);\n        this.parent.setRecordValue('endDate', item.segments[item.segments.length - 1].endDate, item, true);\n        if (!isNullOrUndefined(this.parent.taskFields.endDate)) {\n            this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'endDate');\n        }\n        //set offset if previous record present\n        if (!isNullOrUndefined(item.segments[this.segmentIndex - 1])) {\n            var offsetDuration = this.parent.dataOperation.getDuration(item.segments[this.segmentIndex - 1].endDate, item.segments[this.segmentIndex].startDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n            if (segment.startDate.getDay() === 1 && offsetDuration === 0 && !this.parent.includeWeekend) {\n                offsetDuration = 1;\n            }\n            segment.offsetDuration = offsetDuration;\n        }\n        //set next record  offset if present\n        if (!isNullOrUndefined(item.segments[this.segmentIndex + 1])) {\n            var nextSegment = item.segments[this.segmentIndex + 1];\n            var offsetDuration = this.parent.dataOperation.getDuration(item.segments[this.segmentIndex].endDate, nextSegment.startDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n            if (nextSegment.startDate.getDay() === 1 && offsetDuration === 0 && !this.parent.includeWeekend) {\n                offsetDuration = 1;\n            }\n            nextSegment.offsetDuration = offsetDuration;\n        }\n        this.parent.setRecordValue('segments', item.segments, item, true);\n        this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n    };\n    /**\n     * To get roundoff enddate.\n     *\n     * @param {ITaskData} ganttRecord .\n     * @param {boolean} isRoundOff .\n     * @returns {number} .\n     * @private\n     */\n    TaskbarEdit.prototype.getRoundOffEndLeft = function (ganttRecord, isRoundOff) {\n        var tierMode = this.parent.timelineModule.bottomTier !== 'None' ? this.parent.timelineModule.bottomTier :\n            this.parent.timelineModule.topTier;\n        var totalLeft = ganttRecord.width + ganttRecord.left;\n        if (this.segmentIndex !== -1 && ganttRecord.segments.length > 1) {\n            var segment = ganttRecord.segments[this.segmentIndex];\n            totalLeft = totalLeft - ganttRecord.width + segment.width + segment.left;\n        }\n        var remainingContribution = (1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(totalLeft), 1, 'Day') / (1000 * 60 * 60 * 24)));\n        var remainingLeft = this.parent.perDayWidth - (this.parent.perDayWidth / remainingContribution);\n        var positionValue = remainingLeft / this.parent.perDayWidth;\n        if (isRoundOff === undefined) {\n            isRoundOff = false;\n        }\n        /*Rounding the decimal value for week-month-year schedule mode*/\n        if (!isRoundOff) {\n            if ((tierMode !== 'Hour' && tierMode !== 'Minutes')) {\n                if (positionValue > 0.5) {\n                    totalLeft = totalLeft - remainingLeft + this.parent.perDayWidth;\n                }\n                else if (positionValue < 0.5) {\n                    totalLeft = (totalLeft - remainingLeft) + (this.parent.perDayWidth / 2);\n                }\n            }\n        }\n        else if (isRoundOff) {\n            if (tierMode === 'Hour') {\n                var inHour = (this.parent.perDayWidth / 24);\n                remainingContribution =\n                    (1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(totalLeft), 1, 'Hour') / (1000 * 60 * 60)));\n                remainingLeft = (this.parent.perDayWidth / 24) - ((this.parent.perDayWidth / 24) / remainingContribution);\n                if (remainingLeft !== 0) {\n                    totalLeft = (totalLeft - remainingLeft) + inHour;\n                }\n            }\n            else if (tierMode === 'Minutes') {\n                var inMinutes = (this.parent.perDayWidth / (24 * 60));\n                remainingContribution =\n                    (1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(totalLeft), 1, 'Minutes') / (1000 * 60)));\n                remainingLeft = (this.parent.perDayWidth / (24 * 60)) - ((this.parent.perDayWidth / (24 * 60)) / remainingContribution);\n                if (remainingLeft !== 0) {\n                    totalLeft = (totalLeft - remainingLeft) + inMinutes;\n                }\n            }\n            else {\n                if (remainingLeft !== 0) {\n                    totalLeft = (totalLeft - remainingLeft) + this.parent.perDayWidth;\n                }\n            }\n        }\n        return totalLeft;\n    };\n    /**\n     * To get roundoff startdate.\n     *\n     * @param {ITaskData | ITaskSegment} ganttRecord .\n     * @param {boolean} isRoundOff .\n     * @returns {number} .\n     * @private\n     */\n    TaskbarEdit.prototype.getRoundOffStartLeft = function (ganttRecord, isRoundOff) {\n        var left = isNullOrUndefined(ganttRecord) ? ganttRecord.left\n            : ganttRecord.left;\n        if (this.segmentIndex !== -1 && isNullOrUndefined(ganttRecord.segments)) {\n            left = ganttRecord.left + this.taskBarEditRecord.ganttProperties.left;\n        }\n        var tierMode = this.parent.timelineModule.bottomTier !== 'None' ? this.parent.timelineModule.bottomTier :\n            this.parent.timelineModule.topTier;\n        var remainingContribution = (1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(left, isNullOrUndefined(ganttRecord) ? ganttRecord.isMilestone : null, ganttRecord), 1, 'Day') / (1000 * 60 * 60 * 24)));\n        var remainDays = this.parent.perDayWidth - (this.parent.perDayWidth / remainingContribution);\n        var remainDaysInDecimal = remainDays / this.parent.perDayWidth;\n        if (isRoundOff === undefined) {\n            isRoundOff = false;\n        }\n        /*Rounding the decimal value for week-month-year schedule mode*/\n        if (!isRoundOff) {\n            if ((tierMode !== 'Hour' && tierMode !== 'Minutes')) {\n                if (remainDaysInDecimal <= 0.5) {\n                    left = left - remainDays;\n                }\n                else if (remainDaysInDecimal > 0.5) {\n                    left = (left - remainDays) + this.parent.perDayWidth / 2;\n                }\n            }\n        }\n        else if (isRoundOff) {\n            if (tierMode === 'Hour') {\n                remainingContribution =\n                    (1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(left), 1, 'Hour') / (1000 * 60 * 60)));\n                remainDays = (this.parent.perDayWidth / 24) - ((this.parent.perDayWidth / 24) / remainingContribution);\n                left = left - remainDays;\n            }\n            else if (tierMode === 'Minutes') {\n                remainingContribution =\n                    (1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(left), 1, 'Minutes') / (1000 * 60)));\n                remainDays = (this.parent.perDayWidth / (24 * 60)) - ((this.parent.perDayWidth / (24 * 60)) / remainingContribution);\n                left = left - remainDays;\n            }\n            else {\n                left = left - remainDays;\n            }\n        }\n        return left;\n    };\n    /**\n     * To get date by left value.\n     *\n     * @param {number} left .\n     * @param {boolean} isMilestone .\n     * @param {ITaskData} property .\n     * @returns {Date} .\n     * @private\n     */\n    TaskbarEdit.prototype.getDateByLeft = function (left, isMilestone, property) {\n        var pStartDate = new Date(this.parent.timelineModule.timelineStartDate.toString());\n        var milliSecondsPerPixel = (24 * 60 * 60 * 1000) / this.parent.perDayWidth;\n        pStartDate.setTime(pStartDate.getTime() + (left * milliSecondsPerPixel));\n        /* To render the milestone in proper date while editing */\n        if (isMilestone && !isNullOrUndefined(property.predecessorsName) && property.predecessorsName !== '') {\n            //  pStartDate.setDate(pStartDate.getDate() -1);\n            var dayEndTime = this.parent['getCurrentDayEndTime'](property.isAutoSchedule ? property.autoEndDate : property.endDate);\n            this.parent.dateValidationModule.setTime(dayEndTime, pStartDate);\n            pStartDate = this.parent.dateValidationModule.checkStartDate(pStartDate, property, true);\n        }\n        var tierMode = this.parent.timelineModule.bottomTier !== 'None' ? this.parent.timelineModule.topTier :\n            this.parent.timelineModule.bottomTier;\n        if (tierMode !== 'Hour' && tierMode !== 'Minutes') {\n            if (this.parent.isInDst(new Date(this.parent.timelineModule.timelineStartDate.toString())) &&\n                !this.parent.isInDst(pStartDate)) {\n                pStartDate.setTime(pStartDate.getTime() + (60 * 60 * 1000));\n            }\n            // else if (!this.parent.isInDst(new Date(this.parent.timelineModule.timelineStartDate.toString())) && this.parent.isInDst(pStartDate)) {\n            //     pStartDate.setTime(pStartDate.getTime() - (60 * 60 * 1000));\n            // }\n        }\n        return pStartDate;\n    };\n    /**\n     * To set item position.\n     *\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.setItemPosition = function () {\n        if (!isNullOrUndefined(this.editElement)) {\n            var currentElement = this.editElement.parentElement;\n            if (this.parent.allowTaskbarDragAndDrop && this.taskBarEditAction === 'ChildDrag') {\n                currentElement.style.position = null;\n            }\n            else {\n                if (this.parent.enableTimelineVirtualization &&\n                    this.parent.timelineModule.wholeTimelineWidth > this.parent.element.offsetWidth * 3) {\n                    currentElement.style.setProperty('position', 'relative');\n                }\n                else {\n                    currentElement.style.setProperty('position', 'absolute');\n                }\n            }\n        }\n        var item = this.taskBarEditRecord.ganttProperties;\n        var position = this.parent.enableRtl ? 'right' : 'left';\n        var segment = !isNullOrUndefined(item.segments) ? item.segments[this.segmentIndex] : null;\n        var width = this.taskBarEditAction === 'MilestoneDrag' || item.isMilestone ?\n            this.parent.chartRowsModule.milestoneHeight : item.width;\n        var rightResizer = this.parent.isAdaptive ? (width - 2) : (width - 10);\n        if (!isNullOrUndefined(segment)) {\n            rightResizer = this.parent.isAdaptive ? (segment.width - 2) : (segment.width - 10);\n        }\n        this.taskBarEditElement.style.setProperty('opacity', '.75');\n        var taskBarMainContainer;\n        if (this.parent.allowTaskbarDragAndDrop && !item.isAutoSchedule && this.taskBarEditRecord.hasChildRecords) {\n            taskBarMainContainer = this.taskBarEditElement;\n        }\n        else {\n            taskBarMainContainer = (!this.taskBarEditElement.classList.contains(cls.taskBarMainContainer)) ? ((this.taskBarEditAction === 'ChildDrag' ||\n                this.taskBarEditAction === 'LeftResizing') && this.segmentIndex === 0) ? this.taskBarEditElement.parentElement : closest(this.taskBarEditElement, 'tr.' + cls.chartRow)\n                .querySelector('.' + cls.taskBarMainContainer) : this.taskBarEditElement;\n        }\n        var segmentedTaskBarContainer = (this.taskBarEditElement.classList.contains('e-segmented-taskbar') ||\n            this.taskBarEditElement.querySelector('.e-segmented-taskbar')) ? true : false;\n        var traceChildProgressBar = this.taskBarEditElement.querySelector('.' + cls.traceChildProgressBar);\n        var traceChildTaskBar = this.taskBarEditElement.querySelector('.' + cls.traceChildTaskBar);\n        var childProgressResizer = segmentedTaskBarContainer ? parentsUntil(this.taskBarEditElement, cls.taskBarMainContainer).querySelector('.' + cls.childProgressResizer) : this.taskBarEditElement.querySelector('.' + cls.childProgressResizer);\n        var taskBarRightResizer = this.taskBarEditElement.querySelector('.' + cls.taskBarRightResizer);\n        var traceParentTaskBar = this.taskBarEditElement.querySelector('.' + cls.traceParentTaskBar);\n        var traceParentProgressBar = this.taskBarEditElement.querySelector('.' + cls.traceParentProgressBar);\n        var traceConnectorPointRight = this.taskBarEditElement.querySelector('.' + cls.rightConnectorPointOuterDiv);\n        var segmentConnectorPointRight = taskBarMainContainer.querySelector('.' + cls.rightConnectorPointOuterDiv);\n        var manualParentTaskbar = this.taskBarEditElement;\n        var manualTaskbar = this.taskBarEditElement.querySelector('.' + cls.manualParentTaskBar);\n        var manualParentRight = this.taskBarEditElement.querySelector('.' + cls.manualParentRightResizer);\n        var manualParentLeft = this.taskBarEditElement.querySelector('.' + cls.manualParentLeftResizer);\n        var resizeLine = this.parent.ganttChartModule.chartBodyContainer.querySelector('.e-taskbar-resize-div');\n        if (this.parent.allowTaskbarDragAndDrop && !this.updatePosition) {\n            this.leftValue = this.leftValue + 30;\n            this.updatePosition = true;\n        }\n        if (this.taskBarEditAction !== 'ConnectorPointRightDrag' &&\n            this.taskBarEditAction !== 'ConnectorPointLeftDrag') {\n            if (this.taskBarEditAction !== 'ParentResizing' && this.taskBarEditAction !== 'ManualParentDrag') {\n                if (segmentedTaskBarContainer && !isNullOrUndefined(item.segments)\n                    && (this.taskBarEditAction === 'RightResizing' || this.segmentIndex !== 0)) {\n                    if (!isNullOrUndefined(resizeLine)) {\n                        if (!this.parent.allowTaskbarDragAndDrop || (this.parent.allowTaskbarDragAndDrop && this.parent.rowDragAndDropModule && this.taskBarEditAction !== 'ChildDrag' &&\n                            this.taskBarEditAction !== 'ParentDrag')) {\n                            resizeLine.style.width = (segment.width) + 'px';\n                        }\n                    }\n                    this.taskBarEditElement.style.width = (segment.width) + 'px';\n                    if (this.parent.enableRtl) {\n                        this.taskBarEditElement.style.right = (segment.left) + 'px';\n                    }\n                    else {\n                        this.taskBarEditElement.style.left = (segment.left) + 'px';\n                        if (!isNullOrUndefined(resizeLine)) {\n                            if (!this.parent.allowTaskbarDragAndDrop || (this.parent.allowTaskbarDragAndDrop && this.parent.rowDragAndDropModule && this.taskBarEditAction !== 'ChildDrag'\n                                && this.taskBarEditAction !== 'ParentDrag')) {\n                                resizeLine.style.left = (segment.left + this.editElement.parentElement.offsetLeft) + 'px';\n                            }\n                        }\n                    }\n                }\n                taskBarMainContainer.style.setProperty(position, (this.parent.allowTaskbarDragAndDrop ? this.leftValue : (item.left)) + 'px');\n                taskBarMainContainer.style.width = (width) + 'px';\n                if (segmentedTaskBarContainer && segmentConnectorPointRight) {\n                    segmentConnectorPointRight.style.left = (this.parent.isAdaptive ? (width + 10) : (width + 2)) + 'px';\n                }\n                if (this.parent.allowTaskbarDragAndDrop && this.parent.rowDragAndDropModule && this.taskBarEditAction !== 'LeftResizing' &&\n                    this.taskBarEditAction !== 'RightResizing' && this.taskBarEditAction !== 'ProgressResizing') {\n                    var addTop = this.parent.taskbarHeight / 2;\n                    taskBarMainContainer.style.setProperty('top', (this.topValue + addTop) + 'px');\n                    taskBarMainContainer.style.zIndex = '4';\n                }\n                if (this.taskBarEditAction === 'LeftResizing' && this.segmentIndex === 0) {\n                    this.taskBarEditElement.style.setProperty('opacity', '.75');\n                    var parent_1 = this.taskBarEditElement.parentElement;\n                    var segmentedTasks = parent_1.getElementsByClassName('e-segmented-taskbar');\n                    for (var i = 0; i < item.segments.length; i++) {\n                        var segment_4 = item.segments[i];\n                        var segmentElement = segmentedTasks[i];\n                        segmentElement.style.width = (segment_4.width) + 'px';\n                        if (item.segments.length === 1) {\n                            resizeLine.style.width = (segment_4.width) + 'px';\n                            resizeLine.style.setProperty(position, (item.left) + 'px');\n                        }\n                        else {\n                            if (i === 0) {\n                                resizeLine.style.width = (segment_4.width) + 'px';\n                                resizeLine.style.setProperty(position, (segment_4.left + item.left) + 'px');\n                            }\n                            if (this.parent.enableRtl) {\n                                segmentElement.style.right = (segment_4.left) + 'px';\n                            }\n                            else {\n                                segmentElement.style.left = (segment_4.left) + 'px';\n                            }\n                        }\n                    }\n                }\n                if (this.taskBarEditAction === 'ChildDrag' && (this.segmentIndex === 0 || (this.segmentIndex !== -1 && this.parent.allowTaskbarDragAndDrop))) {\n                    resizeLine.style.width = (width) + 'px';\n                    resizeLine.style.setProperty(position, item.left + 'px');\n                    taskBarMainContainer.style.setProperty('opacity', '.75');\n                }\n            }\n            if (traceConnectorPointRight) {\n                if (this.parent.enableRtl) {\n                    traceConnectorPointRight.style.left = (this.parent.isAdaptive ? (width + 10) : (width - 2)) + 'px';\n                }\n                else {\n                    traceConnectorPointRight.style.left = (this.parent.isAdaptive ? (width + 10) : (width + 2)) + 'px';\n                }\n            }\n            if (traceConnectorPointRight && this.taskBarEditAction === 'LeftResizing') {\n                traceConnectorPointRight.style.left = (width - 2) + 'px';\n            }\n            if (childProgressResizer && traceChildProgressBar && (this.taskBarEditAction === 'LeftResizing' || this.taskBarEditAction === 'RightResizing' || this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'ParentDrag')) {\n                childProgressResizer.style.display = 'none';\n                traceChildProgressBar.style.display = 'none';\n            }\n            if (traceConnectorPointRight && this.taskBarEditAction === 'ProgressResizing') {\n                traceConnectorPointRight.style.display = 'none';\n            }\n            if (this.taskBarEditAction === 'MilestoneDrag' || item.isMilestone) {\n                taskBarMainContainer.style.setProperty(position, (this.parent.allowTaskbarDragAndDrop ? this.leftValue : (item.left - (width / 2))) + 'px');\n                resizeLine.style.setProperty(position, (item.left - (width / 2)) + 'px');\n                resizeLine.style.width = (width) + 'px';\n            }\n            else if (this.taskBarEditAction === 'ProgressResizing') {\n                if (this.segmentIndex === -1) {\n                    traceChildTaskBar.style.setProperty(position, (item.left + item.progressWidth - 10) + 'px');\n                    if (!isNullOrUndefined(traceChildProgressBar)) {\n                        traceChildProgressBar.style.width = item.progressWidth + 'px';\n                        traceChildProgressBar.style.borderBottomRightRadius = this.progressBorderRadius + 'px';\n                        traceChildProgressBar.style.borderTopRightRadius = this.progressBorderRadius + 'px';\n                        var width_1 = this.parent.enableRtl ? item.progressWidth + 8 : item.progressWidth - 8;\n                        childProgressResizer.style.setProperty(position, width_1 + 'px');\n                    }\n                }\n                else {\n                    this.updateSegmentProgress(this.taskBarEditRecord.ganttProperties);\n                    var progressElements = taskBarMainContainer.querySelectorAll('.e-gantt-child-progressbar');\n                    for (var count = 0; count < progressElements.length; count++) {\n                        if (item.segments[count] && item.segments[count].progressWidth && this.segmentIndex !== count) {\n                            progressElements[count]['style'].display = 'block';\n                            progressElements[count].style.width = item.segments[count].progressWidth + 'px';\n                        }\n                    }\n                    traceChildProgressBar.style.width = item.segments[this.segmentIndex].progressWidth + 'px';\n                    traceChildProgressBar.style.borderBottomRightRadius = this.progressBorderRadius + 'px';\n                    traceChildProgressBar.style.borderTopRightRadius = this.progressBorderRadius + 'px';\n                    var width_2 = this.parent.enableRtl ? this.progressValue + 8 : this.progressValue - 8;\n                    childProgressResizer.style.setProperty(position, width_2 + 'px');\n                }\n            }\n            else if (this.taskBarEditAction === 'RightResizing' && !isNullOrUndefined(traceChildTaskBar)) {\n                resizeLine.style.width = (width) + 'px';\n                traceChildTaskBar.style.width = (width) + 'px';\n                if (!isNullOrUndefined(traceChildProgressBar)) {\n                    traceChildProgressBar.style.width = (item.progressWidth) + 'px';\n                    taskBarRightResizer.style.setProperty(position, rightResizer + 'px');\n                    if (!isNullOrUndefined(childProgressResizer)) {\n                        childProgressResizer.style.setProperty(position, item.progressWidth - 10 + 'px');\n                    }\n                }\n            }\n            else if (this.taskBarEditAction === 'ParentDrag') {\n                resizeLine.style.setProperty(position, item.left + 'px');\n                resizeLine.style.width = (width) + 'px';\n                resizeLine.style.width = (item.width) + 'px';\n                if (!isNullOrUndefined(traceParentTaskBar)) {\n                    traceParentTaskBar.style.width = (width) + 'px';\n                    resizeLine.style.width = (item.width) + 'px';\n                }\n                if (!isNullOrUndefined(traceChildProgressBar)) {\n                    traceParentProgressBar.style.width = (item.progressWidth) + 'px';\n                }\n            }\n            else if (this.taskBarEditAction === 'ParentResizing') {\n                resizeLine.style.width = (item.width) + 'px';\n                resizeLine.style.setProperty(position, item.left + 'px');\n                manualParentTaskbar.style.setProperty('width', (item.width) + 'px');\n                manualTaskbar.style.setProperty('width', (item.width) + 'px');\n                this.editElement.parentElement.style.setProperty('width', (item.width) + 'px');\n            }\n            else if (this.taskBarEditAction === 'ManualParentDrag') {\n                resizeLine.style.width = (item.width) + 'px';\n                resizeLine.style.setProperty(position, item.left + 'px');\n                manualParentTaskbar.style.setProperty(position, item.left - item.autoLeft + 'px');\n                if (this.parent.allowTaskbarDragAndDrop) {\n                    manualParentTaskbar.style.setProperty(position, this.leftValue + 'px');\n                    manualParentTaskbar.style.setProperty('top', (this.topValue) + 'px');\n                    manualParentTaskbar.style.zIndex = '4';\n                }\n            }\n            else {\n                if (!isNullOrUndefined(traceChildTaskBar) && !segmentedTaskBarContainer) {\n                    traceChildTaskBar.style.width = (item.width) + 'px';\n                    traceChildTaskBar.style.left = (item.left) + 'px';\n                    this.taskBarEditElement.style.width = (item.width) + 'px';\n                    this.taskBarEditElement.style.left = ((this.parent.allowTaskbarDragAndDrop ? this.leftValue : (item.left))) + 'px';\n                    resizeLine.style.setProperty(position, item.left + 'px');\n                    resizeLine.style.width = (item.width) + 'px';\n                }\n                if (!isNullOrUndefined(traceChildProgressBar)) {\n                    taskBarRightResizer.style.setProperty(position, rightResizer + 'px');\n                    traceChildProgressBar.style.width = (item.progressWidth) + 'px';\n                    if (!isNullOrUndefined(childProgressResizer)) {\n                        childProgressResizer.style.setProperty(position, item.progressWidth - 10 + 'px');\n                    }\n                }\n                if (segmentedTaskBarContainer) {\n                    taskBarRightResizer.style.setProperty(position, rightResizer + 'px');\n                    traceChildProgressBar.style.width = (segment.width) + 'px';\n                    if (!isNullOrUndefined(childProgressResizer)) {\n                        childProgressResizer.style.setProperty(position, segment.width - 10 + 'px');\n                    }\n                }\n            }\n        }\n        if (this.parent.allowTaskbarDragAndDrop && (this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'ParentDrag' ||\n            this.taskBarEditAction === 'ManualParentDrag' || this.taskBarEditAction === 'MilestoneDrag')) {\n            var resizeValue = this.parent.enableRtl ? parseInt(resizeLine.style.right, 10) : parseInt(resizeLine.style.left, 10);\n            if (this.parent.enableRtl) {\n                resizeLine.style.right = (resizeValue - 30) + 'px';\n            }\n            else {\n                resizeLine.style.left = (resizeValue + 30) + 'px';\n            }\n        }\n    };\n    /**\n     * To handle mouse up event in chart\n     *\n     * @param {PointerEvent} e .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.mouseUpHandler = function (e) {\n        var mouseDragged = this.isMouseDragged;\n        this.previousMouseMove = null;\n        this.editTooltip.showHideTaskbarEditTooltip(false, this.segmentIndex);\n        if (this.taskBarEditAction && this.isMouseDragged) {\n            if ((!this.dragMouseLeave && this.taskBarEditedAction) || (this.parent.allowTaskbarDragAndDrop)) {\n                if (e.type === 'touchmove' || e.type === 'touchstart' || e.type === 'touchend') {\n                    var coordinates = this.getCoordinate(e);\n                    this['droppedTarget'] = document.elementFromPoint(coordinates.pageX, coordinates.pageY);\n                }\n                else {\n                    if (this.taskBarEditRecord.hasChildRecords && !this.taskBarEditRecord.ganttProperties.isAutoSchedule) {\n                        var taskbarPosition = this.parent.getOffsetRect(this.taskBarEditElement);\n                        var left = (!isNullOrUndefined(document.body.className) && document.body.className.includes('e-bigger')) ? 12 : 0;\n                        var pointerLeft = (3 + this.parent.chartRowsModule.connectorPointWidth + left);\n                        var xValue = void 0;\n                        if (this.parent.enableRtl) {\n                            xValue = Math.abs(taskbarPosition.left + pointerLeft + 1);\n                        }\n                        else {\n                            xValue = Math.abs(Math.abs(taskbarPosition.left - pointerLeft - 1) -\n                                this.parent.ganttChartModule.scrollElement.scrollLeft);\n                        }\n                        this['droppedTarget'] = document.elementFromPoint(xValue, e.y);\n                    }\n                    else {\n                        this['droppedTarget'] = document.elementFromPoint(e.x, e.y);\n                    }\n                    if (this['droppedTarget'] && this['droppedTarget'].classList.contains('e-span-label')) {\n                        this['droppedTarget'] = document.elementFromPoint(e.x + this['droppedTarget']['offsetWidth'], e.y);\n                    }\n                }\n                this.previousIds = this.parent.ids.slice();\n                this.previousFlatData = this.parent.flatData.slice();\n                this.taskBarEditedAction(e);\n                this.isMouseDragged = false;\n            }\n            else {\n                this.parent.isOnEdit = false;\n                this.cancelTaskbarEditActionInMouseLeave();\n                var criticalModule = this.parent.criticalPathModule;\n                if (this.parent.enableCriticalPath && criticalModule && criticalModule.criticalPathCollection) {\n                    criticalModule.criticalConnectorLine(criticalModule.criticalPathCollection, criticalModule.detailPredecessorCollection, true, criticalModule.predecessorCollectionTaskIds);\n                }\n            }\n        }\n        if (this.parent.enableMultiTaskbar && !isNullOrUndefined(this.taskBarEditElement)) {\n            if (!isNullOrUndefined(this.taskBarEditElement.querySelector('.e-gantt-child-taskbar'))) {\n                if (this.taskBarEditElement.querySelector('.e-gantt-child-taskbar').classList.contains('e-collapsed-taskbar-drag')) {\n                    removeClass([this.taskBarEditElement.querySelector('.e-gantt-child-taskbar')], 'e-collapsed-taskbar-drag');\n                    this.taskBarEditElement.style.zIndex = this.prevZIndex;\n                    this.prevZIndex = '';\n                }\n            }\n        }\n        if (!this.parent.isAdaptive || mouseDragged) {\n            this.initPublicProp();\n        }\n        this.stopScrollTimer();\n    };\n    /**\n     * To perform taskbar edit operation.\n     *\n     * @param {PointerEvent} event .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.taskBarEditedAction = function (event) {\n        var args = {};\n        var x1 = this.mouseDownX;\n        var y1 = this.mouseDownY;\n        var item = this.taskBarEditRecord;\n        var recordIndex = this.parent.ganttChartModule.getIndexByTaskBar(this.taskBarEditElement);\n        var x2 = this.mouseMoveX;\n        var e = this.getCoordinate(event);\n        var resMouseY = e.pageY - this.parent.ganttChartModule.chartBodyContainer.offsetTop;\n        if ((this.taskBarEditAction === 'ConnectorPointLeftDrag' ||\n            this.taskBarEditAction === 'ConnectorPointRightDrag') && !this.drawPredecessor) {\n            this.dependencyCancel = true;\n        }\n        var parentRecord = [];\n        if ((this.taskBarEditAction === 'ConnectorPointLeftDrag' ||\n            this.taskBarEditAction === 'ConnectorPointRightDrag') && this.drawPredecessor && (!this.connectorSecondRecord.hasChildRecords ||\n            this.connectorSecondRecord.hasChildRecords && this.parent.allowParentDependency)) {\n            parentRecord.push(extend([], [], [this.taskBarEditRecord], true)[0]);\n            if (this.parent.undoRedoModule) {\n                this.parent.undoRedoModule['getUndoCollection'][this.parent.undoRedoModule['getUndoCollection'].length - 1]['connectedRecords'] = parentRecord;\n                if (this.parent.toolbarModule) {\n                    this.parent.toolbarModule.enableItems([this.parent.controlId + '_undo'], true);\n                }\n            }\n            this.parent.connectorLineEditModule.updatePredecessor(this.connectorSecondRecord, this.finalPredecessor);\n        }\n        else {\n            if ((this.taskBarEditAction === 'ConnectorPointLeftDrag' ||\n                this.taskBarEditAction === 'ConnectorPointRightDrag') || (this.oldData && JSON.stringify(item.ganttProperties) === JSON.stringify(this.oldData.ganttProperties))) {\n                if (this.parent.undoRedoModule && this.parent.undoRedoModule['getUndoCollection'].length > 0) {\n                    this.parent['totalUndoAction']--;\n                    this.parent.undoRedoModule['getUndoCollection'].splice(this.parent.undoRedoModule['getUndoCollection'].length - 1, 1);\n                    if (this.parent.toolbarModule) {\n                        this.parent.toolbarModule.enableItems([this.parent.controlId + '_undo'], false);\n                    }\n                }\n            }\n            else {\n                if (this.parent.undoRedoModule && this.parent.toolbarModule && this.parent.undoRedoModule['getUndoCollection'].length > 0) {\n                    this.parent.toolbarModule.enableItems([this.parent.controlId + '_undo'], true);\n                }\n            }\n            if (x1 !== x2 || (Math.abs(y1 - resMouseY) >= (this.parent.rowHeight - this.parent.taskbarHeight) / 2)) {\n                if (item !== null) {\n                    args.editingFields = item.ganttProperties;\n                    args.data = item;\n                    args.recordIndex = recordIndex;\n                    args.previousData = this.previousItem;\n                    args.taskBarEditAction = this.taskBarEditAction;\n                    args.action = 'TaskbarEditing';\n                    args.roundOffDuration = this.roundOffDuration;\n                    args.target = this.targetElement;\n                    this.taskbarEditedArgs = args;\n                    this.taskbarEdited(args);\n                }\n            }\n        }\n        this.parent['isProjectDateUpdated'] = false;\n    };\n    /**\n     * To cancel the taskbar edt action.\n     *\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.cancelTaskbarEditActionInMouseLeave = function () {\n        this.parent.editModule.reUpdatePreviousRecords(true);\n    };\n    TaskbarEdit.prototype.updateSegmentProgress = function (taskData) {\n        var segments = taskData.segments;\n        var fixedWidth = true;\n        var totalTaskWidth = this.splitTasksDuration(segments) * this.parent.perDayWidth;\n        var progress = Math.ceil((taskData.progressWidth / totalTaskWidth) * 100);\n        var totalProgressWidth = (totalTaskWidth * progress) / 100;\n        var tempWidth = totalProgressWidth;\n        for (var i = 0; i < segments.length; i++) {\n            var segment = segments[i];\n            if (i !== 0) {\n                if (segment.left <= tempWidth) {\n                    var newWidth = (tempWidth - segment.left);\n                    totalProgressWidth = newWidth;\n                }\n                else {\n                    totalProgressWidth = 0;\n                }\n            }\n            delete segment.progressWidth;\n            if (totalProgressWidth > 0 && totalProgressWidth > segment.width) {\n                totalProgressWidth = totalProgressWidth - segment.width;\n                segment.progressWidth = segment.width;\n                segment.showProgress = false;\n            }\n            else if (fixedWidth) {\n                segment.progressWidth = totalProgressWidth;\n                segment.showProgress = true;\n                totalProgressWidth = totalProgressWidth - segment.width;\n                fixedWidth = false;\n            }\n        }\n    };\n    /**\n     * To trigger taskbar edited event.\n     *\n     * @param {ITaskbarEditedEventArgs} arg .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.taskbarEdited = function (arg) {\n        var args = extend({}, arg);\n        var ganttRecord = args.data;\n        var taskData = ganttRecord.ganttProperties;\n        var draggedRecIndex = this.parent.flatData.indexOf(ganttRecord);\n        if (this.parent.allowTaskbarDragAndDrop && this.dragMoveY > 0 && ((this.parent.viewType === 'ResourceView' &&\n            !ganttRecord.hasChildRecords) || this.parent.viewType === 'ProjectView')) {\n            if (this.parent.rowDragAndDropModule) {\n                var flatRecordCol = this.parent.currentViewData;\n                if (this.taskBarEditRecord.parentItem && flatRecordCol[this.taskBarEditRecord.parentItem.index] &&\n                    ((this.parent.editedRecords.indexOf(flatRecordCol[this.taskBarEditRecord.parentItem.index]) === -1))) {\n                    this.parent.editedRecords.push(flatRecordCol[this.taskBarEditRecord.parentItem.index]);\n                }\n                this.removeChildBorder();\n                this.removeErrorElem();\n                this.removetopOrBottomBorder();\n                var droppedRecord = void 0;\n                this.updatePosition = false;\n                this.draggedRecordMarginTop = this.taskBarEditElement.style.marginTop;\n                var row = void 0;\n                if (!isNullOrUndefined(this.droppedTarget)) {\n                    row = closest(this.droppedTarget, 'tr.' + cls.chartRow);\n                }\n                if (row) {\n                    var recordIndex = parseInt(row.getAttribute('data-rowindex'), 10);\n                    droppedRecord = this.parent.flatData[recordIndex];\n                    var droppedParentRecordIndex = this.parent.getRootParent(droppedRecord, 0).index;\n                    var draggedParentRecordIndex = this.parent.getRootParent(this.taskBarEditRecord, 0).index;\n                    var e = {\n                        cancel: false,\n                        data: this.taskBarEditRecord,\n                        fromIndex: this.taskBarEditRecord.index,\n                        dropIndex: droppedRecord.index,\n                        dropPosition: this.parent.rowDragAndDropModule['dropPosition'],\n                        dropRecord: droppedRecord\n                    };\n                    this.parent.trigger('rowDrop', e);\n                    if (!e['cancel'] && droppedRecord && recordIndex !== draggedRecIndex && ((droppedParentRecordIndex !== draggedParentRecordIndex ||\n                        (this.taskBarEditRecord.hasChildRecords && droppedRecord.hasChildRecords)) ||\n                        !this.taskBarEditRecord.hasChildRecords)) {\n                        var droppedRecordIndex = this.parent.flatData.indexOf(droppedRecord);\n                        var position = void 0;\n                        if (this.parent.viewType === 'ProjectView' && !isNullOrUndefined(this.parent.rowDragAndDropModule['dropPosition'])) {\n                            position = this.parent.rowDragAndDropModule['dropPosition'];\n                        }\n                        else {\n                            position = (droppedRecord.hasChildRecords || (!droppedRecord.parentItem &&\n                                droppedRecord.childRecords.length === 0)) ? 'child' : this.parent.rowDragAndDropModule['dropPosition'];\n                        }\n                        if (this.parent.rowDragAndDropModule) {\n                            if (this.parent.viewType === 'ResourceView' && (position === 'child' && !droppedRecord.hasChildRecords) && !isNullOrUndefined(droppedRecord.parentItem)) {\n                                position = 'Invalid';\n                                this.parent.rowDragAndDropModule['dropPosition'] = 'Invalid';\n                            }\n                            if (position) {\n                                this.parent.rowDragAndDropModule.reorderRows([draggedRecIndex], droppedRecordIndex, position);\n                            }\n                        }\n                        this.dragMoveY = 0;\n                    }\n                }\n                this.isClonedElement = false;\n            }\n            if (this.parent.showOverAllocation) {\n                this.parent.ganttChartModule.renderOverAllocationContainer();\n            }\n        }\n        if (args.taskBarEditAction === 'ProgressResizing') {\n            if (args.previousData.progress !== taskData.progress) {\n                var progressWidth = args.data.ganttProperties.progressWidth;\n                var totalTaskWidth = args.data.ganttProperties.width;\n                /* eslint-disable-next-line */\n                var updatedValues = this.validateProgressWidth(args.data.ganttProperties, progressWidth, totalTaskWidth);\n                this.parent.setRecordValue('progress', this.getProgressPercent(updatedValues.totalTaskWidth, updatedValues.progressWidth), taskData, true);\n                if (ganttRecord.parentItem) {\n                    this.parent.editModule.updateParentProgress(ganttRecord.parentItem);\n                }\n                if (!isNullOrUndefined(taskData.segments)) {\n                    this.updateSegmentProgress(taskData);\n                }\n            }\n        }\n        else {\n            var segments = args.data.ganttProperties.segments;\n            if (!isNullOrUndefined(segments) && segments.length > 0\n                && ((this.taskBarEditAction === 'LeftResizing' && this.segmentIndex !== 0)\n                    || (this.taskBarEditAction === 'ChildDrag' && this.segmentIndex !== 0)\n                    || (this.taskBarEditAction === 'RightResizing'))) {\n                var segment = segments[this.segmentIndex];\n                var ganttProp = this.taskBarEditRecord.ganttProperties;\n                var previousSegment = this.segmentIndex === 0 ? null\n                    : segments[this.segmentIndex - 1];\n                var nextSegment = this.segmentIndex === segments.length - 1 ? null\n                    : segments[this.segmentIndex + 1];\n                var sDate = !isNullOrUndefined(nextSegment) ?\n                    new Date(nextSegment.startDate.getTime()) : this.parent.cloneProjectEndDate;\n                var eDate = !isNullOrUndefined(previousSegment) ?\n                    new Date(previousSegment.endDate.getTime()) : this.parent.cloneProjectStartDate;\n                var cStartDate = new Date(segment.startDate.getTime());\n                var cEndDate = new Date(segment.endDate.getTime());\n                if (this.parent.timelineModule.topTier === 'Day' && this.parent.timelineModule.bottomTier === 'Hour') {\n                    cStartDate.setHours(cStartDate.getHours() - 1);\n                    cEndDate.setHours(cEndDate.getHours() + 1);\n                }\n                else {\n                    cStartDate.setDate(cStartDate.getDate());\n                    cEndDate.setDate(cEndDate.getDate());\n                }\n                if (this.parent.includeWeekend) {\n                    sDate.setHours(0, 0, 0, 0);\n                    eDate.setHours(0, 0, 0, 0);\n                    cStartDate.setDate(cStartDate.getDate() - 1);\n                    cEndDate.setDate(cEndDate.getDate() + 1);\n                    cStartDate.setHours(0, 0, 0, 0);\n                    cEndDate.setHours(0, 0, 0, 0);\n                    if (cStartDate.getTime() <= eDate.getTime() && !isNullOrUndefined(previousSegment) && !isNullOrUndefined(segment)) {\n                        var segmentIndexes = [\n                            { 'firstSegmentIndex': previousSegment.segmentIndex, 'secondSegmentIndex': segment.segmentIndex }\n                        ];\n                        this.parent.chartRowsModule.mergeTask(ganttProp.taskId, segmentIndexes);\n                    }\n                    else if (cEndDate.getTime() >= sDate.getTime() && this.segmentIndex !== segments.length - 1) {\n                        var segmentIndexes = [\n                            { 'firstSegmentIndex': segment.segmentIndex, 'secondSegmentIndex': nextSegment.segmentIndex }\n                        ];\n                        this.parent.chartRowsModule.mergeTask(ganttProp.taskId, segmentIndexes);\n                    }\n                    else if (cEndDate.getTime() >= sDate.getTime()) {\n                        segment.endDate.setDate(this.parent.cloneProjectEndDate.getDate() - 1);\n                        segment.startDate = this.parent.dataOperation.getStartDate(segment.endDate, segment.duration, ganttProp.durationUnit, ganttProp);\n                        // eslint-disable-next-line\n                        for (var i = segments.length - 2; i >= 0; i++) {\n                            var segment_5 = segments[i];\n                            var eDate_1 = segment_5.endDate;\n                            eDate_1.setDate(eDate_1.getDate() - segment_5.offsetDuration);\n                            segment_5.endDate = eDate_1;\n                            segment_5.startDate = this.parent.dataOperation.getStartDate(segment_5.endDate, segment_5.duration, ganttProp.durationUnit, ganttProp);\n                        }\n                    }\n                }\n                else {\n                    //Hits while dragging taskbar toward right & taskbar rightside resizing:\n                    if (cEndDate.getTime() <= sDate.getTime() && this.segmentIndex !== segments.length - 1 && !this.parent.includeWeekend &&\n                        this.parent.dataOperation.getDuration((this.parent.dataOperation.checkStartDate(cEndDate, taskData, false)), sDate, taskData.durationUnit, false, false) === 0) {\n                        var segmentIndexes = [\n                            { 'firstSegmentIndex': segment.segmentIndex, 'secondSegmentIndex': nextSegment.segmentIndex }\n                        ];\n                        this.parent.chartRowsModule.mergeTask(ganttProp.taskId, segmentIndexes);\n                    }\n                    //Hits while dragging taskbar toward left & taskbar leftside resizing:\n                    else if (cStartDate.getTime() >= eDate.getTime() &&\n                        !isNullOrUndefined(previousSegment) && !isNullOrUndefined(segment) &&\n                        !this.parent.includeWeekend && this.parent.dataOperation.getDuration((this.parent.dataOperation.checkEndDate(cStartDate, taskData, false)), eDate, taskData.durationUnit, false, false) === 0) {\n                        var segmentIndexes = [\n                            { 'firstSegmentIndex': previousSegment.segmentIndex, 'secondSegmentIndex': segment.segmentIndex }\n                        ];\n                        this.parent.chartRowsModule.mergeTask(ganttProp.taskId, segmentIndexes);\n                    }\n                }\n            }\n            this.parent.dataOperation.updateWidthLeft(args.data);\n        }\n        this.isDragged = false;\n        this.parent.dataOperation.updateTaskData(ganttRecord);\n        this.parent.editModule.initiateUpdateAction(args);\n    };\n    /**\n     * To get progress in percentage.\n     *\n     * @param {number} parentwidth .\n     * @param {number} progresswidth .\n     * @returns {number} .\n     * @private\n     */\n    TaskbarEdit.prototype.getProgressPercent = function (parentwidth, progresswidth) {\n        return Math.ceil(((progresswidth / parentwidth) * 100));\n    };\n    /**\n     * false line implementation.\n     *\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.drawFalseLine = function () {\n        var x1 = this.mouseDownX;\n        var y1 = this.mouseDownY;\n        var x2 = this.mouseMoveX;\n        var y2 = this.mouseMoveY;\n        var length = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n        var angle = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;\n        var transform = 'rotate(' + (this.parent.enableRtl ? -angle : angle) + 'deg)';\n        var left;\n        var width = 0;\n        if (!isNullOrUndefined(document.querySelectorAll('.e-chart-row')[0])) {\n            width = document.querySelectorAll('.e-chart-row')[0].offsetWidth;\n        }\n        if (this.taskBarEditAction === 'ConnectorPointLeftDrag') {\n            if (this.parent.enableRtl) {\n                left = ((width - (this.elementOffsetLeft + (this.parent.chartRowsModule.connectorPointWidth / 2)))) -\n                    Math.abs(this.parent.ganttChartModule.scrollObject.previousScroll.left);\n            }\n            else {\n                left = (this.elementOffsetLeft - (this.parent.chartRowsModule.connectorPointWidth / 2)) -\n                    this.parent.ganttChartModule.scrollObject.previousScroll.left;\n            }\n        }\n        if (this.taskBarEditAction === 'ConnectorPointRightDrag') {\n            if (this.parent.enableRtl) {\n                left = (width - (this.elementOffsetLeft + this.elementOffsetWidth +\n                    (this.parent.chartRowsModule.connectorPointWidth / 2))) - Math.abs(this.parent.ganttChartModule.scrollObject.previousScroll.left);\n            }\n            else {\n                left = (this.elementOffsetLeft + this.elementOffsetWidth) +\n                    (this.parent.chartRowsModule.connectorPointWidth / 2) - Math.abs(this.parent.ganttChartModule.scrollObject.previousScroll.left);\n            }\n        }\n        var top = ((this.elementOffsetTop) + (this.elementOffsetHeight / 2) +\n            this.parent.ganttChartModule.chartBodyContainer.offsetTop) - this.parent.ganttChartModule.scrollObject.previousScroll.top;\n        this.removeFalseLine(false);\n        this.falseLine = createElement('div', {\n            className: cls.falseLine, id: 'ganttfalseline' + this.parent.element.id,\n            styles: 'position: absolute;transform:' + transform + ';' +\n                'border-top-width: 1px;border-top-style: dashed;z-index: 5;width:' + (length - 3) + 'px;' +\n                'top:' + top + 'px;'\n        });\n        if (this.parent.enableRtl) {\n            this.falseLine.style.left = 'auto';\n            this.falseLine.style.right = left + 'px';\n            this.falseLine.style.transformOrigin = '100% 0%';\n        }\n        else {\n            this.falseLine.style.right = 'auto';\n            this.falseLine.style.left = left + 'px';\n            this.falseLine.style.transformOrigin = '0% 100%';\n        }\n        this.parent.ganttChartModule.chartBodyContainer.appendChild(this.falseLine);\n    };\n    /**\n     *\n     * @param {boolean} isRemoveConnectorPointDisplay .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.removeFalseLine = function (isRemoveConnectorPointDisplay) {\n        if (this.falseLine) {\n            remove(this.falseLine);\n            this.falseLine = null;\n            if (isRemoveConnectorPointDisplay) {\n                this.elementOffsetLeft = 0;\n                this.elementOffsetTop = 0;\n                this.elementOffsetWidth = 0;\n                this.elementOffsetHeight = 0;\n                removeClass(this.parent.ganttChartModule.scrollElement.querySelectorAll('.' + cls.connectorLineContainer), [cls.connectorLineZIndex]);\n            }\n        }\n    };\n    /**\n     *\n     * @param {PointerEvent} e .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.updateConnectorLineSecondProperties = function (e) {\n        var target = this.getElementByPosition(e);\n        var element = parentsUntil(target, cls.taskBarMainContainer);\n        var isBigger = document.body.className.includes('e-bigger');\n        this.connectorSecondAction = null;\n        var scrollTop = 0;\n        if (parentsUntil(target, cls.connectorPointLeft)) {\n            this.connectorSecondAction = 'ConnectorPointLeftDrag';\n            this.toPredecessorText = 'Start';\n        }\n        else if (parentsUntil(target, cls.connectorPointRight)) {\n            this.connectorSecondAction = 'ConnectorPointRightDrag';\n            this.toPredecessorText = 'Finish';\n        }\n        else {\n            this.connectorSecondAction = null;\n            this.toPredecessorText = null;\n        }\n        if (this.taskBarEditElement !== element && this.taskBarEditElement !== this.highlightedSecondElement) {\n            if (this.parent.virtualScrollModule && this.parent.enableVirtualization) {\n                var top_1 = this.parent.virtualScrollModule.getTopPosition();\n                scrollTop = top_1;\n            }\n            if ((this.parent.virtualScrollModule && this.parent.enableVirtualization &&\n                !this.elementOffsetLeft) || !this.parent.enableVirtualization) {\n                if (!this.parent.allowParentDependency) {\n                    this.elementOffsetLeft = this.realTaskbarElement.offsetLeft - ((isBigger) ? 10 : 0);\n                    this.elementOffsetTop = this.realTaskbarElement.parentElement.offsetTop +\n                        this.realTaskbarElement.offsetHeight / 3 + scrollTop;\n                }\n                else {\n                    if (this.taskBarEditElement.children[0].classList.contains('e-manualparent-main-container')) {\n                        this.elementOffsetLeft = this.realTaskbarElement.children[0]['offsetLeft'] +\n                            this.realTaskbarElement.offsetLeft - ((isBigger) ? 10 : 0);\n                        this.elementOffsetTop = ((this.realTaskbarElement.parentElement.offsetTop + this.realTaskbarElement.offsetHeight / 3 - 5) + this.taskBarEditElement.children[0]['offsetTop']) + scrollTop;\n                    }\n                    else {\n                        this.elementOffsetLeft = this.realTaskbarElement.offsetLeft - ((isBigger) ? 10 : 0);\n                        this.elementOffsetTop = this.realTaskbarElement.parentElement.offsetTop +\n                            this.realTaskbarElement.offsetHeight / 3 + scrollTop;\n                    }\n                }\n                this.elementOffsetWidth = this.realTaskbarElement.offsetWidth + ((isBigger) ? 20 : 0);\n                this.elementOffsetHeight = this.realTaskbarElement.offsetHeight;\n            }\n            this.showHideTaskBarEditingElements(element, this.highlightedSecondElement, true);\n        }\n        if (isNullOrUndefined(this.connectorSecondAction) && !isNullOrUndefined(this.connectorSecondElement) &&\n            (!this.connectorSecondRecord.hasChildRecords || this.connectorSecondRecord.hasChildRecords &&\n                this.parent.allowParentDependency)) {\n            this.editTooltip.showHideTaskbarEditTooltip(false, this.segmentIndex);\n            removeClass([this.connectorSecondElement.querySelector('.' + cls.connectorPointLeft)], [cls.connectorPointAllowBlock]);\n            removeClass([this.connectorSecondElement.querySelector('.' + cls.connectorPointRight)], [cls.connectorPointAllowBlock]);\n        }\n        this.connectorSecondElement = this.connectorSecondAction ? element : null;\n        this.highlightedSecondElement = element;\n        this.connectorSecondRecord = isNullOrUndefined(this.connectorSecondElement) ?\n            null : this.parent.ganttChartModule.getRecordByTaskBar(this.connectorSecondElement);\n    };\n    // eslint-disable-next-line\n    TaskbarEdit.prototype.triggerDependencyEvent = function (e, mouseUp) {\n        var parentWithZoomStyle = this.parent.element.closest('[style*=\"zoom\"]');\n        var zoomedPageY;\n        if (parentWithZoomStyle) {\n            var zoom1 = parseFloat(getComputedStyle(parentWithZoomStyle).zoom);\n            zoomedPageY = e.pageY / zoom1;\n        }\n        var fromItem = this.taskBarEditRecord.ganttProperties;\n        var toItem = this.connectorSecondRecord ? this.connectorSecondRecord.ganttProperties : null;\n        var predecessor;\n        var currentTarget;\n        var target = this.getElementByPosition(e);\n        var element = target;\n        var uniqueId = this.parent.viewType === 'ResourceView' ? fromItem.taskId : fromItem.rowUniqueID;\n        if (this.taskBarEditAction === 'ConnectorPointLeftDrag') {\n            predecessor = uniqueId + (this.parent.enableRtl ? 'F' : 'S');\n        }\n        else if (this.taskBarEditAction === 'ConnectorPointRightDrag') {\n            predecessor = uniqueId + (this.parent.enableRtl ? 'S' : 'F');\n        }\n        if (this.connectorSecondAction) {\n            if (this.connectorSecondAction === 'ConnectorPointLeftDrag') {\n                predecessor += this.parent.enableRtl ? 'F' : 'S';\n                currentTarget = this.parent.enableRtl ? 'finish' : 'start';\n            }\n            else if (this.connectorSecondAction === 'ConnectorPointRightDrag') {\n                predecessor += this.parent.enableRtl ? 'S' : 'F';\n                currentTarget = this.parent.enableRtl ? 'start' : 'finish';\n            }\n        }\n        if (isNullOrUndefined(toItem)) {\n            this.drawPredecessor = false;\n            return;\n        }\n        if (toItem.predecessorsName) {\n            this.finalPredecessor = toItem.predecessorsName + ',' + predecessor;\n        }\n        else {\n            this.finalPredecessor = predecessor;\n        }\n        var isValidLink = this.parent.connectorLineEditModule.validatePredecessorRelation(this.connectorSecondRecord, this.finalPredecessor);\n        // eslint-disable-next-line\n        var predecessorArray = this.parent.predecessorModule.calculatePredecessor(predecessor, this.connectorSecondRecord);\n        var args = {};\n        args.fromItem = fromItem;\n        args.toItem = toItem;\n        args.newPredecessorString = this.finalPredecessor;\n        args.predecessor = predecessorArray && predecessorArray[0];\n        args.isValidLink = isValidLink;\n        args.requestType = 'ValidateDependency';\n        this.parent.trigger('actionBegin', args);\n        if (!isNullOrUndefined(this.parent.loadingIndicator) && this.parent.loadingIndicator.indicatorType === 'Shimmer' && args.requestType !== 'ValidateDependency') {\n            this.parent.showMaskRow();\n        }\n        else if (args.requestType !== 'ValidateDependency') {\n            this.parent.showSpinner();\n        }\n        args.isValidLink = !isValidLink && args.isValidLink ? false : args.isValidLink;\n        if (args.isValidLink) {\n            if (!this.editTooltip.toolTipObj && !this.parent.isAdaptive) {\n                this.editTooltip.showHideTaskbarEditTooltip(true, this.segmentIndex);\n            }\n            if (!isNullOrUndefined(this.editTooltip.toolTipObj)) {\n                this.parent.connectorLineModule.tooltipTable.innerHTML = this.parent.connectorLineModule.getConnectorLineTooltipInnerTd(this.parent.editModule.taskbarEditModule.taskBarEditRecord.ganttProperties.taskName, this.parent.editModule.taskbarEditModule.fromPredecessorText, '', '');\n                var table = this.parent.connectorLineModule.tooltipTable.querySelector('#toPredecessor').querySelectorAll('td');\n                table[1].innerText = toItem.taskName;\n                table[2].innerText = this.parent.localeObj.getConstant(currentTarget);\n                if (!isNullOrUndefined(this.parent.connectorLineModule.tooltipTable.parentElement) &&\n                    !isNullOrUndefined(this.parent.connectorLineModule.tooltipTable.parentElement.parentElement)) {\n                    var tooltipElement = this.parent.connectorLineModule.tooltipTable.parentElement.parentElement;\n                    if (tooltipElement.offsetTop + tooltipElement.offsetHeight > zoomedPageY) {\n                        tooltipElement.style.top = (e.pageY - tooltipElement.offsetHeight - 20) + 'px';\n                    }\n                }\n            }\n            this.drawPredecessor = true;\n        }\n        else {\n            if (this.parent.isAdaptive) {\n                if (target.classList.contains(cls.connectorPointLeft) ||\n                    target.classList.contains(cls.connectorPointRight)) {\n                    this.showHideActivePredecessors(true);\n                }\n            }\n            else {\n                addClass([element], [cls.connectorPointAllowBlock]);\n            }\n            this.drawPredecessor = false;\n        }\n    };\n    // Get XY coordinates for touch and non-touch device\n    TaskbarEdit.prototype.getCoordinate = function (event) {\n        var coordinates = {};\n        var e = event;\n        coordinates.pageX = e.pageX;\n        coordinates.pageY = e.pageY;\n        if (event && event.type !== 'click') {\n            var e_1 = event;\n            if (e_1.type === 'touchmove' || e_1.type === 'touchstart' || e_1.type === 'touchend') {\n                coordinates.pageX = e_1.changedTouches[0].pageX;\n                coordinates.pageY = e_1.changedTouches[0].pageY;\n            }\n        }\n        return coordinates;\n    };\n    // Get current target element by mouse position\n    // window.pageXOffset && window.pageYOffset is used to find the accurate element position in IPad/IPhone\n    TaskbarEdit.prototype.getElementByPosition = function (event) {\n        if (!this.parent.isAdaptive) {\n            return event.target;\n        }\n        else {\n            var e = this.getCoordinate(event);\n            return document.elementFromPoint((e.pageX - window.pageXOffset), (e.pageY - window.pageYOffset));\n        }\n    };\n    TaskbarEdit.prototype.multipleSelectionEnabled = function () {\n        if (this.parent.selectionModule &&\n            this.parent.selectionSettings.mode !== 'Cell'\n            && this.parent.selectionSettings.type === 'Multiple') {\n            this.parent.selectionModule.hidePopUp();\n        }\n    };\n    TaskbarEdit.prototype.unWireEvents = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('chartMouseDown', this.mouseDownHandler);\n        this.parent.off('chartMouseUp', this.mouseUpHandler);\n        this.parent.off('chartMouseLeave', this.mouseLeaveHandler);\n        this.parent.off('chartMouseMove', this.mouseMoveAction);\n        this.parent.off('chartMouseClick', this.mouseClickHandler);\n    };\n    /**\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.destroy = function () {\n        this.unWireEvents();\n        this.stopScrollTimer();\n        this.parent.editModule.taskbarEditModule = undefined;\n    };\n    return TaskbarEdit;\n}(DateProcessor));\nexport { TaskbarEdit };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}